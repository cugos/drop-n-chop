var dropchop=function(s){"use strict";return(s=s||{}).util={},s.util.removeFileExtension=function(e){return e=e.replace(/\.[^/.]+$/,"")},s.util.removeWhiteSpace=function(e){return e=e.replace(/^\s+|\s+$/g,""),console.log(e),e},s.util.concat=function(t,a,e){var r="";return $(t).each(function(e){r+=a+t[e]}),r=e+r},s.util.xhr=function(t,e){dropchop.util.loader(!0);var a=new XMLHttpRequest;a.open("GET",t),a.onload=e.bind(this,a),a.onerror=function(e){dropchop.util.loader(!1),console.error(e),s.notify("error","Unable to access "+t,2500)},a.send()},s.util.get=function(e,t,a){t={data:t,dataType:"json"};return s.util.corsSupport&&!1!==a||(console.log("No CORS support, using JSONP"),t.dataType="jsonp"),dropchop.util.loader(!0),$.ajax(e,t)},s.util.readFile=function(e){var t=new FileReader;-1<e.name.indexOf(".zip")||-1<e.name.indexOf(".shp")?(t.readAsArrayBuffer(e),s.util.loader(!0),t.onloadend=function(e){shp(t.result).catch(function(e){console.log("Problematic projection - ",e)}).then(function(e){return s.util.loader(!1),e?void $(s).trigger("file:added",[e.fileName,e]):s.notify("error","Invalid projection or shapefile.",2500)})}):(t.readAsText(e,"UTF-8"),t.onload=function(){$(s).trigger("file:added",[e.name,JSON.parse(t.result)])})},s.util.jsonFromUrl=function(){var a=location.search.substr(1).split(/(&?gist=|&?url=)/g).filter(function(e){return 0<e.length}),r={};return a.forEach(function(e,t){0!==t&&t%2!=0||(e=e.replace(/&|=/g,""),r[e]||(r[e]=[]),r[e].push(decodeURIComponent(a[t+1])))}),r},s.util.updateSearch=function(){var t=[];Object.keys(s.layers.list).forEach(function(e){s.layers.list[e].ltype&&s.layers.list[e].url&&t.indexOf(s.layers.list[e].ltype+"="+s.layers.list[e].url)<0&&t.push(s.layers.list[e].ltype+"="+s.layers.list[e].url)});var e=t.length?"?"+t.join("&"):"/";e!==window.location.search&&window.history.pushState(null,null,e)},s.util.executeUrlParams=function(){var t=s.util.jsonFromUrl();t.gist&&t.gist.length&&$(t.gist).each(function(e){s.ops.file["load-gist"].get({},"load-gist",[t.gist[e]])}),t.url&&t.url.length&&$(t.url).each(function(e){s.ops.file["load-url"].get({},"load-url",[t.url[e]])})},s.util.getFileExtension=function(e){return e.substr(e.lastIndexOf(".")+1)},s.util.getBBox=function(){var e=s.map.m.getBounds(),t=e.getSouthWest(),e=e.getNorthEast();return t.lat+","+t.lng+","+e.lat+","+e.lng},s.util.getEsriBBox=function(){var e=s.map.m.getBounds(),t=e.getSouthWest(),e=e.getNorthEast();return t.lng+","+t.lat+","+e.lng+","+e.lat},s.util.uncollect=function(e){return e.features[0]},s.util.esri2geo=function(e){return toGeoJSON(e)},s.util.executeFC=function(e,t,a){for(var r,o=a,n={type:"FeatureCollection",features:[]},i=0;i<e.features.length;i++){o[0]=e.features[i];try{(r=turf[t].apply(null,o)).properties=e.features[i].properties||{}}catch(e){s.notify("error",e)}n.features.push(r)}return n},s.util.loader=function(e){var t=$("<div>").addClass("dropchop-loader");e?($("body").addClass("dropchop-loading"),$("body").append(t)):($("body").removeClass("dropchop-loading"),$(".dropchop-loader").addClass("loader-complete").fadeOut(2e3,function(){$(this).remove()}))},s.util.corsSupport=function(){return"XMLHttprequest"in window&&"withCredentials"in new window.XMLHttpRequest},s}((dropchop=function(t){"use strict";return(t=t||{}).shortcuts={},t.shortcuts.list=[],t.shortcuts.init=function(){Mousetrap.bind(["command+a","ctrl+a"],function(e){return t.layerlist.selectAll(),!1}),Mousetrap.bind(["command+backspace","ctrl+backspace"],function(e){return t.layerlist.clearSelection(),!1}),Mousetrap.bind(["ctrl+shift+k"],function(e){return t.ops.file.remove.execute(),!1}),Mousetrap.bind(["command+plus","ctrl+plus","command+=","ctrl+="],function(e){return dropchop.layerlist.checkAll(!0),!1}),Mousetrap.bind(["command+-","ctrl+-"],function(e){return t.layerlist.uncheckAll(!0),!1})},t}((dropchop=function(r){"use strict";function e(e,t){r.selection.remove({},{stamp:t}),r.selection.clear()}return(r=r||{}).selection={},r.selection.list=[],r.selection.init=function(){$(r).on("layer:selected",r.selection.add),$(r).on("layer:unselected",r.selection.remove),$(r).on("layer:removed",e)},r.selection.add=function(e,t){r.selection.list.push(t)},r.selection.remove=function(e,t){var a=null;$(r.selection.list).each(function(e){r.selection.list[e].stamp===t.stamp&&(a=e)}),r.selection.list.splice(a,1)},r.selection.clear=function(){$(".layer-name.selected").removeClass("selected"),$(".operation-geo").addClass("operation-inactive"),$(".operation-geo").prop("disabled",!0),r.selection.list=[]},r.selection.isSelected=function(e){return Boolean(dropchop.selection.list.indexOf(e)+1)},r}((dropchop=function(t){"use strict";return(t=t||{}).ops=t.ops||{},t.ops.geo={along:{minFeatures:1,maxFeatures:1,requirements:{generalFeature:!1,types:["Feature<LineString>","FeatureCollection"]},description:"Takes a line and returns a point at a specified distance along the line.",parameters:[{name:"distance",description:"distance along the line",type:"number",default:10},{name:"units",type:"select",description:"",options:["miles","kilometers","radians","degrees"],default:"miles"}],execute:function(e){return"FeatureCollection"===e[0].type?t.util.executeFC(e[0],"along",e):turf.along.apply(null,e)}},bezier:{minFeatures:1,maxFeatures:1,requirements:{generalFeature:!1,types:["Feature<LineString>","FeatureCollection"]},description:"Takes a line and returns a curved version by applying a Bezier spline algorithm.",parameters:[{name:"resolution",description:"Time in milliseconds between points",type:"number",default:1e4},{name:"sharpness",description:"a measure of how curvy the path should be between splines",type:"number",default:.85}],execute:function(e){return"FeatureCollection"===e[0].type?t.util.executeFC(e[0],"bezier",e):turf.bezier.apply(null,e)}},buffer:{maxFeatures:1,minFeatures:1,requirements:{generalFeature:!0,types:["Feature","FeatureCollection"]},description:"Calculates a buffer for input features for a given radius. Units supported are miles, kilometers, and degrees.",parameters:[{name:"distance",description:"Distance to draw the buffer.",type:"number",default:10},{name:"unit",type:"select",description:"",options:["miles","feet","kilometers","meters","degrees"],default:"miles"}],execute:function(e){return turf.buffer.apply(null,e)}},center:{minFeatures:1,maxFeatures:1,requirements:{generalFeature:!0,types:["Feature","FeatureCollection"]},description:"Creates a point in the center of the feature.",parameters:[{name:"recursive",description:"Run the operation on each feature in the collection or the entire collection.",type:"recursive"}],execute:function(e){return"true"===e[1]?t.util.executeFC(e[0],"center",e):turf.center.apply(null,e)}},centroid:{minFeatures:1,maxFeatures:1,requirements:{generalFeature:!0,types:["Feature","FeatureCollection"]},description:"Creates a point in the centroid of the features.",parameters:[{name:"recursive",description:"Run the operation on each feature in the collection or the entire collection.",type:"recursive"}],execute:function(e){return"true"===e[1]?t.util.executeFC(e[0],"centroid",e):turf.centroid.apply(null,e)}},destination:{minFeatures:1,maxFeatures:1,requirements:{generalFeature:!1,types:["Feature<Point>","FeatureCollection"]},description:"Takes a Point and calculates the location of a destination point given a distance in degrees, radians, miles, or kilometers; and bearing in degrees. This uses the Haversine formula to account for global curvature.",parameters:[{name:"distance",description:"distance from the starting point",type:"number",default:10},{name:"bearing",description:"ranging from -180 to 180",type:"number",default:0},{name:"units",type:"select",description:"",options:["miles","kilometers","radians","degrees"],default:"miles"}],execute:function(e){return"FeatureCollection"===e[0].type?t.util.executeFC(e[0],"destination",e):turf.destination.apply(null,e)}},envelope:{minFeatures:1,maxFeatures:1,requirements:{generalFeature:!1,types:["FeatureCollection"]},description:"Takes any number of features and returns a rectangular Polygon that encompasses all vertices.",execute:function(e){return turf.envelope.apply(null,e)}},explode:{minFeatures:1,maxFeatures:1,requirements:{generalFeature:!0,types:["Feature","FeatureCollection"]},description:"Takes a feature or set of features and returns all positions as points.",execute:function(e){return turf.explode.apply(null,e)}},midpoint:{minFeatures:2,maxFeatures:2,requirements:{generalFeature:!1,types:["Feature<Point>"]},description:"Takes two points and returns a point midway between them.",execute:function(e){return turf.midpoint.apply(null,e)}},sample:{maxFeatures:1,minFeatures:1,requirements:{generalFeature:!0,types:["FeatureCollection"]},description:"Takes a FeatureCollection and returns a FeatureCollection with given number of features at random.",parameters:[{name:"num",description:"Number of features to select.",type:"number",default:1}],execute:function(e){return turf.sample.apply(null,e)}},simplify:{minFeatures:1,maxFeatures:1,requirements:{generalFeature:!1,types:["Feature<LineString>","Feature<Polygon>","FeatureCollection"]},description:"Takes a LineString or Polygon and returns a simplified version. Internally uses simplify-js to perform simplification.",parameters:[{name:"tolerance",description:"simplification tolerance",type:"number",default:.1},{name:"high quality",type:"checkbox",description:"whether or not to spend more time to create a higher-quality simplification with a different algorithm",default:!1}],execute:function(e){return"FeatureCollection"===e[0].type?t.util.executeFC(e[0],"simplify",e):turf.simplify.apply(null,e)}},tin:{minFeatures:1,maxFeatures:1,requirements:{generalFeature:!1,types:["FeatureCollection"]},description:"Triangulated irregular network, interpolation method",execute:function(e){return turf.tin.apply(null,e)}},union:{minFeatures:2,maxFeatures:2,requirements:{generalFeature:!1,types:["Feature<Polygon>"]},description:"Takes two polygons and returns a combined polygon. If the input polygons are not contiguous, this function returns a MultiPolygon feature.",execute:function(e){return turf.union.apply(null,e)}},within:{minFeatures:2,maxFeatures:2,requirements:{generalFeature:!1,types:["FeatureCollection"]},description:"Takes a set of points and a set of polygons and returns the points that fall within the polygons. First input should be the points.",parameters:[{name:"Points to clip",description:"Select the layer that represents the points you want to clip. This assumes the other layer is your clipping polygon.",type:"switch"}],execute:function(e){return turf.within.apply(null,e)}}},t}((dropchop=function(n){"use strict";return(n=n||{}).ops=n.ops||{},n.ops.file={upload:{description:"Upload from your computer (.geojson)",icon:'<i class="fa fa-upload"></i>',execute:function(){var e=$("<input>").attr("type","file").attr("multiple","true").css("visibility","hidden").css("position","absolute").css("height","0").on("change",function(){var t=this.files;$(t).each(function(e){n.util.readFile(t[e])}),e.remove()});$("body").append(e),e.click()}},"load-url":{description:"Import file from a URL",icon:'<i class="fa fa-link"></i>',parameters:[{name:"url",description:"URL",type:"text",default:"http://"}],execute:function(){$(n).trigger("form:file",["load-url"])},get:function(e,t,a){a=a[0];n.util.xhr(a,n.ops.file[t].callback)},callback:function(e,t){var a,r;dropchop.util.loader(!1),200===e.status?(a=JSON.parse(e.responseText),r=e.responseURL.substring(e.responseURL.lastIndexOf("/")+1),$(n).trigger("file:added",[r,a,"url",e.responseURL])):n.notify("error",e.status+": could not retrieve Gist. Please check your URL")}},"load-gist":{description:"Import files from Gist",icon:'<i class="fa fa-github"></i>',parameters:[{name:"gist",description:"Gist ID or URL",type:"text",default:"https://gist.github.com/"}],execute:function(){$(n).trigger("form:file",["load-gist"])},get:function(e,t,a){a="https://api.github.com/gists/"+a[0].split("/")[a[0].split("/").length-1];n.util.xhr(a,n.ops.file[t].callback)},callback:function(e,t){if(dropchop.util.loader(!1),200===e.status){var a,r=JSON.parse(e.responseText);for(a in r.files){var o=r.files[a].filename;$(n).trigger("file:added",[o,JSON.parse(r.files[a].content),"gist",e.responseURL.split("/")[e.responseURL.split("/").length-1]])}}else n.notify("error",e.status+": could not retrieve Gist. Please check your URL")}},"load-arcgis":{description:"Query an ArcGIS Server Feature Service",icon:'<i class="fa fa-globe"></i>',_temp:{layerName:"arcjson"},parameters:[{name:"feature service",description:"Enter URL to ArcGIS Feature Service (ex. http://sampleserver6.arcgisonline.com/arcgis/rest/services/Hurricanes/MapServer/0)",type:"text",default:"http://sampleserver6.arcgisonline.com/arcgis/rest/services/Hurricanes/MapServer/0"},{name:"where",description:"A where clause for the query filter. Any legal SQL where clause operating on the fields in the layer is allowed.",type:"text",default:"1=1"},{name:"request type",description:"select JSONP if you receive cross-origin resource sharing errors",type:"radio",default:"CORS",options:["CORS","JSONP"]},{name:"limit to map",description:"only load features within current map view",type:"checkbox"}],execute:function(){$(n).trigger("form:file",["load-arcgis"])},checkJsonp:function(e){return"JSONP"!==e[2]},get:function(e,t,a){n.ops.file["load-arcgis"]._temp.layerName=a[0];var r="-180,-90,180,90";a[3]&&(r=n.util.getEsriBBox());var o=a[0]+"/query/",r={f:"json",inSR:4326,outSR:4326,geometry:r,where:a[1],outfields:"*"},a=n.ops.file["load-arcgis"].checkJsonp(a);n.util.get(o,r,a).done(function(e){n.ops.file["load-arcgis"].callback(e)}).fail(function(e,t,a){dropchop.util.loader(!1),n.notify("Error",t,a)})},callback:function(e){dropchop.util.loader(!1);var t=n.util.esri2geo(e);e.features.length<1?n.notify("info","No features found in your query."):($(n).trigger("file:added",[n.ops.file["load-arcgis"]._temp.layerName,t]),n.notify("success","Found <strong>"+e.features.length+" features</strong> from the ArcGIS Service"))}},"load-overpass":{description:"Query the Overpass API",icon:'<i class="fa fa-terminal"></i>',_temp:{},parameters:[{name:"query",description:'Enter a search query in the overpass-turbo wizard syntax. Learn more about <a href="http://wiki.openstreetmap.org/wiki/Overpass_turbo/Wizard" target="_blank">the supported features</a>.',type:"text",default:"amenity=bar"},{name:"layer name",description:"Name of the layer added if results are found.",type:"text",default:"overpass_layer_name"}],execute:function(){$(n).trigger("form:file",["load-overpass"])},get:function(e,t,a){n.ops.file["load-overpass"]._temp.layerName=a[1];var r=n.util.getBBox(),a=overpassWizard(a[0]);if(!1===a)return n.notify("error","Can't create overpass query for this search input.");overpassWizardExpand(a,r,function(e,t){return e?n.notify("error","Error while expanding overpass query: "+e):void n.util.xhr("http://overpass-api.de/api/interpreter?data="+encodeURIComponent(t),n.ops.file["load-overpass"].callback)})},callback:function(e,t){var a,r;dropchop.util.loader(!1),200===e.status?(a=JSON.parse(e.responseText),r=osmtogeojson(a,{flatProperties:!0}),a.elements.length?($(n).trigger("file:added",[n.ops.file["load-overpass"]._temp.layerName,r]),n.notify("success","Found <strong>"+a.elements.length+" elements</strong> from the Overpass API")):n.notify("info","No elements found in your query.")):n.notify("error",e.status+": could not query the Overpass API")}},location:{description:"Add your location as a layer",icon:'<i class="fa fa-crosshairs"></i>',execute:function(){navigator.geolocation?n.map.m.locate():n.notify("error","Geolocation is not available on this browser.",4e3)}},"load-custom-base":{description:"Add custom Mapbox basemap",icon:'<i class="fa fa-map-o"></i>',_temp:"",parameters:[{name:"Map ID",description:"Map ID",type:"text",default:"username.id"},{name:"Custom Base Layer Name",description:"Name of the custom baselayer added.",type:"text",default:"Basemap name"}],execute:function(){$(n).trigger("form:file",["load-custom-base"])},get:function(e,t,a){n.ops.file["load-custom-base"]._temp=a[0],n.ops.file["load-custom-base"]._temp_1=a[1];a="https://api.mapbox.com/v4/"+n.ops.file["load-custom-base"]._temp+".html?access_token="+n.map.token;n.util.xhr(a,n.ops.file[t].callback)},callback:function(e,t){var a;dropchop.util.loader(!1),200===e.status?(a=n.map.baseLayers.addBaseLayer(L.mapbox.tileLayer(n.ops.file["load-custom-base"]._temp),n.ops.file["load-custom-base"]._temp_1),L.mapbox.tileLayer(a).addTo(n.map.m)):n.notify("error",e.status+": could not retrieve base map. Please check your Map ID")}},"save-geojson":{minFeatures:1,description:"Save as GeoJSON",icon:'<i class="fa fa-file-code-o"></i>',createsLayer:!1,execute:function(){for(var e=0;e<n.selection.list.length;e++){var t=JSON.stringify(n.selection.list[e].raw),a="dropchop_"+n.selection.list[e].name+".geojson";saveAs(new Blob([t],{type:"text/plain;charset=utf-8"}),a)}}},"save-topojson":{minFeatures:1,description:"Save as TopoJSON",icon:'<i class="fa fa-object-ungroup"></i>',createsLayer:!1,execute:function(){for(var e=0;e<n.selection.list.length;e++){var t=JSON.stringify(topojson.topology({collection:n.selection.list[e].raw},{"property-transform":function(e){return e.properties}})),a="dropchop_"+n.selection.list[e].name+".topojson";saveAs(new Blob([t],{type:"text/plain;charset=utf-8"}),a)}}},"save-shapefile":{minFeatures:1,description:"Save as Shapefile",icon:'<i class="fa fa-file"></i>',execute:function(){$(n.selection.list).each(function(e){try{var t={folder:"dropchop_"+n.selection.list[e].name,types:{point:"dropchop_"+n.selection.list[e].name+"_point",polygon:"dropchop_"+n.selection.list[e].name+"_poly",line:"dropchop_"+n.selection.list[e].name+"_line"}};shpwrite.download(n.selection.list[e].raw,t)}catch(e){throw n.notify("Error","There was a problem downloading the shapefile."+e),e}})},createsLayer:!1},extent:{minFeatures:1,description:"View extent of layers",icon:'<i class="fa fa-globe"></i>',execute:function(){var a;n.selection.list.length?($(n.selection.list).each(function(e){var t=n.selection.list[e].featurelayer;e?a.extend(t.getBounds()):a=t.getBounds()}),n.map.m.fitBounds(a)):n.map.m.fitBounds(n.map.layergroup.getBounds())}},expand:{minFeatures:1,description:"Convert FeatureCollection into separate features",icon:'<i class="fa fa-expand"></i>',execute:function(){var t=0;if(1===n.selection.list.length){var a=n.selection.list[0];if("FeatureCollection"!==a.raw.type){var e=new Error("That needs to be a feature collection!");throw n.notify("error","Layer is not a FeatureCollection."),e}$(a.raw.features).each(function(e){t++,$(n).trigger("file:added",[a.name+t+"_"+a.raw.features[e].geometry.type,a.raw.features[e]])})}else n.notify("info","Please select a single layer!")}},combine:{minFeatures:1,description:"Combines selected features into a single FeatureCollection",icon:'<i class="fa fa-compress"></i>',execute:function(){var t={type:"FeatureCollection",features:[]};0<n.selection.list.length?($(n.selection.list).each(function(e){"FeatureCollection"!==n.selection.list[e].raw.type?t.features.push(n.selection.list[e].raw):n.notify("info",n.selection.list[e].name+" was not added because it is already a FeatureCollection")}),$(n).trigger("file:added",["new_FeatureCollection",t])):n.notify("info","No layers selected!")}},duplicate:{minFeatures:1,description:"Duplicate selected layers",icon:'<i class="fa fa-files-o"></i>',execute:function(){$(n.selection.list).each(function(e){$(n).trigger("layer:duplicate",[this.stamp])}),n.selection.clear()}},rename:{minFeatures:1,maxFeatures:1,description:"Rename layer",icon:'<i class="fa fa-pencil"></i>',parameters:[{name:"Name",type:"text",description:""}],execute:function(){1===n.selection.list.length?$(n).trigger("form:file",["rename"]):n.notify("info","Please select <strong>one layer</strong>.")},callback:function(e,t,a){$(n).trigger("layer:rename",[n.selection.list[0],a[0]])}},remove:{minFeatures:1,description:"Remove selected layers",icon:'<i class="fa fa-trash-o"></i>',execute:function(){$(n.selection.list).each(function(e){$(n).trigger("layer:remove",[this.stamp])}),n.selection.clear(),n.util.updateSearch()}},info:{type:"info",description:"Learn more about dropchop",icon:'<i class="fa fa-info"></i>',execute:function(){window.location="/about.html"}}},n}((dropchop=function(o){"use strict";return(o=o||{}).notify=function(e,t,a){var r=$("<div>").addClass("notification").addClass(e).html(t);"close"===a?((t=$("<button>").addClass("notification-close").prop("type","button").html('<i class="fa fa-times"></i>')).on("click",function(e){$(this).parent().remove()}),$(r).append(t),$(o.$elem).append(r)):($(o.$elem).append(r),setTimeout(function(){r.remove()},a||3e3))},o}((dropchop=function(c){"use strict";function p(e){e.preventDefault();var t=$(this).attr("data-operation");try{c.ops.file[t].execute()}catch(e){throw c.notify("error","This operation doesn't exist!"),e}}return(c=c||{}).menus=c.menus||{},c.menus.left=c.menus.left||{},c.menus.left.init=function(){$(c).on("operation:file:load-gist",c.ops.file["load-gist"].get),$(c).on("operation:file:load-url",c.ops.file["load-url"].get),$(c).on("operation:file:load-overpass",c.ops.file["load-overpass"].get),$(c).on("operation:file:load-arcgis",c.ops.file["load-arcgis"].get),$(c).on("operation:file:load-custom-base",c.ops.file["load-custom-base"].get),$(c).on("operation:file:rename",c.ops.file.rename.callback),c.menus.left.setup=[{name:"import",icon:'<i class="fa fa-plus"></i>',actions:["upload","load-url","load-gist","load-overpass","load-arcgis","load-custom-base","location"]},{name:"Save",icon:'<i class="fa fa-floppy-o"></i>',actions:["save-geojson","save-topojson","save-shapefile"]},"info"];for(var e=$("<div>").addClass("dropchop-menu-left"),t=c.menus.left.setup,a=0;a<t.length;a++){var r,o=t[a];if("object"!=typeof t[a]){"break"===c.ops.file[o].type?(r=$("<div>").addClass("menu-action-break"),e.append(r)):e.append(l(o))}else{o=$("<div>").addClass("menu-action menu-collapse").html(t[a].icon);"import"===t[a].name&&o.addClass("menu-import");for(var n=$("<div>").addClass("menu-collapse-inner"),i=0;i<t[a].actions.length;i++){var s=t[a].actions[i];n.append(l(s))}o.append(n),e.append(o)}}function l(e){var t=$("<button>").addClass("menu-action").html(c.ops.file[e].icon||"!").attr("data-operation",e).attr("data-tooltip",c.ops.file[e].description);return"info"===c.ops.file[e].type&&t.addClass("dropchop-info"),t.on("click",p),t}c.$elem.append(e)},c}((dropchop=function(u){"use strict";function d(e){e.preventDefault();var t=$(this).attr("data-operation");try{u.ops.file[t].execute()}catch(e){throw u.notify("error","This operation doesn't exist!"),e}}return(u=u||{}).menus=u.menus||{},u.menus.layerContextMenu=u.menus.layerContextMenu||{},u.menus.layerContextMenu.init=function(){$("html").bind("click",function(e){u.menus.layerContextMenu.removeLayerContextMenus()})},u.menus.layerContextMenu.createLayerContextMenu=function(e,a,r){e instanceof jQuery||(e=$(e)),u.menus.layerContextMenu.removeLayerContextMenus();var t=e.parent(),o=u.layers.list[t.attr("data-stamp")];dropchop.selection.isSelected(o)||e.trigger("click");var n=$("<div>").addClass("context-menu"),i=$("<ul>");n.append(i);var s,l={title1:"Layer",rename:u.ops.file.rename,duplicate:u.ops.file.duplicate,remove:u.ops.file.remove,title2:"Geo",extent:u.ops.file.extent,expand:u.ops.file.expand,combine:u.ops.file.combine};for(s in l){var c,p=l[s];"string"==typeof p||p instanceof String?i.append($('<li class="title"><h4>'+p+"</h4></li>")):(c=$("<li>").addClass("menu-action").html('<div class="icon">'+p.icon+'</div><div class="description">'+p.description+"</div>").attr("data-operation",s).attr("data-tooltip",p.description),(p.minFeatures>dropchop.selection.list.length||p.maxFeatures<dropchop.selection.list.length)&&c.addClass("operation-inactive"),c.on("click",d),i.append(c))}n.addClass("hidden"),t.parent().append(n);t=function(){var e=$(window).height(),t=n.height();{return r+t<e?{top:r,left:a}:{top:r-(r+t-e)-10,left:a}}}();n.css(t),n.removeClass("hidden")},u.menus.layerContextMenu.removeLayerContextMenus=function(){$(".context-menu").remove()},u}((dropchop=function(l){"use strict";function r(e){e.preventDefault();e=$(this).attr("data-operation");l.ops.geo[e].parameters?$(l).trigger("form:geo",[e]):$(l).trigger("operation:geo",[e,l.selection.list])}return(l=l||{}).menus=l.menus||{},l.menus.geo=l.menus.geo||{},l.menus.geo.init=function(){var e,t=$("<div>").addClass("operations-geo");for(e in l.$elem.append(t),$(l).on("layer:selected",l.menus.geo.geoCheck),$(l).on("layer:unselected",l.menus.geo.geoCheck),$(l).on("operation:geo",l.menus.geo.geoExecute),l.ops.geo){var a=$("<button>").addClass("operation operation-geo operation-inactive").html("<h4>"+e+"</h4><p>"+l.ops.geo[e].description+"</p>").prop("disabled",!0).attr("data-operation",e);a.on("click",r),t.append(a)}},l.menus.geo.geoExecute=function(e,t,a){var r=l.menus.geo.prepareTurfParams(t,a),o=null;try{o=l.ops.geo[t].execute(r.options)}catch(e){throw l.notify("That operation isn't possible. Try changing the order of your selection."),e}$(l).trigger("file:added",[r.name,o])},l.menus.geo.prepareTurfParams=function(e,t){var a={options:[]},r=[],o=[];return $(l.selection.list).each(function(e){-1===$.inArray("switch-"+l.selection.list[e].stamp,t)?r.push(l.selection.list[e].raw):r.unshift(l.selection.list[e].raw),o.push(l.selection.list[e].name)}),a.options=$.merge(r,t),a.name=l.util.concat(o,"_",e),a},l.menus.geo.geoCheck=function(e,t){for(var a in l.ops.geo){var r=l.ops.geo[a];if(l.selection.list.length>r.maxFeatures||l.selection.list.length<r.minFeatures)i(a);else for(var o=0;o<l.selection.list.length;o++){var n=l.selection.list[o];(-1<$.inArray(n.type,r.requirements.types)||!0===r.requirements.generalFeature?function(e){e=$("[data-operation="+e+"]");e.removeClass("operation-inactive"),e.prop("disabled",!1)}:i)(a)}}function i(e){e=$("[data-operation="+e+"]");e.addClass("operation-inactive"),e.prop("disabled",!0)}var s;(s=$(".operation-geo").sort(function(e,t){return $(t).data("operation")<$(e).data("operation")?1:-1})).filter(function(e,t){if(!$(t).prop("disabled"))return t}).appendTo(".operations-geo"),s.filter(function(e,t){if($(t).prop("disabled"))return t}).appendTo(".operations-geo"),$(".operations-geo").scrollTop(0)},l}((dropchop=function(a){"use strict";return(a=a||{}).map={},a.map.init=function(){a.map.$elem=$("<div>").prop("id","dropchop-map").addClass("map"),a.$elem.append(a.map.$elem),$(a).on("layer:removed",a.map.removeLayer),function(){a.map.token=L.mapbox.accessToken="pk.eyJ1Ijoic3ZtYXR0aGV3cyIsImEiOiJVMUlUR0xrIn0.NweS_AttjswtN5wRuWCSNA",a.map.m=L.mapbox.map("dropchop-map",null,{zoomControl:!1,worldCopyJump:!0}).setView([0,0],3),L.control.zoom({position:"topleft"}).addTo(a.map.m),L.mapbox.geocoderControl("mapbox.places",{position:"topleft"}).addTo(a.map.m);var e={"Mapbox Streets":L.mapbox.styleLayer("mapbox://styles/mapbox/streets-v11"),"Mapbox Outdoors":L.mapbox.styleLayer("mapbox://styles/mapbox/outdoors-v11"),"Mapbox Light":L.mapbox.styleLayer("mapbox://styles/mapbox/light-v10"),"Mapbox Dark":L.mapbox.styleLayer("mapbox://styles/mapbox/dark-v10"),"Mapbox Satellite":L.mapbox.styleLayer("mapbox://styles/mapbox/satellite-streets-v11")};e["Mapbox Streets"].addTo(a.map.m),a.map.baseLayers=L.control.layers(e,{},{position:"bottomright",collapsed:!1}).addTo(a.map.m),a.map.layergroup=L.mapbox.featureLayer(),a.map.layergroup.addTo(a.map.m),$(a).on("layer:added",a.map.addLayer),$(a).on("layer:hide",a.map.hideLayer),$(a).on("layer:show",a.map.showLayer),$(a.map.m).on("locationfound",function(e){e=e.originalEvent;a.map.m.fitBounds(e.bounds);e={type:"Feature",geometry:{type:"Point",coordinates:[e.latlng.lng,e.latlng.lat]},properties:{title:"There You Are","marker-color":"#207178","marker-symbol":"heart"}};$(a).trigger("file:added",["your location",e])}),$(a.map.m).on("locationerror",function(){a.notify("error","There was a problem finding your location.",3e3)})}()},a.map.count=0,a.map.addLayer=function(e,t){t=t.featurelayer;a.map.layergroup.addLayer(t),t.eachLayer(function(e){var t='<table class="dropchop-table"><tr><th>Property</th><th>Data</th></tr>';if(e.feature.properties)for(var a in e.feature.properties)t+="<tr><td><strong>"+a+"</strong></td><td>"+e.feature.properties[a]+"</td></tr>";else t+="<p>There are no properties set for this feature.</p>";t+="</table>",e.bindPopup(L.popup({maxWidth:450,maxHeight:200,autoPanPadding:[45,45],className:"dropchop-popup"},e).setContent(t))})},a.map.hideLayer=function(e,t){a.map.layergroup.removeLayer(t.featurelayer)},a.map.showLayer=function(e,t){a.map.layergroup.addLayer(t.featurelayer)},a.map.removeLayer=function(e,t){a.map.layergroup.removeLayer(a.layers.list[t].featurelayer)},a}((dropchop=function(n){"use strict";return(n=n||{}).layers={},n.layers.list={},n.layers.prepare=function(){$(n).on("file:added",n.layers.add),$(n).on("layer:remove",n.layers.remove),$(n).on("layer:duplicate",n.layers.duplicate),$(n).on("layer:rename",n.layers.rename)},n.layers.add=function(e,t,a,r,o){"Topology"===a.type&&(a=topojson.client.feature(a,a.objects[Object.keys(a.objects)[0]]));a=n.layers.makeLayer(t,a);n.layers.list[a.stamp]=a,r&&o&&(n.layers.list[a.stamp].ltype=r,n.layers.list[a.stamp].url=o),n.notify("success","<strong>"+a.name+"</strong> has been added!",3500),$(n).trigger("layer:added",[a]),r&&o&&n.util.updateSearch()},n.layers.remove=function(e,t){try{$(n).trigger("layer:removed",[t]),n.notify("info","<strong>"+n.layers.list[t].name+"</strong> has been removed."),delete n.layers.list[t]}catch(e){throw n.notify("error","There was a problem removing the layer."),e}},n.layers.duplicate=function(e,t){t=n.layers.list[t];n.layers.add({},"copy_"+t.name,t.raw)},n.layers.rename=function(e,t,a){n.layers.list[t.stamp].name=a,$(n).trigger("layer:renamed",[t.stamp,a])},n.layers.makeLayer=function(e,t){var a=t,t=L.mapbox.featureLayer(a);return{name:n.util.removeFileExtension(e),stamp:L.stamp(t),raw:a,type:"FeatureCollection"===(a=a).type?"FeatureCollection":a.type+"<"+a.geometry.type+">",featurelayer:t,dateAdded:new Date}},n}((dropchop=function(l){"use strict";function r(e,t){$(".layer-element[data-stamp="+e+"]").find(".layer-toggle").prop("checked",t).trigger("change")}return(l=l||{}).layerlist={},l.layerlist.elems={},l.layerlist.init=function(t){l.layerlist.$elem=$("<ol>").addClass(t),l.$elem.append(l.layerlist.$elem),l.layerlist.$elem.on("click",function(e){$(e.target).hasClass(t)&&l.selection.clear()});var e=$("<li>").addClass("layer-help").html('Welcome to <strong>dropchop</strong>! Here you can drag and drop files and they will show up in the layer list below.<br><br>To the left you can upload and save your files or <a href="/?gist=09129c20ec020b83bf85">add example data</a> or the <a href="/?gist=d066b572e8a8ad2b6d16">US States</a>.<br><br>To the right you\'ll notice some geospatial operations that become available based on selecting specific layers.');l.layerlist.$elem.append(e);e=$("<li>").addClass("layer-toggleAll").html('<label><input id="allCheckboxes" type="checkbox" checked>Toggle all layers</label>');e.on("change",l.layerlist.toggleAll),l.layerlist.$elem.append(e),$(l).on("layer:added",l.layerlist.addLayerListItem),$(l).on("layer:removed",l.layerlist.removeLayerListItem),$(l).on("layer:renamed",l.layerlist.rename)},l.layerlist.rename=function(e,t,a){$("[data-stamp="+t+"]").find(".layer-name").text(a)},l.layerlist.addLayerListItem=function(e,t){var a=$("<li>").addClass("layer-element").attr("data-stamp",t.stamp),r=$("<div>").addClass("layer-name layer-new").text(t.name).delay(3e3).queue(function(e){$(this).removeClass("layer-new")}),o=$("<span>").addClass("layer-type-image sprite sprite-layer-"+function(e){var t;switch(e){case"FeatureCollection":t="featurecollection";break;case"Feature<Point>":case"Feature<MultiPoint>":t="point";break;case"Feature<LineString>":case"Feature<MultiLineString>":t="line";break;case"Feature<Polygon>":case"Feature<MultiPolygon>":t="polygon";break;case"Feature<GeometryCollection>":t="geom";break;default:t="default"}return t}(t.type)),n=$("<input>").addClass("layer-toggle").prop({type:"checkbox",checked:!0}),i=$('<button title="More Options">').addClass("layer-action layer-dropdown").html('<i class="fa fa-ellipsis-h"></i>');n.on("change",function(e){this.checked?$(l).trigger("layer:show",[t]):$(l).trigger("layer:hide",[t])}),r.on("click",function(e){var o,n,i,s;e.shiftKey?(o=$(this),(n=l.layerlist._lastSelected)&&($(".layer-element").each(function(e){var t=$(this).attr("data-stamp"),a=o.parent().attr("data-stamp"),r=n.parent().attr("data-stamp");t===a&&(i=e),t===r&&(s=e)}),s<i?$(".layer-element").each(function(e){s<=e&&e<=i&&l.layerlist.selectLayer($(this).find(".layer-name"),l.layers.list[$(this).attr("data-stamp")])}):$(".layer-element").each(function(e){e<s&&i<=e&&l.layerlist.selectLayer($(this).find(".layer-name"),l.layers.list[$(this).attr("data-stamp")])}))):(e.metaKey||e.ctrlKey||l.layerlist.clearSelection($(this),t),l.layerlist.selectToggle($(this),t))}),r.on("contextmenu",function(e){l.menus.layerContextMenu.createLayerContextMenu(this,e.offsetX,e.pageY),e.preventDefault()}),i.on("click",function(e){return l.menus.layerContextMenu.createLayerContextMenu($(this).siblings(".layer-name"),e.pageX-40,e.pageY),e.preventDefault(),!1}),r.on("dblclick",function(e){l.ops.file.extent.execute()}),a.append(r),a.append(n),a.append(o),a.append(i),l.layerlist.$elem.append(a),l.layerlist.elems[t.stamp]=a,$(".layer-help").hide(),$(".layer-toggleAll").show(),$(l).trigger("layerlist:added",r)},l.layerlist.selectLayer=function(e,t){e.hasClass("selected")||(e.addClass("selected"),$(l).trigger("layer:selected",[t]))},l.layerlist.selectToggle=function(e,t){e.hasClass("selected")?(e.removeClass("selected"),$(l).trigger("layer:unselected",[t])):(e.addClass("selected"),$(l).trigger("layer:selected",[t])),l.layerlist._lastSelected=e},l.layerlist.clearSelection=function(e,t){l.selection.clear()},l.layerlist.selectAll=function(){$(".layer-element").each(function(e){l.layerlist.selectLayer($(this).find(".layer-name"),l.layers.list[$(this).attr("data-stamp")])})},l.layerlist.checkAll=function(e){for(var t in l.layers.list){var a=l.layers.list[t];e&&!dropchop.selection.isSelected(a)||r(l.layers.list[t].stamp,!0)}},l.layerlist.uncheckAll=function(e){for(var t in l.layers.list){var a=l.layers.list[t];e&&!dropchop.selection.isSelected(a)||r(a.stamp,!1)}},l.layerlist.toggleAll=function(e){document.getElementById("allCheckboxes").checked?l.layerlist.checkAll():l.layerlist.uncheckAll()},l.layerlist.removeLayerListItem=function(e,t){$("[data-stamp="+t+"]").fadeOut(300,function(){$(this).remove(),delete l.layerlist.elems[t],0===$(".layer-element").length&&($(".layer-help").show(),$(".layer-toggleAll").hide())})},l}((dropchop=function(n){"use strict";return(n=n||{}).form=n.form||{},n.form.init=function(){$(n).on("form:geo",n.form.geo),$(n).on("form:file",n.form.file)},n.form.geo=function(e,t){n.form.create(t,n.ops.geo[t],"geo")},n.form.file=function(e,t){n.form.create(t,n.ops.file[t],"file:"+t)},n.form.create=function(r,e,o){n.form.remove();var t=$("<form>").addClass("dropchop-form dropchop-form-"+o).attr("id","dropchop-form").attr("data",r);$("<h2>").addClass("dropchop-form-title").text(r).appendTo(t),$("<p>").addClass("dropchop-form-description").text(e.description).appendTo(t);e.parameters&&$(e.parameters).each(function(){n.form.createParam(this).appendTo(t)});var a=$("<button>").addClass("dropchop-btn dropchop-btn-green dropchop-form-submit").text("Execute").attr("for",r),e=$("<button>").addClass("dropchop-btn dropchop-btn-cancel dropchop-form-cancel").text("Cancel").attr("type","button");e.on("click",function(e){return e.preventDefault(),n.form.remove(),!1}),t.on("submit",function(e){e.preventDefault();var t=[],a=$(this).serializeArray();return $(a).each(function(e){t.push(a[e].value)}),$(n).trigger("operation:"+o,[r,t]),n.form.remove(),!1}),t.append(a),t.append(e),n.$elem.append(t)},n.form.remove=function(){$("#dropchop-form").remove()},n.form.createParam=function(e){var t=$("<div>").addClass("dropchop-form-parameter"),a=$("<label>").text(e.name).addClass("dropchop-form-parameter-label");return n.form.inputs[e.type](e).appendTo(a),e.description.length&&$("<p>").addClass("dropchop-form-parameter-description").html(e.description).appendTo(a),t.append(a),t},n.form.inputs={number:function(e){return $("<input>").attr("type","number").attr("name",e.name).attr("value",e.default)},select:function(t){var a=$("<select>").attr("name",t.name);return $(t.options).each(function(e){$("<option>").text(t.options[e]).attr("value",t.options[e]).appendTo(a)}),a},text:function(e){return $("<input>").attr("type","text").attr("name",e.name).attr("value",e.default)},checkbox:function(e){return $("<input>").attr("type","checkbox").attr("name",e.name).attr("value",e.default)},radio:function(r){var o=$("<div>").attr("class","radioGroup"),n=r.name.replace(/\s/g,"");return $(r.options).each(function(e){var t=r.options[e],a=t.replace(/\s/g,""),e=$("<label>").addClass("sub-label").attr("for",a),a=$("<input>").attr("type","radio").attr("id",a).attr("name",n).addClass("radio").val(t);t===r.default&&a.prop("defaultChecked",!0),e.append(t),e.appendTo(o),a.appendTo(o)}),o},switch:function(a){var r=$("<div>");return $(n.selection.list).each(function(e){var t=$("<label>").addClass("sub-label");$("<input>").attr("type","radio").val("switch-"+n.selection.list[e].stamp).attr("name",a.name).appendTo(t),t.append(n.selection.list[e].name),t.appendTo(r)}),r},recursive:function(e){var t=$("<div>"),a=$("<label>").addClass("sub-label");$("<input>").attr("type","radio").val("true").attr("name",e.name).appendTo(a),a.append("Individual features");var r=$("<label>").addClass("sub-label");return $("<input>").attr("type","radio").val("false").attr("name",e.name).appendTo(r),r.append("Entire collection"),a.appendTo(t),r.appendTo(t),t}},n}((dropchop=function(a){"use strict";return(a=a||{}).dropzone=function(e){(e=e).on("dragover",function(e){e.preventDefault(),e.stopPropagation(),$(this).addClass("dragging")}),e.on("dragleave",function(e){e.preventDefault(),e.stopPropagation(),$(this).removeClass("dragging")}),e.on("drop",function(e){e.preventDefault(),e.stopPropagation(),$(this).removeClass("dragging");var t=e.originalEvent.dataTransfer.files;$(t).each(function(e){a.util.readFile(t[e])})})},a}((dropchop=function(t){return(t=t||{}).version="0.2.4",t.init=function(e){e||t.util.error("No options provided in dropchop.init()"),t.options=e,$(e.id).length||t.util.error("Element with options.id does not exist."),t.$elem=$(e.id),t.layers.prepare(),t.map.init(),t.selection.init(),t.layerlist.init("layerlist"),t.dropzone($("body")),t.menus.geo.init(),t.menus.left.init(),t.menus.layerContextMenu.init(),t.form.init(),t.shortcuts.init(),location.search.length&&t.util.executeUrlParams()},t.boom=function(){console.log("shakalaka")},t}(dropchop||{}))||{}))||{}))||{}))||{}))||{}))||{}))||{}))||{}))||{}))||{}))||{}))||{}))||{}))||{});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
