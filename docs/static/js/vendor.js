/*!
 * jQuery JavaScript Library v3.5.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2020-05-04T22:49Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var flat = arr.flat ? function( array ) {
	return arr.flat.call( array );
} : function( array ) {
	return arr.concat.apply( [], array );
};


var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

      // Support: Chrome <=57, Firefox <=52
      // In some browsers, typeof returns "function" for HTML <object> elements
      // (i.e., `typeof document.createElement( "object" ) === "function"`).
      // We don't want to classify *any* DOM node as a function.
      return typeof obj === "function" && typeof obj.nodeType !== "number";
  };


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};


var document = window.document;



	var preservedScriptAttributes = {
		type: true,
		src: true,
		nonce: true,
		noModule: true
	};

	function DOMEval( code, node, doc ) {
		doc = doc || document;

		var i, val,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {

				// Support: Firefox 64+, Edge 18+
				// Some browsers don't support the "nonce" property on scripts.
				// On the other hand, just using `getAttribute` is not enough as
				// the `nonce` attribute is reset to an empty string whenever it
				// becomes browsing-context connected.
				// See https://github.com/whatwg/html/issues/2369
				// See https://html.spec.whatwg.org/#nonce-attributes
				// The `node.getAttribute` check was added for the sake of
				// `jQuery.globalEval` so that it can fake a nonce-containing node
				// via an object.
				val = node[ i ] || node.getAttribute && node.getAttribute( i );
				if ( val ) {
					script.setAttribute( i, val );
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.5.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	even: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return ( i + 1 ) % 2;
		} ) );
	},

	odd: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return i % 2;
		} ) );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				copy = options[ name ];

				// Prevent Object.prototype pollution
				// Prevent never-ending loop
				if ( name === "__proto__" || target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {
					src = target[ name ];

					// Ensure proper type for the source value
					if ( copyIsArray && !Array.isArray( src ) ) {
						clone = [];
					} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
						clone = {};
					} else {
						clone = src;
					}
					copyIsArray = false;

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a provided context; falls back to the global one
	// if not specified.
	globalEval: function( code, options, doc ) {
		DOMEval( code, { nonce: options && options.nonce }, doc );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return flat( ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( _i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.5
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2020-03-14
 */
( function( window ) {
var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	nonnativeSelectorCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ( {} ).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	pushNative = arr.push,
	push = arr.push,
	slice = arr.slice,

	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[ i ] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" +
		"ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
	identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace +
		"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +

		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +

		// "Attribute values must be CSS identifiers [capture 5]
		// or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" +
		whitespace + "*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +

		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +

		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +

		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" +
		whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace +
		"*" ),
	rdescend = new RegExp( whitespace + "|>" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
			whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" +
			whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),

		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace +
			"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
			"*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rhtml = /HTML$/i,
	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g" ),
	funescape = function( escape, nonHex ) {
		var high = "0x" + escape.slice( 1 ) - 0x10000;

		return nonHex ?

			// Strip the backslash prefix from a non-hex escape sequence
			nonHex :

			// Replace a hexadecimal escape sequence with the encoded Unicode code point
			// Support: IE <=11+
			// For values outside the Basic Multilingual Plane (BMP), manually construct a
			// surrogate pair
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" +
				ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	inDisabledFieldset = addCombinator(
		function( elem ) {
			return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		( arr = slice.call( preferredDoc.childNodes ) ),
		preferredDoc.childNodes
	);

	// Support: Android<4.0
	// Detect silently failing push.apply
	// eslint-disable-next-line no-unused-expressions
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			pushNative.apply( target, slice.call( els ) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;

			// Can't trust NodeList.length
			while ( ( target[ j++ ] = els[ i++ ] ) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {
		setDocument( context );
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {

				// ID selector
				if ( ( m = match[ 1 ] ) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( ( elem = context.getElementById( m ) ) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && ( elem = newContext.getElementById( m ) ) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[ 2 ] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( ( m = match[ 3 ] ) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!nonnativeSelectorCache[ selector + " " ] &&
				( !rbuggyQSA || !rbuggyQSA.test( selector ) ) &&

				// Support: IE 8 only
				// Exclude object elements
				( nodeType !== 1 || context.nodeName.toLowerCase() !== "object" ) ) {

				newSelector = selector;
				newContext = context;

				// qSA considers elements outside a scoping root when evaluating child or
				// descendant combinators, which is not what we want.
				// In such cases, we work around the behavior by prefixing every selector in the
				// list with an ID selector referencing the scope context.
				// The technique has to be used as well when a leading combinator is used
				// as such selectors are not recognized by querySelectorAll.
				// Thanks to Andrew Dupont for this technique.
				if ( nodeType === 1 &&
					( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;

					// We can use :scope instead of the ID hack if the browser
					// supports it & if we're not changing the context.
					if ( newContext !== context || !support.scope ) {

						// Capture the context ID, setting it first if necessary
						if ( ( nid = context.getAttribute( "id" ) ) ) {
							nid = nid.replace( rcssescape, fcssescape );
						} else {
							context.setAttribute( "id", ( nid = expando ) );
						}
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[ i ] = ( nid ? "#" + nid : ":scope" ) + " " +
							toSelector( groups[ i ] );
					}
					newSelector = groups.join( "," );
				}

				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch ( qsaError ) {
					nonnativeSelectorCache( selector, true );
				} finally {
					if ( nid === expando ) {
						context.removeAttribute( "id" );
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {

		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {

			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return ( cache[ key + " " ] = value );
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement( "fieldset" );

	try {
		return !!fn( el );
	} catch ( e ) {
		return false;
	} finally {

		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}

		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split( "|" ),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[ i ] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( ( cur = cur.nextSibling ) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return ( name === "input" || name === "button" ) && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
					inDisabledFieldset( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction( function( argument ) {
		argument = +argument;
		return markFunction( function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ ( j = matchIndexes[ i ] ) ] ) {
					seed[ j ] = !( matches[ j ] = seed[ j ] );
				}
			}
		} );
	} );
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	var namespace = elem.namespaceURI,
		docElem = ( elem.ownerDocument || elem ).documentElement;

	// Support: IE <=8
	// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
	// https://bugs.jquery.com/ticket/4833
	return !rhtml.test( namespace || docElem && docElem.nodeName || "HTML" );
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9 - 11+, Edge 12 - 18+
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( preferredDoc != document &&
		( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
	// Safari 4 - 5 only, Opera <=11.6 - 12.x only
	// IE/Edge & older browsers don't support the :scope pseudo-class.
	// Support: Safari 6.0 only
	// Safari 6.0 supports :scope but it's an alias of :root there.
	support.scope = assert( function( el ) {
		docElem.appendChild( el ).appendChild( document.createElement( "div" ) );
		return typeof el.querySelectorAll !== "undefined" &&
			!el.querySelectorAll( ":scope fieldset div" ).length;
	} );

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert( function( el ) {
		el.className = "i";
		return !el.getAttribute( "className" );
	} );

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert( function( el ) {
		el.appendChild( document.createComment( "" ) );
		return !el.getElementsByTagName( "*" ).length;
	} );

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert( function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	} );

	// ID filter and find
	if ( support.getById ) {
		Expr.filter[ "ID" ] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute( "id" ) === attrId;
			};
		};
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter[ "ID" ] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode( "id" );
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode( "id" );
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( ( elem = elems[ i++ ] ) ) {
						node = elem.getAttributeNode( "id" );
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find[ "TAG" ] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,

				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( ( elem = results[ i++ ] ) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find[ "CLASS" ] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( ( support.qsa = rnative.test( document.querySelectorAll ) ) ) {

		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert( function( el ) {

			var input;

			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll( "[msallowcapture^='']" ).length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll( "[selected]" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push( "~=" );
			}

			// Support: IE 11+, Edge 15 - 18+
			// IE 11/Edge don't find elements on a `[name='']` query in some cases.
			// Adding a temporary attribute to the document before the selection works
			// around the issue.
			// Interestingly, IE 10 & older don't seem to have the issue.
			input = document.createElement( "input" );
			input.setAttribute( "name", "" );
			el.appendChild( input );
			if ( !el.querySelectorAll( "[name='']" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*name" + whitespace + "*=" +
					whitespace + "*(?:''|\"\")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll( ":checked" ).length ) {
				rbuggyQSA.push( ":checked" );
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push( ".#.+[+~]" );
			}

			// Support: Firefox <=3.6 - 5 only
			// Old Firefox doesn't throw on a badly-escaped identifier.
			el.querySelectorAll( "\\\f" );
			rbuggyQSA.push( "[\\r\\n\\f]" );
		} );

		assert( function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement( "input" );
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll( "[name=d]" ).length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll( ":enabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll( ":disabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: Opera 10 - 11 only
			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll( "*,:x" );
			rbuggyQSA.push( ",.*:" );
		} );
	}

	if ( ( support.matchesSelector = rnative.test( ( matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector ) ) ) ) {

		assert( function( el ) {

			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		} );
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( "|" ) );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join( "|" ) );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			) );
		} :
		function( a, b ) {
			if ( b ) {
				while ( ( b = b.parentNode ) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		// Support: IE 11+, Edge 17 - 18+
		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
		// two documents; shallow comparisons work.
		// eslint-disable-next-line eqeqeq
		compare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {

			// Choose the first element that is related to our preferred document
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( a == document || a.ownerDocument == preferredDoc &&
				contains( preferredDoc, a ) ) {
				return -1;
			}

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( b == document || b.ownerDocument == preferredDoc &&
				contains( preferredDoc, b ) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			return a == document ? -1 :
				b == document ? 1 :
				/* eslint-enable eqeqeq */
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( ( cur = cur.parentNode ) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( ( cur = cur.parentNode ) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[ i ] === bp[ i ] ) {
			i++;
		}

		return i ?

			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[ i ], bp[ i ] ) :

			// Otherwise nodes in our document sort first
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			ap[ i ] == preferredDoc ? -1 :
			bp[ i ] == preferredDoc ? 1 :
			/* eslint-enable eqeqeq */
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	setDocument( elem );

	if ( support.matchesSelector && documentIsHTML &&
		!nonnativeSelectorCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||

				// As well, disconnected nodes are said to be in a document
				// fragment in IE 9
				elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch ( e ) {
			nonnativeSelectorCache( expr, true );
		}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( context.ownerDocument || context ) != document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( elem.ownerDocument || elem ) != document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],

		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			( val = elem.getAttributeNode( name ) ) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return ( sel + "" ).replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( ( elem = results[ i++ ] ) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {

		// If no nodeType, this is expected to be an array
		while ( ( node = elem[ i++ ] ) ) {

			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {

		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {

			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}

	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[ 1 ] = match[ 1 ].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[ 3 ] = ( match[ 3 ] || match[ 4 ] ||
				match[ 5 ] || "" ).replace( runescape, funescape );

			if ( match[ 2 ] === "~=" ) {
				match[ 3 ] = " " + match[ 3 ] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {

			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[ 1 ] = match[ 1 ].toLowerCase();

			if ( match[ 1 ].slice( 0, 3 ) === "nth" ) {

				// nth-* requires argument
				if ( !match[ 3 ] ) {
					Sizzle.error( match[ 0 ] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[ 4 ] = +( match[ 4 ] ?
					match[ 5 ] + ( match[ 6 ] || 1 ) :
					2 * ( match[ 3 ] === "even" || match[ 3 ] === "odd" ) );
				match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === "odd" );

				// other types prohibit arguments
			} else if ( match[ 3 ] ) {
				Sizzle.error( match[ 0 ] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[ 6 ] && match[ 2 ];

			if ( matchExpr[ "CHILD" ].test( match[ 0 ] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[ 3 ] ) {
				match[ 2 ] = match[ 4 ] || match[ 5 ] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&

				// Get excess from tokenize (recursively)
				( excess = tokenize( unquoted, true ) ) &&

				// advance to the next closing parenthesis
				( excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length ) ) {

				// excess is a negative index
				match[ 0 ] = match[ 0 ].slice( 0, excess );
				match[ 2 ] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() {
					return true;
				} :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				( pattern = new RegExp( "(^|" + whitespace +
					")" + className + "(" + whitespace + "|$)" ) ) && classCache(
						className, function( elem ) {
							return pattern.test(
								typeof elem.className === "string" && elem.className ||
								typeof elem.getAttribute !== "undefined" &&
									elem.getAttribute( "class" ) ||
								""
							);
				} );
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				/* eslint-disable max-len */

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
				/* eslint-enable max-len */

			};
		},

		"CHILD": function( type, what, _argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, _context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( ( node = node[ dir ] ) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}

								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || ( node[ expando ] = {} );

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								( outerCache[ node.uniqueID ] = {} );

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( ( node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								( diff = nodeIndex = 0 ) || start.pop() ) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {

							// Use previously-cached element index if available
							if ( useCache ) {

								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || ( node[ expando ] = {} );

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									( outerCache[ node.uniqueID ] = {} );

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {

								// Use the same loop as above to seek `elem` from the start
								while ( ( node = ++nodeIndex && node && node[ dir ] ||
									( diff = nodeIndex = 0 ) || start.pop() ) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] ||
												( node[ expando ] = {} );

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												( outerCache[ node.uniqueID ] = {} );

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {

			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction( function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[ i ] );
							seed[ idx ] = !( matches[ idx ] = matched[ i ] );
						}
					} ) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {

		// Potentially complex pseudos
		"not": markFunction( function( selector ) {

			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction( function( seed, matches, _context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( ( elem = unmatched[ i ] ) ) {
							seed[ i ] = !( matches[ i ] = elem );
						}
					}
				} ) :
				function( elem, _context, xml ) {
					input[ 0 ] = elem;
					matcher( input, null, xml, results );

					// Don't keep the element (issue #299)
					input[ 0 ] = null;
					return !results.pop();
				};
		} ),

		"has": markFunction( function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		} ),

		"contains": markFunction( function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;
			};
		} ),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {

			// lang value must be a valid identifier
			if ( !ridentifier.test( lang || "" ) ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( ( elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute( "xml:lang" ) || elem.getAttribute( "lang" ) ) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );
				return false;
			};
		} ),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement &&
				( !document.hasFocus || document.hasFocus() ) &&
				!!( elem.type || elem.href || ~elem.tabIndex );
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {

			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return ( nodeName === "input" && !!elem.checked ) ||
				( nodeName === "option" && !!elem.selected );
		},

		"selected": function( elem ) {

			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				// eslint-disable-next-line no-unused-expressions
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {

			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos[ "empty" ]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( ( attr = elem.getAttribute( "type" ) ) == null ||
					attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo( function() {
			return [ 0 ];
		} ),

		"last": createPositionalPseudo( function( _matchIndexes, length ) {
			return [ length - 1 ];
		} ),

		"eq": createPositionalPseudo( function( _matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		} ),

		"even": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"odd": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"lt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ?
				argument + length :
				argument > length ?
					length :
					argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"gt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} )
	}
};

Expr.pseudos[ "nth" ] = Expr.pseudos[ "eq" ];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || ( match = rcomma.exec( soFar ) ) ) {
			if ( match ) {

				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[ 0 ].length ) || soFar;
			}
			groups.push( ( tokens = [] ) );
		}

		matched = false;

		// Combinators
		if ( ( match = rcombinators.exec( soFar ) ) ) {
			matched = match.shift();
			tokens.push( {
				value: matched,

				// Cast descendant combinators to space
				type: match[ 0 ].replace( rtrim, " " )
			} );
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||
				( match = preFilters[ type ]( match ) ) ) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
					type: type,
					matches: match
				} );
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :

			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[ i ].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?

		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( ( elem = elem[ dir ] ) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || ( elem[ expando ] = {} );

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] ||
							( outerCache[ elem.uniqueID ] = {} );

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( ( oldCache = uniqueCache[ key ] ) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return ( newCache[ 2 ] = oldCache[ 2 ] );
						} else {

							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[ i ]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[ 0 ];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[ i ], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( ( elem = unmatched[ i ] ) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction( function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts(
				selector || "*",
				context.nodeType ? [ context ] : context,
				[]
			),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?

				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( ( elem = temp[ i ] ) ) {
					matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {

					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( ( elem = matcherOut[ i ] ) ) {

							// Restore matcherIn since elem is not yet a final match
							temp.push( ( matcherIn[ i ] = elem ) );
						}
					}
					postFinder( null, ( matcherOut = [] ), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( ( elem = matcherOut[ i ] ) &&
						( temp = postFinder ? indexOf( seed, elem ) : preMap[ i ] ) > -1 ) {

						seed[ temp ] = !( results[ temp ] = elem );
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	} );
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[ 0 ].type ],
		implicitRelative = leadingRelative || Expr.relative[ " " ],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				( checkContext = context ).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );

			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {
			matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
		} else {
			matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {

				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[ j ].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(

					// If the preceding token was a descendant combinator, insert an implicit any-element `*`
					tokens
						.slice( 0, i - 1 )
						.concat( { value: tokens[ i - 2 ].type === " " ? "*" : "" } )
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,

				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find[ "TAG" ]( "*", outermost ),

				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),
				len = elems.length;

			if ( outermost ) {

				// Support: IE 11+, Edge 17 - 18+
				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
				// two documents; shallow comparisons work.
				// eslint-disable-next-line eqeqeq
				outermostContext = context == document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;

					// Support: IE 11+, Edge 17 - 18+
					// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
					// two documents; shallow comparisons work.
					// eslint-disable-next-line eqeqeq
					if ( !context && elem.ownerDocument != document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( ( matcher = elementMatchers[ j++ ] ) ) {
						if ( matcher( elem, context || document, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {

					// They will have gone through all possible matchers
					if ( ( elem = !matcher && elem ) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( ( matcher = setMatchers[ j++ ] ) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {

					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !( unmatched[ i ] || setMatched[ i ] ) ) {
								setMatched[ i ] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {

		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[ i ] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache(
			selector,
			matcherFromGroupMatchers( elementMatchers, setMatchers )
		);

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( ( selector = compiled.selector || selector ) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[ 0 ] = match[ 0 ].slice( 0 );
		if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === "ID" &&
			context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {

			context = ( Expr.find[ "ID" ]( token.matches[ 0 ]
				.replace( runescape, funescape ), context ) || [] )[ 0 ];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr[ "needsContext" ].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[ i ];

			// Abort if we hit a combinator
			if ( Expr.relative[ ( type = token.type ) ] ) {
				break;
			}
			if ( ( find = Expr.find[ type ] ) ) {

				// Search, expanding context for leading sibling combinators
				if ( ( seed = find(
					token.matches[ 0 ].replace( runescape, funescape ),
					rsibling.test( tokens[ 0 ].type ) && testContext( context.parentNode ) ||
						context
				) ) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split( "" ).sort( sortOrder ).join( "" ) === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert( function( el ) {

	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement( "fieldset" ) ) & 1;
} );

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert( function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute( "href" ) === "#";
} ) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	} );
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert( function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
} ) ) {
	addHandle( "value", function( elem, _name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	} );
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert( function( el ) {
	return el.getAttribute( "disabled" ) == null;
} ) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
				( val = elem.getAttributeNode( name ) ) && val.specified ?
					val.value :
					null;
		}
	} );
}

return Sizzle;

} )( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

};
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, _i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, _i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, _i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		if ( elem.contentDocument != null &&

			// Support: IE 11+
			// <object> elements with no `data` attribute has an object
			// `contentDocument` with a `null` prototype.
			getProto( elem.contentDocument ) ) {

			return elem.contentDocument;
		}

		// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
		// Treat the template element as a regular one in browsers that
		// don't support it.
		if ( nodeName( elem, "template" ) ) {
			elem = elem.content || elem;
		}

		return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( _i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, _key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( _all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var documentElement = document.documentElement;



	var isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem );
		},
		composed = { composed: true };

	// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
	// Check attachment across shadow DOM boundaries when possible (gh-3504)
	// Support: iOS 10.0-10.2 only
	// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
	// leading to errors. We need to check for `getRootNode`.
	if ( documentElement.getRootNode ) {
		isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem ) ||
				elem.getRootNode( composed ) === elem.ownerDocument;
		};
	}
var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			isAttached( elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};



function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = elem.nodeType &&
			( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// Support: IE <=9 only
	// IE <=9 replaces <option> tags with their contents when inserted outside of
	// the select element.
	div.innerHTML = "<option></option>";
	support.option = !!div.lastChild;
} )();


// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: IE <=9 only
if ( !support.option ) {
	wrapMap.optgroup = wrapMap.option = [ 1, "<select multiple='multiple'>", "</select>" ];
}


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, attached, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		attached = isAttached( elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( attached ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 - 11+
// focus() and blur() are asynchronous, except when they are no-op.
// So expect focus to be synchronous when the element is already active,
// and blur to be synchronous when the element is not already active.
// (focus and blur are always synchronous in other supported browsers,
// this just defines when we can count on it).
function expectSync( elem, type ) {
	return ( elem === safeActiveElement() ) === ( type === "focus" );
}

// Support: IE <=9 only
// Accessing document.activeElement can throw unexpectedly
// https://bugs.jquery.com/ticket/13393
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Only attach events to objects that accept data
		if ( !acceptData( elem ) ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = Object.create( null );
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( nativeEvent ),

			handlers = (
					dataPriv.get( this, "events" ) || Object.create( null )
				)[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// If the event is namespaced, then each handler is only invoked if it is
				// specially universal or its namespaces are a superset of the event's.
				if ( !event.rnamespace || handleObj.namespace === false ||
					event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {

			// Utilize native event to ensure correct state for checkable inputs
			setup: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Claim the first handler
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					// dataPriv.set( el, "click", ... )
					leverageNative( el, "click", returnTrue );
				}

				// Return false to allow normal processing in the caller
				return false;
			},
			trigger: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Force setup before triggering a click
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					leverageNative( el, "click" );
				}

				// Return non-false to allow normal event-path propagation
				return true;
			},

			// For cross-browser consistency, suppress native .click() on links
			// Also prevent it if we're currently inside a leveraged native-event stack
			_default: function( event ) {
				var target = event.target;
				return rcheckableType.test( target.type ) &&
					target.click && nodeName( target, "input" ) &&
					dataPriv.get( target, "click" ) ||
					nodeName( target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

// Ensure the presence of an event listener that handles manually-triggered
// synthetic events by interrupting progress until reinvoked in response to
// *native* events that it fires directly, ensuring that state changes have
// already occurred before other listeners are invoked.
function leverageNative( el, type, expectSync ) {

	// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
	if ( !expectSync ) {
		if ( dataPriv.get( el, type ) === undefined ) {
			jQuery.event.add( el, type, returnTrue );
		}
		return;
	}

	// Register the controller as a special universal handler for all event namespaces
	dataPriv.set( el, type, false );
	jQuery.event.add( el, type, {
		namespace: false,
		handler: function( event ) {
			var notAsync, result,
				saved = dataPriv.get( this, type );

			if ( ( event.isTrigger & 1 ) && this[ type ] ) {

				// Interrupt processing of the outer synthetic .trigger()ed event
				// Saved data should be false in such cases, but might be a leftover capture object
				// from an async native handler (gh-4350)
				if ( !saved.length ) {

					// Store arguments for use when handling the inner native event
					// There will always be at least one argument (an event object), so this array
					// will not be confused with a leftover capture object.
					saved = slice.call( arguments );
					dataPriv.set( this, type, saved );

					// Trigger the native event and capture its result
					// Support: IE <=9 - 11+
					// focus() and blur() are asynchronous
					notAsync = expectSync( this, type );
					this[ type ]();
					result = dataPriv.get( this, type );
					if ( saved !== result || notAsync ) {
						dataPriv.set( this, type, false );
					} else {
						result = {};
					}
					if ( saved !== result ) {

						// Cancel the outer synthetic event
						event.stopImmediatePropagation();
						event.preventDefault();
						return result.value;
					}

				// If this is an inner synthetic event for an event with a bubbling surrogate
				// (focus or blur), assume that the surrogate already propagated from triggering the
				// native event and prevent that from happening again here.
				// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
				// bubbling surrogate propagates *after* the non-bubbling base), but that seems
				// less bad than duplication.
				} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
					event.stopPropagation();
				}

			// If this is a native event triggered above, everything is now in order
			// Fire an inner synthetic event with the original arguments
			} else if ( saved.length ) {

				// ...and capture the result
				dataPriv.set( this, type, {
					value: jQuery.event.trigger(

						// Support: IE <=9 - 11+
						// Extend with the prototype to reset the above stopImmediatePropagation()
						jQuery.extend( saved[ 0 ], jQuery.Event.prototype ),
						saved.slice( 1 ),
						this
					)
				} );

				// Abort handling of the native event
				event.stopImmediatePropagation();
			}
		}
	} );
}

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	code: true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {
	jQuery.event.special[ type ] = {

		// Utilize native event if possible so blur/focus sequence is correct
		setup: function() {

			// Claim the first handler
			// dataPriv.set( this, "focus", ... )
			// dataPriv.set( this, "blur", ... )
			leverageNative( this, type, expectSync );

			// Return false to allow normal processing in the caller
			return false;
		},
		trigger: function() {

			// Force setup before trigger
			leverageNative( this, type );

			// Return non-false to allow normal event-path propagation
			return true;
		},

		delegateType: delegateType
	};
} );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.get( src );
		events = pdataOld.events;

		if ( events ) {
			dataPriv.remove( dest, "handle events" );

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = flat( args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl && !node.noModule ) {
								jQuery._evalUrl( node.src, {
									nonce: node.nonce || node.getAttribute( "nonce" )
								}, doc );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && isAttached( node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html;
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = isAttached( elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var swap = function( elem, options, callback ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.call( elem );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		// Support: Chrome <=64
		// Don't get tricked when zoom affects offsetWidth (gh-4029)
		div.style.position = "absolute";
		scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableTrDimensionsVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		},

		// Support: IE 9 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Behavior in IE 9 is more subtle than in newer versions & it passes
		// some versions of this test; make sure not to make it pass there!
		reliableTrDimensions: function() {
			var table, tr, trChild, trStyle;
			if ( reliableTrDimensionsVal == null ) {
				table = document.createElement( "table" );
				tr = document.createElement( "tr" );
				trChild = document.createElement( "div" );

				table.style.cssText = "position:absolute;left:-11111px";
				tr.style.height = "1px";
				trChild.style.height = "9px";

				documentElement
					.appendChild( table )
					.appendChild( tr )
					.appendChild( trChild );

				trStyle = window.getComputedStyle( tr );
				reliableTrDimensionsVal = parseInt( trStyle.height ) > 3;

				documentElement.removeChild( table );
			}
			return reliableTrDimensionsVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !isAttached( elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style,
	vendorProps = {};

// Return a vendor-prefixed property or undefined
function vendorPropName( name ) {

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
function finalPropName( name ) {
	var final = jQuery.cssProps[ name ] || vendorProps[ name ];

	if ( final ) {
		return final;
	}
	if ( name in emptyStyle ) {
		return name;
	}
	return vendorProps[ name ] = vendorPropName( name ) || name;
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	};

function setPositiveNumber( _elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5

		// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
		// Use an explicit zero to avoid NaN (gh-3964)
		) ) || 0;
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),

		// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
		// Fake content-box until we know it's needed to know the true value.
		boxSizingNeeded = !support.boxSizingReliable() || extra,
		isBorderBox = boxSizingNeeded &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox,

		val = curCSS( elem, dimension, styles ),
		offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}


	// Support: IE 9 - 11 only
	// Use offsetWidth/offsetHeight for when box sizing is unreliable.
	// In those cases, the computed value can be trusted to be border-box.
	if ( ( !support.boxSizingReliable() && isBorderBox ||

		// Support: IE 10 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Interestingly, in some cases IE 9 doesn't suffer from this issue.
		!support.reliableTrDimensions() && nodeName( elem, "tr" ) ||

		// Fall back to offsetWidth/offsetHeight when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		val === "auto" ||

		// Support: Android <=4.1 - 4.3 only
		// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&

		// Make sure the element is visible & connected
		elem.getClientRects().length ) {

		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Where available, offsetWidth/offsetHeight approximate border box dimensions.
		// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
		// retrieved value as a content box dimension.
		valueIsBorderBox = offsetProp in elem;
		if ( valueIsBorderBox ) {
			val = elem[ offsetProp ];
		}
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"gridArea": true,
		"gridColumn": true,
		"gridColumnEnd": true,
		"gridColumnStart": true,
		"gridRow": true,
		"gridRowEnd": true,
		"gridRowStart": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
			// "px" to a few hardcoded values.
			if ( type === "number" && !isCustomProp ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( _i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, dimension, extra );
						} ) :
						getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),

				// Only read styles.position if the test has a chance to fail
				// to avoid forcing a reflow.
				scrollboxSizeBuggy = !support.scrollboxSize() &&
					styles.position === "absolute",

				// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
				boxSizingNeeded = scrollboxSizeBuggy || extra,
				isBorderBox = boxSizingNeeded &&
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra ?
					boxModelAdjustment(
						elem,
						dimension,
						extra,
						isBorderBox,
						styles
					) :
					0;

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && scrollboxSizeBuggy ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 && (
					jQuery.cssHooks[ tween.prop ] ||
					tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( _i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( _i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = (
					dataPriv.get( cur, "events" ) || Object.create( null )
				)[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {

				// Handle: regular nodes (via `this.ownerDocument`), window
				// (via `this.document`) & document (via `this`).
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = { guid: Date.now() };

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	if ( a == null ) {
		return "";
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( _i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
									( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
										.concat( match[ 2 ] );
							}
						}
						match = responseHeaders[ key.toLowerCase() + " " ];
					}
					return match == null ? null : match.join( ", " );
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce.guid++ ) +
					uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Use a noop converter for missing script
			if ( !isSuccess && jQuery.inArray( "script", s.dataTypes ) > -1 ) {
				s.converters[ "text script" ] = function() {};
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( _i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );

jQuery.ajaxPrefilter( function( s ) {
	var i;
	for ( i in s.headers ) {
		if ( i.toLowerCase() === "content-type" ) {
			s.contentType = s.headers[ i ] || "";
		}
	}
} );


jQuery._evalUrl = function( url, options, doc ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,

		// Only evaluate the response if it is successful (gh-4126)
		// dataFilter is not invoked for failure responses, so using it instead
		// of the default converter is kludgy but it works.
		converters: {
			"text script": function() {}
		},
		dataFilter: function( response ) {
			jQuery.globalEval( response, options, doc );
		}
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain or forced-by-attrs requests
	if ( s.crossDomain || s.scriptAttrs ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" )
					.attr( s.scriptAttrs || {} )
					.prop( { charset: s.scriptCharset, src: s.url } )
					.on( "load error", callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					} );

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce.guid++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			if ( typeof props.top === "number" ) {
				props.top += "px";
			}
			if ( typeof props.left === "number" ) {
				props.left += "px";
			}
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( _i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( _i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	},

	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );

jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( _i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );




// Support: Android <=4.0 only
// Make sure we trim BOM and NBSP
var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};

jQuery.trim = function( text ) {
	return text == null ?
		"" :
		( text + "" ).replace( rtrim, "" );
};



// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === "undefined" ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );

/* FileSaver.js
 * A saveAs() FileSaver implementation.
 * 1.1.20160328
 *
 * By Eli Grey, http://eligrey.com
 * License: MIT
 *   See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md
 */

/*global self */
/*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */

/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */

var saveAs = saveAs || (function(view) {
	"use strict";
	// IE <10 is explicitly unsupported
	if (typeof navigator !== "undefined" && /MSIE [1-9]\./.test(navigator.userAgent)) {
		return;
	}
	var
		  doc = view.document
		  // only get URL when necessary in case Blob.js hasn't overridden it yet
		, get_URL = function() {
			return view.URL || view.webkitURL || view;
		}
		, save_link = doc.createElementNS("http://www.w3.org/1999/xhtml", "a")
		, can_use_save_link = "download" in save_link
		, click = function(node) {
			var event = new MouseEvent("click");
			node.dispatchEvent(event);
		}
		, is_safari = /Version\/[\d\.]+.*Safari/.test(navigator.userAgent)
		, webkit_req_fs = view.webkitRequestFileSystem
		, req_fs = view.requestFileSystem || webkit_req_fs || view.mozRequestFileSystem
		, throw_outside = function(ex) {
			(view.setImmediate || view.setTimeout)(function() {
				throw ex;
			}, 0);
		}
		, force_saveable_type = "application/octet-stream"
		, fs_min_size = 0
		// the Blob API is fundamentally broken as there is no "downloadfinished" event to subscribe to
		, arbitrary_revoke_timeout = 1000 * 40 // in ms
		, revoke = function(file) {
			var revoker = function() {
				if (typeof file === "string") { // file is an object URL
					get_URL().revokeObjectURL(file);
				} else { // file is a File
					file.remove();
				}
			};
			/* // Take note W3C:
			var
			  uri = typeof file === "string" ? file : file.toURL()
			, revoker = function(evt) {
				// idealy DownloadFinishedEvent.data would be the URL requested
				if (evt.data === uri) {
					if (typeof file === "string") { // file is an object URL
						get_URL().revokeObjectURL(file);
					} else { // file is a File
						file.remove();
					}
				}
			}
			;
			view.addEventListener("downloadfinished", revoker);
			*/
			setTimeout(revoker, arbitrary_revoke_timeout);
		}
		, dispatch = function(filesaver, event_types, event) {
			event_types = [].concat(event_types);
			var i = event_types.length;
			while (i--) {
				var listener = filesaver["on" + event_types[i]];
				if (typeof listener === "function") {
					try {
						listener.call(filesaver, event || filesaver);
					} catch (ex) {
						throw_outside(ex);
					}
				}
			}
		}
		, auto_bom = function(blob) {
			// prepend BOM for UTF-8 XML and text/* types (including HTML)
			if (/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) {
				return new Blob(["\ufeff", blob], {type: blob.type});
			}
			return blob;
		}
		, FileSaver = function(blob, name, no_auto_bom) {
			if (!no_auto_bom) {
				blob = auto_bom(blob);
			}
			// First try a.download, then web filesystem, then object URLs
			var
				  filesaver = this
				, type = blob.type
				, blob_changed = false
				, object_url
				, target_view
				, dispatch_all = function() {
					dispatch(filesaver, "writestart progress write writeend".split(" "));
				}
				// on any filesys errors revert to saving with object URLs
				, fs_error = function() {
					if (target_view && is_safari && typeof FileReader !== "undefined") {
						// Safari doesn't allow downloading of blob urls
						var reader = new FileReader();
						reader.onloadend = function() {
							var base64Data = reader.result;
							target_view.location.href = "data:attachment/file" + base64Data.slice(base64Data.search(/[,;]/));
							filesaver.readyState = filesaver.DONE;
							dispatch_all();
						};
						reader.readAsDataURL(blob);
						filesaver.readyState = filesaver.INIT;
						return;
					}
					// don't create more object URLs than needed
					if (blob_changed || !object_url) {
						object_url = get_URL().createObjectURL(blob);
					}
					if (target_view) {
						target_view.location.href = object_url;
					} else {
						var new_tab = view.open(object_url, "_blank");
						if (new_tab === undefined && is_safari) {
							//Apple do not allow window.open, see http://bit.ly/1kZffRI
							view.location.href = object_url
						}
					}
					filesaver.readyState = filesaver.DONE;
					dispatch_all();
					revoke(object_url);
				}
				, abortable = function(func) {
					return function() {
						if (filesaver.readyState !== filesaver.DONE) {
							return func.apply(this, arguments);
						}
					};
				}
				, create_if_not_found = {create: true, exclusive: false}
				, slice
			;
			filesaver.readyState = filesaver.INIT;
			if (!name) {
				name = "download";
			}
			if (can_use_save_link) {
				object_url = get_URL().createObjectURL(blob);
				setTimeout(function() {
					save_link.href = object_url;
					save_link.download = name;
					click(save_link);
					dispatch_all();
					revoke(object_url);
					filesaver.readyState = filesaver.DONE;
				});
				return;
			}
			// Object and web filesystem URLs have a problem saving in Google Chrome when
			// viewed in a tab, so I force save with application/octet-stream
			// http://code.google.com/p/chromium/issues/detail?id=91158
			// Update: Google errantly closed 91158, I submitted it again:
			// https://code.google.com/p/chromium/issues/detail?id=389642
			if (view.chrome && type && type !== force_saveable_type) {
				slice = blob.slice || blob.webkitSlice;
				blob = slice.call(blob, 0, blob.size, force_saveable_type);
				blob_changed = true;
			}
			// Since I can't be sure that the guessed media type will trigger a download
			// in WebKit, I append .download to the filename.
			// https://bugs.webkit.org/show_bug.cgi?id=65440
			if (webkit_req_fs && name !== "download") {
				name += ".download";
			}
			if (type === force_saveable_type || webkit_req_fs) {
				target_view = view;
			}
			if (!req_fs) {
				fs_error();
				return;
			}
			fs_min_size += blob.size;
			req_fs(view.TEMPORARY, fs_min_size, abortable(function(fs) {
				fs.root.getDirectory("saved", create_if_not_found, abortable(function(dir) {
					var save = function() {
						dir.getFile(name, create_if_not_found, abortable(function(file) {
							file.createWriter(abortable(function(writer) {
								writer.onwriteend = function(event) {
									target_view.location.href = file.toURL();
									filesaver.readyState = filesaver.DONE;
									dispatch(filesaver, "writeend", event);
									revoke(file);
								};
								writer.onerror = function() {
									var error = writer.error;
									if (error.code !== error.ABORT_ERR) {
										fs_error();
									}
								};
								"writestart progress write abort".split(" ").forEach(function(event) {
									writer["on" + event] = filesaver["on" + event];
								});
								writer.write(blob);
								filesaver.abort = function() {
									writer.abort();
									filesaver.readyState = filesaver.DONE;
								};
								filesaver.readyState = filesaver.WRITING;
							}), fs_error);
						}), fs_error);
					};
					dir.getFile(name, {create: false}, abortable(function(file) {
						// delete file if it already exists
						file.remove();
						save();
					}), abortable(function(ex) {
						if (ex.code === ex.NOT_FOUND_ERR) {
							save();
						} else {
							fs_error();
						}
					}));
				}), fs_error);
			}), fs_error);
		}
		, FS_proto = FileSaver.prototype
		, saveAs = function(blob, name, no_auto_bom) {
			return new FileSaver(blob, name, no_auto_bom);
		}
	;
	// IE 10+ (native saveAs)
	if (typeof navigator !== "undefined" && navigator.msSaveOrOpenBlob) {
		return function(blob, name, no_auto_bom) {
			if (!no_auto_bom) {
				blob = auto_bom(blob);
			}
			return navigator.msSaveOrOpenBlob(blob, name || "download");
		};
	}

	FS_proto.abort = function() {
		var filesaver = this;
		filesaver.readyState = filesaver.DONE;
		dispatch(filesaver, "abort");
	};
	FS_proto.readyState = FS_proto.INIT = 0;
	FS_proto.WRITING = 1;
	FS_proto.DONE = 2;

	FS_proto.error =
	FS_proto.onwritestart =
	FS_proto.onprogress =
	FS_proto.onwrite =
	FS_proto.onabort =
	FS_proto.onerror =
	FS_proto.onwriteend =
		null;

	return saveAs;
}(
	   typeof self !== "undefined" && self
	|| typeof window !== "undefined" && window
	|| this.content
));
// `self` is undefined in Firefox for Android content script context
// while `this` is nsIContentFrameMessageManager
// with an attribute `content` that corresponds to the window

if (typeof module !== "undefined" && module.exports) {
  module.exports.saveAs = saveAs;
} else if ((typeof define !== "undefined" && define !== null) && (define.amd !== null)) {
  define([], function() {
    return saveAs;
  });
}

/*global define:false */
/**
 * Copyright 2012-2017 Craig Campbell
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Mousetrap is a simple keyboard shortcut library for Javascript with
 * no external dependencies
 *
 * @version 1.6.5
 * @url craig.is/killing/mice
 */
(function(window, document, undefined) {

    // Check if mousetrap is used inside browser, if not, return
    if (!window) {
        return;
    }

    /**
     * mapping of special keycodes to their corresponding keys
     *
     * everything in this dictionary cannot use keypress events
     * so it has to be here to map to the correct keycodes for
     * keyup/keydown events
     *
     * @type {Object}
     */
    var _MAP = {
        8: 'backspace',
        9: 'tab',
        13: 'enter',
        16: 'shift',
        17: 'ctrl',
        18: 'alt',
        20: 'capslock',
        27: 'esc',
        32: 'space',
        33: 'pageup',
        34: 'pagedown',
        35: 'end',
        36: 'home',
        37: 'left',
        38: 'up',
        39: 'right',
        40: 'down',
        45: 'ins',
        46: 'del',
        91: 'meta',
        93: 'meta',
        224: 'meta'
    };

    /**
     * mapping for special characters so they can support
     *
     * this dictionary is only used incase you want to bind a
     * keyup or keydown event to one of these keys
     *
     * @type {Object}
     */
    var _KEYCODE_MAP = {
        106: '*',
        107: '+',
        109: '-',
        110: '.',
        111 : '/',
        186: ';',
        187: '=',
        188: ',',
        189: '-',
        190: '.',
        191: '/',
        192: '`',
        219: '[',
        220: '\\',
        221: ']',
        222: '\''
    };

    /**
     * this is a mapping of keys that require shift on a US keypad
     * back to the non shift equivelents
     *
     * this is so you can use keyup events with these keys
     *
     * note that this will only work reliably on US keyboards
     *
     * @type {Object}
     */
    var _SHIFT_MAP = {
        '~': '`',
        '!': '1',
        '@': '2',
        '#': '3',
        '$': '4',
        '%': '5',
        '^': '6',
        '&': '7',
        '*': '8',
        '(': '9',
        ')': '0',
        '_': '-',
        '+': '=',
        ':': ';',
        '\"': '\'',
        '<': ',',
        '>': '.',
        '?': '/',
        '|': '\\'
    };

    /**
     * this is a list of special strings you can use to map
     * to modifier keys when you specify your keyboard shortcuts
     *
     * @type {Object}
     */
    var _SPECIAL_ALIASES = {
        'option': 'alt',
        'command': 'meta',
        'return': 'enter',
        'escape': 'esc',
        'plus': '+',
        'mod': /Mac|iPod|iPhone|iPad/.test(navigator.platform) ? 'meta' : 'ctrl'
    };

    /**
     * variable to store the flipped version of _MAP from above
     * needed to check if we should use keypress or not when no action
     * is specified
     *
     * @type {Object|undefined}
     */
    var _REVERSE_MAP;

    /**
     * loop through the f keys, f1 to f19 and add them to the map
     * programatically
     */
    for (var i = 1; i < 20; ++i) {
        _MAP[111 + i] = 'f' + i;
    }

    /**
     * loop through to map numbers on the numeric keypad
     */
    for (i = 0; i <= 9; ++i) {

        // This needs to use a string cause otherwise since 0 is falsey
        // mousetrap will never fire for numpad 0 pressed as part of a keydown
        // event.
        //
        // @see https://github.com/ccampbell/mousetrap/pull/258
        _MAP[i + 96] = i.toString();
    }

    /**
     * cross browser add event method
     *
     * @param {Element|HTMLDocument} object
     * @param {string} type
     * @param {Function} callback
     * @returns void
     */
    function _addEvent(object, type, callback) {
        if (object.addEventListener) {
            object.addEventListener(type, callback, false);
            return;
        }

        object.attachEvent('on' + type, callback);
    }

    /**
     * takes the event and returns the key character
     *
     * @param {Event} e
     * @return {string}
     */
    function _characterFromEvent(e) {

        // for keypress events we should return the character as is
        if (e.type == 'keypress') {
            var character = String.fromCharCode(e.which);

            // if the shift key is not pressed then it is safe to assume
            // that we want the character to be lowercase.  this means if
            // you accidentally have caps lock on then your key bindings
            // will continue to work
            //
            // the only side effect that might not be desired is if you
            // bind something like 'A' cause you want to trigger an
            // event when capital A is pressed caps lock will no longer
            // trigger the event.  shift+a will though.
            if (!e.shiftKey) {
                character = character.toLowerCase();
            }

            return character;
        }

        // for non keypress events the special maps are needed
        if (_MAP[e.which]) {
            return _MAP[e.which];
        }

        if (_KEYCODE_MAP[e.which]) {
            return _KEYCODE_MAP[e.which];
        }

        // if it is not in the special map

        // with keydown and keyup events the character seems to always
        // come in as an uppercase character whether you are pressing shift
        // or not.  we should make sure it is always lowercase for comparisons
        return String.fromCharCode(e.which).toLowerCase();
    }

    /**
     * checks if two arrays are equal
     *
     * @param {Array} modifiers1
     * @param {Array} modifiers2
     * @returns {boolean}
     */
    function _modifiersMatch(modifiers1, modifiers2) {
        return modifiers1.sort().join(',') === modifiers2.sort().join(',');
    }

    /**
     * takes a key event and figures out what the modifiers are
     *
     * @param {Event} e
     * @returns {Array}
     */
    function _eventModifiers(e) {
        var modifiers = [];

        if (e.shiftKey) {
            modifiers.push('shift');
        }

        if (e.altKey) {
            modifiers.push('alt');
        }

        if (e.ctrlKey) {
            modifiers.push('ctrl');
        }

        if (e.metaKey) {
            modifiers.push('meta');
        }

        return modifiers;
    }

    /**
     * prevents default for this event
     *
     * @param {Event} e
     * @returns void
     */
    function _preventDefault(e) {
        if (e.preventDefault) {
            e.preventDefault();
            return;
        }

        e.returnValue = false;
    }

    /**
     * stops propogation for this event
     *
     * @param {Event} e
     * @returns void
     */
    function _stopPropagation(e) {
        if (e.stopPropagation) {
            e.stopPropagation();
            return;
        }

        e.cancelBubble = true;
    }

    /**
     * determines if the keycode specified is a modifier key or not
     *
     * @param {string} key
     * @returns {boolean}
     */
    function _isModifier(key) {
        return key == 'shift' || key == 'ctrl' || key == 'alt' || key == 'meta';
    }

    /**
     * reverses the map lookup so that we can look for specific keys
     * to see what can and can't use keypress
     *
     * @return {Object}
     */
    function _getReverseMap() {
        if (!_REVERSE_MAP) {
            _REVERSE_MAP = {};
            for (var key in _MAP) {

                // pull out the numeric keypad from here cause keypress should
                // be able to detect the keys from the character
                if (key > 95 && key < 112) {
                    continue;
                }

                if (_MAP.hasOwnProperty(key)) {
                    _REVERSE_MAP[_MAP[key]] = key;
                }
            }
        }
        return _REVERSE_MAP;
    }

    /**
     * picks the best action based on the key combination
     *
     * @param {string} key - character for key
     * @param {Array} modifiers
     * @param {string=} action passed in
     */
    function _pickBestAction(key, modifiers, action) {

        // if no action was picked in we should try to pick the one
        // that we think would work best for this key
        if (!action) {
            action = _getReverseMap()[key] ? 'keydown' : 'keypress';
        }

        // modifier keys don't work as expected with keypress,
        // switch to keydown
        if (action == 'keypress' && modifiers.length) {
            action = 'keydown';
        }

        return action;
    }

    /**
     * Converts from a string key combination to an array
     *
     * @param  {string} combination like "command+shift+l"
     * @return {Array}
     */
    function _keysFromString(combination) {
        if (combination === '+') {
            return ['+'];
        }

        combination = combination.replace(/\+{2}/g, '+plus');
        return combination.split('+');
    }

    /**
     * Gets info for a specific key combination
     *
     * @param  {string} combination key combination ("command+s" or "a" or "*")
     * @param  {string=} action
     * @returns {Object}
     */
    function _getKeyInfo(combination, action) {
        var keys;
        var key;
        var i;
        var modifiers = [];

        // take the keys from this pattern and figure out what the actual
        // pattern is all about
        keys = _keysFromString(combination);

        for (i = 0; i < keys.length; ++i) {
            key = keys[i];

            // normalize key names
            if (_SPECIAL_ALIASES[key]) {
                key = _SPECIAL_ALIASES[key];
            }

            // if this is not a keypress event then we should
            // be smart about using shift keys
            // this will only work for US keyboards however
            if (action && action != 'keypress' && _SHIFT_MAP[key]) {
                key = _SHIFT_MAP[key];
                modifiers.push('shift');
            }

            // if this key is a modifier then add it to the list of modifiers
            if (_isModifier(key)) {
                modifiers.push(key);
            }
        }

        // depending on what the key combination is
        // we will try to pick the best event for it
        action = _pickBestAction(key, modifiers, action);

        return {
            key: key,
            modifiers: modifiers,
            action: action
        };
    }

    function _belongsTo(element, ancestor) {
        if (element === null || element === document) {
            return false;
        }

        if (element === ancestor) {
            return true;
        }

        return _belongsTo(element.parentNode, ancestor);
    }

    function Mousetrap(targetElement) {
        var self = this;

        targetElement = targetElement || document;

        if (!(self instanceof Mousetrap)) {
            return new Mousetrap(targetElement);
        }

        /**
         * element to attach key events to
         *
         * @type {Element}
         */
        self.target = targetElement;

        /**
         * a list of all the callbacks setup via Mousetrap.bind()
         *
         * @type {Object}
         */
        self._callbacks = {};

        /**
         * direct map of string combinations to callbacks used for trigger()
         *
         * @type {Object}
         */
        self._directMap = {};

        /**
         * keeps track of what level each sequence is at since multiple
         * sequences can start out with the same sequence
         *
         * @type {Object}
         */
        var _sequenceLevels = {};

        /**
         * variable to store the setTimeout call
         *
         * @type {null|number}
         */
        var _resetTimer;

        /**
         * temporary state where we will ignore the next keyup
         *
         * @type {boolean|string}
         */
        var _ignoreNextKeyup = false;

        /**
         * temporary state where we will ignore the next keypress
         *
         * @type {boolean}
         */
        var _ignoreNextKeypress = false;

        /**
         * are we currently inside of a sequence?
         * type of action ("keyup" or "keydown" or "keypress") or false
         *
         * @type {boolean|string}
         */
        var _nextExpectedAction = false;

        /**
         * resets all sequence counters except for the ones passed in
         *
         * @param {Object} doNotReset
         * @returns void
         */
        function _resetSequences(doNotReset) {
            doNotReset = doNotReset || {};

            var activeSequences = false,
                key;

            for (key in _sequenceLevels) {
                if (doNotReset[key]) {
                    activeSequences = true;
                    continue;
                }
                _sequenceLevels[key] = 0;
            }

            if (!activeSequences) {
                _nextExpectedAction = false;
            }
        }

        /**
         * finds all callbacks that match based on the keycode, modifiers,
         * and action
         *
         * @param {string} character
         * @param {Array} modifiers
         * @param {Event|Object} e
         * @param {string=} sequenceName - name of the sequence we are looking for
         * @param {string=} combination
         * @param {number=} level
         * @returns {Array}
         */
        function _getMatches(character, modifiers, e, sequenceName, combination, level) {
            var i;
            var callback;
            var matches = [];
            var action = e.type;

            // if there are no events related to this keycode
            if (!self._callbacks[character]) {
                return [];
            }

            // if a modifier key is coming up on its own we should allow it
            if (action == 'keyup' && _isModifier(character)) {
                modifiers = [character];
            }

            // loop through all callbacks for the key that was pressed
            // and see if any of them match
            for (i = 0; i < self._callbacks[character].length; ++i) {
                callback = self._callbacks[character][i];

                // if a sequence name is not specified, but this is a sequence at
                // the wrong level then move onto the next match
                if (!sequenceName && callback.seq && _sequenceLevels[callback.seq] != callback.level) {
                    continue;
                }

                // if the action we are looking for doesn't match the action we got
                // then we should keep going
                if (action != callback.action) {
                    continue;
                }

                // if this is a keypress event and the meta key and control key
                // are not pressed that means that we need to only look at the
                // character, otherwise check the modifiers as well
                //
                // chrome will not fire a keypress if meta or control is down
                // safari will fire a keypress if meta or meta+shift is down
                // firefox will fire a keypress if meta or control is down
                if ((action == 'keypress' && !e.metaKey && !e.ctrlKey) || _modifiersMatch(modifiers, callback.modifiers)) {

                    // when you bind a combination or sequence a second time it
                    // should overwrite the first one.  if a sequenceName or
                    // combination is specified in this call it does just that
                    //
                    // @todo make deleting its own method?
                    var deleteCombo = !sequenceName && callback.combo == combination;
                    var deleteSequence = sequenceName && callback.seq == sequenceName && callback.level == level;
                    if (deleteCombo || deleteSequence) {
                        self._callbacks[character].splice(i, 1);
                    }

                    matches.push(callback);
                }
            }

            return matches;
        }

        /**
         * actually calls the callback function
         *
         * if your callback function returns false this will use the jquery
         * convention - prevent default and stop propogation on the event
         *
         * @param {Function} callback
         * @param {Event} e
         * @returns void
         */
        function _fireCallback(callback, e, combo, sequence) {

            // if this event should not happen stop here
            if (self.stopCallback(e, e.target || e.srcElement, combo, sequence)) {
                return;
            }

            if (callback(e, combo) === false) {
                _preventDefault(e);
                _stopPropagation(e);
            }
        }

        /**
         * handles a character key event
         *
         * @param {string} character
         * @param {Array} modifiers
         * @param {Event} e
         * @returns void
         */
        self._handleKey = function(character, modifiers, e) {
            var callbacks = _getMatches(character, modifiers, e);
            var i;
            var doNotReset = {};
            var maxLevel = 0;
            var processedSequenceCallback = false;

            // Calculate the maxLevel for sequences so we can only execute the longest callback sequence
            for (i = 0; i < callbacks.length; ++i) {
                if (callbacks[i].seq) {
                    maxLevel = Math.max(maxLevel, callbacks[i].level);
                }
            }

            // loop through matching callbacks for this key event
            for (i = 0; i < callbacks.length; ++i) {

                // fire for all sequence callbacks
                // this is because if for example you have multiple sequences
                // bound such as "g i" and "g t" they both need to fire the
                // callback for matching g cause otherwise you can only ever
                // match the first one
                if (callbacks[i].seq) {

                    // only fire callbacks for the maxLevel to prevent
                    // subsequences from also firing
                    //
                    // for example 'a option b' should not cause 'option b' to fire
                    // even though 'option b' is part of the other sequence
                    //
                    // any sequences that do not match here will be discarded
                    // below by the _resetSequences call
                    if (callbacks[i].level != maxLevel) {
                        continue;
                    }

                    processedSequenceCallback = true;

                    // keep a list of which sequences were matches for later
                    doNotReset[callbacks[i].seq] = 1;
                    _fireCallback(callbacks[i].callback, e, callbacks[i].combo, callbacks[i].seq);
                    continue;
                }

                // if there were no sequence matches but we are still here
                // that means this is a regular match so we should fire that
                if (!processedSequenceCallback) {
                    _fireCallback(callbacks[i].callback, e, callbacks[i].combo);
                }
            }

            // if the key you pressed matches the type of sequence without
            // being a modifier (ie "keyup" or "keypress") then we should
            // reset all sequences that were not matched by this event
            //
            // this is so, for example, if you have the sequence "h a t" and you
            // type "h e a r t" it does not match.  in this case the "e" will
            // cause the sequence to reset
            //
            // modifier keys are ignored because you can have a sequence
            // that contains modifiers such as "enter ctrl+space" and in most
            // cases the modifier key will be pressed before the next key
            //
            // also if you have a sequence such as "ctrl+b a" then pressing the
            // "b" key will trigger a "keypress" and a "keydown"
            //
            // the "keydown" is expected when there is a modifier, but the
            // "keypress" ends up matching the _nextExpectedAction since it occurs
            // after and that causes the sequence to reset
            //
            // we ignore keypresses in a sequence that directly follow a keydown
            // for the same character
            var ignoreThisKeypress = e.type == 'keypress' && _ignoreNextKeypress;
            if (e.type == _nextExpectedAction && !_isModifier(character) && !ignoreThisKeypress) {
                _resetSequences(doNotReset);
            }

            _ignoreNextKeypress = processedSequenceCallback && e.type == 'keydown';
        };

        /**
         * handles a keydown event
         *
         * @param {Event} e
         * @returns void
         */
        function _handleKeyEvent(e) {

            // normalize e.which for key events
            // @see http://stackoverflow.com/questions/4285627/javascript-keycode-vs-charcode-utter-confusion
            if (typeof e.which !== 'number') {
                e.which = e.keyCode;
            }

            var character = _characterFromEvent(e);

            // no character found then stop
            if (!character) {
                return;
            }

            // need to use === for the character check because the character can be 0
            if (e.type == 'keyup' && _ignoreNextKeyup === character) {
                _ignoreNextKeyup = false;
                return;
            }

            self.handleKey(character, _eventModifiers(e), e);
        }

        /**
         * called to set a 1 second timeout on the specified sequence
         *
         * this is so after each key press in the sequence you have 1 second
         * to press the next key before you have to start over
         *
         * @returns void
         */
        function _resetSequenceTimer() {
            clearTimeout(_resetTimer);
            _resetTimer = setTimeout(_resetSequences, 1000);
        }

        /**
         * binds a key sequence to an event
         *
         * @param {string} combo - combo specified in bind call
         * @param {Array} keys
         * @param {Function} callback
         * @param {string=} action
         * @returns void
         */
        function _bindSequence(combo, keys, callback, action) {

            // start off by adding a sequence level record for this combination
            // and setting the level to 0
            _sequenceLevels[combo] = 0;

            /**
             * callback to increase the sequence level for this sequence and reset
             * all other sequences that were active
             *
             * @param {string} nextAction
             * @returns {Function}
             */
            function _increaseSequence(nextAction) {
                return function() {
                    _nextExpectedAction = nextAction;
                    ++_sequenceLevels[combo];
                    _resetSequenceTimer();
                };
            }

            /**
             * wraps the specified callback inside of another function in order
             * to reset all sequence counters as soon as this sequence is done
             *
             * @param {Event} e
             * @returns void
             */
            function _callbackAndReset(e) {
                _fireCallback(callback, e, combo);

                // we should ignore the next key up if the action is key down
                // or keypress.  this is so if you finish a sequence and
                // release the key the final key will not trigger a keyup
                if (action !== 'keyup') {
                    _ignoreNextKeyup = _characterFromEvent(e);
                }

                // weird race condition if a sequence ends with the key
                // another sequence begins with
                setTimeout(_resetSequences, 10);
            }

            // loop through keys one at a time and bind the appropriate callback
            // function.  for any key leading up to the final one it should
            // increase the sequence. after the final, it should reset all sequences
            //
            // if an action is specified in the original bind call then that will
            // be used throughout.  otherwise we will pass the action that the
            // next key in the sequence should match.  this allows a sequence
            // to mix and match keypress and keydown events depending on which
            // ones are better suited to the key provided
            for (var i = 0; i < keys.length; ++i) {
                var isFinal = i + 1 === keys.length;
                var wrappedCallback = isFinal ? _callbackAndReset : _increaseSequence(action || _getKeyInfo(keys[i + 1]).action);
                _bindSingle(keys[i], wrappedCallback, action, combo, i);
            }
        }

        /**
         * binds a single keyboard combination
         *
         * @param {string} combination
         * @param {Function} callback
         * @param {string=} action
         * @param {string=} sequenceName - name of sequence if part of sequence
         * @param {number=} level - what part of the sequence the command is
         * @returns void
         */
        function _bindSingle(combination, callback, action, sequenceName, level) {

            // store a direct mapped reference for use with Mousetrap.trigger
            self._directMap[combination + ':' + action] = callback;

            // make sure multiple spaces in a row become a single space
            combination = combination.replace(/\s+/g, ' ');

            var sequence = combination.split(' ');
            var info;

            // if this pattern is a sequence of keys then run through this method
            // to reprocess each pattern one key at a time
            if (sequence.length > 1) {
                _bindSequence(combination, sequence, callback, action);
                return;
            }

            info = _getKeyInfo(combination, action);

            // make sure to initialize array if this is the first time
            // a callback is added for this key
            self._callbacks[info.key] = self._callbacks[info.key] || [];

            // remove an existing match if there is one
            _getMatches(info.key, info.modifiers, {type: info.action}, sequenceName, combination, level);

            // add this call back to the array
            // if it is a sequence put it at the beginning
            // if not put it at the end
            //
            // this is important because the way these are processed expects
            // the sequence ones to come first
            self._callbacks[info.key][sequenceName ? 'unshift' : 'push']({
                callback: callback,
                modifiers: info.modifiers,
                action: info.action,
                seq: sequenceName,
                level: level,
                combo: combination
            });
        }

        /**
         * binds multiple combinations to the same callback
         *
         * @param {Array} combinations
         * @param {Function} callback
         * @param {string|undefined} action
         * @returns void
         */
        self._bindMultiple = function(combinations, callback, action) {
            for (var i = 0; i < combinations.length; ++i) {
                _bindSingle(combinations[i], callback, action);
            }
        };

        // start!
        _addEvent(targetElement, 'keypress', _handleKeyEvent);
        _addEvent(targetElement, 'keydown', _handleKeyEvent);
        _addEvent(targetElement, 'keyup', _handleKeyEvent);
    }

    /**
     * binds an event to mousetrap
     *
     * can be a single key, a combination of keys separated with +,
     * an array of keys, or a sequence of keys separated by spaces
     *
     * be sure to list the modifier keys first to make sure that the
     * correct key ends up getting bound (the last key in the pattern)
     *
     * @param {string|Array} keys
     * @param {Function} callback
     * @param {string=} action - 'keypress', 'keydown', or 'keyup'
     * @returns void
     */
    Mousetrap.prototype.bind = function(keys, callback, action) {
        var self = this;
        keys = keys instanceof Array ? keys : [keys];
        self._bindMultiple.call(self, keys, callback, action);
        return self;
    };

    /**
     * unbinds an event to mousetrap
     *
     * the unbinding sets the callback function of the specified key combo
     * to an empty function and deletes the corresponding key in the
     * _directMap dict.
     *
     * TODO: actually remove this from the _callbacks dictionary instead
     * of binding an empty function
     *
     * the keycombo+action has to be exactly the same as
     * it was defined in the bind method
     *
     * @param {string|Array} keys
     * @param {string} action
     * @returns void
     */
    Mousetrap.prototype.unbind = function(keys, action) {
        var self = this;
        return self.bind.call(self, keys, function() {}, action);
    };

    /**
     * triggers an event that has already been bound
     *
     * @param {string} keys
     * @param {string=} action
     * @returns void
     */
    Mousetrap.prototype.trigger = function(keys, action) {
        var self = this;
        if (self._directMap[keys + ':' + action]) {
            self._directMap[keys + ':' + action]({}, keys);
        }
        return self;
    };

    /**
     * resets the library back to its initial state.  this is useful
     * if you want to clear out the current keyboard shortcuts and bind
     * new ones - for example if you switch to another page
     *
     * @returns void
     */
    Mousetrap.prototype.reset = function() {
        var self = this;
        self._callbacks = {};
        self._directMap = {};
        return self;
    };

    /**
     * should we stop this event before firing off callbacks
     *
     * @param {Event} e
     * @param {Element} element
     * @return {boolean}
     */
    Mousetrap.prototype.stopCallback = function(e, element) {
        var self = this;

        // if the element has the class "mousetrap" then no need to stop
        if ((' ' + element.className + ' ').indexOf(' mousetrap ') > -1) {
            return false;
        }

        if (_belongsTo(element, self.target)) {
            return false;
        }

        // Events originating from a shadow DOM are re-targetted and `e.target` is the shadow host,
        // not the initial event target in the shadow tree. Note that not all events cross the
        // shadow boundary.
        // For shadow trees with `mode: 'open'`, the initial event target is the first element in
        // the event’s composed path. For shadow trees with `mode: 'closed'`, the initial event
        // target cannot be obtained.
        if ('composedPath' in e && typeof e.composedPath === 'function') {
            // For open shadow trees, update `element` so that the following check works.
            var initialEventTarget = e.composedPath()[0];
            if (initialEventTarget !== e.target) {
                element = initialEventTarget;
            }
        }

        // stop for input, select, and textarea
        return element.tagName == 'INPUT' || element.tagName == 'SELECT' || element.tagName == 'TEXTAREA' || element.isContentEditable;
    };

    /**
     * exposes _handleKey publicly so it can be overwritten by extensions
     */
    Mousetrap.prototype.handleKey = function() {
        var self = this;
        return self._handleKey.apply(self, arguments);
    };

    /**
     * allow custom key mappings
     */
    Mousetrap.addKeycodes = function(object) {
        for (var key in object) {
            if (object.hasOwnProperty(key)) {
                _MAP[key] = object[key];
            }
        }
        _REVERSE_MAP = null;
    };

    /**
     * Init the global mousetrap functions
     *
     * This method is needed to allow the global mousetrap functions to work
     * now that mousetrap is a constructor function.
     */
    Mousetrap.init = function() {
        var documentMousetrap = Mousetrap(document);
        for (var method in documentMousetrap) {
            if (method.charAt(0) !== '_') {
                Mousetrap[method] = (function(method) {
                    return function() {
                        return documentMousetrap[method].apply(documentMousetrap, arguments);
                    };
                } (method));
            }
        }
    };

    Mousetrap.init();

    // expose mousetrap to the global object
    window.Mousetrap = Mousetrap;

    // expose as a common js module
    if (typeof module !== 'undefined' && module.exports) {
        module.exports = Mousetrap;
    }

    // expose mousetrap as an AMD module
    if (typeof define === 'function' && define.amd) {
        define(function() {
            return Mousetrap;
        });
    }
}) (typeof window !== 'undefined' ? window : null, typeof  window !== 'undefined' ? document : null);

var esri2geo = {};
(function () {
  function toGeoJSON(data, cb){
    if(typeof data === 'string'){
      if(cb){
        ajax(data, function(err, d){
        	toGeoJSON(d,cb);
        });
        return;
      }else{
        throw new TypeError('callback needed for url');
      }
    }
    var outPut = { "type": "FeatureCollection","features": []};
    var fl = data.features.length;
    var i = 0;
    while(fl>i){
      var ft = data.features[i];
      /* as only ESRI based products care if all the features are the same type of geometry, check for geometry type at a feature level*/
      var outFT = {
        "type": "Feature",
        "properties":prop(ft.attributes)
      };
      if(ft.geometry.x){
        //check if it's a point
        outFT.geometry=point(ft.geometry);
      }else if(ft.geometry.points){
        //check if it is a multipoint
        outFT.geometry=points(ft.geometry);
      }else if(ft.geometry.paths){
        //check if a line (or "ARC" in ESRI terms)
        outFT.geometry=line(ft.geometry);
      }else if(ft.geometry.rings){
        //check if a poly.
        outFT.geometry=poly(ft.geometry);
      }
      outPut.features.push(outFT);
      i++;
    }
    cb(null, outPut);
  }
  function point(geometry){
    //this one is easy
    return {"type": "Point","coordinates": [geometry.x,geometry.y]};  
  }
  function points(geometry){
    //checks if the multipoint only has one point, if so exports as point instead
    if(geometry.points.length===1){
      return {"type": "Point","coordinates": geometry.points[0]};
    }else{
      return { "type": "MultiPoint","coordinates":geometry.points}; 
    }
  }
  function line(geometry){
    //checks if their are multiple paths or just one
    if(geometry.paths.length===1){
      return {"type": "LineString","coordinates": geometry.paths[0]};
    }else{
      return { "type": "MultiLineString","coordinates":geometry.paths}; 
    }
  }
  function poly(geometry){
    //first we check for some easy cases, like if their is only one ring
    if(geometry.rings.length===1){
      return {"type": "Polygon","coordinates": geometry.rings};
    }else{
      /*if it isn't that easy then we have to start checking ring direction, basically the ring goes clockwise its part of the polygon,
      if it goes counterclockwise it is a hole in the polygon, but geojson does it by haveing an array with the first element be the polygons 
      and the next elements being holes in it*/
      return decodePolygon(geometry.rings);
    }
  }
  function decodePolygon(a){
    //returns the feature
    var coords = [],type;
    var len = a.length;
    var i = 0;
    var len2 = coords.length-1;
    while(len>i){
      if(ringIsClockwise(a[i])){
        coords.push([a[i]]);
        len2++;
      }else{
        coords[len2].push(a[i]);
      }
      i++;
    }
    if(coords.length===1){
      type="Polygon";
    }else{
      type="MultiPolygon";
    }
    return {"type":type,"coordinates":(coords.length===1)?coords[0]:coords};
  }
  /*determine if polygon ring coordinates are clockwise. clockwise signifies outer ring, counter-clockwise an inner ring
  or hole. this logic was found at http://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-
  points-are-in-clockwise-order
  this code taken from http://esri.github.com/geojson-utils/src/jsonConverters.js by James Cardona (MIT lisense)
  */
  function ringIsClockwise(ringToTest) {
    var total = 0,
      i = 0,
      rLength = ringToTest.length,
      pt1 = ringToTest[i],
      pt2;
    for (i; i < rLength - 1; i++) {
      pt2 = ringToTest[i + 1];
      total += (pt2[0] - pt1[0]) * (pt2[1] + pt1[1]);
      pt1 = pt2;
    }
    return (total >= 0);
  }
  function prop(a){
    var p = {};
    for(var k in a){
      if(a[k]){
        p[k]=a[k];  
      }
    }
    return p;
  }


  function ajax(url, cb){
    if(typeof module !== "undefined"){
        var request = require("request");
        request(url,{json:true},function(e,r,b){
          cb(e,b);
        });
        return;
    }
    // the following is from JavaScript: The Definitive Guide
    var response;
    var req = new XMLHttpRequest();
    req.onreadystatechange = function() {
      if (req.readyState === 4 && req.status === 200) {
          cb(null, JSON.parse(req.responseText));
      }
    };
    req.open("GET", url);
    req.send();
  }
  if (typeof module !== "undefined"){
    module.exports = toGeoJSON;
  } else {
    esri2geo.toGeoJSON = toGeoJSON;
  }
}());
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var n;n="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,n.osmtogeojson=e()}}(function(){return function e(n,t,r){function o(i,s){if(!t[i]){if(!n[i]){var l="function"==typeof require&&require;if(!s&&l)return l(i,!0);if(a)return a(i,!0);var u=new Error("Cannot find module '"+i+"'");throw u.code="MODULE_NOT_FOUND",u}var c=t[i]={exports:{}};n[i][0].call(c.exports,function(e){var t=n[i][1][e];return o(t?t:e)},c,c.exports,e,n,t,r)}return t[i].exports}for(var a="function"==typeof require&&require,i=0;i<r.length;i++)o(r[i]);return o}({1:[function(e,n,t){var r=e("./lodash.custom.js"),o=e("geojson-rewind"),a={};e("osm-polygon-features").forEach(function(e){if("all"===e.polygon)a[e.key]=!0;else{var n="whitelist"===e.polygon?"included_values":"excluded_values",t={};e.values.forEach(function(e){t[e]=!0}),a[e.key]={},a[e.key][n]=t}});var i={};i=function(e,n){function t(e){function n(e){var n=r.clone(e);n.lat=e.center.lat,n.lon=e.center.lon,n.__is_center_placeholder=!0,i.push(n)}function t(e){function n(e,n,r){var o={type:"node",id:"_"+t.type+"/"+t.id+"bounds"+r,lat:e,lon:n};t.nodes.push(o.id),i.push(o)}var t=r.clone(e);t.nodes=[],n(t.bounds.minlat,t.bounds.minlon,1),n(t.bounds.maxlat,t.bounds.minlon,2),n(t.bounds.maxlat,t.bounds.maxlon,3),n(t.bounds.minlat,t.bounds.maxlon,4),t.nodes.push(t.nodes[0]),t.__is_bounds_placeholder=!0,l.push(t)}function o(e){function n(e,n,t){var r={type:"node",id:t,lat:e,lon:n,__is_uninteresting:!0};i.push(r)}r.isArray(e.nodes)||(e.nodes=e.geometry.map(function(e){return null!==e?"_anonymous@"+e.lat+"/"+e.lon:"_anonymous@unknown_location"})),e.geometry.forEach(function(t,r){t&&n(t.lat,t.lon,e.nodes[r])})}function a(e){function n(e,n,t){var r={type:"node",id:t,lat:e,lon:n};i.push(r)}function t(e,n){function t(e,n){var t={type:"node",id:"_anonymous@"+e+"/"+n,lat:e,lon:n,__is_uninteresting:!0};r.nodes.push(t.id),i.push(t)}if(!l.some(function(e){return"way"==e.type&&e.id==n})){var r={type:"way",id:n,nodes:[]};e.forEach(function(e){e?t(e.lat,e.lon):r.nodes.push(void 0)}),l.push(r)}}e.members.forEach(function(e,r){"node"==e.type?e.lat&&n(e.lat,e.lon,e.ref):"way"==e.type&&e.geometry&&(e.ref="_fullGeom"+e.ref,t(e.geometry,e.ref))})}for(var i=new Array,l=new Array,u=new Array,c=0;c<e.elements.length;c++)switch(e.elements[c].type){case"node":var f=e.elements[c];i.push(f);break;case"way":var p=r.clone(e.elements[c]);p.nodes=r.clone(p.nodes),l.push(p),p.center&&n(p),p.geometry?o(p):p.bounds&&t(p);break;case"relation":var y=r.clone(e.elements[c]);y.members=r.clone(y.members),u.push(y);var g=y.members&&y.members.some(function(e){return"node"==e.type&&e.lat||"way"==e.type&&e.geometry&&e.geometry.length>0});y.center&&n(y),g?a(y):y.bounds&&t(y)}return s(i,l,u)}function i(e){function n(e,n,t){e.hasAttribute(t)&&(n[t]=e.getAttribute(t))}function t(e,t){var o=r.clone(e);n(t,o,"lat"),n(t,o,"lon"),o.__is_center_placeholder=!0,l.push(o)}function o(e,n){function t(e,n,t){var r={type:"node",id:"_"+o.type+"/"+o.id+"bounds"+t,lat:e,lon:n};o.nodes.push(r.id),l.push(r)}var o=r.clone(e);o.nodes=[],t(n.getAttribute("minlat"),n.getAttribute("minlon"),1),t(n.getAttribute("maxlat"),n.getAttribute("minlon"),2),t(n.getAttribute("maxlat"),n.getAttribute("maxlon"),3),t(n.getAttribute("minlat"),n.getAttribute("maxlon"),4),o.nodes.push(o.nodes[0]),o.__is_bounds_placeholder=!0,u.push(o)}function a(e,n){function t(e,n,t){var r={type:"node",id:t,lat:e,lon:n,__is_uninteresting:!0};return l.push(r),r.id}r.isArray(e.nodes)||(e.nodes=[],r.each(n,function(n,t){e.nodes.push("_anonymous@"+n.getAttribute("lat")+"/"+n.getAttribute("lon"))})),r.each(n,function(n,r){n.getAttribute("lat")&&t(n.getAttribute("lat"),n.getAttribute("lon"),e.nodes[r])})}function i(e,n){function t(e,n,t){var r={type:"node",id:t,lat:e,lon:n};l.push(r)}function o(e,n){function t(e,n){var t={type:"node",id:"_anonymous@"+e+"/"+n,lat:e,lon:n,__is_uninteresting:!0};o.nodes.push(t.id),l.push(t)}if(!u.some(function(e){return"way"==e.type&&e.id==n})){var o={type:"way",id:n,nodes:[]};r.each(e,function(e){e.getAttribute("lat")?t(e.getAttribute("lat"),e.getAttribute("lon")):o.nodes.push(void 0)}),u.push(o)}}r.each(n,function(n,r){"node"==e.members[r].type?n.getAttribute("lat")&&t(n.getAttribute("lat"),n.getAttribute("lon"),e.members[r].ref):"way"==e.members[r].type&&n.getElementsByTagName("nd").length>0&&(e.members[r].ref="_fullGeom"+e.members[r].ref,o(n.getElementsByTagName("nd"),e.members[r].ref))})}var l=new Array,u=new Array,c=new Array;r.each(e.getElementsByTagName("node"),function(e,t){var o={};r.each(e.getElementsByTagName("tag"),function(e){o[e.getAttribute("k")]=e.getAttribute("v")});var a={type:"node"};n(e,a,"id"),n(e,a,"lat"),n(e,a,"lon"),n(e,a,"version"),n(e,a,"timestamp"),n(e,a,"changeset"),n(e,a,"uid"),n(e,a,"user"),r.isEmpty(o)||(a.tags=o),l.push(a)});var f,p;return r.each(e.getElementsByTagName("way"),function(e,i){var s={},l=[];r.each(e.getElementsByTagName("tag"),function(e){s[e.getAttribute("k")]=e.getAttribute("v")});var c=!1;r.each(e.getElementsByTagName("nd"),function(e,n){var t;(t=e.getAttribute("ref"))&&(l[n]=t),!c&&e.getAttribute("lat")&&(c=!0)});var y={type:"way"};n(e,y,"id"),n(e,y,"version"),n(e,y,"timestamp"),n(e,y,"changeset"),n(e,y,"uid"),n(e,y,"user"),l.length>0&&(y.nodes=l),r.isEmpty(s)||(y.tags=s),(f=e.getElementsByTagName("center")[0])&&t(y,f),c?a(y,e.getElementsByTagName("nd")):(p=e.getElementsByTagName("bounds")[0])&&o(y,p),u.push(y)}),r.each(e.getElementsByTagName("relation"),function(e,a){var s={},l=[];r.each(e.getElementsByTagName("tag"),function(e){s[e.getAttribute("k")]=e.getAttribute("v")});var u=!1;r.each(e.getElementsByTagName("member"),function(e,t){l[t]={},n(e,l[t],"ref"),n(e,l[t],"role"),n(e,l[t],"type"),(!u&&"node"==l[t].type&&e.getAttribute("lat")||"way"==l[t].type&&e.getElementsByTagName("nd").length>0)&&(u=!0)});var y={type:"relation"};n(e,y,"id"),n(e,y,"version"),n(e,y,"timestamp"),n(e,y,"changeset"),n(e,y,"uid"),n(e,y,"user"),l.length>0&&(y.members=l),r.isEmpty(s)||(y.tags=s),(f=e.getElementsByTagName("center")[0])&&t(y,f),u?i(y,e.getElementsByTagName("member")):(p=e.getElementsByTagName("bounds")[0])&&o(y,p),c.push(y)}),s(l,u,c)}function s(e,t,a){function i(e,t){if("object"!=typeof t&&(t={}),"function"==typeof n.uninterestingTags)return!n.uninterestingTags(e,t);for(var r in e)if(n.uninterestingTags[r]!==!0&&t[r]!==!0&&t[r]!==e[r])return!0;return!1}function s(e){var n={timestamp:e.timestamp,version:e.version,changeset:e.changeset,user:e.user,uid:e.uid};for(var t in n)void 0===n[t]&&delete n[t];return n}function u(e,t){function o(e){for(var t,r,o,a,i,s,l=function(e){return e[0]},f=function(e){return e[e.length-1]},p=[];e.length;)for(t=e.pop().nodes.slice(),p.push(t);e.length&&l(t)!==f(t);){for(r=l(t),o=f(t),a=0;a<e.length;a++){if(s=e[a].nodes,o===l(s)){i=t.push,s=s.slice(1);break}if(o===f(s)){i=t.push,s=s.slice(0,-1).reverse();break}if(r==f(s)){i=t.unshift,s=s.slice(0,-1);break}if(r==l(s)){i=t.unshift,s=s.slice(1).reverse();break}s=i=null}if(!s){n.verbose&&console.warn("Multipolygon",u+"/"+c,"contains unclosed ring geometry");break}e.splice(a,1),i.apply(t,s)}return p}function a(e){var n,t,r=function(e,n){for(var t=0;t<n.length;t++)if(a(n[t],e))return!0;return!1},o=function(e){return e.map(function(e){return[+e.lat,+e.lon]})},a=function(e,n){for(var t=e[0],r=e[1],o=!1,a=0,i=n.length-1;a<n.length;i=a++){var s=n[a][0],l=n[a][1],u=n[i][0],c=n[i][1],f=l>r!=c>r&&t<(u-s)*(r-l)/(c-l)+s;f&&(o=!o)}return o};for(e=o(e),n=0;n<f.length;n++)if(t=o(f[n]),r(t,e))return n}var i,l=!1,u=P?"way":"relation",c="number"==typeof e.id?e.id:+e.id.replace("_fullGeom","");i=t.members.filter(function(e){return"way"===e.type}),i=i.map(function(e){var t=g[e.ref];return void 0===t?(n.verbose&&console.warn("Multipolygon",u+"/"+c,"tainted by a missing way",e.type+"/"+e.ref),void(l=!0)):{id:e.ref,role:e.role||"outer",way:t,nodes:t.nodes.filter(function(t){return void 0!==t||(l=!0,n.verbose&&console.warn("Multipolygon",u+"/"+c,"tainted by a way",e.type+"/"+e.ref,"with a missing node"),!1)})}}),i=r.compact(i);var f,p;f=o(i.filter(function(e){return"outer"===e.role})),p=o(i.filter(function(e){return"inner"===e.role}));var y;y=f.map(function(e){return[e]});for(var d=0;d<p.length;d++){var b=a(p[d]);void 0!==b?y[b].push(p[d]):n.verbose&&console.warn("Multipolygon",u+"/"+c,"contains an inner ring with no containing outer")}var m=[];if(m=r.compact(y.map(function(e){var t=r.compact(e.map(function(e){return e.length<4?void(n.verbose&&console.warn("Multipolygon",u+"/"+c,"contains a ring with less than four nodes")):r.compact(e.map(function(e){return[+e.lon,+e.lat]}))}));return 0==t.length?void(n.verbose&&console.warn("Multipolygon",u+"/"+c,"contains an empty ring cluster")):t})),0==m.length)return n.verbose&&console.warn("Multipolygon",u+"/"+c,"contains no coordinates"),!1;var v="MultiPolygon";1===m.length&&(v="Polygon",m=m[0]);var w={type:"Feature",id:e.type+"/"+c,properties:{type:e.type,id:c,tags:e.tags||{},relations:h[e.type][e.id]||[],meta:s(e)},geometry:{type:v,coordinates:m}};return l&&(n.verbose&&console.warn("Multipolygon",u+"/"+c,"is tainted"),w.properties.tainted=!0),w}for(var c=new Object,f=0;f<e.length;f++)void 0!==e[f].lat?c[e[f].id]=e[f]:n.verbose&&console.warn("Node",e[f].type+"/"+e[f].id,"ignored because it has no coordinates");for(var p=new Object,f=0;f<e.length;f++)"undefined"!=typeof e[f].tags&&i(e[f].tags)&&(p[e[f].id]=!0);for(var f=0;f<a.length;f++)if(r.isArray(a[f].members))for(var y=0;y<a[f].members.length;y++)"node"==a[f].members[y].type&&(p[a[f].members[y].ref]=!0);else n.verbose&&console.warn("Relation",a[f].type+"/"+a[f].id,"ignored because it has no members");for(var g=new Object,d=new Object,f=0;f<t.length;f++)if(r.isArray(t[f].nodes)){g[t[f].id]=t[f];for(var y=0;y<t[f].nodes.length;y++)d[t[f].nodes[y]]=!0,t[f].nodes[y]=c[t[f].nodes[y]]}else n.verbose&&console.warn("Way",t[f].type+"/"+t[f].id,"ignored because it has no nodes");for(var b=new Array,f=0;f<e.length;f++)d[e[f].id]&&!p[e[f].id]||e[f].__is_uninteresting||b.push(e[f]);for(var m=new Array,f=0;f<a.length;f++)r.isArray(a[f].members)?m[a[f].id]=a[f]:n.verbose&&console.warn("Relation",a[f].type+"/"+a[f].id,"ignored because it has no members");for(var h={node:{},way:{},relation:{}},f=0;f<a.length;f++)if(r.isArray(a[f].members))for(var y=0;y<a[f].members.length;y++){var v=a[f].members[y].type,w=a[f].members[y].ref;"number"!=typeof w&&(w=w.replace("_fullGeom","")),h[v]?("undefined"==typeof h[v][w]&&(h[v][w]=[]),h[v][w].push({role:a[f].members[y].role,rel:a[f].id,reltags:a[f].tags})):n.verbose&&console.warn("Relation",a[f].type+"/"+a[f].id,"member",v+"/"+w,"ignored because it has an invalid type")}else n.verbose&&console.warn("Relation",a[f].type+"/"+a[f].id,"ignored because it has no members");var _,x={type:"FeatureCollection",features:new Array};for(f=0;f<b.length;f++)if("undefined"!=typeof b[f].lon&&"undefined"!=typeof b[f].lat){var k={type:"Feature",id:b[f].type+"/"+b[f].id,properties:{type:b[f].type,id:b[f].id,tags:b[f].tags||{},relations:h.node[b[f].id]||[],meta:s(b[f])},geometry:{type:"Point",coordinates:[+b[f].lon,+b[f].lat]}};b[f].__is_center_placeholder&&(k.properties.geometry="center"),x.features.push(k)}else n.verbose&&console.warn("POI",b[f].type+"/"+b[f].id,"ignored because it lacks coordinates");for(var A={type:"FeatureCollection",features:new Array},j={type:"FeatureCollection",features:new Array},f=0;f<a.length;f++)if("undefined"!=typeof a[f].tags&&("multipolygon"==a[f].tags.type||"boundary"==a[f].tags.type)){if(!r.isArray(a[f].members)){n.verbose&&console.warn("Multipolygon",a[f].type+"/"+a[f].id,"ignored because it has no members");continue}for(var E=0,y=0;y<a[f].members.length;y++)"outer"==a[f].members[y].role?E++:n.verbose&&"inner"!=a[f].members[y].role&&console.warn("Multipolygon",a[f].type+"/"+a[f].id,"member",a[f].members[y].type+"/"+a[f].members[y].ref,'ignored because it has an invalid role: "'+a[f].members[y].role+'"');if(a[f].members.forEach(function(e){g[e.ref]&&("outer"!==e.role||i(g[e.ref].tags,a[f].tags)||(g[e.ref].is_multipolygon_outline=!0),"inner"!==e.role||i(g[e.ref].tags)||(g[e.ref].is_multipolygon_outline=!0))}),0==E){n.verbose&&console.warn("Multipolygon relation",a[f].type+"/"+a[f].id,"ignored because it has no outer ways");continue}var P=!1;1!=E||i(a[f].tags,{type:!0})||(P=!0);var k=null;if(P){var O=a[f].members.filter(function(e){return"outer"===e.role})[0];if(O=g[O.ref],void 0===O){n.verbose&&console.warn("Multipolygon relation",a[f].type+"/"+a[f].id,"ignored because outer way",O.type+"/"+O.ref,"is missing");continue}O.is_multipolygon_outline=!0,k=u(O,a[f])}else k=u(a[f],a[f]);if(k===!1){n.verbose&&console.warn("Multipolygon relation",a[f].type+"/"+a[f].id,"ignored because it has invalid geometry");continue}j.features.push(k)}for(var f=0;f<t.length;f++)if(r.isArray(t[f].nodes)){if(!t[f].is_multipolygon_outline){"number"!=typeof t[f].id&&(t[f].id=+t[f].id.replace("_fullGeom","")),t[f].tainted=!1,t[f].hidden=!1;var T=new Array;for(y=0;y<t[f].nodes.length;y++)"object"==typeof t[f].nodes[y]?T.push([+t[f].nodes[y].lon,+t[f].nodes[y].lat]):(n.verbose&&console.warn("Way",t[f].type+"/"+t[f].id,"is tainted by an invalid node"),t[f].tainted=!0);if(T.length<=1)n.verbose&&console.warn("Way",t[f].type+"/"+t[f].id,"ignored because it contains too few nodes");else{var N="LineString";"undefined"!=typeof t[f].nodes[0]&&t[f].nodes[0]===t[f].nodes[t[f].nodes.length-1]&&("undefined"!=typeof t[f].tags&&l(t[f].tags)||t[f].__is_bounds_placeholder)&&(N="Polygon",T=[T]);var k={type:"Feature",id:t[f].type+"/"+t[f].id,properties:{type:t[f].type,id:t[f].id,tags:t[f].tags||{},relations:h.way[t[f].id]||[],meta:s(t[f])},geometry:{type:N,coordinates:T}};t[f].tainted&&(n.verbose&&console.warn("Way",t[f].type+"/"+t[f].id,"is tainted"),k.properties.tainted=!0),t[f].__is_bounds_placeholder&&(k.properties.geometry="bounds"),"LineString"==N?A.features.push(k):j.features.push(k)}}}else n.verbose&&console.warn("Way",t[f].type+"/"+t[f].id,"ignored because it has no nodes");return _={type:"FeatureCollection",features:[]},_.features=_.features.concat(j.features),_.features=_.features.concat(A.features),_.features=_.features.concat(x.features),n.flatProperties&&_.features.forEach(function(e){e.properties=r.merge(e.properties.meta,e.properties.tags,{id:e.properties.type+"/"+e.properties.id})}),_=o(_,!0)}function l(e){var t=n.polygonFeatures;if("function"==typeof t)return t(e);if("no"===e.area)return!1;for(var r in e){var o=e[r],a=t[r];if("undefined"!=typeof a&&"no"!==o){if(a===!0)return!0;if(a.included_values&&a.included_values[o]===!0)return!0;if(a.excluded_values&&a.excluded_values[o]!==!0)return!0}}return!1}n=r.merge({verbose:!1,flatProperties:!1,uninterestingTags:{source:!0,source_ref:!0,"source:ref":!0,history:!0,attribution:!0,created_by:!0,"tiger:county":!0,"tiger:tlid":!0,"tiger:upload_uuid":!0},polygonFeatures:a},n);var u;return u="undefined"!=typeof XMLDocument&&e instanceof XMLDocument||"undefined"==typeof XMLDocument&&e.childNodes?i(e):t(e)},i.toGeojson=i,n.exports=i},{"./lodash.custom.js":2,"geojson-rewind":3,"osm-polygon-features":6}],2:[function(e,n,t){(function(e){(function(){function r(){return S.pop()||[]}function o(e){return"function"!=typeof e.toString&&"string"==typeof(e+"")}function a(e){e.length=0,S.length<M&&S.push(e)}function i(e,n,t){n||(n=0),"undefined"==typeof t&&(t=e?e.length:0);for(var r=-1,o=t-n||0,a=Array(o<0?0:o);++r<o;)a[r]=e[n+r];return a}function s(){}function l(e){function n(){if(r){var e=i(r);pe.apply(e,arguments)}if(this instanceof n){var a=c(t.prototype),s=t.apply(a,e||arguments);return x(s)?s:a}return t.apply(o,e||arguments)}var t=e[0],r=e[2],o=e[4];return ke(n,e),n}function u(e,n,t,s,l){if(t){var c=t(e);if("undefined"!=typeof c)return c}var f=x(e);if(!f)return e;var p=se.call(e);if(!z[p]||!_e.nodeClass&&o(e))return e;var y=ve[p];switch(p){case G:case H:return new y((+e));case q:case V:return new y(e);case X:return c=y(e.source,L.exec(e)),c.lastIndex=e.lastIndex,c}var g=Ae(e);if(n){var d=!s;s||(s=r()),l||(l=r());for(var b=s.length;b--;)if(s[b]==e)return l[b];c=g?y(e.length):{}}else c=g?i(e):Se({},e);return g&&(fe.call(e,"index")&&(c.index=e.index),fe.call(e,"input")&&(c.input=e.input)),n?(s.push(e),l.push(c),(g?Ne:Me)(e,function(e,r){c[r]=u(e,n,t,s,l)}),d&&(a(s),a(l)),c):c}function c(e,n){return x(e)?be(e):{}}function f(e,n,t){if("function"!=typeof e)return T;if("undefined"==typeof n||!("prototype"in e))return e;var r=e.__bindData__;if("undefined"==typeof r&&(_e.funcNames&&(r=!e.name),r=r||!_e.funcDecomp,!r)){var o=ue.call(e);_e.funcNames||(r=!B.test(o)),r||(r=F.test(o),ke(e,r))}if(r===!1||r!==!0&&1&r[1])return e;switch(t){case 1:return function(t){return e.call(n,t)};case 2:return function(t,r){return e.call(n,t,r)};case 3:return function(t,r,o){return e.call(n,t,r,o)};case 4:return function(t,r,o,a){return e.call(n,t,r,o,a)}}return O(e,n)}function p(e){function n(){var e=u?s:this;if(o){var b=i(o);pe.apply(b,arguments)}if((a||y)&&(b||(b=i(arguments)),a&&pe.apply(b,a),y&&b.length<l))return r|=16,p([t,g?r:r&-4,b,null,s,l]);if(b||(b=arguments),f&&(t=e[d]),this instanceof n){e=c(t.prototype);var m=t.apply(e,b);return x(m)?m:e}return t.apply(e,b)}var t=e[0],r=e[1],o=e[2],a=e[3],s=e[4],l=e[5],u=1&r,f=2&r,y=4&r,g=8&r,d=t;return ke(n,e),n}function y(e,n,t,r,o){(Ae(n)?E:Me)(n,function(n,a){var i,s,l=n,u=e[a];if(n&&((s=Ae(n))||Le(n))){for(var c=r.length;c--;)if(i=r[c]==n){u=o[c];break}if(!i){var f;t&&(l=t(u,n),(f="undefined"!=typeof l)&&(u=l)),f||(u=s?Ae(u)?u:[]:Le(u)?u:{}),r.push(n),o.push(u),f||y(u,n,t,r,o)}}else t&&(l=t(u,n),"undefined"==typeof l&&(l=n)),"undefined"!=typeof l&&(u=l);e[a]=u})}function g(e,n,t,r,o,a){var s=1&n,u=2&n,c=4&n,f=16&n,y=32&n;if(!u&&!_(e))throw new TypeError;f&&!t.length&&(n&=-17,f=t=!1),y&&!r.length&&(n&=-33,y=r=!1);var d=e&&e.__bindData__;if(d&&d!==!0)return d=i(d),d[2]&&(d[2]=i(d[2])),d[3]&&(d[3]=i(d[3])),!s||1&d[1]||(d[4]=o),!s&&1&d[1]&&(n|=8),!c||4&d[1]||(d[5]=a),f&&pe.apply(d[2]||(d[2]=[]),t),y&&ge.apply(d[3]||(d[3]=[]),r),d[1]|=n,g.apply(null,d);var b=1==n||17===n?l:p;return b([e,n,t,r,o,a])}function d(){K.shadowedProps=I,K.array=K.bottom=K.loop=K.top="",K.init="iterable",K.useHas=!0;for(var e,n=0;e=arguments[n];n++)for(var t in e)K[t]=e[t];var r=K.args;K.firstArg=/^[^,]+/.exec(r)[0];var o=Function("baseCreateCallback, errorClass, errorProto, hasOwnProperty, indicatorObject, isArguments, isArray, isString, keys, objectProto, objectTypes, nonEnumProps, stringClass, stringProto, toString","return function("+r+") {\n"+xe(K)+"\n}");return o(f,U,oe,fe,C,h,Ae,A,K.keys,ae,Q,we,V,ie,se)}function b(e){return"function"==typeof e&&le.test(e)}function m(e){var n,t;return!(!(e&&se.call(e)==$&&(n=e.constructor,!_(n)||n instanceof n))||!_e.argsClass&&h(e)||!_e.nodeClass&&o(e))&&(_e.ownLast?(Ce(e,function(e,n,r){return t=fe.call(r,n),!1}),t!==!1):(Ce(e,function(e,n){t=n}),"undefined"==typeof t||fe.call(e,t)))}function h(e){return e&&"object"==typeof e&&"number"==typeof e.length&&se.call(e)==D||!1}function v(e,n,t,r){return"boolean"!=typeof n&&null!=n&&(r=t,t=n,n=!1),u(e,n,"function"==typeof t&&f(t,r,1))}function w(e){var n=!0;if(!e)return n;var t=se.call(e),r=e.length;return t==R||t==V||(_e.argsClass?t==D:h(e))||t==$&&"number"==typeof r&&_(e.splice)?!r:(Me(e,function(){return n=!1}),n)}function _(e){return"function"==typeof e}function x(e){return!(!e||!Q[typeof e])}function A(e){return"string"==typeof e||e&&"object"==typeof e&&se.call(e)==V||!1}function j(e){var n=arguments,t=2;if(!x(e))return e;if("number"!=typeof n[2]&&(t=n.length),t>3&&"function"==typeof n[t-2])var o=f(n[--t-1],n[t--],2);else t>2&&"function"==typeof n[t-1]&&(o=n[--t]);for(var s=i(arguments,1,t),l=-1,u=r(),c=r();++l<t;)y(e,s[l],o,u,c);return a(u),a(c),e}function E(e,n,t){if(n&&"undefined"==typeof t&&Ae(e))for(var r=-1,o=e.length;++r<o&&n(e[r],r,e)!==!1;);else Ne(e,n,t);return e}function P(e){for(var n=-1,t=e?e.length:0,r=[];++n<t;){var o=e[n];o&&r.push(o)}return r}function O(e,n){return arguments.length>2?g(e,17,i(arguments,2),null,n):g(e,1,null,null,n)}function T(e){return e}function N(){}var S=[],C={},M=40,L=/\w*$/,B=/^\s*function[ \n\r\t]+\w/,F=/\bthis\b/,I=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"],D="[object Arguments]",R="[object Array]",G="[object Boolean]",H="[object Date]",U="[object Error]",W="[object Function]",q="[object Number]",$="[object Object]",X="[object RegExp]",V="[object String]",z={};z[W]=!1,z[D]=z[R]=z[G]=z[H]=z[q]=z[$]=z[X]=z[V]=!0;var J={configurable:!1,enumerable:!1,value:null,writable:!1},K={args:"",array:null,bottom:"",firstArg:"",init:"",keys:null,loop:"",shadowedProps:null,support:null,top:"",useHas:!1},Q={boolean:!1,function:!0,object:!0,number:!1,string:!1,undefined:!1},Y=Q[typeof window]&&window||this,Z=Q[typeof t]&&t&&!t.nodeType&&t,ee=Q[typeof n]&&n&&!n.nodeType&&n,ne=ee&&ee.exports===Z&&Z,te=Q[typeof e]&&e;!te||te.global!==te&&te.window!==te||(Y=te);var re=[],oe=Error.prototype,ae=Object.prototype,ie=String.prototype,se=ae.toString,le=RegExp("^"+String(se).replace(/[.*+?^${}()|[\]\\]/g,"\\$&").replace(/toString| for [^\]]+/g,".*?")+"$"),ue=Function.prototype.toString,ce=b(ce=Object.getPrototypeOf)&&ce,fe=ae.hasOwnProperty,pe=re.push,ye=ae.propertyIsEnumerable,ge=re.unshift,de=function(){try{var e={},n=b(n=Object.defineProperty)&&n,t=n(e,e,e)&&n}catch(e){}return t}(),be=b(be=Object.create)&&be,me=b(me=Array.isArray)&&me,he=b(he=Object.keys)&&he,ve={};ve[R]=Array,ve[G]=Boolean,ve[H]=Date,ve[W]=Function,ve[$]=Object,ve[q]=Number,ve[X]=RegExp,ve[V]=String;var we={};we[R]=we[H]=we[q]={constructor:!0,toLocaleString:!0,toString:!0,valueOf:!0},we[G]=we[V]={constructor:!0,toString:!0,valueOf:!0},we[U]=we[W]=we[X]={constructor:!0,toString:!0},we[$]={constructor:!0},function(){for(var e=I.length;e--;){var n=I[e];for(var t in we)fe.call(we,t)&&!fe.call(we[t],n)&&(we[t][n]=!1)}}();var _e=s.support={};!function(){var e=function(){this.x=1},n={0:1,length:1},t=[];e.prototype={valueOf:1,y:1};for(var r in new e)t.push(r);for(r in arguments);_e.argsClass=se.call(arguments)==D,_e.argsObject=arguments.constructor==Object&&!(arguments instanceof Array),_e.enumErrorProps=ye.call(oe,"message")||ye.call(oe,"name"),_e.enumPrototypes=ye.call(e,"prototype"),_e.funcDecomp=!b(Y.WinRTError)&&F.test(function(){return this}),_e.funcNames="string"==typeof Function.name,_e.nonEnumArgs=0!=r,_e.nonEnumShadows=!/valueOf/.test(t),_e.ownLast="x"!=t[0],_e.spliceObjects=(re.splice.call(n,0,1),!n[0]),_e.unindexedChars="x"[0]+Object("x")[0]!="xx";try{_e.nodeClass=!(se.call(document)==$&&!({toString:0}+""))}catch(e){_e.nodeClass=!0}}(1);var xe=function(e){var n="var index, iterable = "+e.firstArg+", result = "+e.init+";\nif (!iterable) return result;\n"+e.top+";";e.array?(n+="\nvar length = iterable.length; index = -1;\nif ("+e.array+") {  ",_e.unindexedChars&&(n+="\n  if (isString(iterable)) {\n    iterable = iterable.split('')\n  }  "),n+="\n  while (++index < length) {\n    "+e.loop+";\n  }\n}\nelse {  "):_e.nonEnumArgs&&(n+="\n  var length = iterable.length; index = -1;\n  if (length && isArguments(iterable)) {\n    while (++index < length) {\n      index += '';\n      "+e.loop+";\n    }\n  } else {  "),_e.enumPrototypes&&(n+="\n  var skipProto = typeof iterable == 'function';\n  "),_e.enumErrorProps&&(n+="\n  var skipErrorProps = iterable === errorProto || iterable instanceof Error;\n  ");var t=[];if(_e.enumPrototypes&&t.push('!(skipProto && index == "prototype")'),_e.enumErrorProps&&t.push('!(skipErrorProps && (index == "message" || index == "name"))'),e.useHas&&e.keys)n+="\n  var ownIndex = -1,\n      ownProps = objectTypes[typeof iterable] && keys(iterable),\n      length = ownProps ? ownProps.length : 0;\n\n  while (++ownIndex < length) {\n    index = ownProps[ownIndex];\n",t.length&&(n+="    if ("+t.join(" && ")+") {\n  "),n+=e.loop+";    ",t.length&&(n+="\n    }"),n+="\n  }  ";else if(n+="\n  for (index in iterable) {\n",e.useHas&&t.push("hasOwnProperty.call(iterable, index)"),t.length&&(n+="    if ("+t.join(" && ")+") {\n  "),n+=e.loop+";    ",t.length&&(n+="\n    }"),n+="\n  }    ",_e.nonEnumShadows){for(n+="\n\n  if (iterable !== objectProto) {\n    var ctor = iterable.constructor,\n        isProto = iterable === (ctor && ctor.prototype),\n        className = iterable === stringProto ? stringClass : iterable === errorProto ? errorClass : toString.call(iterable),\n        nonEnum = nonEnumProps[className];\n      ",k=0;k<7;k++)n+="\n    index = '"+e.shadowedProps[k]+"';\n    if ((!(isProto && nonEnum[index]) && hasOwnProperty.call(iterable, index))",e.useHas||(n+=" || (!nonEnum[index] && iterable[index] !== objectProto[index])"),n+=") {\n      "+e.loop+";\n    }      ";n+="\n  }    "}return(e.array||_e.nonEnumArgs)&&(n+="\n}"),n+=e.bottom+";\nreturn result"};be||(c=function(){function e(){}return function(n){if(x(n)){e.prototype=n;var t=new e;e.prototype=null}return t||Y.Object()}}());var ke=de?function(e,n){J.value=n,de(e,"__bindData__",J)}:N;_e.argsClass||(h=function(e){return e&&"object"==typeof e&&"number"==typeof e.length&&fe.call(e,"callee")&&!ye.call(e,"callee")||!1});var Ae=me||function(e){return e&&"object"==typeof e&&"number"==typeof e.length&&se.call(e)==R||!1},je=d({args:"object",init:"[]",top:"if (!(objectTypes[typeof object])) return result",loop:"result.push(index)"}),Ee=he?function(e){return x(e)?_e.enumPrototypes&&"function"==typeof e||_e.nonEnumArgs&&e.length&&h(e)?je(e):he(e):[]}:je,Pe={args:"collection, callback, thisArg",top:"callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3)",array:"typeof length == 'number'",keys:Ee,loop:"if (callback(iterable[index], index, collection) === false) return result"},Oe={args:"object, source, guard",top:"var args = arguments,\n    argsIndex = 0,\n    argsLength = typeof guard == 'number' ? 2 : args.length;\nwhile (++argsIndex < argsLength) {\n  iterable = args[argsIndex];\n  if (iterable && objectTypes[typeof iterable]) {",keys:Ee,loop:"if (typeof result[index] == 'undefined') result[index] = iterable[index]",bottom:"  }\n}"},Te={top:"if (!objectTypes[typeof iterable]) return result;\n"+Pe.top,array:!1},Ne=d(Pe),Se=d(Oe,{top:Oe.top.replace(";",";\nif (argsLength > 3 && typeof args[argsLength - 2] == 'function') {\n  var callback = baseCreateCallback(args[--argsLength - 1], args[argsLength--], 2);\n} else if (argsLength > 2 && typeof args[argsLength - 1] == 'function') {\n  callback = args[--argsLength];\n}"),loop:"result[index] = callback ? callback(result[index], iterable[index]) : iterable[index]"}),Ce=d(Pe,Te,{useHas:!1}),Me=d(Pe,Te);_(/x/)&&(_=function(e){return"function"==typeof e&&se.call(e)==W});var Le=ce?function(e){if(!e||se.call(e)!=$||!_e.argsClass&&h(e))return!1;var n=e.valueOf,t=b(n)&&(t=ce(n))&&ce(t);return t?e==t||ce(e)==t:m(e)}:m;s.assign=Se,s.bind=O,s.compact=P,s.forEach=E,s.forIn=Ce,s.forOwn=Me,s.keys=Ee,s.merge=j,s.each=E,s.extend=Se,s.clone=v,s.identity=T,s.isArguments=h,s.isArray=Ae,s.isEmpty=w,s.isFunction=_,s.isObject=x,s.isPlainObject=Le,s.isString=A,s.noop=N,s.VERSION="2.4.1",Z&&ee&&ne&&((ee.exports=s)._=s)}).call(this)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],3:[function(e,n,t){function r(e,n){switch(e&&e.type||null){case"FeatureCollection":return e.features=e.features.map(o(r,n)),e;case"Feature":return e.geometry=r(e.geometry,n),e;case"Polygon":case"MultiPolygon":return a(e,n);default:return e}}function o(e,n){return function(t){return e(t,n)}}function a(e,n){return"Polygon"===e.type?e.coordinates=i(e.coordinates,n):"MultiPolygon"===e.type&&(e.coordinates=e.coordinates.map(o(i,n))),e}function i(e,n){n=!!n,e[0]=s(e[0],!n);for(var t=1;t<e.length;t++)e[t]=s(e[t],n);return e}function s(e,n){return l(e)===n?e:e.reverse()}function l(e){return u.ring(e)>=0}var u=e("geojson-area");n.exports=r},{"geojson-area":4}],4:[function(e,n,t){function r(e){if("Polygon"===e.type)return o(e.coordinates);if("MultiPolygon"===e.type){for(var n=0,t=0;t<e.coordinates.length;t++)n+=o(e.coordinates[t]);return n}return null}function o(e){var n=0;if(e&&e.length>0){n+=Math.abs(a(e[0]));for(var t=1;t<e.length;t++)n-=Math.abs(a(e[t]))}return n}function a(e){var n=0;if(e.length>2){for(var t,r,o=0;o<e.length-1;o++)t=e[o],r=e[o+1],n+=i(r[0]-t[0])*(2+Math.sin(i(t[1]))+Math.sin(i(r[1])));n=n*s.RADIUS*s.RADIUS/2}return n}function i(e){return e*Math.PI/180}var s=e("wgs84");n.exports.geometry=r,n.exports.ring=a},{wgs84:5}],5:[function(e,n,t){n.exports.RADIUS=6378137,n.exports.FLATTENING=1/298.257223563,n.exports.POLAR_RADIUS=6356752.3142},{}],6:[function(e,n,t){n.exports=e("./polygon-features.json")},{"./polygon-features.json":7}],7:[function(e,n,t){n.exports=[{key:"building",polygon:"all"},{key:"highway",polygon:"whitelist",values:["services","rest_area","escape","elevator"]},{key:"natural",polygon:"blacklist",values:["coastline","cliff","ridge","arete","tree_row"]},{key:"landuse",polygon:"all"},{key:"waterway",polygon:"whitelist",values:["riverbank","dock","boatyard","dam"]},{key:"amenity",polygon:"all"},{key:"leisure",polygon:"all"},{key:"barrier",polygon:"whitelist",values:["city_wall","ditch","hedge","retaining_wall","wall","spikes"]},{key:"railway",polygon:"whitelist",values:["station","turntable","roundhouse","platform"]},{key:"area",polygon:"all"},{key:"boundary",polygon:"all"},{key:"man_made",polygon:"blacklist",values:["cutline","embankment","pipeline"]},{key:"power",polygon:"whitelist",values:["plant","substation","generator","transformer"]},{key:"place",polygon:"all"},{key:"shop",polygon:"all"},{key:"aeroway",polygon:"blacklist",values:["taxiway"]},{key:"tourism",polygon:"all"},{key:"historic",polygon:"all"},{key:"public_transport",polygon:"all"},{key:"office",polygon:"all"},{key:"building:part",polygon:"all"},{key:"military",polygon:"all"},{key:"ruins",polygon:"all"},{key:"area:highway",polygon:"all"},{key:"craft",polygon:"all"},{key:"golf",polygon:"all"}]},{}]},{},[1])(1)});
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.shpwrite = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// when used in node, this will actually load the util module we depend on
// versus loading the builtin util module as happens otherwise
// this is a bug in node module loading as far as I am concerned
var util = require('util/');

var pSlice = Array.prototype.slice;
var hasOwn = Object.prototype.hasOwnProperty;

// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  }
  else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = stackStartFunction.name;
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function replacer(key, value) {
  if (util.isUndefined(value)) {
    return '' + value;
  }
  if (util.isNumber(value) && !isFinite(value)) {
    return value.toString();
  }
  if (util.isFunction(value) || util.isRegExp(value)) {
    return value.toString();
  }
  return value;
}

function truncate(s, n) {
  if (util.isString(s)) {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}

function getMessage(self) {
  return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' +
         self.operator + ' ' +
         truncate(JSON.stringify(self.expected, replacer), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

function _deepEqual(actual, expected) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
    if (actual.length != expected.length) return false;

    for (var i = 0; i < actual.length; i++) {
      if (actual[i] !== expected[i]) return false;
    }

    return true;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!util.isObject(actual) && !util.isObject(expected)) {
    return actual == expected;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b) {
  if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b)) {
    return a === b;
  }
  var aIsArgs = isArguments(a),
      bIsArgs = isArguments(b);
  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
    return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b);
  }
  var ka = objectKeys(a),
      kb = objectKeys(b),
      key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key])) return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  } else if (actual instanceof expected) {
    return true;
  } else if (expected.call({}, actual) === true) {
    return true;
  }

  return false;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (util.isString(expected)) {
    message = expected;
    expected = null;
  }

  try {
    block();
  } catch (e) {
    actual = e;
  }

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  if (!shouldThrow && expectedException(actual, expected)) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws.apply(this, [true].concat(pSlice.call(arguments)));
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/message) {
  _throws.apply(this, [false].concat(pSlice.call(arguments)));
};

assert.ifError = function(err) { if (err) {throw err;}};

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

},{"util/":53}],2:[function(require,module,exports){
;(function (exports) {
  'use strict'

  var i
  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
  var lookup = []
  for (i = 0; i < code.length; i++) {
    lookup[i] = code[i]
  }
  var revLookup = []

  for (i = 0; i < code.length; ++i) {
    revLookup[code.charCodeAt(i)] = i
  }
  revLookup['-'.charCodeAt(0)] = 62
  revLookup['_'.charCodeAt(0)] = 63

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

  function decode (elt) {
    var v = revLookup[elt.charCodeAt(0)]
    return v !== undefined ? v : -1
  }

  function b64ToByteArray (b64) {
    var i, j, l, tmp, placeHolders, arr

    if (b64.length % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4')
    }

    // the number of equal signs (place holders)
    // if there are two placeholders, than the two characters before it
    // represent one byte
    // if there is only one, then the three characters before it represent 2 bytes
    // this is just a cheap hack to not do indexOf twice
    var len = b64.length
    placeHolders = b64.charAt(len - 2) === '=' ? 2 : b64.charAt(len - 1) === '=' ? 1 : 0

    // base64 is 4/3 + up to two characters of the original data
    arr = new Arr(b64.length * 3 / 4 - placeHolders)

    // if there are placeholders, only get up to the last complete 4 chars
    l = placeHolders > 0 ? b64.length - 4 : b64.length

    var L = 0

    function push (v) {
      arr[L++] = v
    }

    for (i = 0, j = 0; i < l; i += 4, j += 3) {
      tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
      push((tmp & 0xFF0000) >> 16)
      push((tmp & 0xFF00) >> 8)
      push(tmp & 0xFF)
    }

    if (placeHolders === 2) {
      tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
      push(tmp & 0xFF)
    } else if (placeHolders === 1) {
      tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
      push((tmp >> 8) & 0xFF)
      push(tmp & 0xFF)
    }

    return arr
  }

  function encode (num) {
    return lookup[num]
  }

  function tripletToBase64 (num) {
    return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
  }

  function encodeChunk (uint8, start, end) {
    var temp
    var output = []
    for (var i = start; i < end; i += 3) {
      temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
      output.push(tripletToBase64(temp))
    }
    return output.join('')
  }

  function uint8ToBase64 (uint8) {
    var i
    var extraBytes = uint8.length % 3 // if we have 1 byte left, pad 2 bytes
    var output = ''
    var parts = []
    var temp, length
    var maxChunkLength = 16383 // must be multiple of 3

    // go through the array every three bytes, we'll deal with trailing stuff later

    for (i = 0, length = uint8.length - extraBytes; i < length; i += maxChunkLength) {
      parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > length ? length : (i + maxChunkLength)))
    }

    // pad the end with zeros, but make sure to not forget the extra bytes
    switch (extraBytes) {
      case 1:
        temp = uint8[uint8.length - 1]
        output += encode(temp >> 2)
        output += encode((temp << 4) & 0x3F)
        output += '=='
        break
      case 2:
        temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
        output += encode(temp >> 10)
        output += encode((temp >> 4) & 0x3F)
        output += encode((temp << 2) & 0x3F)
        output += '='
        break
      default:
        break
    }

    parts.push(output)

    return parts.join('')
  }

  exports.toByteArray = b64ToByteArray
  exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

},{}],3:[function(require,module,exports){
(function (global){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192 // not used by this implementation

var rootParent = {}

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.foo = function () { return 42 }
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */
function Buffer (arg) {
  if (!(this instanceof Buffer)) {
    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
    if (arguments.length > 1) return new Buffer(arg, arguments[1])
    return new Buffer(arg)
  }

  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    this.length = 0
    this.parent = undefined
  }

  // Common case.
  if (typeof arg === 'number') {
    return fromNumber(this, arg)
  }

  // Slightly less common case.
  if (typeof arg === 'string') {
    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
  }

  // Unusual.
  return fromObject(this, arg)
}

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function fromNumber (that, length) {
  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < length; i++) {
      that[i] = 0
    }
  }
  return that
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

  // Assumption: byteLength() return value is always < kMaxLength.
  var length = byteLength(string, encoding) | 0
  that = allocate(that, length)

  that.write(string, encoding)
  return that
}

function fromObject (that, object) {
  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

  if (isArray(object)) return fromArray(that, object)

  if (object == null) {
    throw new TypeError('must start with number, buffer, array or string')
  }

  if (typeof ArrayBuffer !== 'undefined') {
    if (object.buffer instanceof ArrayBuffer) {
      return fromTypedArray(that, object)
    }
    if (object instanceof ArrayBuffer) {
      return fromArrayBuffer(that, object)
    }
  }

  if (object.length) return fromArrayLike(that, object)

  return fromJsonObject(that, object)
}

function fromBuffer (that, buffer) {
  var length = checked(buffer.length) | 0
  that = allocate(that, length)
  buffer.copy(that, 0, 0, length)
  return that
}

function fromArray (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

// Duplicate of fromArray() to keep fromArray() monomorphic.
function fromTypedArray (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  // Truncating the elements is probably not what people expect from typed
  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
  // of the old Buffer constructor.
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(array)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromTypedArray(that, new Uint8Array(array))
  }
  return that
}

function fromArrayLike (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
// Returns a zero-length buffer for inputs that don't conform to the spec.
function fromJsonObject (that, object) {
  var array
  var length = 0

  if (object.type === 'Buffer' && isArray(object.data)) {
    array = object.data
    length = checked(array.length) | 0
  }
  that = allocate(that, length)

  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
} else {
  // pre-set for values that may exist in the future
  Buffer.prototype.length = undefined
  Buffer.prototype.parent = undefined
}

function allocate (that, length) {
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that.length = length
  }

  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
  if (fromPool) that.parent = rootParent

  return that
}

function checked (length) {
  // Note: cannot use `length < kMaxLength` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (subject, encoding) {
  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

  var buf = new Buffer(subject, encoding)
  delete buf.parent
  return buf
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  var i = 0
  var len = Math.min(x, y)
  while (i < len) {
    if (a[i] !== b[i]) break

    ++i
  }

  if (i !== len) {
    x = a[i]
    y = b[i]
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

  if (list.length === 0) {
    return new Buffer(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; i++) {
      length += list[i].length
    }
  }

  var buf = new Buffer(length)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

function byteLength (string, encoding) {
  if (typeof string !== 'string') string = '' + string

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'binary':
      // Deprecated
      case 'raw':
      case 'raws':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  start = start | 0
  end = end === undefined || end === Infinity ? this.length : end | 0

  if (!encoding) encoding = 'utf8'
  if (start < 0) start = 0
  if (end > this.length) end = this.length
  if (end <= start) return ''

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'binary':
        return binarySlice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return 0
  return Buffer.compare(this, b)
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
  byteOffset >>= 0

  if (this.length === 0) return -1
  if (byteOffset >= this.length) return -1

  // Negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

  if (typeof val === 'string') {
    if (val.length === 0) return -1 // special case: looking for empty string always fails
    return String.prototype.indexOf.call(this, val, byteOffset)
  }
  if (Buffer.isBuffer(val)) {
    return arrayIndexOf(this, val, byteOffset)
  }
  if (typeof val === 'number') {
    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
    }
    return arrayIndexOf(this, [ val ], byteOffset)
  }

  function arrayIndexOf (arr, val, byteOffset) {
    var foundIndex = -1
    for (var i = 0; byteOffset + i < arr.length; i++) {
      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
      } else {
        foundIndex = -1
      }
    }
    return -1
  }

  throw new TypeError('val must be string, number or Buffer')
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) throw new Error('Invalid hex string')
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function binaryWrite (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    var swap = encoding
    encoding = offset
    offset = length | 0
    length = swap
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'binary':
        return binaryWrite(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function binarySlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
  }

  if (newBuf.length) newBuf.parent = this.parent || this

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('index out of range')
  if (offset < 0) throw new RangeError('index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; i--) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; i++) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function fill (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (end < start) throw new RangeError('end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

  var i
  if (typeof value === 'number') {
    for (i = start; i < end; i++) {
      this[i] = value
    }
  } else {
    var bytes = utf8ToBytes(value.toString())
    var len = bytes.length
    for (i = start; i < end; i++) {
      this[i] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; i++) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"base64-js":2,"ieee754":10,"isarray":4}],4:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],5:[function(require,module,exports){
module.exports.structure = require('./src/structure');

},{"./src/structure":9}],6:[function(require,module,exports){
var fieldSize = require('./fieldsize');

var types = {
    string: 'C',
    number: 'N',
    boolean: 'L',
    // type to use if all values of a field are null
    null: 'C'
};

module.exports.multi = multi;
module.exports.bytesPer = bytesPer;
module.exports.obj = obj;

function multi(features) {
    var fields = {};
    features.forEach(collect);
    function collect(f) { inherit(fields, f); }
    return obj(fields);
}

/**
 * @param {Object} a
 * @param {Object} b
 * @returns {Object}
 */
function inherit(a, b) {
    for (var i in b) {
        var isDef = typeof b[i] !== 'undefined' && b[i] !== null;
        if (typeof a[i] === 'undefined' || isDef) {
          a[i] = b[i];
        }
    }
    return a;
}

function obj(_) {
    var fields = {}, o = [];
    for (var p in _) fields[p] = _[p] === null ? 'null' : typeof _[p];
    for (var n in fields) {
        var t = types[fields[n]];
        if(t){
             o.push({
                name: n,
                type: t,
                size: fieldSize[t]
            });
        }
    }
    return o;
}

/**
 * @param {Array} fields
 * @returns {Array}
 */
function bytesPer(fields) {
    // deleted flag
    return fields.reduce(function(memo, f) { return memo + f.size; }, 1);
}

},{"./fieldsize":7}],7:[function(require,module,exports){
module.exports = {
    // string
    C: 254,
    // boolean
    L: 1,
    // date
    D: 8,
    // number
    N: 18,
    // number
    M: 18,
    // number, float
    F: 18,
    // number
    B: 8,
};

},{}],8:[function(require,module,exports){
/**
 * @param {string} str
 * @param {number} len
 * @param {string} char
 * @returns {string}
 */
module.exports.lpad = function lpad(str, len, char) {
    while (str.length < len) { str = char + str; } return str;
};

/**
 * @param {string} str
 * @param {number} len
 * @param {string} char
 * @returns {string}
 */
module.exports.rpad = function rpad(str, len, char) {
    while (str.length < len) { str = str + char; } return str;
};

/**
 * @param {object} view
 * @param {number} fieldLength
 * @param {string} str
 * @param {number} offset
 * @returns {number}
 */
module.exports.writeField = function writeField(view, fieldLength, str, offset) {
    for (var i = 0; i < fieldLength; i++) {
        view.setUint8(offset, str.charCodeAt(i)); offset++;
    }
    return offset;
};

},{}],9:[function(require,module,exports){
var fieldSize = require('./fieldsize'),
    lib = require('./lib'),
    fields = require('./fields');

/**
 * @param {Array} data
 * @param {Array} meta
 * @returns {Object} view
 */
module.exports = function structure(data, meta) {

    var field_meta = meta || fields.multi(data),
        fieldDescLength = (32 * field_meta.length) + 1,
        bytesPerRecord = fields.bytesPer(field_meta), // deleted flag
        buffer = new ArrayBuffer(
            // field header
            fieldDescLength +
            // header
            32 +
            // contents
            (bytesPerRecord * data.length) +
            // EOF marker
            1
    ),
        now = new Date(),
        view = new DataView(buffer);

    // version number - dBase III
    view.setUint8(0, 0x03);
    // date of last update
    view.setUint8(1, now.getFullYear() - 1900);
    view.setUint8(2, now.getMonth());
    view.setUint8(3, now.getDate());
    // number of records
    view.setUint32(4, data.length, true);

    // length of header
    var headerLength = fieldDescLength + 32;
    view.setUint16(8, headerLength, true);
    // length of each record
    view.setUint16(10, bytesPerRecord, true);

    // Terminator
    view.setInt8(32 + fieldDescLength - 1, 0x0D);

    field_meta.forEach(function(f, i) {
        // field name
        f.name.split('').slice(0, 8).forEach(function(c, x) {
            view.setInt8(32 + i * 32 + x, c.charCodeAt(0));
        });
        // field type
        view.setInt8(32 + i * 32 + 11, f.type.charCodeAt(0));
        // field length
        view.setInt8(32 + i * 32 + 16, f.size);
        if (f.type == 'N') view.setInt8(32 + i * 32 + 17, 0);
    });

    offset = fieldDescLength + 32;

    data.forEach(function(row, num) {
        // delete flag: this is not deleted
        view.setUint8(offset, 32);
        offset++;
        field_meta.forEach(function(f) {
            var val = row[f.name];
            if (val === null || typeof val === 'undefined') val = '';

            switch (f.type) {
                // boolean
                case 'L':
                    view.setUint8(offset, val ? 84 : 70);
                    offset++;
                    break;

                // date
                case 'D':
                    offset = lib.writeField(view, 8,
                        lib.lpad(val.toString(), 8, ' '), offset);
                    break;

                // number
                case 'N':
                    offset = lib.writeField(view, f.size,
                        lib.lpad(val.toString(), f.size, ' ').substr(0, 18),
                        offset);
                    break;

                // string
                case 'C':
                    offset = lib.writeField(view, f.size,
                        lib.rpad(val.toString(), f.size, ' '), offset);
                    break;

                default:
                    throw new Error('Unknown field type');
            }
        });
    });

    // EOF flag
    view.setUint8(offset, 0x1A);

    return view;
};

},{"./fields":6,"./fieldsize":7,"./lib":8}],10:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],11:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],12:[function(require,module,exports){
'use strict';
// private property
var _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";


// public method for encoding
exports.encode = function(input, utf8) {
    var output = "";
    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
    var i = 0;

    while (i < input.length) {

        chr1 = input.charCodeAt(i++);
        chr2 = input.charCodeAt(i++);
        chr3 = input.charCodeAt(i++);

        enc1 = chr1 >> 2;
        enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
        enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
        enc4 = chr3 & 63;

        if (isNaN(chr2)) {
            enc3 = enc4 = 64;
        }
        else if (isNaN(chr3)) {
            enc4 = 64;
        }

        output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4);

    }

    return output;
};

// public method for decoding
exports.decode = function(input, utf8) {
    var output = "";
    var chr1, chr2, chr3;
    var enc1, enc2, enc3, enc4;
    var i = 0;

    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

    while (i < input.length) {

        enc1 = _keyStr.indexOf(input.charAt(i++));
        enc2 = _keyStr.indexOf(input.charAt(i++));
        enc3 = _keyStr.indexOf(input.charAt(i++));
        enc4 = _keyStr.indexOf(input.charAt(i++));

        chr1 = (enc1 << 2) | (enc2 >> 4);
        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
        chr3 = ((enc3 & 3) << 6) | enc4;

        output = output + String.fromCharCode(chr1);

        if (enc3 != 64) {
            output = output + String.fromCharCode(chr2);
        }
        if (enc4 != 64) {
            output = output + String.fromCharCode(chr3);
        }

    }

    return output;

};

},{}],13:[function(require,module,exports){
'use strict';
function CompressedObject() {
    this.compressedSize = 0;
    this.uncompressedSize = 0;
    this.crc32 = 0;
    this.compressionMethod = null;
    this.compressedContent = null;
}

CompressedObject.prototype = {
    /**
     * Return the decompressed content in an unspecified format.
     * The format will depend on the decompressor.
     * @return {Object} the decompressed content.
     */
    getContent: function() {
        return null; // see implementation
    },
    /**
     * Return the compressed content in an unspecified format.
     * The format will depend on the compressed conten source.
     * @return {Object} the compressed content.
     */
    getCompressedContent: function() {
        return null; // see implementation
    }
};
module.exports = CompressedObject;

},{}],14:[function(require,module,exports){
'use strict';
exports.STORE = {
    magic: "\x00\x00",
    compress: function(content, compressionOptions) {
        return content; // no compression
    },
    uncompress: function(content) {
        return content; // no compression
    },
    compressInputType: null,
    uncompressInputType: null
};
exports.DEFLATE = require('./flate');

},{"./flate":19}],15:[function(require,module,exports){
'use strict';

var utils = require('./utils');

var table = [
    0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA,
    0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3,
    0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988,
    0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91,
    0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE,
    0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,
    0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC,
    0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5,
    0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172,
    0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B,
    0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940,
    0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59,
    0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116,
    0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,
    0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924,
    0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,
    0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A,
    0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,
    0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818,
    0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,
    0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E,
    0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457,
    0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C,
    0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65,
    0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2,
    0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB,
    0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0,
    0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9,
    0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086,
    0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,
    0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4,
    0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD,
    0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A,
    0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683,
    0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,
    0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1,
    0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE,
    0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7,
    0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC,
    0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,
    0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252,
    0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B,
    0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60,
    0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79,
    0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,
    0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F,
    0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04,
    0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D,
    0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A,
    0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713,
    0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38,
    0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21,
    0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E,
    0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777,
    0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C,
    0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45,
    0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2,
    0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB,
    0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0,
    0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,
    0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6,
    0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF,
    0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,
    0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D
];

/**
 *
 *  Javascript crc32
 *  http://www.webtoolkit.info/
 *
 */
module.exports = function crc32(input, crc) {
    if (typeof input === "undefined" || !input.length) {
        return 0;
    }

    var isArray = utils.getTypeOf(input) !== "string";

    if (typeof(crc) == "undefined") {
        crc = 0;
    }
    var x = 0;
    var y = 0;
    var b = 0;

    crc = crc ^ (-1);
    for (var i = 0, iTop = input.length; i < iTop; i++) {
        b = isArray ? input[i] : input.charCodeAt(i);
        y = (crc ^ b) & 0xFF;
        x = table[y];
        crc = (crc >>> 8) ^ x;
    }

    return crc ^ (-1);
};
// vim: set shiftwidth=4 softtabstop=4:

},{"./utils":32}],16:[function(require,module,exports){
'use strict';
var utils = require('./utils');

function DataReader(data) {
    this.data = null; // type : see implementation
    this.length = 0;
    this.index = 0;
}
DataReader.prototype = {
    /**
     * Check that the offset will not go too far.
     * @param {string} offset the additional offset to check.
     * @throws {Error} an Error if the offset is out of bounds.
     */
    checkOffset: function(offset) {
        this.checkIndex(this.index + offset);
    },
    /**
     * Check that the specifed index will not be too far.
     * @param {string} newIndex the index to check.
     * @throws {Error} an Error if the index is out of bounds.
     */
    checkIndex: function(newIndex) {
        if (this.length < newIndex || newIndex < 0) {
            throw new Error("End of data reached (data length = " + this.length + ", asked index = " + (newIndex) + "). Corrupted zip ?");
        }
    },
    /**
     * Change the index.
     * @param {number} newIndex The new index.
     * @throws {Error} if the new index is out of the data.
     */
    setIndex: function(newIndex) {
        this.checkIndex(newIndex);
        this.index = newIndex;
    },
    /**
     * Skip the next n bytes.
     * @param {number} n the number of bytes to skip.
     * @throws {Error} if the new index is out of the data.
     */
    skip: function(n) {
        this.setIndex(this.index + n);
    },
    /**
     * Get the byte at the specified index.
     * @param {number} i the index to use.
     * @return {number} a byte.
     */
    byteAt: function(i) {
        // see implementations
    },
    /**
     * Get the next number with a given byte size.
     * @param {number} size the number of bytes to read.
     * @return {number} the corresponding number.
     */
    readInt: function(size) {
        var result = 0,
            i;
        this.checkOffset(size);
        for (i = this.index + size - 1; i >= this.index; i--) {
            result = (result << 8) + this.byteAt(i);
        }
        this.index += size;
        return result;
    },
    /**
     * Get the next string with a given byte size.
     * @param {number} size the number of bytes to read.
     * @return {string} the corresponding string.
     */
    readString: function(size) {
        return utils.transformTo("string", this.readData(size));
    },
    /**
     * Get raw data without conversion, <size> bytes.
     * @param {number} size the number of bytes to read.
     * @return {Object} the raw data, implementation specific.
     */
    readData: function(size) {
        // see implementations
    },
    /**
     * Find the last occurence of a zip signature (4 bytes).
     * @param {string} sig the signature to find.
     * @return {number} the index of the last occurence, -1 if not found.
     */
    lastIndexOfSignature: function(sig) {
        // see implementations
    },
    /**
     * Get the next date.
     * @return {Date} the date.
     */
    readDate: function() {
        var dostime = this.readInt(4);
        return new Date(
        ((dostime >> 25) & 0x7f) + 1980, // year
        ((dostime >> 21) & 0x0f) - 1, // month
        (dostime >> 16) & 0x1f, // day
        (dostime >> 11) & 0x1f, // hour
        (dostime >> 5) & 0x3f, // minute
        (dostime & 0x1f) << 1); // second
    }
};
module.exports = DataReader;

},{"./utils":32}],17:[function(require,module,exports){
'use strict';
exports.base64 = false;
exports.binary = false;
exports.dir = false;
exports.createFolders = false;
exports.date = null;
exports.compression = null;
exports.compressionOptions = null;
exports.comment = null;
exports.unixPermissions = null;
exports.dosPermissions = null;

},{}],18:[function(require,module,exports){
'use strict';
var utils = require('./utils');

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.string2binary = function(str) {
    return utils.string2binary(str);
};

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.string2Uint8Array = function(str) {
    return utils.transformTo("uint8array", str);
};

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.uint8Array2String = function(array) {
    return utils.transformTo("string", array);
};

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.string2Blob = function(str) {
    var buffer = utils.transformTo("arraybuffer", str);
    return utils.arrayBuffer2Blob(buffer);
};

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.arrayBuffer2Blob = function(buffer) {
    return utils.arrayBuffer2Blob(buffer);
};

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.transformTo = function(outputType, input) {
    return utils.transformTo(outputType, input);
};

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.getTypeOf = function(input) {
    return utils.getTypeOf(input);
};

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.checkSupport = function(type) {
    return utils.checkSupport(type);
};

/**
 * @deprecated
 * This value will be removed in a future version without replacement.
 */
exports.MAX_VALUE_16BITS = utils.MAX_VALUE_16BITS;

/**
 * @deprecated
 * This value will be removed in a future version without replacement.
 */
exports.MAX_VALUE_32BITS = utils.MAX_VALUE_32BITS;


/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.pretty = function(str) {
    return utils.pretty(str);
};

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.findCompression = function(compressionMethod) {
    return utils.findCompression(compressionMethod);
};

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.isRegExp = function (object) {
    return utils.isRegExp(object);
};


},{"./utils":32}],19:[function(require,module,exports){
'use strict';
var USE_TYPEDARRAY = (typeof Uint8Array !== 'undefined') && (typeof Uint16Array !== 'undefined') && (typeof Uint32Array !== 'undefined');

var pako = require("pako");
exports.uncompressInputType = USE_TYPEDARRAY ? "uint8array" : "array";
exports.compressInputType = USE_TYPEDARRAY ? "uint8array" : "array";

exports.magic = "\x08\x00";
exports.compress = function(input, compressionOptions) {
    return pako.deflateRaw(input, {
        level : compressionOptions.level || -1 // default compression
    });
};
exports.uncompress =  function(input) {
    return pako.inflateRaw(input);
};

},{"pako":35}],20:[function(require,module,exports){
'use strict';

var base64 = require('./base64');

/**
Usage:
   zip = new JSZip();
   zip.file("hello.txt", "Hello, World!").file("tempfile", "nothing");
   zip.folder("images").file("smile.gif", base64Data, {base64: true});
   zip.file("Xmas.txt", "Ho ho ho !", {date : new Date("December 25, 2007 00:00:01")});
   zip.remove("tempfile");

   base64zip = zip.generate();

**/

/**
 * Representation a of zip file in js
 * @constructor
 * @param {String=|ArrayBuffer=|Uint8Array=} data the data to load, if any (optional).
 * @param {Object=} options the options for creating this objects (optional).
 */
function JSZip(data, options) {
    // if this constructor is used without `new`, it adds `new` before itself:
    if(!(this instanceof JSZip)) return new JSZip(data, options);

    // object containing the files :
    // {
    //   "folder/" : {...},
    //   "folder/data.txt" : {...}
    // }
    this.files = {};

    this.comment = null;

    // Where we are in the hierarchy
    this.root = "";
    if (data) {
        this.load(data, options);
    }
    this.clone = function() {
        var newObj = new JSZip();
        for (var i in this) {
            if (typeof this[i] !== "function") {
                newObj[i] = this[i];
            }
        }
        return newObj;
    };
}
JSZip.prototype = require('./object');
JSZip.prototype.load = require('./load');
JSZip.support = require('./support');
JSZip.defaults = require('./defaults');

/**
 * @deprecated
 * This namespace will be removed in a future version without replacement.
 */
JSZip.utils = require('./deprecatedPublicUtils');

JSZip.base64 = {
    /**
     * @deprecated
     * This method will be removed in a future version without replacement.
     */
    encode : function(input) {
        return base64.encode(input);
    },
    /**
     * @deprecated
     * This method will be removed in a future version without replacement.
     */
    decode : function(input) {
        return base64.decode(input);
    }
};
JSZip.compressions = require('./compressions');
module.exports = JSZip;

},{"./base64":12,"./compressions":14,"./defaults":17,"./deprecatedPublicUtils":18,"./load":21,"./object":24,"./support":28}],21:[function(require,module,exports){
'use strict';
var base64 = require('./base64');
var ZipEntries = require('./zipEntries');
module.exports = function(data, options) {
    var files, zipEntries, i, input;
    options = options || {};
    if (options.base64) {
        data = base64.decode(data);
    }

    zipEntries = new ZipEntries(data, options);
    files = zipEntries.files;
    for (i = 0; i < files.length; i++) {
        input = files[i];
        this.file(input.fileName, input.decompressed, {
            binary: true,
            optimizedBinaryString: true,
            date: input.date,
            dir: input.dir,
            comment : input.fileComment.length ? input.fileComment : null,
            unixPermissions : input.unixPermissions,
            dosPermissions : input.dosPermissions,
            createFolders: options.createFolders
        });
    }
    if (zipEntries.zipComment.length) {
        this.comment = zipEntries.zipComment;
    }

    return this;
};

},{"./base64":12,"./zipEntries":33}],22:[function(require,module,exports){
(function (Buffer){
'use strict';
module.exports = function(data, encoding){
    return new Buffer(data, encoding);
};
module.exports.test = function(b){
    return Buffer.isBuffer(b);
};

}).call(this,require("buffer").Buffer)
},{"buffer":3}],23:[function(require,module,exports){
'use strict';
var Uint8ArrayReader = require('./uint8ArrayReader');

function NodeBufferReader(data) {
    this.data = data;
    this.length = this.data.length;
    this.index = 0;
}
NodeBufferReader.prototype = new Uint8ArrayReader();

/**
 * @see DataReader.readData
 */
NodeBufferReader.prototype.readData = function(size) {
    this.checkOffset(size);
    var result = this.data.slice(this.index, this.index + size);
    this.index += size;
    return result;
};
module.exports = NodeBufferReader;

},{"./uint8ArrayReader":29}],24:[function(require,module,exports){
'use strict';
var support = require('./support');
var utils = require('./utils');
var crc32 = require('./crc32');
var signature = require('./signature');
var defaults = require('./defaults');
var base64 = require('./base64');
var compressions = require('./compressions');
var CompressedObject = require('./compressedObject');
var nodeBuffer = require('./nodeBuffer');
var utf8 = require('./utf8');
var StringWriter = require('./stringWriter');
var Uint8ArrayWriter = require('./uint8ArrayWriter');

/**
 * Returns the raw data of a ZipObject, decompress the content if necessary.
 * @param {ZipObject} file the file to use.
 * @return {String|ArrayBuffer|Uint8Array|Buffer} the data.
 */
var getRawData = function(file) {
    if (file._data instanceof CompressedObject) {
        file._data = file._data.getContent();
        file.options.binary = true;
        file.options.base64 = false;

        if (utils.getTypeOf(file._data) === "uint8array") {
            var copy = file._data;
            // when reading an arraybuffer, the CompressedObject mechanism will keep it and subarray() a Uint8Array.
            // if we request a file in the same format, we might get the same Uint8Array or its ArrayBuffer (the original zip file).
            file._data = new Uint8Array(copy.length);
            // with an empty Uint8Array, Opera fails with a "Offset larger than array size"
            if (copy.length !== 0) {
                file._data.set(copy, 0);
            }
        }
    }
    return file._data;
};

/**
 * Returns the data of a ZipObject in a binary form. If the content is an unicode string, encode it.
 * @param {ZipObject} file the file to use.
 * @return {String|ArrayBuffer|Uint8Array|Buffer} the data.
 */
var getBinaryData = function(file) {
    var result = getRawData(file),
        type = utils.getTypeOf(result);
    if (type === "string") {
        if (!file.options.binary) {
            // unicode text !
            // unicode string => binary string is a painful process, check if we can avoid it.
            if (support.nodebuffer) {
                return nodeBuffer(result, "utf-8");
            }
        }
        return file.asBinary();
    }
    return result;
};

/**
 * Transform this._data into a string.
 * @param {function} filter a function String -> String, applied if not null on the result.
 * @return {String} the string representing this._data.
 */
var dataToString = function(asUTF8) {
    var result = getRawData(this);
    if (result === null || typeof result === "undefined") {
        return "";
    }
    // if the data is a base64 string, we decode it before checking the encoding !
    if (this.options.base64) {
        result = base64.decode(result);
    }
    if (asUTF8 && this.options.binary) {
        // JSZip.prototype.utf8decode supports arrays as input
        // skip to array => string step, utf8decode will do it.
        result = out.utf8decode(result);
    }
    else {
        // no utf8 transformation, do the array => string step.
        result = utils.transformTo("string", result);
    }

    if (!asUTF8 && !this.options.binary) {
        result = utils.transformTo("string", out.utf8encode(result));
    }
    return result;
};
/**
 * A simple object representing a file in the zip file.
 * @constructor
 * @param {string} name the name of the file
 * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data
 * @param {Object} options the options of the file
 */
var ZipObject = function(name, data, options) {
    this.name = name;
    this.dir = options.dir;
    this.date = options.date;
    this.comment = options.comment;
    this.unixPermissions = options.unixPermissions;
    this.dosPermissions = options.dosPermissions;

    this._data = data;
    this.options = options;

    /*
     * This object contains initial values for dir and date.
     * With them, we can check if the user changed the deprecated metadata in
     * `ZipObject#options` or not.
     */
    this._initialMetadata = {
      dir : options.dir,
      date : options.date
    };
};

ZipObject.prototype = {
    /**
     * Return the content as UTF8 string.
     * @return {string} the UTF8 string.
     */
    asText: function() {
        return dataToString.call(this, true);
    },
    /**
     * Returns the binary content.
     * @return {string} the content as binary.
     */
    asBinary: function() {
        return dataToString.call(this, false);
    },
    /**
     * Returns the content as a nodejs Buffer.
     * @return {Buffer} the content as a Buffer.
     */
    asNodeBuffer: function() {
        var result = getBinaryData(this);
        return utils.transformTo("nodebuffer", result);
    },
    /**
     * Returns the content as an Uint8Array.
     * @return {Uint8Array} the content as an Uint8Array.
     */
    asUint8Array: function() {
        var result = getBinaryData(this);
        return utils.transformTo("uint8array", result);
    },
    /**
     * Returns the content as an ArrayBuffer.
     * @return {ArrayBuffer} the content as an ArrayBufer.
     */
    asArrayBuffer: function() {
        return this.asUint8Array().buffer;
    }
};

/**
 * Transform an integer into a string in hexadecimal.
 * @private
 * @param {number} dec the number to convert.
 * @param {number} bytes the number of bytes to generate.
 * @returns {string} the result.
 */
var decToHex = function(dec, bytes) {
    var hex = "",
        i;
    for (i = 0; i < bytes; i++) {
        hex += String.fromCharCode(dec & 0xff);
        dec = dec >>> 8;
    }
    return hex;
};

/**
 * Merge the objects passed as parameters into a new one.
 * @private
 * @param {...Object} var_args All objects to merge.
 * @return {Object} a new object with the data of the others.
 */
var extend = function() {
    var result = {}, i, attr;
    for (i = 0; i < arguments.length; i++) { // arguments is not enumerable in some browsers
        for (attr in arguments[i]) {
            if (arguments[i].hasOwnProperty(attr) && typeof result[attr] === "undefined") {
                result[attr] = arguments[i][attr];
            }
        }
    }
    return result;
};

/**
 * Transforms the (incomplete) options from the user into the complete
 * set of options to create a file.
 * @private
 * @param {Object} o the options from the user.
 * @return {Object} the complete set of options.
 */
var prepareFileAttrs = function(o) {
    o = o || {};
    if (o.base64 === true && (o.binary === null || o.binary === undefined)) {
        o.binary = true;
    }
    o = extend(o, defaults);
    o.date = o.date || new Date();
    if (o.compression !== null) o.compression = o.compression.toUpperCase();

    return o;
};

/**
 * Add a file in the current folder.
 * @private
 * @param {string} name the name of the file
 * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data of the file
 * @param {Object} o the options of the file
 * @return {Object} the new file.
 */
var fileAdd = function(name, data, o) {
    // be sure sub folders exist
    var dataType = utils.getTypeOf(data),
        parent;

    o = prepareFileAttrs(o);

    if (typeof o.unixPermissions === "string") {
        o.unixPermissions = parseInt(o.unixPermissions, 8);
    }

    // UNX_IFDIR  0040000 see zipinfo.c
    if (o.unixPermissions && (o.unixPermissions & 0x4000)) {
        o.dir = true;
    }
    // Bit 4    Directory
    if (o.dosPermissions && (o.dosPermissions & 0x0010)) {
        o.dir = true;
    }

    if (o.dir) {
        name = forceTrailingSlash(name);
    }

    if (o.createFolders && (parent = parentFolder(name))) {
        folderAdd.call(this, parent, true);
    }

    if (o.dir || data === null || typeof data === "undefined") {
        o.base64 = false;
        o.binary = false;
        data = null;
        dataType = null;
    }
    else if (dataType === "string") {
        if (o.binary && !o.base64) {
            // optimizedBinaryString == true means that the file has already been filtered with a 0xFF mask
            if (o.optimizedBinaryString !== true) {
                // this is a string, not in a base64 format.
                // Be sure that this is a correct "binary string"
                data = utils.string2binary(data);
            }
        }
    }
    else { // arraybuffer, uint8array, ...
        o.base64 = false;
        o.binary = true;

        if (!dataType && !(data instanceof CompressedObject)) {
            throw new Error("The data of '" + name + "' is in an unsupported format !");
        }

        // special case : it's way easier to work with Uint8Array than with ArrayBuffer
        if (dataType === "arraybuffer") {
            data = utils.transformTo("uint8array", data);
        }
    }

    var object = new ZipObject(name, data, o);
    this.files[name] = object;
    return object;
};

/**
 * Find the parent folder of the path.
 * @private
 * @param {string} path the path to use
 * @return {string} the parent folder, or ""
 */
var parentFolder = function (path) {
    if (path.slice(-1) == '/') {
        path = path.substring(0, path.length - 1);
    }
    var lastSlash = path.lastIndexOf('/');
    return (lastSlash > 0) ? path.substring(0, lastSlash) : "";
};


/**
 * Returns the path with a slash at the end.
 * @private
 * @param {String} path the path to check.
 * @return {String} the path with a trailing slash.
 */
var forceTrailingSlash = function(path) {
    // Check the name ends with a /
    if (path.slice(-1) != "/") {
        path += "/"; // IE doesn't like substr(-1)
    }
    return path;
};
/**
 * Add a (sub) folder in the current folder.
 * @private
 * @param {string} name the folder's name
 * @param {boolean=} [createFolders] If true, automatically create sub
 *  folders. Defaults to false.
 * @return {Object} the new folder.
 */
var folderAdd = function(name, createFolders) {
    createFolders = (typeof createFolders !== 'undefined') ? createFolders : false;

    name = forceTrailingSlash(name);

    // Does this folder already exist?
    if (!this.files[name]) {
        fileAdd.call(this, name, null, {
            dir: true,
            createFolders: createFolders
        });
    }
    return this.files[name];
};

/**
 * Generate a JSZip.CompressedObject for a given zipOject.
 * @param {ZipObject} file the object to read.
 * @param {JSZip.compression} compression the compression to use.
 * @param {Object} compressionOptions the options to use when compressing.
 * @return {JSZip.CompressedObject} the compressed result.
 */
var generateCompressedObjectFrom = function(file, compression, compressionOptions) {
    var result = new CompressedObject(),
        content;

    // the data has not been decompressed, we might reuse things !
    if (file._data instanceof CompressedObject) {
        result.uncompressedSize = file._data.uncompressedSize;
        result.crc32 = file._data.crc32;

        if (result.uncompressedSize === 0 || file.dir) {
            compression = compressions['STORE'];
            result.compressedContent = "";
            result.crc32 = 0;
        }
        else if (file._data.compressionMethod === compression.magic) {
            result.compressedContent = file._data.getCompressedContent();
        }
        else {
            content = file._data.getContent();
            // need to decompress / recompress
            result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content), compressionOptions);
        }
    }
    else {
        // have uncompressed data
        content = getBinaryData(file);
        if (!content || content.length === 0 || file.dir) {
            compression = compressions['STORE'];
            content = "";
        }
        result.uncompressedSize = content.length;
        result.crc32 = crc32(content);
        result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content), compressionOptions);
    }

    result.compressedSize = result.compressedContent.length;
    result.compressionMethod = compression.magic;

    return result;
};




/**
 * Generate the UNIX part of the external file attributes.
 * @param {Object} unixPermissions the unix permissions or null.
 * @param {Boolean} isDir true if the entry is a directory, false otherwise.
 * @return {Number} a 32 bit integer.
 *
 * adapted from http://unix.stackexchange.com/questions/14705/the-zip-formats-external-file-attribute :
 *
 * TTTTsstrwxrwxrwx0000000000ADVSHR
 * ^^^^____________________________ file type, see zipinfo.c (UNX_*)
 *     ^^^_________________________ setuid, setgid, sticky
 *        ^^^^^^^^^________________ permissions
 *                 ^^^^^^^^^^______ not used ?
 *                           ^^^^^^ DOS attribute bits : Archive, Directory, Volume label, System file, Hidden, Read only
 */
var generateUnixExternalFileAttr = function (unixPermissions, isDir) {

    var result = unixPermissions;
    if (!unixPermissions) {
        // I can't use octal values in strict mode, hence the hexa.
        //  040775 => 0x41fd
        // 0100664 => 0x81b4
        result = isDir ? 0x41fd : 0x81b4;
    }

    return (result & 0xFFFF) << 16;
};

/**
 * Generate the DOS part of the external file attributes.
 * @param {Object} dosPermissions the dos permissions or null.
 * @param {Boolean} isDir true if the entry is a directory, false otherwise.
 * @return {Number} a 32 bit integer.
 *
 * Bit 0     Read-Only
 * Bit 1     Hidden
 * Bit 2     System
 * Bit 3     Volume Label
 * Bit 4     Directory
 * Bit 5     Archive
 */
var generateDosExternalFileAttr = function (dosPermissions, isDir) {

    // the dir flag is already set for compatibility

    return (dosPermissions || 0)  & 0x3F;
};

/**
 * Generate the various parts used in the construction of the final zip file.
 * @param {string} name the file name.
 * @param {ZipObject} file the file content.
 * @param {JSZip.CompressedObject} compressedObject the compressed object.
 * @param {number} offset the current offset from the start of the zip file.
 * @param {String} platform let's pretend we are this platform (change platform dependents fields)
 * @return {object} the zip parts.
 */
var generateZipParts = function(name, file, compressedObject, offset, platform) {
    var data = compressedObject.compressedContent,
        utfEncodedFileName = utils.transformTo("string", utf8.utf8encode(file.name)),
        comment = file.comment || "",
        utfEncodedComment = utils.transformTo("string", utf8.utf8encode(comment)),
        useUTF8ForFileName = utfEncodedFileName.length !== file.name.length,
        useUTF8ForComment = utfEncodedComment.length !== comment.length,
        o = file.options,
        dosTime,
        dosDate,
        extraFields = "",
        unicodePathExtraField = "",
        unicodeCommentExtraField = "",
        dir, date;


    // handle the deprecated options.dir
    if (file._initialMetadata.dir !== file.dir) {
        dir = file.dir;
    } else {
        dir = o.dir;
    }

    // handle the deprecated options.date
    if(file._initialMetadata.date !== file.date) {
        date = file.date;
    } else {
        date = o.date;
    }

    var extFileAttr = 0;
    var versionMadeBy = 0;
    if (dir) {
        // dos or unix, we set the dos dir flag
        extFileAttr |= 0x00010;
    }
    if(platform === "UNIX") {
        versionMadeBy = 0x031E; // UNIX, version 3.0
        extFileAttr |= generateUnixExternalFileAttr(file.unixPermissions, dir);
    } else { // DOS or other, fallback to DOS
        versionMadeBy = 0x0014; // DOS, version 2.0
        extFileAttr |= generateDosExternalFileAttr(file.dosPermissions, dir);
    }

    // date
    // @see http://www.delorie.com/djgpp/doc/rbinter/it/52/13.html
    // @see http://www.delorie.com/djgpp/doc/rbinter/it/65/16.html
    // @see http://www.delorie.com/djgpp/doc/rbinter/it/66/16.html

    dosTime = date.getHours();
    dosTime = dosTime << 6;
    dosTime = dosTime | date.getMinutes();
    dosTime = dosTime << 5;
    dosTime = dosTime | date.getSeconds() / 2;

    dosDate = date.getFullYear() - 1980;
    dosDate = dosDate << 4;
    dosDate = dosDate | (date.getMonth() + 1);
    dosDate = dosDate << 5;
    dosDate = dosDate | date.getDate();

    if (useUTF8ForFileName) {
        // set the unicode path extra field. unzip needs at least one extra
        // field to correctly handle unicode path, so using the path is as good
        // as any other information. This could improve the situation with
        // other archive managers too.
        // This field is usually used without the utf8 flag, with a non
        // unicode path in the header (winrar, winzip). This helps (a bit)
        // with the messy Windows' default compressed folders feature but
        // breaks on p7zip which doesn't seek the unicode path extra field.
        // So for now, UTF-8 everywhere !
        unicodePathExtraField =
            // Version
            decToHex(1, 1) +
            // NameCRC32
            decToHex(crc32(utfEncodedFileName), 4) +
            // UnicodeName
            utfEncodedFileName;

        extraFields +=
            // Info-ZIP Unicode Path Extra Field
            "\x75\x70" +
            // size
            decToHex(unicodePathExtraField.length, 2) +
            // content
            unicodePathExtraField;
    }

    if(useUTF8ForComment) {

        unicodeCommentExtraField =
            // Version
            decToHex(1, 1) +
            // CommentCRC32
            decToHex(this.crc32(utfEncodedComment), 4) +
            // UnicodeName
            utfEncodedComment;

        extraFields +=
            // Info-ZIP Unicode Path Extra Field
            "\x75\x63" +
            // size
            decToHex(unicodeCommentExtraField.length, 2) +
            // content
            unicodeCommentExtraField;
    }

    var header = "";

    // version needed to extract
    header += "\x0A\x00";
    // general purpose bit flag
    // set bit 11 if utf8
    header += (useUTF8ForFileName || useUTF8ForComment) ? "\x00\x08" : "\x00\x00";
    // compression method
    header += compressedObject.compressionMethod;
    // last mod file time
    header += decToHex(dosTime, 2);
    // last mod file date
    header += decToHex(dosDate, 2);
    // crc-32
    header += decToHex(compressedObject.crc32, 4);
    // compressed size
    header += decToHex(compressedObject.compressedSize, 4);
    // uncompressed size
    header += decToHex(compressedObject.uncompressedSize, 4);
    // file name length
    header += decToHex(utfEncodedFileName.length, 2);
    // extra field length
    header += decToHex(extraFields.length, 2);


    var fileRecord = signature.LOCAL_FILE_HEADER + header + utfEncodedFileName + extraFields;

    var dirRecord = signature.CENTRAL_FILE_HEADER +
    // version made by (00: DOS)
    decToHex(versionMadeBy, 2) +
    // file header (common to file and central directory)
    header +
    // file comment length
    decToHex(utfEncodedComment.length, 2) +
    // disk number start
    "\x00\x00" +
    // internal file attributes TODO
    "\x00\x00" +
    // external file attributes
    decToHex(extFileAttr, 4) +
    // relative offset of local header
    decToHex(offset, 4) +
    // file name
    utfEncodedFileName +
    // extra field
    extraFields +
    // file comment
    utfEncodedComment;

    return {
        fileRecord: fileRecord,
        dirRecord: dirRecord,
        compressedObject: compressedObject
    };
};


// return the actual prototype of JSZip
var out = {
    /**
     * Read an existing zip and merge the data in the current JSZip object.
     * The implementation is in jszip-load.js, don't forget to include it.
     * @param {String|ArrayBuffer|Uint8Array|Buffer} stream  The stream to load
     * @param {Object} options Options for loading the stream.
     *  options.base64 : is the stream in base64 ? default : false
     * @return {JSZip} the current JSZip object
     */
    load: function(stream, options) {
        throw new Error("Load method is not defined. Is the file jszip-load.js included ?");
    },

    /**
     * Filter nested files/folders with the specified function.
     * @param {Function} search the predicate to use :
     * function (relativePath, file) {...}
     * It takes 2 arguments : the relative path and the file.
     * @return {Array} An array of matching elements.
     */
    filter: function(search) {
        var result = [],
            filename, relativePath, file, fileClone;
        for (filename in this.files) {
            if (!this.files.hasOwnProperty(filename)) {
                continue;
            }
            file = this.files[filename];
            // return a new object, don't let the user mess with our internal objects :)
            fileClone = new ZipObject(file.name, file._data, extend(file.options));
            relativePath = filename.slice(this.root.length, filename.length);
            if (filename.slice(0, this.root.length) === this.root && // the file is in the current root
            search(relativePath, fileClone)) { // and the file matches the function
                result.push(fileClone);
            }
        }
        return result;
    },

    /**
     * Add a file to the zip file, or search a file.
     * @param   {string|RegExp} name The name of the file to add (if data is defined),
     * the name of the file to find (if no data) or a regex to match files.
     * @param   {String|ArrayBuffer|Uint8Array|Buffer} data  The file data, either raw or base64 encoded
     * @param   {Object} o     File options
     * @return  {JSZip|Object|Array} this JSZip object (when adding a file),
     * a file (when searching by string) or an array of files (when searching by regex).
     */
    file: function(name, data, o) {
        if (arguments.length === 1) {
            if (utils.isRegExp(name)) {
                var regexp = name;
                return this.filter(function(relativePath, file) {
                    return !file.dir && regexp.test(relativePath);
                });
            }
            else { // text
                return this.filter(function(relativePath, file) {
                    return !file.dir && relativePath === name;
                })[0] || null;
            }
        }
        else { // more than one argument : we have data !
            name = this.root + name;
            fileAdd.call(this, name, data, o);
        }
        return this;
    },

    /**
     * Add a directory to the zip file, or search.
     * @param   {String|RegExp} arg The name of the directory to add, or a regex to search folders.
     * @return  {JSZip} an object with the new directory as the root, or an array containing matching folders.
     */
    folder: function(arg) {
        if (!arg) {
            return this;
        }

        if (utils.isRegExp(arg)) {
            return this.filter(function(relativePath, file) {
                return file.dir && arg.test(relativePath);
            });
        }

        // else, name is a new folder
        var name = this.root + arg;
        var newFolder = folderAdd.call(this, name);

        // Allow chaining by returning a new object with this folder as the root
        var ret = this.clone();
        ret.root = newFolder.name;
        return ret;
    },

    /**
     * Delete a file, or a directory and all sub-files, from the zip
     * @param {string} name the name of the file to delete
     * @return {JSZip} this JSZip object
     */
    remove: function(name) {
        name = this.root + name;
        var file = this.files[name];
        if (!file) {
            // Look for any folders
            if (name.slice(-1) != "/") {
                name += "/";
            }
            file = this.files[name];
        }

        if (file && !file.dir) {
            // file
            delete this.files[name];
        } else {
            // maybe a folder, delete recursively
            var kids = this.filter(function(relativePath, file) {
                return file.name.slice(0, name.length) === name;
            });
            for (var i = 0; i < kids.length; i++) {
                delete this.files[kids[i].name];
            }
        }

        return this;
    },

    /**
     * Generate the complete zip file
     * @param {Object} options the options to generate the zip file :
     * - base64, (deprecated, use type instead) true to generate base64.
     * - compression, "STORE" by default.
     * - type, "base64" by default. Values are : string, base64, uint8array, arraybuffer, blob.
     * @return {String|Uint8Array|ArrayBuffer|Buffer|Blob} the zip file
     */
    generate: function(options) {
        options = extend(options || {}, {
            base64: true,
            compression: "STORE",
            compressionOptions : null,
            type: "base64",
            platform: "DOS",
            comment: null,
            mimeType: 'application/zip'
        });

        utils.checkSupport(options.type);

        // accept nodejs `process.platform`
        if(
          options.platform === 'darwin' ||
          options.platform === 'freebsd' ||
          options.platform === 'linux' ||
          options.platform === 'sunos'
        ) {
          options.platform = "UNIX";
        }
        if (options.platform === 'win32') {
          options.platform = "DOS";
        }

        var zipData = [],
            localDirLength = 0,
            centralDirLength = 0,
            writer, i,
            utfEncodedComment = utils.transformTo("string", this.utf8encode(options.comment || this.comment || ""));

        // first, generate all the zip parts.
        for (var name in this.files) {
            if (!this.files.hasOwnProperty(name)) {
                continue;
            }
            var file = this.files[name];

            var compressionName = file.options.compression || options.compression.toUpperCase();
            var compression = compressions[compressionName];
            if (!compression) {
                throw new Error(compressionName + " is not a valid compression method !");
            }
            var compressionOptions = file.options.compressionOptions || options.compressionOptions || {};

            var compressedObject = generateCompressedObjectFrom.call(this, file, compression, compressionOptions);

            var zipPart = generateZipParts.call(this, name, file, compressedObject, localDirLength, options.platform);
            localDirLength += zipPart.fileRecord.length + compressedObject.compressedSize;
            centralDirLength += zipPart.dirRecord.length;
            zipData.push(zipPart);
        }

        var dirEnd = "";

        // end of central dir signature
        dirEnd = signature.CENTRAL_DIRECTORY_END +
        // number of this disk
        "\x00\x00" +
        // number of the disk with the start of the central directory
        "\x00\x00" +
        // total number of entries in the central directory on this disk
        decToHex(zipData.length, 2) +
        // total number of entries in the central directory
        decToHex(zipData.length, 2) +
        // size of the central directory   4 bytes
        decToHex(centralDirLength, 4) +
        // offset of start of central directory with respect to the starting disk number
        decToHex(localDirLength, 4) +
        // .ZIP file comment length
        decToHex(utfEncodedComment.length, 2) +
        // .ZIP file comment
        utfEncodedComment;


        // we have all the parts (and the total length)
        // time to create a writer !
        var typeName = options.type.toLowerCase();
        if(typeName==="uint8array"||typeName==="arraybuffer"||typeName==="blob"||typeName==="nodebuffer") {
            writer = new Uint8ArrayWriter(localDirLength + centralDirLength + dirEnd.length);
        }else{
            writer = new StringWriter(localDirLength + centralDirLength + dirEnd.length);
        }

        for (i = 0; i < zipData.length; i++) {
            writer.append(zipData[i].fileRecord);
            writer.append(zipData[i].compressedObject.compressedContent);
        }
        for (i = 0; i < zipData.length; i++) {
            writer.append(zipData[i].dirRecord);
        }

        writer.append(dirEnd);

        var zip = writer.finalize();



        switch(options.type.toLowerCase()) {
            // case "zip is an Uint8Array"
            case "uint8array" :
            case "arraybuffer" :
            case "nodebuffer" :
               return utils.transformTo(options.type.toLowerCase(), zip);
            case "blob" :
               return utils.arrayBuffer2Blob(utils.transformTo("arraybuffer", zip), options.mimeType);
            // case "zip is a string"
            case "base64" :
               return (options.base64) ? base64.encode(zip) : zip;
            default : // case "string" :
               return zip;
         }

    },

    /**
     * @deprecated
     * This method will be removed in a future version without replacement.
     */
    crc32: function (input, crc) {
        return crc32(input, crc);
    },

    /**
     * @deprecated
     * This method will be removed in a future version without replacement.
     */
    utf8encode: function (string) {
        return utils.transformTo("string", utf8.utf8encode(string));
    },

    /**
     * @deprecated
     * This method will be removed in a future version without replacement.
     */
    utf8decode: function (input) {
        return utf8.utf8decode(input);
    }
};
module.exports = out;

},{"./base64":12,"./compressedObject":13,"./compressions":14,"./crc32":15,"./defaults":17,"./nodeBuffer":22,"./signature":25,"./stringWriter":27,"./support":28,"./uint8ArrayWriter":30,"./utf8":31,"./utils":32}],25:[function(require,module,exports){
'use strict';
exports.LOCAL_FILE_HEADER = "PK\x03\x04";
exports.CENTRAL_FILE_HEADER = "PK\x01\x02";
exports.CENTRAL_DIRECTORY_END = "PK\x05\x06";
exports.ZIP64_CENTRAL_DIRECTORY_LOCATOR = "PK\x06\x07";
exports.ZIP64_CENTRAL_DIRECTORY_END = "PK\x06\x06";
exports.DATA_DESCRIPTOR = "PK\x07\x08";

},{}],26:[function(require,module,exports){
'use strict';
var DataReader = require('./dataReader');
var utils = require('./utils');

function StringReader(data, optimizedBinaryString) {
    this.data = data;
    if (!optimizedBinaryString) {
        this.data = utils.string2binary(this.data);
    }
    this.length = this.data.length;
    this.index = 0;
}
StringReader.prototype = new DataReader();
/**
 * @see DataReader.byteAt
 */
StringReader.prototype.byteAt = function(i) {
    return this.data.charCodeAt(i);
};
/**
 * @see DataReader.lastIndexOfSignature
 */
StringReader.prototype.lastIndexOfSignature = function(sig) {
    return this.data.lastIndexOf(sig);
};
/**
 * @see DataReader.readData
 */
StringReader.prototype.readData = function(size) {
    this.checkOffset(size);
    // this will work because the constructor applied the "& 0xff" mask.
    var result = this.data.slice(this.index, this.index + size);
    this.index += size;
    return result;
};
module.exports = StringReader;

},{"./dataReader":16,"./utils":32}],27:[function(require,module,exports){
'use strict';

var utils = require('./utils');

/**
 * An object to write any content to a string.
 * @constructor
 */
var StringWriter = function() {
    this.data = [];
};
StringWriter.prototype = {
    /**
     * Append any content to the current string.
     * @param {Object} input the content to add.
     */
    append: function(input) {
        input = utils.transformTo("string", input);
        this.data.push(input);
    },
    /**
     * Finalize the construction an return the result.
     * @return {string} the generated string.
     */
    finalize: function() {
        return this.data.join("");
    }
};

module.exports = StringWriter;

},{"./utils":32}],28:[function(require,module,exports){
(function (Buffer){
'use strict';
exports.base64 = true;
exports.array = true;
exports.string = true;
exports.arraybuffer = typeof ArrayBuffer !== "undefined" && typeof Uint8Array !== "undefined";
// contains true if JSZip can read/generate nodejs Buffer, false otherwise.
// Browserify will provide a Buffer implementation for browsers, which is
// an augmented Uint8Array (i.e., can be used as either Buffer or U8).
exports.nodebuffer = typeof Buffer !== "undefined";
// contains true if JSZip can read/generate Uint8Array, false otherwise.
exports.uint8array = typeof Uint8Array !== "undefined";

if (typeof ArrayBuffer === "undefined") {
    exports.blob = false;
}
else {
    var buffer = new ArrayBuffer(0);
    try {
        exports.blob = new Blob([buffer], {
            type: "application/zip"
        }).size === 0;
    }
    catch (e) {
        try {
            var Builder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
            var builder = new Builder();
            builder.append(buffer);
            exports.blob = builder.getBlob('application/zip').size === 0;
        }
        catch (e) {
            exports.blob = false;
        }
    }
}

}).call(this,require("buffer").Buffer)
},{"buffer":3}],29:[function(require,module,exports){
'use strict';
var DataReader = require('./dataReader');

function Uint8ArrayReader(data) {
    if (data) {
        this.data = data;
        this.length = this.data.length;
        this.index = 0;
    }
}
Uint8ArrayReader.prototype = new DataReader();
/**
 * @see DataReader.byteAt
 */
Uint8ArrayReader.prototype.byteAt = function(i) {
    return this.data[i];
};
/**
 * @see DataReader.lastIndexOfSignature
 */
Uint8ArrayReader.prototype.lastIndexOfSignature = function(sig) {
    var sig0 = sig.charCodeAt(0),
        sig1 = sig.charCodeAt(1),
        sig2 = sig.charCodeAt(2),
        sig3 = sig.charCodeAt(3);
    for (var i = this.length - 4; i >= 0; --i) {
        if (this.data[i] === sig0 && this.data[i + 1] === sig1 && this.data[i + 2] === sig2 && this.data[i + 3] === sig3) {
            return i;
        }
    }

    return -1;
};
/**
 * @see DataReader.readData
 */
Uint8ArrayReader.prototype.readData = function(size) {
    this.checkOffset(size);
    if(size === 0) {
        // in IE10, when using subarray(idx, idx), we get the array [0x00] instead of [].
        return new Uint8Array(0);
    }
    var result = this.data.subarray(this.index, this.index + size);
    this.index += size;
    return result;
};
module.exports = Uint8ArrayReader;

},{"./dataReader":16}],30:[function(require,module,exports){
'use strict';

var utils = require('./utils');

/**
 * An object to write any content to an Uint8Array.
 * @constructor
 * @param {number} length The length of the array.
 */
var Uint8ArrayWriter = function(length) {
    this.data = new Uint8Array(length);
    this.index = 0;
};
Uint8ArrayWriter.prototype = {
    /**
     * Append any content to the current array.
     * @param {Object} input the content to add.
     */
    append: function(input) {
        if (input.length !== 0) {
            // with an empty Uint8Array, Opera fails with a "Offset larger than array size"
            input = utils.transformTo("uint8array", input);
            this.data.set(input, this.index);
            this.index += input.length;
        }
    },
    /**
     * Finalize the construction an return the result.
     * @return {Uint8Array} the generated array.
     */
    finalize: function() {
        return this.data;
    }
};

module.exports = Uint8ArrayWriter;

},{"./utils":32}],31:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var support = require('./support');
var nodeBuffer = require('./nodeBuffer');

/**
 * The following functions come from pako, from pako/lib/utils/strings
 * released under the MIT license, see pako https://github.com/nodeca/pako/
 */

// Table with utf8 lengths (calculated by first byte of sequence)
// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
// because max possible codepoint is 0x10ffff
var _utf8len = new Array(256);
for (var i=0; i<256; i++) {
  _utf8len[i] = (i >= 252 ? 6 : i >= 248 ? 5 : i >= 240 ? 4 : i >= 224 ? 3 : i >= 192 ? 2 : 1);
}
_utf8len[254]=_utf8len[254]=1; // Invalid sequence start

// convert string to array (typed, when possible)
var string2buf = function (str) {
    var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

    // count binary size
    for (m_pos = 0; m_pos < str_len; m_pos++) {
        c = str.charCodeAt(m_pos);
        if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {
            c2 = str.charCodeAt(m_pos+1);
            if ((c2 & 0xfc00) === 0xdc00) {
                c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
                m_pos++;
            }
        }
        buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
    }

    // allocate buffer
    if (support.uint8array) {
        buf = new Uint8Array(buf_len);
    } else {
        buf = new Array(buf_len);
    }

    // convert
    for (i=0, m_pos = 0; i < buf_len; m_pos++) {
        c = str.charCodeAt(m_pos);
        if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {
            c2 = str.charCodeAt(m_pos+1);
            if ((c2 & 0xfc00) === 0xdc00) {
                c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
                m_pos++;
            }
        }
        if (c < 0x80) {
            /* one byte */
            buf[i++] = c;
        } else if (c < 0x800) {
            /* two bytes */
            buf[i++] = 0xC0 | (c >>> 6);
            buf[i++] = 0x80 | (c & 0x3f);
        } else if (c < 0x10000) {
            /* three bytes */
            buf[i++] = 0xE0 | (c >>> 12);
            buf[i++] = 0x80 | (c >>> 6 & 0x3f);
            buf[i++] = 0x80 | (c & 0x3f);
        } else {
            /* four bytes */
            buf[i++] = 0xf0 | (c >>> 18);
            buf[i++] = 0x80 | (c >>> 12 & 0x3f);
            buf[i++] = 0x80 | (c >>> 6 & 0x3f);
            buf[i++] = 0x80 | (c & 0x3f);
        }
    }

    return buf;
};

// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
var utf8border = function(buf, max) {
    var pos;

    max = max || buf.length;
    if (max > buf.length) { max = buf.length; }

    // go back from last position, until start of sequence found
    pos = max-1;
    while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

    // Fuckup - very small and broken sequence,
    // return max, because we should return something anyway.
    if (pos < 0) { return max; }

    // If we came to start of buffer - that means vuffer is too small,
    // return max too.
    if (pos === 0) { return max; }

    return (pos + _utf8len[buf[pos]] > max) ? pos : max;
};

// convert array to string
var buf2string = function (buf) {
    var str, i, out, c, c_len;
    var len = buf.length;

    // Reserve max possible length (2 words per char)
    // NB: by unknown reasons, Array is significantly faster for
    //     String.fromCharCode.apply than Uint16Array.
    var utf16buf = new Array(len*2);

    for (out=0, i=0; i<len;) {
        c = buf[i++];
        // quick process ascii
        if (c < 0x80) { utf16buf[out++] = c; continue; }

        c_len = _utf8len[c];
        // skip 5 & 6 byte codes
        if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len-1; continue; }

        // apply mask on first byte
        c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
        // join the rest
        while (c_len > 1 && i < len) {
            c = (c << 6) | (buf[i++] & 0x3f);
            c_len--;
        }

        // terminated by end of string?
        if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

        if (c < 0x10000) {
            utf16buf[out++] = c;
        } else {
            c -= 0x10000;
            utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
            utf16buf[out++] = 0xdc00 | (c & 0x3ff);
        }
    }

    // shrinkBuf(utf16buf, out)
    if (utf16buf.length !== out) {
        if(utf16buf.subarray) {
            utf16buf = utf16buf.subarray(0, out);
        } else {
            utf16buf.length = out;
        }
    }

    // return String.fromCharCode.apply(null, utf16buf);
    return utils.applyFromCharCode(utf16buf);
};


// That's all for the pako functions.


/**
 * Transform a javascript string into an array (typed if possible) of bytes,
 * UTF-8 encoded.
 * @param {String} str the string to encode
 * @return {Array|Uint8Array|Buffer} the UTF-8 encoded string.
 */
exports.utf8encode = function utf8encode(str) {
    if (support.nodebuffer) {
        return nodeBuffer(str, "utf-8");
    }

    return string2buf(str);
};


/**
 * Transform a bytes array (or a representation) representing an UTF-8 encoded
 * string into a javascript string.
 * @param {Array|Uint8Array|Buffer} buf the data de decode
 * @return {String} the decoded string.
 */
exports.utf8decode = function utf8decode(buf) {
    if (support.nodebuffer) {
        return utils.transformTo("nodebuffer", buf).toString("utf-8");
    }

    buf = utils.transformTo(support.uint8array ? "uint8array" : "array", buf);

    // return buf2string(buf);
    // Chrome prefers to work with "small" chunks of data
    // for the method buf2string.
    // Firefox and Chrome has their own shortcut, IE doesn't seem to really care.
    var result = [], k = 0, len = buf.length, chunk = 65536;
    while (k < len) {
        var nextBoundary = utf8border(buf, Math.min(k + chunk, len));
        if (support.uint8array) {
            result.push(buf2string(buf.subarray(k, nextBoundary)));
        } else {
            result.push(buf2string(buf.slice(k, nextBoundary)));
        }
        k = nextBoundary;
    }
    return result.join("");

};
// vim: set shiftwidth=4 softtabstop=4:

},{"./nodeBuffer":22,"./support":28,"./utils":32}],32:[function(require,module,exports){
'use strict';
var support = require('./support');
var compressions = require('./compressions');
var nodeBuffer = require('./nodeBuffer');
/**
 * Convert a string to a "binary string" : a string containing only char codes between 0 and 255.
 * @param {string} str the string to transform.
 * @return {String} the binary string.
 */
exports.string2binary = function(str) {
    var result = "";
    for (var i = 0; i < str.length; i++) {
        result += String.fromCharCode(str.charCodeAt(i) & 0xff);
    }
    return result;
};
exports.arrayBuffer2Blob = function(buffer, mimeType) {
    exports.checkSupport("blob");
	mimeType = mimeType || 'application/zip';

    try {
        // Blob constructor
        return new Blob([buffer], {
            type: mimeType
        });
    }
    catch (e) {

        try {
            // deprecated, browser only, old way
            var Builder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
            var builder = new Builder();
            builder.append(buffer);
            return builder.getBlob(mimeType);
        }
        catch (e) {

            // well, fuck ?!
            throw new Error("Bug : can't construct the Blob.");
        }
    }


};
/**
 * The identity function.
 * @param {Object} input the input.
 * @return {Object} the same input.
 */
function identity(input) {
    return input;
}

/**
 * Fill in an array with a string.
 * @param {String} str the string to use.
 * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to fill in (will be mutated).
 * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated array.
 */
function stringToArrayLike(str, array) {
    for (var i = 0; i < str.length; ++i) {
        array[i] = str.charCodeAt(i) & 0xFF;
    }
    return array;
}

/**
 * Transform an array-like object to a string.
 * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to transform.
 * @return {String} the result.
 */
function arrayLikeToString(array) {
    // Performances notes :
    // --------------------
    // String.fromCharCode.apply(null, array) is the fastest, see
    // see http://jsperf.com/converting-a-uint8array-to-a-string/2
    // but the stack is limited (and we can get huge arrays !).
    //
    // result += String.fromCharCode(array[i]); generate too many strings !
    //
    // This code is inspired by http://jsperf.com/arraybuffer-to-string-apply-performance/2
    var chunk = 65536;
    var result = [],
        len = array.length,
        type = exports.getTypeOf(array),
        k = 0,
        canUseApply = true;
      try {
         switch(type) {
            case "uint8array":
               String.fromCharCode.apply(null, new Uint8Array(0));
               break;
            case "nodebuffer":
               String.fromCharCode.apply(null, nodeBuffer(0));
               break;
         }
      } catch(e) {
         canUseApply = false;
      }

      // no apply : slow and painful algorithm
      // default browser on android 4.*
      if (!canUseApply) {
         var resultStr = "";
         for(var i = 0; i < array.length;i++) {
            resultStr += String.fromCharCode(array[i]);
         }
    return resultStr;
    }
    while (k < len && chunk > 1) {
        try {
            if (type === "array" || type === "nodebuffer") {
                result.push(String.fromCharCode.apply(null, array.slice(k, Math.min(k + chunk, len))));
            }
            else {
                result.push(String.fromCharCode.apply(null, array.subarray(k, Math.min(k + chunk, len))));
            }
            k += chunk;
        }
        catch (e) {
            chunk = Math.floor(chunk / 2);
        }
    }
    return result.join("");
}

exports.applyFromCharCode = arrayLikeToString;


/**
 * Copy the data from an array-like to an other array-like.
 * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayFrom the origin array.
 * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayTo the destination array which will be mutated.
 * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated destination array.
 */
function arrayLikeToArrayLike(arrayFrom, arrayTo) {
    for (var i = 0; i < arrayFrom.length; i++) {
        arrayTo[i] = arrayFrom[i];
    }
    return arrayTo;
}

// a matrix containing functions to transform everything into everything.
var transform = {};

// string to ?
transform["string"] = {
    "string": identity,
    "array": function(input) {
        return stringToArrayLike(input, new Array(input.length));
    },
    "arraybuffer": function(input) {
        return transform["string"]["uint8array"](input).buffer;
    },
    "uint8array": function(input) {
        return stringToArrayLike(input, new Uint8Array(input.length));
    },
    "nodebuffer": function(input) {
        return stringToArrayLike(input, nodeBuffer(input.length));
    }
};

// array to ?
transform["array"] = {
    "string": arrayLikeToString,
    "array": identity,
    "arraybuffer": function(input) {
        return (new Uint8Array(input)).buffer;
    },
    "uint8array": function(input) {
        return new Uint8Array(input);
    },
    "nodebuffer": function(input) {
        return nodeBuffer(input);
    }
};

// arraybuffer to ?
transform["arraybuffer"] = {
    "string": function(input) {
        return arrayLikeToString(new Uint8Array(input));
    },
    "array": function(input) {
        return arrayLikeToArrayLike(new Uint8Array(input), new Array(input.byteLength));
    },
    "arraybuffer": identity,
    "uint8array": function(input) {
        return new Uint8Array(input);
    },
    "nodebuffer": function(input) {
        return nodeBuffer(new Uint8Array(input));
    }
};

// uint8array to ?
transform["uint8array"] = {
    "string": arrayLikeToString,
    "array": function(input) {
        return arrayLikeToArrayLike(input, new Array(input.length));
    },
    "arraybuffer": function(input) {
        return input.buffer;
    },
    "uint8array": identity,
    "nodebuffer": function(input) {
        return nodeBuffer(input);
    }
};

// nodebuffer to ?
transform["nodebuffer"] = {
    "string": arrayLikeToString,
    "array": function(input) {
        return arrayLikeToArrayLike(input, new Array(input.length));
    },
    "arraybuffer": function(input) {
        return transform["nodebuffer"]["uint8array"](input).buffer;
    },
    "uint8array": function(input) {
        return arrayLikeToArrayLike(input, new Uint8Array(input.length));
    },
    "nodebuffer": identity
};

/**
 * Transform an input into any type.
 * The supported output type are : string, array, uint8array, arraybuffer, nodebuffer.
 * If no output type is specified, the unmodified input will be returned.
 * @param {String} outputType the output type.
 * @param {String|Array|ArrayBuffer|Uint8Array|Buffer} input the input to convert.
 * @throws {Error} an Error if the browser doesn't support the requested output type.
 */
exports.transformTo = function(outputType, input) {
    if (!input) {
        // undefined, null, etc
        // an empty string won't harm.
        input = "";
    }
    if (!outputType) {
        return input;
    }
    exports.checkSupport(outputType);
    var inputType = exports.getTypeOf(input);
    var result = transform[inputType][outputType](input);
    return result;
};

/**
 * Return the type of the input.
 * The type will be in a format valid for JSZip.utils.transformTo : string, array, uint8array, arraybuffer.
 * @param {Object} input the input to identify.
 * @return {String} the (lowercase) type of the input.
 */
exports.getTypeOf = function(input) {
    if (typeof input === "string") {
        return "string";
    }
    if (Object.prototype.toString.call(input) === "[object Array]") {
        return "array";
    }
    if (support.nodebuffer && nodeBuffer.test(input)) {
        return "nodebuffer";
    }
    if (support.uint8array && input instanceof Uint8Array) {
        return "uint8array";
    }
    if (support.arraybuffer && input instanceof ArrayBuffer) {
        return "arraybuffer";
    }
};

/**
 * Throw an exception if the type is not supported.
 * @param {String} type the type to check.
 * @throws {Error} an Error if the browser doesn't support the requested type.
 */
exports.checkSupport = function(type) {
    var supported = support[type.toLowerCase()];
    if (!supported) {
        throw new Error(type + " is not supported by this browser");
    }
};
exports.MAX_VALUE_16BITS = 65535;
exports.MAX_VALUE_32BITS = -1; // well, "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF" is parsed as -1

/**
 * Prettify a string read as binary.
 * @param {string} str the string to prettify.
 * @return {string} a pretty string.
 */
exports.pretty = function(str) {
    var res = '',
        code, i;
    for (i = 0; i < (str || "").length; i++) {
        code = str.charCodeAt(i);
        res += '\\x' + (code < 16 ? "0" : "") + code.toString(16).toUpperCase();
    }
    return res;
};

/**
 * Find a compression registered in JSZip.
 * @param {string} compressionMethod the method magic to find.
 * @return {Object|null} the JSZip compression object, null if none found.
 */
exports.findCompression = function(compressionMethod) {
    for (var method in compressions) {
        if (!compressions.hasOwnProperty(method)) {
            continue;
        }
        if (compressions[method].magic === compressionMethod) {
            return compressions[method];
        }
    }
    return null;
};
/**
* Cross-window, cross-Node-context regular expression detection
* @param  {Object}  object Anything
* @return {Boolean}        true if the object is a regular expression,
* false otherwise
*/
exports.isRegExp = function (object) {
    return Object.prototype.toString.call(object) === "[object RegExp]";
};


},{"./compressions":14,"./nodeBuffer":22,"./support":28}],33:[function(require,module,exports){
'use strict';
var StringReader = require('./stringReader');
var NodeBufferReader = require('./nodeBufferReader');
var Uint8ArrayReader = require('./uint8ArrayReader');
var utils = require('./utils');
var sig = require('./signature');
var ZipEntry = require('./zipEntry');
var support = require('./support');
var jszipProto = require('./object');
//  class ZipEntries {{{
/**
 * All the entries in the zip file.
 * @constructor
 * @param {String|ArrayBuffer|Uint8Array} data the binary stream to load.
 * @param {Object} loadOptions Options for loading the stream.
 */
function ZipEntries(data, loadOptions) {
    this.files = [];
    this.loadOptions = loadOptions;
    if (data) {
        this.load(data);
    }
}
ZipEntries.prototype = {
    /**
     * Check that the reader is on the speficied signature.
     * @param {string} expectedSignature the expected signature.
     * @throws {Error} if it is an other signature.
     */
    checkSignature: function(expectedSignature) {
        var signature = this.reader.readString(4);
        if (signature !== expectedSignature) {
            throw new Error("Corrupted zip or bug : unexpected signature " + "(" + utils.pretty(signature) + ", expected " + utils.pretty(expectedSignature) + ")");
        }
    },
    /**
     * Read the end of the central directory.
     */
    readBlockEndOfCentral: function() {
        this.diskNumber = this.reader.readInt(2);
        this.diskWithCentralDirStart = this.reader.readInt(2);
        this.centralDirRecordsOnThisDisk = this.reader.readInt(2);
        this.centralDirRecords = this.reader.readInt(2);
        this.centralDirSize = this.reader.readInt(4);
        this.centralDirOffset = this.reader.readInt(4);

        this.zipCommentLength = this.reader.readInt(2);
        // warning : the encoding depends of the system locale
        // On a linux machine with LANG=en_US.utf8, this field is utf8 encoded.
        // On a windows machine, this field is encoded with the localized windows code page.
        this.zipComment = this.reader.readString(this.zipCommentLength);
        // To get consistent behavior with the generation part, we will assume that
        // this is utf8 encoded.
        this.zipComment = jszipProto.utf8decode(this.zipComment);
    },
    /**
     * Read the end of the Zip 64 central directory.
     * Not merged with the method readEndOfCentral :
     * The end of central can coexist with its Zip64 brother,
     * I don't want to read the wrong number of bytes !
     */
    readBlockZip64EndOfCentral: function() {
        this.zip64EndOfCentralSize = this.reader.readInt(8);
        this.versionMadeBy = this.reader.readString(2);
        this.versionNeeded = this.reader.readInt(2);
        this.diskNumber = this.reader.readInt(4);
        this.diskWithCentralDirStart = this.reader.readInt(4);
        this.centralDirRecordsOnThisDisk = this.reader.readInt(8);
        this.centralDirRecords = this.reader.readInt(8);
        this.centralDirSize = this.reader.readInt(8);
        this.centralDirOffset = this.reader.readInt(8);

        this.zip64ExtensibleData = {};
        var extraDataSize = this.zip64EndOfCentralSize - 44,
            index = 0,
            extraFieldId,
            extraFieldLength,
            extraFieldValue;
        while (index < extraDataSize) {
            extraFieldId = this.reader.readInt(2);
            extraFieldLength = this.reader.readInt(4);
            extraFieldValue = this.reader.readString(extraFieldLength);
            this.zip64ExtensibleData[extraFieldId] = {
                id: extraFieldId,
                length: extraFieldLength,
                value: extraFieldValue
            };
        }
    },
    /**
     * Read the end of the Zip 64 central directory locator.
     */
    readBlockZip64EndOfCentralLocator: function() {
        this.diskWithZip64CentralDirStart = this.reader.readInt(4);
        this.relativeOffsetEndOfZip64CentralDir = this.reader.readInt(8);
        this.disksCount = this.reader.readInt(4);
        if (this.disksCount > 1) {
            throw new Error("Multi-volumes zip are not supported");
        }
    },
    /**
     * Read the local files, based on the offset read in the central part.
     */
    readLocalFiles: function() {
        var i, file;
        for (i = 0; i < this.files.length; i++) {
            file = this.files[i];
            this.reader.setIndex(file.localHeaderOffset);
            this.checkSignature(sig.LOCAL_FILE_HEADER);
            file.readLocalPart(this.reader);
            file.handleUTF8();
            file.processAttributes();
        }
    },
    /**
     * Read the central directory.
     */
    readCentralDir: function() {
        var file;

        this.reader.setIndex(this.centralDirOffset);
        while (this.reader.readString(4) === sig.CENTRAL_FILE_HEADER) {
            file = new ZipEntry({
                zip64: this.zip64
            }, this.loadOptions);
            file.readCentralPart(this.reader);
            this.files.push(file);
        }
    },
    /**
     * Read the end of central directory.
     */
    readEndOfCentral: function() {
        var offset = this.reader.lastIndexOfSignature(sig.CENTRAL_DIRECTORY_END);
        if (offset === -1) {
            // Check if the content is a truncated zip or complete garbage.
            // A "LOCAL_FILE_HEADER" is not required at the beginning (auto
            // extractible zip for example) but it can give a good hint.
            // If an ajax request was used without responseType, we will also
            // get unreadable data.
            var isGarbage = true;
            try {
                this.reader.setIndex(0);
                this.checkSignature(sig.LOCAL_FILE_HEADER);
                isGarbage = false;
            } catch (e) {}

            if (isGarbage) {
                throw new Error("Can't find end of central directory : is this a zip file ? " +
                                "If it is, see http://stuk.github.io/jszip/documentation/howto/read_zip.html");
            } else {
                throw new Error("Corrupted zip : can't find end of central directory");
            }
        }
        this.reader.setIndex(offset);
        this.checkSignature(sig.CENTRAL_DIRECTORY_END);
        this.readBlockEndOfCentral();


        /* extract from the zip spec :
            4)  If one of the fields in the end of central directory
                record is too small to hold required data, the field
                should be set to -1 (0xFFFF or 0xFFFFFFFF) and the
                ZIP64 format record should be created.
            5)  The end of central directory record and the
                Zip64 end of central directory locator record must
                reside on the same disk when splitting or spanning
                an archive.
         */
        if (this.diskNumber === utils.MAX_VALUE_16BITS || this.diskWithCentralDirStart === utils.MAX_VALUE_16BITS || this.centralDirRecordsOnThisDisk === utils.MAX_VALUE_16BITS || this.centralDirRecords === utils.MAX_VALUE_16BITS || this.centralDirSize === utils.MAX_VALUE_32BITS || this.centralDirOffset === utils.MAX_VALUE_32BITS) {
            this.zip64 = true;

            /*
            Warning : the zip64 extension is supported, but ONLY if the 64bits integer read from
            the zip file can fit into a 32bits integer. This cannot be solved : Javascript represents
            all numbers as 64-bit double precision IEEE 754 floating point numbers.
            So, we have 53bits for integers and bitwise operations treat everything as 32bits.
            see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/Bitwise_Operators
            and http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf section 8.5
            */

            // should look for a zip64 EOCD locator
            offset = this.reader.lastIndexOfSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);
            if (offset === -1) {
                throw new Error("Corrupted zip : can't find the ZIP64 end of central directory locator");
            }
            this.reader.setIndex(offset);
            this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);
            this.readBlockZip64EndOfCentralLocator();

            // now the zip64 EOCD record
            this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir);
            this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_END);
            this.readBlockZip64EndOfCentral();
        }
    },
    prepareReader: function(data) {
        var type = utils.getTypeOf(data);
        if (type === "string" && !support.uint8array) {
            this.reader = new StringReader(data, this.loadOptions.optimizedBinaryString);
        }
        else if (type === "nodebuffer") {
            this.reader = new NodeBufferReader(data);
        }
        else {
            this.reader = new Uint8ArrayReader(utils.transformTo("uint8array", data));
        }
    },
    /**
     * Read a zip file and create ZipEntries.
     * @param {String|ArrayBuffer|Uint8Array|Buffer} data the binary string representing a zip file.
     */
    load: function(data) {
        this.prepareReader(data);
        this.readEndOfCentral();
        this.readCentralDir();
        this.readLocalFiles();
    }
};
// }}} end of ZipEntries
module.exports = ZipEntries;

},{"./nodeBufferReader":23,"./object":24,"./signature":25,"./stringReader":26,"./support":28,"./uint8ArrayReader":29,"./utils":32,"./zipEntry":34}],34:[function(require,module,exports){
'use strict';
var StringReader = require('./stringReader');
var utils = require('./utils');
var CompressedObject = require('./compressedObject');
var jszipProto = require('./object');

var MADE_BY_DOS = 0x00;
var MADE_BY_UNIX = 0x03;

// class ZipEntry {{{
/**
 * An entry in the zip file.
 * @constructor
 * @param {Object} options Options of the current file.
 * @param {Object} loadOptions Options for loading the stream.
 */
function ZipEntry(options, loadOptions) {
    this.options = options;
    this.loadOptions = loadOptions;
}
ZipEntry.prototype = {
    /**
     * say if the file is encrypted.
     * @return {boolean} true if the file is encrypted, false otherwise.
     */
    isEncrypted: function() {
        // bit 1 is set
        return (this.bitFlag & 0x0001) === 0x0001;
    },
    /**
     * say if the file has utf-8 filename/comment.
     * @return {boolean} true if the filename/comment is in utf-8, false otherwise.
     */
    useUTF8: function() {
        // bit 11 is set
        return (this.bitFlag & 0x0800) === 0x0800;
    },
    /**
     * Prepare the function used to generate the compressed content from this ZipFile.
     * @param {DataReader} reader the reader to use.
     * @param {number} from the offset from where we should read the data.
     * @param {number} length the length of the data to read.
     * @return {Function} the callback to get the compressed content (the type depends of the DataReader class).
     */
    prepareCompressedContent: function(reader, from, length) {
        return function() {
            var previousIndex = reader.index;
            reader.setIndex(from);
            var compressedFileData = reader.readData(length);
            reader.setIndex(previousIndex);

            return compressedFileData;
        };
    },
    /**
     * Prepare the function used to generate the uncompressed content from this ZipFile.
     * @param {DataReader} reader the reader to use.
     * @param {number} from the offset from where we should read the data.
     * @param {number} length the length of the data to read.
     * @param {JSZip.compression} compression the compression used on this file.
     * @param {number} uncompressedSize the uncompressed size to expect.
     * @return {Function} the callback to get the uncompressed content (the type depends of the DataReader class).
     */
    prepareContent: function(reader, from, length, compression, uncompressedSize) {
        return function() {

            var compressedFileData = utils.transformTo(compression.uncompressInputType, this.getCompressedContent());
            var uncompressedFileData = compression.uncompress(compressedFileData);

            if (uncompressedFileData.length !== uncompressedSize) {
                throw new Error("Bug : uncompressed data size mismatch");
            }

            return uncompressedFileData;
        };
    },
    /**
     * Read the local part of a zip file and add the info in this object.
     * @param {DataReader} reader the reader to use.
     */
    readLocalPart: function(reader) {
        var compression, localExtraFieldsLength;

        // we already know everything from the central dir !
        // If the central dir data are false, we are doomed.
        // On the bright side, the local part is scary  : zip64, data descriptors, both, etc.
        // The less data we get here, the more reliable this should be.
        // Let's skip the whole header and dash to the data !
        reader.skip(22);
        // in some zip created on windows, the filename stored in the central dir contains \ instead of /.
        // Strangely, the filename here is OK.
        // I would love to treat these zip files as corrupted (see http://www.info-zip.org/FAQ.html#backslashes
        // or APPNOTE#4.4.17.1, "All slashes MUST be forward slashes '/'") but there are a lot of bad zip generators...
        // Search "unzip mismatching "local" filename continuing with "central" filename version" on
        // the internet.
        //
        // I think I see the logic here : the central directory is used to display
        // content and the local directory is used to extract the files. Mixing / and \
        // may be used to display \ to windows users and use / when extracting the files.
        // Unfortunately, this lead also to some issues : http://seclists.org/fulldisclosure/2009/Sep/394
        this.fileNameLength = reader.readInt(2);
        localExtraFieldsLength = reader.readInt(2); // can't be sure this will be the same as the central dir
        this.fileName = reader.readString(this.fileNameLength);
        reader.skip(localExtraFieldsLength);

        if (this.compressedSize == -1 || this.uncompressedSize == -1) {
            throw new Error("Bug or corrupted zip : didn't get enough informations from the central directory " + "(compressedSize == -1 || uncompressedSize == -1)");
        }

        compression = utils.findCompression(this.compressionMethod);
        if (compression === null) { // no compression found
            throw new Error("Corrupted zip : compression " + utils.pretty(this.compressionMethod) + " unknown (inner file : " + this.fileName + ")");
        }
        this.decompressed = new CompressedObject();
        this.decompressed.compressedSize = this.compressedSize;
        this.decompressed.uncompressedSize = this.uncompressedSize;
        this.decompressed.crc32 = this.crc32;
        this.decompressed.compressionMethod = this.compressionMethod;
        this.decompressed.getCompressedContent = this.prepareCompressedContent(reader, reader.index, this.compressedSize, compression);
        this.decompressed.getContent = this.prepareContent(reader, reader.index, this.compressedSize, compression, this.uncompressedSize);

        // we need to compute the crc32...
        if (this.loadOptions.checkCRC32) {
            this.decompressed = utils.transformTo("string", this.decompressed.getContent());
            if (jszipProto.crc32(this.decompressed) !== this.crc32) {
                throw new Error("Corrupted zip : CRC32 mismatch");
            }
        }
    },

    /**
     * Read the central part of a zip file and add the info in this object.
     * @param {DataReader} reader the reader to use.
     */
    readCentralPart: function(reader) {
        this.versionMadeBy = reader.readInt(2);
        this.versionNeeded = reader.readInt(2);
        this.bitFlag = reader.readInt(2);
        this.compressionMethod = reader.readString(2);
        this.date = reader.readDate();
        this.crc32 = reader.readInt(4);
        this.compressedSize = reader.readInt(4);
        this.uncompressedSize = reader.readInt(4);
        this.fileNameLength = reader.readInt(2);
        this.extraFieldsLength = reader.readInt(2);
        this.fileCommentLength = reader.readInt(2);
        this.diskNumberStart = reader.readInt(2);
        this.internalFileAttributes = reader.readInt(2);
        this.externalFileAttributes = reader.readInt(4);
        this.localHeaderOffset = reader.readInt(4);

        if (this.isEncrypted()) {
            throw new Error("Encrypted zip are not supported");
        }

        this.fileName = reader.readString(this.fileNameLength);
        this.readExtraFields(reader);
        this.parseZIP64ExtraField(reader);
        this.fileComment = reader.readString(this.fileCommentLength);
    },

    /**
     * Parse the external file attributes and get the unix/dos permissions.
     */
    processAttributes: function () {
        this.unixPermissions = null;
        this.dosPermissions = null;
        var madeBy = this.versionMadeBy >> 8;

        // Check if we have the DOS directory flag set.
        // We look for it in the DOS and UNIX permissions
        // but some unknown platform could set it as a compatibility flag.
        this.dir = this.externalFileAttributes & 0x0010 ? true : false;

        if(madeBy === MADE_BY_DOS) {
            // first 6 bits (0 to 5)
            this.dosPermissions = this.externalFileAttributes & 0x3F;
        }

        if(madeBy === MADE_BY_UNIX) {
            this.unixPermissions = (this.externalFileAttributes >> 16) & 0xFFFF;
            // the octal permissions are in (this.unixPermissions & 0x01FF).toString(8);
        }

        // fail safe : if the name ends with a / it probably means a folder
        if (!this.dir && this.fileName.slice(-1) === '/') {
            this.dir = true;
        }
    },

    /**
     * Parse the ZIP64 extra field and merge the info in the current ZipEntry.
     * @param {DataReader} reader the reader to use.
     */
    parseZIP64ExtraField: function(reader) {

        if (!this.extraFields[0x0001]) {
            return;
        }

        // should be something, preparing the extra reader
        var extraReader = new StringReader(this.extraFields[0x0001].value);

        // I really hope that these 64bits integer can fit in 32 bits integer, because js
        // won't let us have more.
        if (this.uncompressedSize === utils.MAX_VALUE_32BITS) {
            this.uncompressedSize = extraReader.readInt(8);
        }
        if (this.compressedSize === utils.MAX_VALUE_32BITS) {
            this.compressedSize = extraReader.readInt(8);
        }
        if (this.localHeaderOffset === utils.MAX_VALUE_32BITS) {
            this.localHeaderOffset = extraReader.readInt(8);
        }
        if (this.diskNumberStart === utils.MAX_VALUE_32BITS) {
            this.diskNumberStart = extraReader.readInt(4);
        }
    },
    /**
     * Read the central part of a zip file and add the info in this object.
     * @param {DataReader} reader the reader to use.
     */
    readExtraFields: function(reader) {
        var start = reader.index,
            extraFieldId,
            extraFieldLength,
            extraFieldValue;

        this.extraFields = this.extraFields || {};

        while (reader.index < start + this.extraFieldsLength) {
            extraFieldId = reader.readInt(2);
            extraFieldLength = reader.readInt(2);
            extraFieldValue = reader.readString(extraFieldLength);

            this.extraFields[extraFieldId] = {
                id: extraFieldId,
                length: extraFieldLength,
                value: extraFieldValue
            };
        }
    },
    /**
     * Apply an UTF8 transformation if needed.
     */
    handleUTF8: function() {
        if (this.useUTF8()) {
            this.fileName = jszipProto.utf8decode(this.fileName);
            this.fileComment = jszipProto.utf8decode(this.fileComment);
        } else {
            var upath = this.findExtraFieldUnicodePath();
            if (upath !== null) {
                this.fileName = upath;
            }
            var ucomment = this.findExtraFieldUnicodeComment();
            if (ucomment !== null) {
                this.fileComment = ucomment;
            }
        }
    },

    /**
     * Find the unicode path declared in the extra field, if any.
     * @return {String} the unicode path, null otherwise.
     */
    findExtraFieldUnicodePath: function() {
        var upathField = this.extraFields[0x7075];
        if (upathField) {
            var extraReader = new StringReader(upathField.value);

            // wrong version
            if (extraReader.readInt(1) !== 1) {
                return null;
            }

            // the crc of the filename changed, this field is out of date.
            if (jszipProto.crc32(this.fileName) !== extraReader.readInt(4)) {
                return null;
            }

            return jszipProto.utf8decode(extraReader.readString(upathField.length - 5));
        }
        return null;
    },

    /**
     * Find the unicode comment declared in the extra field, if any.
     * @return {String} the unicode comment, null otherwise.
     */
    findExtraFieldUnicodeComment: function() {
        var ucommentField = this.extraFields[0x6375];
        if (ucommentField) {
            var extraReader = new StringReader(ucommentField.value);

            // wrong version
            if (extraReader.readInt(1) !== 1) {
                return null;
            }

            // the crc of the comment changed, this field is out of date.
            if (jszipProto.crc32(this.fileComment) !== extraReader.readInt(4)) {
                return null;
            }

            return jszipProto.utf8decode(extraReader.readString(ucommentField.length - 5));
        }
        return null;
    }
};
module.exports = ZipEntry;

},{"./compressedObject":13,"./object":24,"./stringReader":26,"./utils":32}],35:[function(require,module,exports){
// Top level file is just a mixin of submodules & constants
'use strict';

var assign    = require('./lib/utils/common').assign;

var deflate   = require('./lib/deflate');
var inflate   = require('./lib/inflate');
var constants = require('./lib/zlib/constants');

var pako = {};

assign(pako, deflate, inflate, constants);

module.exports = pako;

},{"./lib/deflate":36,"./lib/inflate":37,"./lib/utils/common":38,"./lib/zlib/constants":41}],36:[function(require,module,exports){
'use strict';


var zlib_deflate = require('./zlib/deflate.js');
var utils = require('./utils/common');
var strings = require('./utils/strings');
var msg = require('./zlib/messages');
var zstream = require('./zlib/zstream');

var toString = Object.prototype.toString;

/* Public constants ==========================================================*/
/* ===========================================================================*/

var Z_NO_FLUSH      = 0;
var Z_FINISH        = 4;

var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_SYNC_FLUSH    = 2;

var Z_DEFAULT_COMPRESSION = -1;

var Z_DEFAULT_STRATEGY    = 0;

var Z_DEFLATED  = 8;

/* ===========================================================================*/


/**
 * class Deflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[deflate]],
 * [[deflateRaw]] and [[gzip]].
 **/

/* internal
 * Deflate.chunks -> Array
 *
 * Chunks of output data, if [[Deflate#onData]] not overriden.
 **/

/**
 * Deflate.result -> Uint8Array|Array
 *
 * Compressed result, generated by default [[Deflate#onData]]
 * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you
 * push a chunk with explicit flush (call [[Deflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Deflate.err -> Number
 *
 * Error code after deflate finished. 0 (Z_OK) on success.
 * You will not need it in real life, because deflate errors
 * are possible only on wrong options or bad `onData` / `onEnd`
 * custom handlers.
 **/

/**
 * Deflate.msg -> String
 *
 * Error message, if [[Deflate.err]] != 0
 **/


/**
 * new Deflate(options)
 * - options (Object): zlib deflate options.
 *
 * Creates new deflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `level`
 * - `windowBits`
 * - `memLevel`
 * - `strategy`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw deflate
 * - `gzip` (Boolean) - create gzip wrapper
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 * - `header` (Object) - custom header for gzip
 *   - `text` (Boolean) - true if compressed data believed to be text
 *   - `time` (Number) - modification time, unix timestamp
 *   - `os` (Number) - operation system code
 *   - `extra` (Array) - array of bytes with extra data (max 65536)
 *   - `name` (String) - file name (binary string)
 *   - `comment` (String) - comment (binary string)
 *   - `hcrc` (Boolean) - true if header crc should be added
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var deflate = new pako.Deflate({ level: 3});
 *
 * deflate.push(chunk1, false);
 * deflate.push(chunk2, true);  // true -> last chunk
 *
 * if (deflate.err) { throw new Error(deflate.err); }
 *
 * console.log(deflate.result);
 * ```
 **/
var Deflate = function(options) {

  this.options = utils.assign({
    level: Z_DEFAULT_COMPRESSION,
    method: Z_DEFLATED,
    chunkSize: 16384,
    windowBits: 15,
    memLevel: 8,
    strategy: Z_DEFAULT_STRATEGY,
    to: ''
  }, options || {});

  var opt = this.options;

  if (opt.raw && (opt.windowBits > 0)) {
    opt.windowBits = -opt.windowBits;
  }

  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
    opt.windowBits += 16;
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm = new zstream();
  this.strm.avail_out = 0;

  var status = zlib_deflate.deflateInit2(
    this.strm,
    opt.level,
    opt.method,
    opt.windowBits,
    opt.memLevel,
    opt.strategy
  );

  if (status !== Z_OK) {
    throw new Error(msg[status]);
  }

  if (opt.header) {
    zlib_deflate.deflateSetHeader(this.strm, opt.header);
  }
};

/**
 * Deflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be
 *   converted to utf8 byte sequence.
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
 *
 * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
 * new compressed chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the compression context.
 *
 * On fail call [[Deflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * array format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Deflate.prototype.push = function(data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var status, _mode;

  if (this.ended) { return false; }

  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);

  // Convert data if needed
  if (typeof data === 'string') {
    // If we need to compress text, change encoding to utf8.
    strm.input = strings.string2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new utils.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }
    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */

    if (status !== Z_STREAM_END && status !== Z_OK) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }
    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {
      if (this.options.to === 'string') {
        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));
      } else {
        this.onData(utils.shrinkBuf(strm.output, strm.next_out));
      }
    }
  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);

  // Finalize on the last chunk.
  if (_mode === Z_FINISH) {
    status = zlib_deflate.deflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === Z_OK;
  }

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === Z_SYNC_FLUSH) {
    this.onEnd(Z_OK);
    strm.avail_out = 0;
    return true;
  }

  return true;
};


/**
 * Deflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Deflate.prototype.onData = function(chunk) {
  this.chunks.push(chunk);
};


/**
 * Deflate#onEnd(status) -> Void
 * - status (Number): deflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called once after you tell deflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Deflate.prototype.onEnd = function(status) {
  // On success - join
  if (status === Z_OK) {
    if (this.options.to === 'string') {
      this.result = this.chunks.join('');
    } else {
      this.result = utils.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * deflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * Compress `data` with deflate alrorythm and `options`.
 *
 * Supported options are:
 *
 * - level
 * - windowBits
 * - memLevel
 * - strategy
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);
 *
 * console.log(pako.deflate(data));
 * ```
 **/
function deflate(input, options) {
  var deflator = new Deflate(options);

  deflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (deflator.err) { throw deflator.msg; }

  return deflator.result;
}


/**
 * deflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function deflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return deflate(input, options);
}


/**
 * gzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but create gzip wrapper instead of
 * deflate one.
 **/
function gzip(input, options) {
  options = options || {};
  options.gzip = true;
  return deflate(input, options);
}


exports.Deflate = Deflate;
exports.deflate = deflate;
exports.deflateRaw = deflateRaw;
exports.gzip = gzip;

},{"./utils/common":38,"./utils/strings":39,"./zlib/deflate.js":43,"./zlib/messages":48,"./zlib/zstream":50}],37:[function(require,module,exports){
'use strict';


var zlib_inflate = require('./zlib/inflate.js');
var utils = require('./utils/common');
var strings = require('./utils/strings');
var c = require('./zlib/constants');
var msg = require('./zlib/messages');
var zstream = require('./zlib/zstream');
var gzheader = require('./zlib/gzheader');

var toString = Object.prototype.toString;

/**
 * class Inflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[inflate]]
 * and [[inflateRaw]].
 **/

/* internal
 * inflate.chunks -> Array
 *
 * Chunks of output data, if [[Inflate#onData]] not overriden.
 **/

/**
 * Inflate.result -> Uint8Array|Array|String
 *
 * Uncompressed result, generated by default [[Inflate#onData]]
 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you
 * push a chunk with explicit flush (call [[Inflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Inflate.err -> Number
 *
 * Error code after inflate finished. 0 (Z_OK) on success.
 * Should be checked if broken data possible.
 **/

/**
 * Inflate.msg -> String
 *
 * Error message, if [[Inflate.err]] != 0
 **/


/**
 * new Inflate(options)
 * - options (Object): zlib inflate options.
 *
 * Creates new inflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `windowBits`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw inflate
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 * By default, when no options set, autodetect deflate/gzip data format via
 * wrapper header.
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var inflate = new pako.Inflate({ level: 3});
 *
 * inflate.push(chunk1, false);
 * inflate.push(chunk2, true);  // true -> last chunk
 *
 * if (inflate.err) { throw new Error(inflate.err); }
 *
 * console.log(inflate.result);
 * ```
 **/
var Inflate = function(options) {

  this.options = utils.assign({
    chunkSize: 16384,
    windowBits: 0,
    to: ''
  }, options || {});

  var opt = this.options;

  // Force window size for `raw` data, if not set directly,
  // because we have no header for autodetect.
  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
    opt.windowBits = -opt.windowBits;
    if (opt.windowBits === 0) { opt.windowBits = -15; }
  }

  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
      !(options && options.windowBits)) {
    opt.windowBits += 32;
  }

  // Gzip header has no info about windows size, we can do autodetect only
  // for deflate. So, if window size not set, force it to max when gzip possible
  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
    // bit 3 (16) -> gzipped data
    // bit 4 (32) -> autodetect gzip/deflate
    if ((opt.windowBits & 15) === 0) {
      opt.windowBits |= 15;
    }
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm   = new zstream();
  this.strm.avail_out = 0;

  var status  = zlib_inflate.inflateInit2(
    this.strm,
    opt.windowBits
  );

  if (status !== c.Z_OK) {
    throw new Error(msg[status]);
  }

  this.header = new gzheader();

  zlib_inflate.inflateGetHeader(this.strm, this.header);
};

/**
 * Inflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
 *
 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
 * new output chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the decompression context.
 *
 * On fail call [[Inflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Inflate.prototype.push = function(data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var status, _mode;
  var next_out_utf8, tail, utf8str;

  // Flag to properly process Z_BUF_ERROR on testing inflate call
  // when we check that all output data was flushed.
  var allowBufError = false;

  if (this.ended) { return false; }
  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);

  // Convert data if needed
  if (typeof data === 'string') {
    // Only binary strings can be decompressed on practice
    strm.input = strings.binstring2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new utils.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }

    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */

    if (status === c.Z_BUF_ERROR && allowBufError === true) {
      status = c.Z_OK;
      allowBufError = false;
    }

    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }

    if (strm.next_out) {
      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {

        if (this.options.to === 'string') {

          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);

          tail = strm.next_out - next_out_utf8;
          utf8str = strings.buf2string(strm.output, next_out_utf8);

          // move tail
          strm.next_out = tail;
          strm.avail_out = chunkSize - tail;
          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }

          this.onData(utf8str);

        } else {
          this.onData(utils.shrinkBuf(strm.output, strm.next_out));
        }
      }
    }

    // When no more input data, we should check that internal inflate buffers
    // are flushed. The only way to do it when avail_out = 0 - run one more
    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.
    // Here we set flag to process this error properly.
    //
    // NOTE. Deflate does not return error in this case and does not needs such
    // logic.
    if (strm.avail_in === 0 && strm.avail_out === 0) {
      allowBufError = true;
    }

  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);

  if (status === c.Z_STREAM_END) {
    _mode = c.Z_FINISH;
  }

  // Finalize on the last chunk.
  if (_mode === c.Z_FINISH) {
    status = zlib_inflate.inflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === c.Z_OK;
  }

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === c.Z_SYNC_FLUSH) {
    this.onEnd(c.Z_OK);
    strm.avail_out = 0;
    return true;
  }

  return true;
};


/**
 * Inflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Inflate.prototype.onData = function(chunk) {
  this.chunks.push(chunk);
};


/**
 * Inflate#onEnd(status) -> Void
 * - status (Number): inflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called either after you tell inflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Inflate.prototype.onEnd = function(status) {
  // On success - join
  if (status === c.Z_OK) {
    if (this.options.to === 'string') {
      // Glue & convert here, until we teach pako to send
      // utf8 alligned strings to onData
      this.result = this.chunks.join('');
    } else {
      this.result = utils.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * inflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Decompress `data` with inflate/ungzip and `options`. Autodetect
 * format via wrapper header by default. That's why we don't provide
 * separate `ungzip` method.
 *
 * Supported options are:
 *
 * - windowBits
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
 *   , output;
 *
 * try {
 *   output = pako.inflate(input);
 * } catch (err)
 *   console.log(err);
 * }
 * ```
 **/
function inflate(input, options) {
  var inflator = new Inflate(options);

  inflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (inflator.err) { throw inflator.msg; }

  return inflator.result;
}


/**
 * inflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * The same as [[inflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function inflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return inflate(input, options);
}


/**
 * ungzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Just shortcut to [[inflate]], because it autodetects format
 * by header.content. Done for convenience.
 **/


exports.Inflate = Inflate;
exports.inflate = inflate;
exports.inflateRaw = inflateRaw;
exports.ungzip  = inflate;

},{"./utils/common":38,"./utils/strings":39,"./zlib/constants":41,"./zlib/gzheader":44,"./zlib/inflate.js":46,"./zlib/messages":48,"./zlib/zstream":50}],38:[function(require,module,exports){
'use strict';


var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
                (typeof Uint16Array !== 'undefined') &&
                (typeof Int32Array !== 'undefined');


exports.assign = function (obj /*from1, from2, from3, ...*/) {
  var sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    var source = sources.shift();
    if (!source) { continue; }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }

    for (var p in source) {
      if (source.hasOwnProperty(p)) {
        obj[p] = source[p];
      }
    }
  }

  return obj;
};


// reduce buffer size, avoiding mem copy
exports.shrinkBuf = function (buf, size) {
  if (buf.length === size) { return buf; }
  if (buf.subarray) { return buf.subarray(0, size); }
  buf.length = size;
  return buf;
};


var fnTyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    if (src.subarray && dest.subarray) {
      dest.set(src.subarray(src_offs, src_offs+len), dest_offs);
      return;
    }
    // Fallback to ordinary array
    for (var i=0; i<len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function(chunks) {
    var i, l, len, pos, chunk, result;

    // calculate data length
    len = 0;
    for (i=0, l=chunks.length; i<l; i++) {
      len += chunks[i].length;
    }

    // join chunks
    result = new Uint8Array(len);
    pos = 0;
    for (i=0, l=chunks.length; i<l; i++) {
      chunk = chunks[i];
      result.set(chunk, pos);
      pos += chunk.length;
    }

    return result;
  }
};

var fnUntyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    for (var i=0; i<len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function(chunks) {
    return [].concat.apply([], chunks);
  }
};


// Enable/Disable typed arrays use, for testing
//
exports.setTyped = function (on) {
  if (on) {
    exports.Buf8  = Uint8Array;
    exports.Buf16 = Uint16Array;
    exports.Buf32 = Int32Array;
    exports.assign(exports, fnTyped);
  } else {
    exports.Buf8  = Array;
    exports.Buf16 = Array;
    exports.Buf32 = Array;
    exports.assign(exports, fnUntyped);
  }
};

exports.setTyped(TYPED_OK);

},{}],39:[function(require,module,exports){
// String encode/decode helpers
'use strict';


var utils = require('./common');


// Quick check if we can use fast array to bin string conversion
//
// - apply(Array) can fail on Android 2.2
// - apply(Uint8Array) can fail on iOS 5.1 Safary
//
var STR_APPLY_OK = true;
var STR_APPLY_UIA_OK = true;

try { String.fromCharCode.apply(null, [0]); } catch(__) { STR_APPLY_OK = false; }
try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch(__) { STR_APPLY_UIA_OK = false; }


// Table with utf8 lengths (calculated by first byte of sequence)
// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
// because max possible codepoint is 0x10ffff
var _utf8len = new utils.Buf8(256);
for (var q=0; q<256; q++) {
  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
}
_utf8len[254]=_utf8len[254]=1; // Invalid sequence start


// convert string to array (typed, when possible)
exports.string2buf = function (str) {
  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

  // count binary size
  for (m_pos = 0; m_pos < str_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {
      c2 = str.charCodeAt(m_pos+1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
  }

  // allocate buffer
  buf = new utils.Buf8(buf_len);

  // convert
  for (i=0, m_pos = 0; i < buf_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {
      c2 = str.charCodeAt(m_pos+1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    if (c < 0x80) {
      /* one byte */
      buf[i++] = c;
    } else if (c < 0x800) {
      /* two bytes */
      buf[i++] = 0xC0 | (c >>> 6);
      buf[i++] = 0x80 | (c & 0x3f);
    } else if (c < 0x10000) {
      /* three bytes */
      buf[i++] = 0xE0 | (c >>> 12);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    } else {
      /* four bytes */
      buf[i++] = 0xf0 | (c >>> 18);
      buf[i++] = 0x80 | (c >>> 12 & 0x3f);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    }
  }

  return buf;
};

// Helper (used in 2 places)
function buf2binstring(buf, len) {
  // use fallback for big arrays to avoid stack overflow
  if (len < 65537) {
    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {
      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));
    }
  }

  var result = '';
  for (var i=0; i < len; i++) {
    result += String.fromCharCode(buf[i]);
  }
  return result;
}


// Convert byte array to binary string
exports.buf2binstring = function(buf) {
  return buf2binstring(buf, buf.length);
};


// Convert binary string (typed, when possible)
exports.binstring2buf = function(str) {
  var buf = new utils.Buf8(str.length);
  for (var i=0, len=buf.length; i < len; i++) {
    buf[i] = str.charCodeAt(i);
  }
  return buf;
};


// convert array to string
exports.buf2string = function (buf, max) {
  var i, out, c, c_len;
  var len = max || buf.length;

  // Reserve max possible length (2 words per char)
  // NB: by unknown reasons, Array is significantly faster for
  //     String.fromCharCode.apply than Uint16Array.
  var utf16buf = new Array(len*2);

  for (out=0, i=0; i<len;) {
    c = buf[i++];
    // quick process ascii
    if (c < 0x80) { utf16buf[out++] = c; continue; }

    c_len = _utf8len[c];
    // skip 5 & 6 byte codes
    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len-1; continue; }

    // apply mask on first byte
    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
    // join the rest
    while (c_len > 1 && i < len) {
      c = (c << 6) | (buf[i++] & 0x3f);
      c_len--;
    }

    // terminated by end of string?
    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

    if (c < 0x10000) {
      utf16buf[out++] = c;
    } else {
      c -= 0x10000;
      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
      utf16buf[out++] = 0xdc00 | (c & 0x3ff);
    }
  }

  return buf2binstring(utf16buf, out);
};


// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
exports.utf8border = function(buf, max) {
  var pos;

  max = max || buf.length;
  if (max > buf.length) { max = buf.length; }

  // go back from last position, until start of sequence found
  pos = max-1;
  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

  // Fuckup - very small and broken sequence,
  // return max, because we should return something anyway.
  if (pos < 0) { return max; }

  // If we came to start of buffer - that means vuffer is too small,
  // return max too.
  if (pos === 0) { return max; }

  return (pos + _utf8len[buf[pos]] > max) ? pos : max;
};

},{"./common":38}],40:[function(require,module,exports){
'use strict';

// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It doesn't worth to make additional optimizationa as in original.
// Small size is preferable.

function adler32(adler, buf, len, pos) {
  var s1 = (adler & 0xffff) |0,
      s2 = ((adler >>> 16) & 0xffff) |0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return (s1 | (s2 << 16)) |0;
}


module.exports = adler32;

},{}],41:[function(require,module,exports){
module.exports = {

  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH:         0,
  Z_PARTIAL_FLUSH:    1,
  Z_SYNC_FLUSH:       2,
  Z_FULL_FLUSH:       3,
  Z_FINISH:           4,
  Z_BLOCK:            5,
  Z_TREES:            6,

  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK:               0,
  Z_STREAM_END:       1,
  Z_NEED_DICT:        2,
  Z_ERRNO:           -1,
  Z_STREAM_ERROR:    -2,
  Z_DATA_ERROR:      -3,
  //Z_MEM_ERROR:     -4,
  Z_BUF_ERROR:       -5,
  //Z_VERSION_ERROR: -6,

  /* compression levels */
  Z_NO_COMPRESSION:         0,
  Z_BEST_SPEED:             1,
  Z_BEST_COMPRESSION:       9,
  Z_DEFAULT_COMPRESSION:   -1,


  Z_FILTERED:               1,
  Z_HUFFMAN_ONLY:           2,
  Z_RLE:                    3,
  Z_FIXED:                  4,
  Z_DEFAULT_STRATEGY:       0,

  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY:                 0,
  Z_TEXT:                   1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN:                2,

  /* The deflate compression method */
  Z_DEFLATED:               8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};

},{}],42:[function(require,module,exports){
'use strict';

// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.


// Use ordinary array, since untyped makes no boost here
function makeTable() {
  var c, table = [];

  for (var n =0; n < 256; n++) {
    c = n;
    for (var k =0; k < 8; k++) {
      c = ((c&1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }

  return table;
}

// Create table on load. Just 255 signed longs. Not a problem.
var crcTable = makeTable();


function crc32(crc, buf, len, pos) {
  var t = crcTable,
      end = pos + len;

  crc = crc ^ (-1);

  for (var i = pos; i < end; i++) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return (crc ^ (-1)); // >>> 0;
}


module.exports = crc32;

},{}],43:[function(require,module,exports){
'use strict';

var utils   = require('../utils/common');
var trees   = require('./trees');
var adler32 = require('./adler32');
var crc32   = require('./crc32');
var msg   = require('./messages');

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
var Z_NO_FLUSH      = 0;
var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
//var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
//var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
//var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;


/* compression levels */
//var Z_NO_COMPRESSION      = 0;
//var Z_BEST_SPEED          = 1;
//var Z_BEST_COMPRESSION    = 9;
var Z_DEFAULT_COMPRESSION = -1;


var Z_FILTERED            = 1;
var Z_HUFFMAN_ONLY        = 2;
var Z_RLE                 = 3;
var Z_FIXED               = 4;
var Z_DEFAULT_STRATEGY    = 0;

/* Possible values of the data_type field (though see inflate()) */
//var Z_BINARY              = 0;
//var Z_TEXT                = 1;
//var Z_ASCII               = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;


/* The deflate compression method */
var Z_DEFLATED  = 8;

/*============================================================================*/


var MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */
var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_MEM_LEVEL = 8;


var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */
var LITERALS      = 256;
/* number of literal bytes 0..255 */
var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */
var D_CODES       = 30;
/* number of distance codes */
var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */
var HEAP_SIZE     = 2*L_CODES + 1;
/* maximum heap size */
var MAX_BITS  = 15;
/* All codes must not exceed MAX_BITS bits */

var MIN_MATCH = 3;
var MAX_MATCH = 258;
var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

var PRESET_DICT = 0x20;

var INIT_STATE = 42;
var EXTRA_STATE = 69;
var NAME_STATE = 73;
var COMMENT_STATE = 91;
var HCRC_STATE = 103;
var BUSY_STATE = 113;
var FINISH_STATE = 666;

var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
var BS_BLOCK_DONE     = 2; /* block flush performed */
var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

function err(strm, errorCode) {
  strm.msg = msg[errorCode];
  return errorCode;
}

function rank(f) {
  return ((f) << 1) - ((f) > 4 ? 9 : 0);
}

function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


/* =========================================================================
 * Flush as much pending output as possible. All deflate() output goes
 * through this function so some applications may wish to modify it
 * to avoid allocating a large strm->output buffer and copying into it.
 * (See also read_buf()).
 */
function flush_pending(strm) {
  var s = strm.state;

  //_tr_flush_bits(s);
  var len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) { return; }

  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
}


function flush_block_only (s, last) {
  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
}


function put_byte(s, b) {
  s.pending_buf[s.pending++] = b;
}


/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
function putShortMSB(s, b) {
//  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
}


/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
function read_buf(strm, buf, start, size) {
  var len = strm.avail_in;

  if (len > size) { len = size; }
  if (len === 0) { return 0; }

  strm.avail_in -= len;

  utils.arraySet(buf, strm.input, strm.next_in, len, start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32(strm.adler, buf, len, start);
  }

  else if (strm.state.wrap === 2) {
    strm.adler = crc32(strm.adler, buf, len, start);
  }

  strm.next_in += len;
  strm.total_in += len;

  return len;
}


/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
function longest_match(s, cur_match) {
  var chain_length = s.max_chain_length;      /* max hash chain length */
  var scan = s.strstart; /* current string */
  var match;                       /* matched string */
  var len;                           /* length of current match */
  var best_len = s.prev_length;              /* best match length so far */
  var nice_match = s.nice_match;             /* stop if match long enough */
  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

  var _win = s.window; // shortcut

  var wmask = s.w_mask;
  var prev  = s.prev;

  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  var strend = s.strstart + MAX_MATCH;
  var scan_end1  = _win[scan + best_len - 1];
  var scan_end   = _win[scan + best_len];

  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;

    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len]     !== scan_end  ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match]                !== _win[scan] ||
        _win[++match]              !== _win[scan + 1]) {
      continue;
    }

    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             scan < strend);

    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;

    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1  = _win[scan + best_len - 1];
      scan_end   = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
}


/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
function fill_window(s) {
  var _w_size = s.w_size;
  var p, n, m, more, str;

  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart;

    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}


    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;

      /* Slide the hash table (could be avoided with 32 bit values
       at the expense of memory usage). We slide even when level == 0
       to keep the hash table consistent if we switch back to level > 0
       later. (Using level 0 permanently is not an optimal usage of
       zlib, so we don't care about this pathological case.)
       */

      n = s.hash_size;
      p = n;
      do {
        m = s.head[--p];
        s.head[p] = (m >= _w_size ? m - _w_size : 0);
      } while (--n);

      n = _w_size;
      p = n;
      do {
        m = s.prev[--p];
        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
        /* If n is not on any hash chain, prev[n] is garbage but
         * its value will never be used.
         */
      } while (--n);

      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }

    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;

    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];

      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH-1]) & s.hash_mask;

        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */

  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
//  if (s.high_water < s.window_size) {
//    var curr = s.strstart + s.lookahead;
//    var init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
}

/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 * This function does not insert new strings in the dictionary since
 * uncompressible data is probably not useful. This function is used
 * only for the level=0 compression option.
 * NOTE: this function should be optimized to avoid extra copying from
 * window to pending_buf.
 */
function deflate_stored(s, flush) {
  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
   * to pending_buf_size, and each stored block has a 5 byte header:
   */
  var max_block_size = 0xffff;

  if (max_block_size > s.pending_buf_size - 5) {
    max_block_size = s.pending_buf_size - 5;
  }

  /* Copy as much as possible from input to output: */
  for (;;) {
    /* Fill the window as much as possible: */
    if (s.lookahead <= 1) {

      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
      //  s->block_start >= (long)s->w_size, "slide too late");
//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
//        s.block_start >= s.w_size)) {
//        throw  new Error("slide too late");
//      }

      fill_window(s);
      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }

      if (s.lookahead === 0) {
        break;
      }
      /* flush the current block */
    }
    //Assert(s->block_start >= 0L, "block gone");
//    if (s.block_start < 0) throw new Error("block gone");

    s.strstart += s.lookahead;
    s.lookahead = 0;

    /* Emit a stored block if pending_buf will be full: */
    var max_start = s.block_start + max_block_size;

    if (s.strstart === 0 || s.strstart >= max_start) {
      /* strstart == 0 is possible when wraparound on 16-bit machine */
      s.lookahead = s.strstart - max_start;
      s.strstart = max_start;
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/


    }
    /* Flush if we may have to slide, otherwise block_start may become
     * negative and the data will be gone:
     */
    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }

  s.insert = 0;

  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }

  if (s.strstart > s.block_start) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_NEED_MORE;
}

/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
function deflate_fast(s, flush) {
  var hash_head;        /* head of the hash chain */
  var bflush;           /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;

      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else
      {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

//#if MIN_MATCH != 3
//                Call UPDATE_HASH() MIN_MATCH-3 more times
//#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = ((s.strstart < (MIN_MATCH-1)) ? s.strstart : MIN_MATCH-1);
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
function deflate_slow(s, flush) {
  var hash_head;          /* head of hash chain */
  var bflush;              /* set if current block must be flushed */

  var max_insert;

  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH-1;

    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size-MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */

      if (s.match_length <= 5 &&
         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

        /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */
        s.match_length = MIN_MATCH-1;
      }
    }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      /* Do not insert strings in hash table beyond this. */

      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = trees._tr_tally(s, s.strstart - 1- s.prev_match, s.prev_length - MIN_MATCH);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length-1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH-1;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart-1]);

      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart-1]);

    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH-1 ? s.strstart : MIN_MATCH-1;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_BLOCK_DONE;
}


/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
function deflate_rle(s, flush) {
  var bflush;            /* set if current block must be flushed */
  var prev;              /* byte at distance one to match */
  var scan, strend;      /* scan goes up to strend for length of run */

  var _win = s.window;

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }

    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
function deflate_huff(s, flush) {
  var bflush;             /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        break;      /* flush the current block */
      }
    }

    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
var Config = function (good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
};

var configuration_table;

configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
];


/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
function lm_init(s) {
  s.window_size = 2 * s.w_size;

  /*** CLEAR_HASH(s); ***/
  zero(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;

  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
}


function DeflateState() {
  this.strm = null;            /* pointer back to this zlib stream */
  this.status = 0;            /* as the name implies */
  this.pending_buf = null;      /* output still pending */
  this.pending_buf_size = 0;  /* size of pending_buf */
  this.pending_out = 0;       /* next pending byte to output to the stream */
  this.pending = 0;           /* nb of bytes in the pending buffer */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null;         /* gzip header information to write */
  this.gzindex = 0;           /* where in extra, name, or comment */
  this.method = Z_DEFLATED; /* can only be DEFLATED */
  this.last_flush = -1;   /* value of flush param for previous deflate call */

  this.w_size = 0;  /* LZ77 window size (32K by default) */
  this.w_bits = 0;  /* log2(w_size)  (8..16) */
  this.w_mask = 0;  /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null;   /* Heads of the hash chains or NIL. */

  this.ins_h = 0;       /* hash index of string to be inserted */
  this.hash_size = 0;   /* number of elements in hash table */
  this.hash_bits = 0;   /* log2(hash_size) */
  this.hash_mask = 0;   /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0;      /* length of best match */
  this.prev_match = 0;        /* previous match */
  this.match_available = 0;   /* set if previous match exists */
  this.strstart = 0;          /* start of string to insert */
  this.match_start = 0;       /* start of matching string */
  this.lookahead = 0;         /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0;     /* compression level (1..9) */
  this.strategy = 0;  /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0; /* Stop searching when current match exceeds this */

              /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */

  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
  this.dyn_dtree  = new utils.Buf16((2*D_CODES+1) * 2);
  this.bl_tree    = new utils.Buf16((2*BL_CODES+1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);

  this.l_desc   = null;         /* desc. for literal tree */
  this.d_desc   = null;         /* desc. for distance tree */
  this.bl_desc  = null;         /* desc. for bit length tree */

  //ush bl_count[MAX_BITS+1];
  this.bl_count = new utils.Buf16(MAX_BITS+1);
  /* number of codes at each bit length for an optimal tree */

  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new utils.Buf16(2*L_CODES+1);  /* heap used to build the Huffman trees */
  zero(this.heap);

  this.heap_len = 0;               /* number of elements in the heap */
  this.heap_max = 0;               /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new utils.Buf16(2*L_CODES+1); //uch depth[2*L_CODES+1];
  zero(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.l_buf = 0;          /* buffer index for literals or lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.last_lit = 0;      /* running index in l_buf */

  this.d_buf = 0;
  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
   * the same number of elements. To use different lengths, an extra flag
   * array would be necessary.
   */

  this.opt_len = 0;       /* bit length of current block with optimal trees */
  this.static_len = 0;    /* bit length of current block with static trees */
  this.matches = 0;       /* number of string matches in current block */
  this.insert = 0;        /* bytes at end of window left to insert */


  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */

  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}


function deflateResetKeep(strm) {
  var s;

  if (!strm || !strm.state) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;

  s = strm.state;
  s.pending = 0;
  s.pending_out = 0;

  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
  strm.adler = (s.wrap === 2) ?
    0  // crc32(0, Z_NULL, 0)
  :
    1; // adler32(0, Z_NULL, 0)
  s.last_flush = Z_NO_FLUSH;
  trees._tr_init(s);
  return Z_OK;
}


function deflateReset(strm) {
  var ret = deflateResetKeep(strm);
  if (ret === Z_OK) {
    lm_init(strm.state);
  }
  return ret;
}


function deflateSetHeader(strm, head) {
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
  strm.state.gzhead = head;
  return Z_OK;
}


function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
  if (!strm) { // === Z_NULL
    return Z_STREAM_ERROR;
  }
  var wrap = 1;

  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }

  if (windowBits < 0) { /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  }

  else if (windowBits > 15) {
    wrap = 2;           /* write gzip wrapper instead */
    windowBits -= 16;
  }


  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
    strategy < 0 || strategy > Z_FIXED) {
    return err(strm, Z_STREAM_ERROR);
  }


  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */

  var s = new DeflateState();

  strm.state = s;
  s.strm = strm;

  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;

  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

  s.window = new utils.Buf8(s.w_size * 2);
  s.head = new utils.Buf16(s.hash_size);
  s.prev = new utils.Buf16(s.w_size);

  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  s.pending_buf_size = s.lit_bufsize * 4;
  s.pending_buf = new utils.Buf8(s.pending_buf_size);

  s.d_buf = s.lit_bufsize >> 1;
  s.l_buf = (1 + 2) * s.lit_bufsize;

  s.level = level;
  s.strategy = strategy;
  s.method = method;

  return deflateReset(strm);
}

function deflateInit(strm, level) {
  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
}


function deflate(strm, flush) {
  var old_flush, s;
  var beg, val; // for gzip header write only

  if (!strm || !strm.state ||
    flush > Z_BLOCK || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
  }

  s = strm.state;

  if (!strm.output ||
      (!strm.input && strm.avail_in !== 0) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
  }

  s.strm = strm; /* just in case */
  old_flush = s.last_flush;
  s.last_flush = flush;

  /* Write the header */
  if (s.status === INIT_STATE) {

    if (s.wrap === 2) { // GZIP header
      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);
      if (!s.gzhead) { // s->gzhead == Z_NULL
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;
      }
      else {
        put_byte(s, (s.gzhead.text ? 1 : 0) +
                    (s.gzhead.hcrc ? 2 : 0) +
                    (!s.gzhead.extra ? 0 : 4) +
                    (!s.gzhead.name ? 0 : 8) +
                    (!s.gzhead.comment ? 0 : 16)
                );
        put_byte(s, s.gzhead.time & 0xff);
        put_byte(s, (s.gzhead.time >> 8) & 0xff);
        put_byte(s, (s.gzhead.time >> 16) & 0xff);
        put_byte(s, (s.gzhead.time >> 24) & 0xff);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, s.gzhead.os & 0xff);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 0xff);
          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    }
    else // DEFLATE header
    {
      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
      var level_flags = -1;

      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
        level_flags = 0;
      } else if (s.level < 6) {
        level_flags = 1;
      } else if (s.level === 6) {
        level_flags = 2;
      } else {
        level_flags = 3;
      }
      header |= (level_flags << 6);
      if (s.strstart !== 0) { header |= PRESET_DICT; }
      header += 31 - (header % 31);

      s.status = BUSY_STATE;
      putShortMSB(s, header);

      /* Save the adler32 of the preset dictionary: */
      if (s.strstart !== 0) {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
      }
      strm.adler = 1; // adler32(0L, Z_NULL, 0);
    }
  }

//#ifdef GZIP
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */

      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            break;
          }
        }
        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
        s.gzindex++;
      }
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (s.gzindex === s.gzhead.extra.length) {
        s.gzindex = 0;
        s.status = NAME_STATE;
      }
    }
    else {
      s.status = NAME_STATE;
    }
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.gzindex = 0;
        s.status = COMMENT_STATE;
      }
    }
    else {
      s.status = COMMENT_STATE;
    }
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.status = HCRC_STATE;
      }
    }
    else {
      s.status = HCRC_STATE;
    }
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
      }
      if (s.pending + 2 <= s.pending_buf_size) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, (strm.adler >> 8) & 0xff);
        strm.adler = 0; //crc32(0L, Z_NULL, 0);
        s.status = BUSY_STATE;
      }
    }
    else {
      s.status = BUSY_STATE;
    }
  }
//#endif

  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK;
    }

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
    flush !== Z_FINISH) {
    return err(strm, Z_BUF_ERROR);
  }

  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR);
  }

  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
        configuration_table[s.level].func(s, flush));

    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        trees._tr_align(s);
      }
      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

        trees._tr_stored_block(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH) {
          /*** CLEAR_HASH(s); ***/             /* forget history */
          zero(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK;
      }
    }
  }
  //Assert(strm->avail_out > 0, "bug2");
  //if (strm.avail_out <= 0) { throw new Error("bug2");}

  if (flush !== Z_FINISH) { return Z_OK; }
  if (s.wrap <= 0) { return Z_STREAM_END; }

  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, (strm.adler >> 8) & 0xff);
    put_byte(s, (strm.adler >> 16) & 0xff);
    put_byte(s, (strm.adler >> 24) & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, (strm.total_in >> 8) & 0xff);
    put_byte(s, (strm.total_in >> 16) & 0xff);
    put_byte(s, (strm.total_in >> 24) & 0xff);
  }
  else
  {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }

  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) { s.wrap = -s.wrap; }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
}

function deflateEnd(strm) {
  var status;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  status = strm.state.status;
  if (status !== INIT_STATE &&
    status !== EXTRA_STATE &&
    status !== NAME_STATE &&
    status !== COMMENT_STATE &&
    status !== HCRC_STATE &&
    status !== BUSY_STATE &&
    status !== FINISH_STATE
  ) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.state = null;

  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
}

/* =========================================================================
 * Copy the source state to the destination state
 */
//function deflateCopy(dest, source) {
//
//}

exports.deflateInit = deflateInit;
exports.deflateInit2 = deflateInit2;
exports.deflateReset = deflateReset;
exports.deflateResetKeep = deflateResetKeep;
exports.deflateSetHeader = deflateSetHeader;
exports.deflate = deflate;
exports.deflateEnd = deflateEnd;
exports.deflateInfo = 'pako deflate (from Nodeca project)';

/* Not implemented
exports.deflateBound = deflateBound;
exports.deflateCopy = deflateCopy;
exports.deflateSetDictionary = deflateSetDictionary;
exports.deflateParams = deflateParams;
exports.deflatePending = deflatePending;
exports.deflatePrime = deflatePrime;
exports.deflateTune = deflateTune;
*/

},{"../utils/common":38,"./adler32":40,"./crc32":42,"./messages":48,"./trees":49}],44:[function(require,module,exports){
'use strict';


function GZheader() {
  /* true if compressed data believed to be text */
  this.text       = 0;
  /* modification time */
  this.time       = 0;
  /* extra flags (not used when writing a gzip file) */
  this.xflags     = 0;
  /* operating system */
  this.os         = 0;
  /* pointer to extra field or Z_NULL if none */
  this.extra      = null;
  /* extra field length (valid if extra != Z_NULL) */
  this.extra_len  = 0; // Actually, we don't need it in JS,
                       // but leave for few code modifications

  //
  // Setup limits is not necessary because in js we should not preallocate memory
  // for inflate use constant limit in 65536 bytes
  //

  /* space at extra (only when reading header) */
  // this.extra_max  = 0;
  /* pointer to zero-terminated file name or Z_NULL */
  this.name       = '';
  /* space at name (only when reading header) */
  // this.name_max   = 0;
  /* pointer to zero-terminated comment or Z_NULL */
  this.comment    = '';
  /* space at comment (only when reading header) */
  // this.comm_max   = 0;
  /* true if there was or will be a header crc */
  this.hcrc       = 0;
  /* true when done reading gzip header (not used when writing a gzip file) */
  this.done       = false;
}

module.exports = GZheader;

},{}],45:[function(require,module,exports){
'use strict';

// See state defs from inflate.js
var BAD = 30;       /* got a data error -- remain here until reset */
var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
module.exports = function inflate_fast(strm, start) {
  var state;
  var _in;                    /* local strm.input */
  var last;                   /* have enough input while in < last */
  var _out;                   /* local strm.output */
  var beg;                    /* inflate()'s initial strm.output */
  var end;                    /* while out < end, enough space available */
//#ifdef INFLATE_STRICT
  var dmax;                   /* maximum distance from zlib header */
//#endif
  var wsize;                  /* window size or zero if not using window */
  var whave;                  /* valid bytes in the window */
  var wnext;                  /* window write index */
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
  var s_window;               /* allocated sliding window, if wsize != 0 */
  var hold;                   /* local strm.hold */
  var bits;                   /* local strm.bits */
  var lcode;                  /* local strm.lencode */
  var dcode;                  /* local strm.distcode */
  var lmask;                  /* mask for first level of length codes */
  var dmask;                  /* mask for first level of distance codes */
  var here;                   /* retrieved table entry */
  var op;                     /* code bits, operation, extra bits, or */
                              /*  window position, window bytes to copy */
  var len;                    /* match length, unused bytes */
  var dist;                   /* match distance */
  var from;                   /* where to copy match from */
  var from_source;


  var input, output; // JS specific, because we have no pointers

  /* copy state to local variables */
  state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
//#ifdef INFLATE_STRICT
  dmax = state.dmax;
//#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;


  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top:
  do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }

    here = lcode[hold & lmask];

    dolen:
    for (;;) { // Goto emulation
      op = here >>> 24/*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = (here >>> 16) & 0xff/*here.op*/;
      if (op === 0) {                          /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff/*here.val*/;
      }
      else if (op & 16) {                     /* length base */
        len = here & 0xffff/*here.val*/;
        op &= 15;                           /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & ((1 << op) - 1);
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];

        dodist:
        for (;;) { // goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;

          if (op & 16) {                      /* distance base */
            dist = here & 0xffff/*here.val*/;
            op &= 15;                       /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & ((1 << op) - 1);
//#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break top;
            }
//#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg;                /* max distance in output */
            if (dist > op) {                /* see if copy from window */
              op = dist - op;               /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break top;
                }

// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//                if (len <= op - whave) {
//                  do {
//                    output[_out++] = 0;
//                  } while (--len);
//                  continue top;
//                }
//                len -= op - whave;
//                do {
//                  output[_out++] = 0;
//                } while (--op > whave);
//                if (op === 0) {
//                  from = _out - dist;
//                  do {
//                    output[_out++] = output[from++];
//                  } while (--len);
//                  continue top;
//                }
//#endif
              }
              from = 0; // window index
              from_source = s_window;
              if (wnext === 0) {           /* very common case */
                from += wsize - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              else if (wnext < op) {      /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {         /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {  /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;      /* rest from output */
                    from_source = output;
                  }
                }
              }
              else {                      /* contiguous in window */
                from += wnext - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            }
            else {
              from = _out - dist;          /* copy direct from output */
              do {                        /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          }
          else if ((op & 64) === 0) {          /* 2nd level distance code */
            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dodist;
          }
          else {
            strm.msg = 'invalid distance code';
            state.mode = BAD;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      }
      else if ((op & 64) === 0) {              /* 2nd level length code */
        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
        continue dolen;
      }
      else if (op & 32) {                     /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE;
        break top;
      }
      else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break top;
      }

      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);

  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;

  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
  state.hold = hold;
  state.bits = bits;
  return;
};

},{}],46:[function(require,module,exports){
'use strict';


var utils = require('../utils/common');
var adler32 = require('./adler32');
var crc32   = require('./crc32');
var inflate_fast = require('./inffast');
var inflate_table = require('./inftrees');

var CODES = 0;
var LENS = 1;
var DISTS = 2;

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
//var Z_NO_FLUSH      = 0;
//var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
//var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;

/* The deflate compression method */
var Z_DEFLATED  = 8;


/* STATES ====================================================================*/
/* ===========================================================================*/


var    HEAD = 1;       /* i: waiting for magic header */
var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
var    TIME = 3;       /* i: waiting for modification time (gzip) */
var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
var    NAME = 7;       /* i: waiting for end of file name (gzip) */
var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
var    HCRC = 9;       /* i: waiting for header crc (gzip) */
var    DICTID = 10;    /* i: waiting for dictionary check value */
var    DICT = 11;      /* waiting for inflateSetDictionary() call */
var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
var        STORED = 14;    /* i: waiting for stored size (length and complement) */
var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
var        LENLENS = 18;   /* i: waiting for code length code lengths */
var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
var            LEN = 21;       /* i: waiting for length/lit/eob code */
var            LENEXT = 22;    /* i: waiting for length extra bits */
var            DIST = 23;      /* i: waiting for distance code */
var            DISTEXT = 24;   /* i: waiting for distance extra bits */
var            MATCH = 25;     /* o: waiting for output space to copy string */
var            LIT = 26;       /* o: waiting for output space to write literal */
var    CHECK = 27;     /* i: waiting for 32-bit check value */
var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
var    DONE = 29;      /* finished check, done -- remain here until reset */
var    BAD = 30;       /* got a data error -- remain here until reset */
var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/



var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_WBITS = MAX_WBITS;


function ZSWAP32(q) {
  return  (((q >>> 24) & 0xff) +
          ((q >>> 8) & 0xff00) +
          ((q & 0xff00) << 8) +
          ((q & 0xff) << 24));
}


function InflateState() {
  this.mode = 0;             /* current inflate mode */
  this.last = false;          /* true if processing last block */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.havedict = false;      /* true if dictionary provided */
  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0;             /* protected copy of check value */
  this.total = 0;             /* protected copy of output count */
  // TODO: may be {}
  this.head = null;           /* where to save gzip header information */

  /* sliding window */
  this.wbits = 0;             /* log base 2 of requested window size */
  this.wsize = 0;             /* window size or zero if not using window */
  this.whave = 0;             /* valid bytes in the window */
  this.wnext = 0;             /* window write index */
  this.window = null;         /* allocated sliding window, if needed */

  /* bit accumulator */
  this.hold = 0;              /* input bit accumulator */
  this.bits = 0;              /* number of bits in "in" */

  /* for string and stored block copying */
  this.length = 0;            /* literal or length of data to copy */
  this.offset = 0;            /* distance back to copy string from */

  /* for table and code decoding */
  this.extra = 0;             /* extra bits needed */

  /* fixed and dynamic code tables */
  this.lencode = null;          /* starting table for length/literal codes */
  this.distcode = null;         /* starting table for distance codes */
  this.lenbits = 0;           /* index bits for lencode */
  this.distbits = 0;          /* index bits for distcode */

  /* dynamic table building */
  this.ncode = 0;             /* number of code length code lengths */
  this.nlen = 0;              /* number of length code lengths */
  this.ndist = 0;             /* number of distance code lengths */
  this.have = 0;              /* number of code lengths in lens[] */
  this.next = null;              /* next available space in codes[] */

  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
  this.work = new utils.Buf16(288); /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
  this.sane = 0;                   /* if false, allow invalid distance too far */
  this.back = 0;                   /* bits back of last unprocessed length/lit */
  this.was = 0;                    /* initial length of match */
}

function inflateResetKeep(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {       /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.dmax = 32768;
  state.head = null/*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);

  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK;
}

function inflateReset(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);

}

function inflateReset2(strm, windowBits) {
  var wrap;
  var state;

  /* get the state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;

  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  }
  else {
    wrap = (windowBits >> 4) + 1;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }

  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }

  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
}

function inflateInit2(strm, windowBits) {
  var ret;
  var state;

  if (!strm) { return Z_STREAM_ERROR; }
  //strm.msg = Z_NULL;                 /* in case we return an error */

  state = new InflateState();

  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.window = null/*Z_NULL*/;
  ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK) {
    strm.state = null/*Z_NULL*/;
  }
  return ret;
}

function inflateInit(strm) {
  return inflateInit2(strm, DEF_WBITS);
}


/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
var virgin = true;

var lenfix, distfix; // We have no pointers in JS, so keep tables separate

function fixedtables(state) {
  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    var sym;

    lenfix = new utils.Buf32(512);
    distfix = new utils.Buf32(32);

    /* literal/length table */
    sym = 0;
    while (sym < 144) { state.lens[sym++] = 8; }
    while (sym < 256) { state.lens[sym++] = 9; }
    while (sym < 280) { state.lens[sym++] = 7; }
    while (sym < 288) { state.lens[sym++] = 8; }

    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, {bits: 9});

    /* distance table */
    sym = 0;
    while (sym < 32) { state.lens[sym++] = 5; }

    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, {bits: 5});

    /* do this just once */
    virgin = false;
  }

  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
}


/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
function updatewindow(strm, src, end, copy) {
  var dist;
  var state = strm.state;

  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;

    state.window = new utils.Buf8(state.wsize);
  }

  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    utils.arraySet(state.window,src, end - state.wsize, state.wsize, 0);
    state.wnext = 0;
    state.whave = state.wsize;
  }
  else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    utils.arraySet(state.window,src, end - copy, dist, state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      utils.arraySet(state.window,src, end - copy, copy, 0);
      state.wnext = copy;
      state.whave = state.wsize;
    }
    else {
      state.wnext += dist;
      if (state.wnext === state.wsize) { state.wnext = 0; }
      if (state.whave < state.wsize) { state.whave += dist; }
    }
  }
  return 0;
}

function inflate(strm, flush) {
  var state;
  var input, output;          // input/output buffers
  var next;                   /* next input INDEX */
  var put;                    /* next output INDEX */
  var have, left;             /* available input and output */
  var hold;                   /* bit buffer */
  var bits;                   /* bits in bit buffer */
  var _in, _out;              /* save starting available input and output */
  var copy;                   /* number of stored or match bytes to copy */
  var from;                   /* where to copy match bytes from */
  var from_source;
  var here = 0;               /* current decoding table entry */
  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //var last;                   /* parent table entry */
  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  var len;                    /* length to copy for repeats, bits to drop */
  var ret;                    /* return code */
  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
  var opts;

  var n; // temporary var for NEED_BITS

  var order = /* permutation of code lengths */
    [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];


  if (!strm || !strm.state || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
    return Z_STREAM_ERROR;
  }

  state = strm.state;
  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---

  _in = have;
  _out = left;
  ret = Z_OK;

  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
    case HEAD:
      if (state.wrap === 0) {
        state.mode = TYPEDO;
        break;
      }
      //=== NEEDBITS(16);
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
        state.check = 0/*crc32(0L, Z_NULL, 0)*/;
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//

        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = FLAGS;
        break;
      }
      state.flags = 0;           /* expect zlib header */
      if (state.head) {
        state.head.done = false;
      }
      if (!(state.wrap & 1) ||   /* check if zlib header allowed */
        (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
        strm.msg = 'incorrect header check';
        state.mode = BAD;
        break;
      }
      if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
        strm.msg = 'unknown compression method';
        state.mode = BAD;
        break;
      }
      //--- DROPBITS(4) ---//
      hold >>>= 4;
      bits -= 4;
      //---//
      len = (hold & 0x0f)/*BITS(4)*/ + 8;
      if (state.wbits === 0) {
        state.wbits = len;
      }
      else if (len > state.wbits) {
        strm.msg = 'invalid window size';
        state.mode = BAD;
        break;
      }
      state.dmax = 1 << len;
      //Tracev((stderr, "inflate:   zlib header ok\n"));
      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
      state.mode = hold & 0x200 ? DICTID : TYPE;
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      break;
    case FLAGS:
      //=== NEEDBITS(16); */
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.flags = hold;
      if ((state.flags & 0xff) !== Z_DEFLATED) {
        strm.msg = 'unknown compression method';
        state.mode = BAD;
        break;
      }
      if (state.flags & 0xe000) {
        strm.msg = 'unknown header flags set';
        state.mode = BAD;
        break;
      }
      if (state.head) {
        state.head.text = ((hold >> 8) & 1);
      }
      if (state.flags & 0x0200) {
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = TIME;
      /* falls through */
    case TIME:
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if (state.head) {
        state.head.time = hold;
      }
      if (state.flags & 0x0200) {
        //=== CRC4(state.check, hold)
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        hbuf[2] = (hold >>> 16) & 0xff;
        hbuf[3] = (hold >>> 24) & 0xff;
        state.check = crc32(state.check, hbuf, 4, 0);
        //===
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = OS;
      /* falls through */
    case OS:
      //=== NEEDBITS(16); */
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if (state.head) {
        state.head.xflags = (hold & 0xff);
        state.head.os = (hold >> 8);
      }
      if (state.flags & 0x0200) {
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = EXLEN;
      /* falls through */
    case EXLEN:
      if (state.flags & 0x0400) {
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.length = hold;
        if (state.head) {
          state.head.extra_len = hold;
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
      }
      else if (state.head) {
        state.head.extra = null/*Z_NULL*/;
      }
      state.mode = EXTRA;
      /* falls through */
    case EXTRA:
      if (state.flags & 0x0400) {
        copy = state.length;
        if (copy > have) { copy = have; }
        if (copy) {
          if (state.head) {
            len = state.head.extra_len - state.length;
            if (!state.head.extra) {
              // Use untyped array for more conveniend processing later
              state.head.extra = new Array(state.head.extra_len);
            }
            utils.arraySet(
              state.head.extra,
              input,
              next,
              // extra field is limited to 65536 bytes
              // - no need for additional size check
              copy,
              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
              len
            );
            //zmemcpy(state.head.extra + len, next,
            //        len + copy > state.head.extra_max ?
            //        state.head.extra_max - len : copy);
          }
          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          state.length -= copy;
        }
        if (state.length) { break inf_leave; }
      }
      state.length = 0;
      state.mode = NAME;
      /* falls through */
    case NAME:
      if (state.flags & 0x0800) {
        if (have === 0) { break inf_leave; }
        copy = 0;
        do {
          // TODO: 2 or 1 bytes?
          len = input[next + copy++];
          /* use constant limit because in js we should not preallocate memory */
          if (state.head && len &&
              (state.length < 65536 /*state.head.name_max*/)) {
            state.head.name += String.fromCharCode(len);
          }
        } while (len && copy < have);

        if (state.flags & 0x0200) {
          state.check = crc32(state.check, input, copy, next);
        }
        have -= copy;
        next += copy;
        if (len) { break inf_leave; }
      }
      else if (state.head) {
        state.head.name = null;
      }
      state.length = 0;
      state.mode = COMMENT;
      /* falls through */
    case COMMENT:
      if (state.flags & 0x1000) {
        if (have === 0) { break inf_leave; }
        copy = 0;
        do {
          len = input[next + copy++];
          /* use constant limit because in js we should not preallocate memory */
          if (state.head && len &&
              (state.length < 65536 /*state.head.comm_max*/)) {
            state.head.comment += String.fromCharCode(len);
          }
        } while (len && copy < have);
        if (state.flags & 0x0200) {
          state.check = crc32(state.check, input, copy, next);
        }
        have -= copy;
        next += copy;
        if (len) { break inf_leave; }
      }
      else if (state.head) {
        state.head.comment = null;
      }
      state.mode = HCRC;
      /* falls through */
    case HCRC:
      if (state.flags & 0x0200) {
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (hold !== (state.check & 0xffff)) {
          strm.msg = 'header crc mismatch';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
      }
      if (state.head) {
        state.head.hcrc = ((state.flags >> 9) & 1);
        state.head.done = true;
      }
      strm.adler = state.check = 0 /*crc32(0L, Z_NULL, 0)*/;
      state.mode = TYPE;
      break;
    case DICTID:
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      strm.adler = state.check = ZSWAP32(hold);
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = DICT;
      /* falls through */
    case DICT:
      if (state.havedict === 0) {
        //--- RESTORE() ---
        strm.next_out = put;
        strm.avail_out = left;
        strm.next_in = next;
        strm.avail_in = have;
        state.hold = hold;
        state.bits = bits;
        //---
        return Z_NEED_DICT;
      }
      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
      state.mode = TYPE;
      /* falls through */
    case TYPE:
      if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case TYPEDO:
      if (state.last) {
        //--- BYTEBITS() ---//
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        state.mode = CHECK;
        break;
      }
      //=== NEEDBITS(3); */
      while (bits < 3) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.last = (hold & 0x01)/*BITS(1)*/;
      //--- DROPBITS(1) ---//
      hold >>>= 1;
      bits -= 1;
      //---//

      switch ((hold & 0x03)/*BITS(2)*/) {
      case 0:                             /* stored block */
        //Tracev((stderr, "inflate:     stored block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = STORED;
        break;
      case 1:                             /* fixed block */
        fixedtables(state);
        //Tracev((stderr, "inflate:     fixed codes block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = LEN_;             /* decode codes */
        if (flush === Z_TREES) {
          //--- DROPBITS(2) ---//
          hold >>>= 2;
          bits -= 2;
          //---//
          break inf_leave;
        }
        break;
      case 2:                             /* dynamic block */
        //Tracev((stderr, "inflate:     dynamic codes block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = TABLE;
        break;
      case 3:
        strm.msg = 'invalid block type';
        state.mode = BAD;
      }
      //--- DROPBITS(2) ---//
      hold >>>= 2;
      bits -= 2;
      //---//
      break;
    case STORED:
      //--- BYTEBITS() ---// /* go to byte boundary */
      hold >>>= bits & 7;
      bits -= bits & 7;
      //---//
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
        strm.msg = 'invalid stored block lengths';
        state.mode = BAD;
        break;
      }
      state.length = hold & 0xffff;
      //Tracev((stderr, "inflate:       stored length %u\n",
      //        state.length));
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = COPY_;
      if (flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case COPY_:
      state.mode = COPY;
      /* falls through */
    case COPY:
      copy = state.length;
      if (copy) {
        if (copy > have) { copy = have; }
        if (copy > left) { copy = left; }
        if (copy === 0) { break inf_leave; }
        //--- zmemcpy(put, next, copy); ---
        utils.arraySet(output, input, next, copy, put);
        //---//
        have -= copy;
        next += copy;
        left -= copy;
        put += copy;
        state.length -= copy;
        break;
      }
      //Tracev((stderr, "inflate:       stored end\n"));
      state.mode = TYPE;
      break;
    case TABLE:
      //=== NEEDBITS(14); */
      while (bits < 14) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
      //--- DROPBITS(5) ---//
      hold >>>= 5;
      bits -= 5;
      //---//
      state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
      //--- DROPBITS(5) ---//
      hold >>>= 5;
      bits -= 5;
      //---//
      state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
      //--- DROPBITS(4) ---//
      hold >>>= 4;
      bits -= 4;
      //---//
//#ifndef PKZIP_BUG_WORKAROUND
      if (state.nlen > 286 || state.ndist > 30) {
        strm.msg = 'too many length or distance symbols';
        state.mode = BAD;
        break;
      }
//#endif
      //Tracev((stderr, "inflate:       table sizes ok\n"));
      state.have = 0;
      state.mode = LENLENS;
      /* falls through */
    case LENLENS:
      while (state.have < state.ncode) {
        //=== NEEDBITS(3);
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
        //--- DROPBITS(3) ---//
        hold >>>= 3;
        bits -= 3;
        //---//
      }
      while (state.have < 19) {
        state.lens[order[state.have++]] = 0;
      }
      // We have separate tables & no pointers. 2 commented lines below not needed.
      //state.next = state.codes;
      //state.lencode = state.next;
      // Switch to use dynamic table
      state.lencode = state.lendyn;
      state.lenbits = 7;

      opts = {bits: state.lenbits};
      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
      state.lenbits = opts.bits;

      if (ret) {
        strm.msg = 'invalid code lengths set';
        state.mode = BAD;
        break;
      }
      //Tracev((stderr, "inflate:       code lengths ok\n"));
      state.have = 0;
      state.mode = CODELENS;
      /* falls through */
    case CODELENS:
      while (state.have < state.nlen + state.ndist) {
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_val < 16) {
          //--- DROPBITS(here.bits) ---//
          hold >>>= here_bits;
          bits -= here_bits;
          //---//
          state.lens[state.have++] = here_val;
        }
        else {
          if (here_val === 16) {
            //=== NEEDBITS(here.bits + 2);
            n = here_bits + 2;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            if (state.have === 0) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            len = state.lens[state.have - 1];
            copy = 3 + (hold & 0x03);//BITS(2);
            //--- DROPBITS(2) ---//
            hold >>>= 2;
            bits -= 2;
            //---//
          }
          else if (here_val === 17) {
            //=== NEEDBITS(here.bits + 3);
            n = here_bits + 3;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            len = 0;
            copy = 3 + (hold & 0x07);//BITS(3);
            //--- DROPBITS(3) ---//
            hold >>>= 3;
            bits -= 3;
            //---//
          }
          else {
            //=== NEEDBITS(here.bits + 7);
            n = here_bits + 7;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            len = 0;
            copy = 11 + (hold & 0x7f);//BITS(7);
            //--- DROPBITS(7) ---//
            hold >>>= 7;
            bits -= 7;
            //---//
          }
          if (state.have + copy > state.nlen + state.ndist) {
            strm.msg = 'invalid bit length repeat';
            state.mode = BAD;
            break;
          }
          while (copy--) {
            state.lens[state.have++] = len;
          }
        }
      }

      /* handle error breaks in while */
      if (state.mode === BAD) { break; }

      /* check for end-of-block code (better have one) */
      if (state.lens[256] === 0) {
        strm.msg = 'invalid code -- missing end-of-block';
        state.mode = BAD;
        break;
      }

      /* build code tables -- note: do not change the lenbits or distbits
         values here (9 and 6) without reading the comments in inftrees.h
         concerning the ENOUGH constants, which depend on those values */
      state.lenbits = 9;

      opts = {bits: state.lenbits};
      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
      // We have separate tables & no pointers. 2 commented lines below not needed.
      // state.next_index = opts.table_index;
      state.lenbits = opts.bits;
      // state.lencode = state.next;

      if (ret) {
        strm.msg = 'invalid literal/lengths set';
        state.mode = BAD;
        break;
      }

      state.distbits = 6;
      //state.distcode.copy(state.codes);
      // Switch to use dynamic table
      state.distcode = state.distdyn;
      opts = {bits: state.distbits};
      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
      // We have separate tables & no pointers. 2 commented lines below not needed.
      // state.next_index = opts.table_index;
      state.distbits = opts.bits;
      // state.distcode = state.next;

      if (ret) {
        strm.msg = 'invalid distances set';
        state.mode = BAD;
        break;
      }
      //Tracev((stderr, 'inflate:       codes ok\n'));
      state.mode = LEN_;
      if (flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case LEN_:
      state.mode = LEN;
      /* falls through */
    case LEN:
      if (have >= 6 && left >= 258) {
        //--- RESTORE() ---
        strm.next_out = put;
        strm.avail_out = left;
        strm.next_in = next;
        strm.avail_in = have;
        state.hold = hold;
        state.bits = bits;
        //---
        inflate_fast(strm, _out);
        //--- LOAD() ---
        put = strm.next_out;
        output = strm.output;
        left = strm.avail_out;
        next = strm.next_in;
        input = strm.input;
        have = strm.avail_in;
        hold = state.hold;
        bits = state.bits;
        //---

        if (state.mode === TYPE) {
          state.back = -1;
        }
        break;
      }
      state.back = 0;
      for (;;) {
        here = state.lencode[hold & ((1 << state.lenbits) -1)];  /*BITS(state.lenbits)*/
        here_bits = here >>> 24;
        here_op = (here >>> 16) & 0xff;
        here_val = here & 0xffff;

        if (here_bits <= bits) { break; }
        //--- PULLBYTE() ---//
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
        //---//
      }
      if (here_op && (here_op & 0xf0) === 0) {
        last_bits = here_bits;
        last_op = here_op;
        last_val = here_val;
        for (;;) {
          here = state.lencode[last_val +
                  ((hold & ((1 << (last_bits + last_op)) -1))/*BITS(last.bits + last.op)*/ >> last_bits)];
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((last_bits + here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        //--- DROPBITS(last.bits) ---//
        hold >>>= last_bits;
        bits -= last_bits;
        //---//
        state.back += last_bits;
      }
      //--- DROPBITS(here.bits) ---//
      hold >>>= here_bits;
      bits -= here_bits;
      //---//
      state.back += here_bits;
      state.length = here_val;
      if (here_op === 0) {
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        state.mode = LIT;
        break;
      }
      if (here_op & 32) {
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.back = -1;
        state.mode = TYPE;
        break;
      }
      if (here_op & 64) {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break;
      }
      state.extra = here_op & 15;
      state.mode = LENEXT;
      /* falls through */
    case LENEXT:
      if (state.extra) {
        //=== NEEDBITS(state.extra);
        n = state.extra;
        while (bits < n) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.length += hold & ((1 << state.extra) -1)/*BITS(state.extra)*/;
        //--- DROPBITS(state.extra) ---//
        hold >>>= state.extra;
        bits -= state.extra;
        //---//
        state.back += state.extra;
      }
      //Tracevv((stderr, "inflate:         length %u\n", state.length));
      state.was = state.length;
      state.mode = DIST;
      /* falls through */
    case DIST:
      for (;;) {
        here = state.distcode[hold & ((1 << state.distbits) -1)];/*BITS(state.distbits)*/
        here_bits = here >>> 24;
        here_op = (here >>> 16) & 0xff;
        here_val = here & 0xffff;

        if ((here_bits) <= bits) { break; }
        //--- PULLBYTE() ---//
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
        //---//
      }
      if ((here_op & 0xf0) === 0) {
        last_bits = here_bits;
        last_op = here_op;
        last_val = here_val;
        for (;;) {
          here = state.distcode[last_val +
                  ((hold & ((1 << (last_bits + last_op)) -1))/*BITS(last.bits + last.op)*/ >> last_bits)];
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((last_bits + here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        //--- DROPBITS(last.bits) ---//
        hold >>>= last_bits;
        bits -= last_bits;
        //---//
        state.back += last_bits;
      }
      //--- DROPBITS(here.bits) ---//
      hold >>>= here_bits;
      bits -= here_bits;
      //---//
      state.back += here_bits;
      if (here_op & 64) {
        strm.msg = 'invalid distance code';
        state.mode = BAD;
        break;
      }
      state.offset = here_val;
      state.extra = (here_op) & 15;
      state.mode = DISTEXT;
      /* falls through */
    case DISTEXT:
      if (state.extra) {
        //=== NEEDBITS(state.extra);
        n = state.extra;
        while (bits < n) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.offset += hold & ((1 << state.extra) -1)/*BITS(state.extra)*/;
        //--- DROPBITS(state.extra) ---//
        hold >>>= state.extra;
        bits -= state.extra;
        //---//
        state.back += state.extra;
      }
//#ifdef INFLATE_STRICT
      if (state.offset > state.dmax) {
        strm.msg = 'invalid distance too far back';
        state.mode = BAD;
        break;
      }
//#endif
      //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
      state.mode = MATCH;
      /* falls through */
    case MATCH:
      if (left === 0) { break inf_leave; }
      copy = _out - left;
      if (state.offset > copy) {         /* copy from window */
        copy = state.offset - copy;
        if (copy > state.whave) {
          if (state.sane) {
            strm.msg = 'invalid distance too far back';
            state.mode = BAD;
            break;
          }
// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//          Trace((stderr, "inflate.c too far\n"));
//          copy -= state.whave;
//          if (copy > state.length) { copy = state.length; }
//          if (copy > left) { copy = left; }
//          left -= copy;
//          state.length -= copy;
//          do {
//            output[put++] = 0;
//          } while (--copy);
//          if (state.length === 0) { state.mode = LEN; }
//          break;
//#endif
        }
        if (copy > state.wnext) {
          copy -= state.wnext;
          from = state.wsize - copy;
        }
        else {
          from = state.wnext - copy;
        }
        if (copy > state.length) { copy = state.length; }
        from_source = state.window;
      }
      else {                              /* copy from output */
        from_source = output;
        from = put - state.offset;
        copy = state.length;
      }
      if (copy > left) { copy = left; }
      left -= copy;
      state.length -= copy;
      do {
        output[put++] = from_source[from++];
      } while (--copy);
      if (state.length === 0) { state.mode = LEN; }
      break;
    case LIT:
      if (left === 0) { break inf_leave; }
      output[put++] = state.length;
      left--;
      state.mode = LEN;
      break;
    case CHECK:
      if (state.wrap) {
        //=== NEEDBITS(32);
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          // Use '|' insdead of '+' to make sure that result is signed
          hold |= input[next++] << bits;
          bits += 8;
        }
        //===//
        _out -= left;
        strm.total_out += _out;
        state.total += _out;
        if (_out) {
          strm.adler = state.check =
              /*UPDATE(state.check, put - _out, _out);*/
              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

        }
        _out = left;
        // NB: crc32 stored as signed 32-bit int, ZSWAP32 returns signed too
        if ((state.flags ? hold : ZSWAP32(hold)) !== state.check) {
          strm.msg = 'incorrect data check';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        //Tracev((stderr, "inflate:   check matches trailer\n"));
      }
      state.mode = LENGTH;
      /* falls through */
    case LENGTH:
      if (state.wrap && state.flags) {
        //=== NEEDBITS(32);
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (hold !== (state.total & 0xffffffff)) {
          strm.msg = 'incorrect length check';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        //Tracev((stderr, "inflate:   length matches trailer\n"));
      }
      state.mode = DONE;
      /* falls through */
    case DONE:
      ret = Z_STREAM_END;
      break inf_leave;
    case BAD:
      ret = Z_DATA_ERROR;
      break inf_leave;
    case MEM:
      return Z_MEM_ERROR;
    case SYNC:
      /* falls through */
    default:
      return Z_STREAM_ERROR;
    }
  }

  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---

  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                      (state.mode < CHECK || flush !== Z_FINISH))) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
      state.mode = MEM;
      return Z_MEM_ERROR;
    }
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap && _out) {
    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) +
                    (state.mode === TYPE ? 128 : 0) +
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
    ret = Z_BUF_ERROR;
  }
  return ret;
}

function inflateEnd(strm) {

  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
    return Z_STREAM_ERROR;
  }

  var state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK;
}

function inflateGetHeader(strm, head) {
  var state;

  /* check state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK;
}


exports.inflateReset = inflateReset;
exports.inflateReset2 = inflateReset2;
exports.inflateResetKeep = inflateResetKeep;
exports.inflateInit = inflateInit;
exports.inflateInit2 = inflateInit2;
exports.inflate = inflate;
exports.inflateEnd = inflateEnd;
exports.inflateGetHeader = inflateGetHeader;
exports.inflateInfo = 'pako inflate (from Nodeca project)';

/* Not implemented
exports.inflateCopy = inflateCopy;
exports.inflateGetDictionary = inflateGetDictionary;
exports.inflateMark = inflateMark;
exports.inflatePrime = inflatePrime;
exports.inflateSetDictionary = inflateSetDictionary;
exports.inflateSync = inflateSync;
exports.inflateSyncPoint = inflateSyncPoint;
exports.inflateUndermine = inflateUndermine;
*/

},{"../utils/common":38,"./adler32":40,"./crc32":42,"./inffast":45,"./inftrees":47}],47:[function(require,module,exports){
'use strict';


var utils = require('../utils/common');

var MAXBITS = 15;
var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

var CODES = 0;
var LENS = 1;
var DISTS = 2;

var lbase = [ /* Length codes 257..285 base */
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
];

var lext = [ /* Length codes 257..285 extra */
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
];

var dbase = [ /* Distance codes 0..29 base */
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
  8193, 12289, 16385, 24577, 0, 0
];

var dext = [ /* Distance codes 0..29 extra */
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
  28, 28, 29, 29, 64, 64
];

module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
{
  var bits = opts.bits;
      //here = opts.here; /* table entry for duplication */

  var len = 0;               /* a code's length in bits */
  var sym = 0;               /* index of code symbols */
  var min = 0, max = 0;          /* minimum and maximum code lengths */
  var root = 0;              /* number of index bits for root table */
  var curr = 0;              /* number of index bits for current table */
  var drop = 0;              /* code bits to drop for sub-table */
  var left = 0;                   /* number of prefix codes available */
  var used = 0;              /* code entries in table used */
  var huff = 0;              /* Huffman code */
  var incr;              /* for incrementing code, index */
  var fill;              /* index for replicating entries */
  var low;               /* low bits for current root entry */
  var mask;              /* mask for low root bits */
  var next;             /* next available space in table */
  var base = null;     /* base value table to use */
  var base_index = 0;
//  var shoextra;    /* extra bits table to use */
  var end;                    /* use base and extra for symbol > end */
  var count = new utils.Buf16(MAXBITS+1); //[MAXBITS+1];    /* number of codes of each length */
  var offs = new utils.Buf16(MAXBITS+1); //[MAXBITS+1];     /* offsets in table for each length */
  var extra = null;
  var extra_index = 0;

  var here_bits, here_op, here_val;

  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }

  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) { break; }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {                     /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;


    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;

    opts.bits = 1;
    return 0;     /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) { break; }
  }
  if (root < min) {
    root = min;
  }

  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }        /* over-subscribed */
  }
  if (left > 0 && (type === CODES || max !== 1)) {
    return -1;                      /* incomplete set */
  }

  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }

  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }

  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES) {
    base = extra = work;    /* dummy value--not used */
    end = 19;

  } else if (type === LENS) {
    base = lbase;
    base_index -= 257;
    extra = lext;
    extra_index -= 257;
    end = 256;

  } else {                    /* DISTS */
    base = dbase;
    extra = dext;
    end = -1;
  }

  /* initialize opts for loop */
  huff = 0;                   /* starting code */
  sym = 0;                    /* starting code symbol */
  len = min;                  /* starting code length */
  next = table_index;              /* current table to fill in */
  curr = root;                /* current table index bits */
  drop = 0;                   /* current bits to drop from code for index */
  low = -1;                   /* trigger new sub-table when len > root */
  used = 1 << root;          /* use root table entries */
  mask = used - 1;            /* mask for comparing low */

  /* check available table space */
  if ((type === LENS && used > ENOUGH_LENS) ||
    (type === DISTS && used > ENOUGH_DISTS)) {
    return 1;
  }

  var i=0;
  /* process all codes and make table entries */
  for (;;) {
    i++;
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    }
    else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    }
    else {
      here_op = 32 + 64;         /* end of block */
      here_val = 0;
    }

    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << (len - drop);
    fill = 1 << curr;
    min = fill;                 /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
    } while (fill !== 0);

    /* backwards increment the len-bit code huff */
    incr = 1 << (len - 1);
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }

    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) { break; }
      len = lens[lens_index + work[sym]];
    }

    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }

      /* increment past last table */
      next += min;            /* here min is 1 << curr */

      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) { break; }
        curr++;
        left <<= 1;
      }

      /* check for enough space */
      used += 1 << curr;
      if ((type === LENS && used > ENOUGH_LENS) ||
        (type === DISTS && used > ENOUGH_DISTS)) {
        return 1;
      }

      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
    }
  }

  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
  }

  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
};

},{"../utils/common":38}],48:[function(require,module,exports){
'use strict';

module.exports = {
  '2':    'need dictionary',     /* Z_NEED_DICT       2  */
  '1':    'stream end',          /* Z_STREAM_END      1  */
  '0':    '',                    /* Z_OK              0  */
  '-1':   'file error',          /* Z_ERRNO         (-1) */
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
};

},{}],49:[function(require,module,exports){
'use strict';


var utils = require('../utils/common');

/* Public constants ==========================================================*/
/* ===========================================================================*/


//var Z_FILTERED          = 1;
//var Z_HUFFMAN_ONLY      = 2;
//var Z_RLE               = 3;
var Z_FIXED               = 4;
//var Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */
var Z_BINARY              = 0;
var Z_TEXT                = 1;
//var Z_ASCII             = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;

/*============================================================================*/


function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

// From zutil.h

var STORED_BLOCK = 0;
var STATIC_TREES = 1;
var DYN_TREES    = 2;
/* The three kinds of block type */

var MIN_MATCH    = 3;
var MAX_MATCH    = 258;
/* The minimum and maximum match lengths */

// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */

var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */

var LITERALS      = 256;
/* number of literal bytes 0..255 */

var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */

var D_CODES       = 30;
/* number of distance codes */

var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */

var HEAP_SIZE     = 2*L_CODES + 1;
/* maximum heap size */

var MAX_BITS      = 15;
/* All codes must not exceed MAX_BITS bits */

var Buf_size      = 16;
/* size of bit buffer in bi_buf */


/* ===========================================================================
 * Constants
 */

var MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

var END_BLOCK   = 256;
/* end of block literal code */

var REP_3_6     = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

var REPZ_3_10   = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

var REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

var extra_lbits =   /* extra bits for each length code */
  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

var extra_dbits =   /* extra bits for each distance code */
  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

var extra_blbits =  /* extra bits for each bit length code */
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

var bl_order =
  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */

// We pre-fill arrays with 0 to avoid uninitialized gaps

var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1
var static_ltree  = new Array((L_CODES+2) * 2);
zero(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

var static_dtree  = new Array(D_CODES * 2);
zero(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

var _dist_code    = new Array(DIST_CODE_LEN);
zero(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

var _length_code  = new Array(MAX_MATCH-MIN_MATCH+1);
zero(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */

var base_length   = new Array(LENGTH_CODES);
zero(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */

var base_dist     = new Array(D_CODES);
zero(base_dist);
/* First normalized distance for each code (0 = distance of 1) */


var StaticTreeDesc = function (static_tree, extra_bits, extra_base, elems, max_length) {

  this.static_tree  = static_tree;  /* static tree or NULL */
  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
  this.extra_base   = extra_base;   /* base index for extra_bits */
  this.elems        = elems;        /* max number of elements in the tree */
  this.max_length   = max_length;   /* max bit length for the codes */

  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree    = static_tree && static_tree.length;
};


var static_l_desc;
var static_d_desc;
var static_bl_desc;


var TreeDesc = function(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;     /* the dynamic tree */
  this.max_code = 0;            /* largest code with non zero frequency */
  this.stat_desc = stat_desc;   /* the corresponding static tree */
};



function d_code(dist) {
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
}


/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
function put_short (s, w) {
//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = (w) & 0xff;
  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
}


/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
function send_bits(s, value, length) {
  if (s.bi_valid > (Buf_size - length)) {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> (Buf_size - s.bi_valid);
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    s.bi_valid += length;
  }
}


function send_code(s, c, tree) {
  send_bits(s, tree[c*2]/*.Code*/, tree[c*2 + 1]/*.Len*/);
}


/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
function bi_reverse(code, len) {
  var res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
}


/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
function bi_flush(s) {
  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;

  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
}


/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
function gen_bitlen(s, desc)
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */
{
  var tree            = desc.dyn_tree;
  var max_code        = desc.max_code;
  var stree           = desc.stat_desc.static_tree;
  var has_stree       = desc.stat_desc.has_stree;
  var extra           = desc.stat_desc.extra_bits;
  var base            = desc.stat_desc.extra_base;
  var max_length      = desc.stat_desc.max_length;
  var h;              /* heap index */
  var n, m;           /* iterate over the tree elements */
  var bits;           /* bit length */
  var xbits;          /* extra bits */
  var f;              /* frequency */
  var overflow = 0;   /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS; bits++) {
    s.bl_count[bits] = 0;
  }

  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max]*2 + 1]/*.Len*/ = 0; /* root of the heap */

  for (h = s.heap_max+1; h < HEAP_SIZE; h++) {
    n = s.heap[h];
    bits = tree[tree[n*2 +1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n*2 + 1]/*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) { continue; } /* not a leaf node */

    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n-base];
    }
    f = tree[n * 2]/*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n*2 + 1]/*.Len*/ + xbits);
    }
  }
  if (overflow === 0) { return; }

  // Trace((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */
  do {
    bits = max_length-1;
    while (s.bl_count[bits] === 0) { bits--; }
    s.bl_count[bits]--;      /* move one leaf down the tree */
    s.bl_count[bits+1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);

  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) { continue; }
      if (tree[m*2 + 1]/*.Len*/ !== bits) {
        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m*2 + 1]/*.Len*/)*tree[m*2]/*.Freq*/;
        tree[m*2 + 1]/*.Len*/ = bits;
      }
      n--;
    }
  }
}


/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
function gen_codes(tree, max_code, bl_count)
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */
{
  var next_code = new Array(MAX_BITS+1); /* next code value for each bit length */
  var code = 0;              /* running code value */
  var bits;                  /* bit index */
  var n;                     /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS; bits++) {
    next_code[bits] = code = (code + bl_count[bits-1]) << 1;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

  for (n = 0;  n <= max_code; n++) {
    var len = tree[n*2 + 1]/*.Len*/;
    if (len === 0) { continue; }
    /* Now reverse the bits */
    tree[n*2]/*.Code*/ = bi_reverse(next_code[len]++, len);

    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
}


/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
function tr_static_init() {
  var n;        /* iterates over tree elements */
  var bits;     /* bit counter */
  var length;   /* length value */
  var code;     /* code value */
  var dist;     /* distance index */
  var bl_count = new Array(MAX_BITS+1);
  /* number of codes at each bit length for an optimal tree */

  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */
/*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES-1; code++) {
    base_length[code] = length;
    for (n = 0; n < (1<<extra_lbits[code]); n++) {
      _length_code[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code[length-1] = code;

  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0 ; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < (1<<extra_dbits[code]); n++) {
      _dist_code[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for (; code < D_CODES; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < (1<<(extra_dbits[code]-7)); n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS; bits++) {
    bl_count[bits] = 0;
  }

  n = 0;
  while (n <= 143) {
    static_ltree[n*2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n*2 + 1]/*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n*2 + 1]/*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n*2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes(static_ltree, L_CODES+1, bl_count);

  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES; n++) {
    static_dtree[n*2 + 1]/*.Len*/ = 5;
    static_dtree[n*2]/*.Code*/ = bi_reverse(n, 5);
  }

  // Now data ready and we can init static trees
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS+1, L_CODES, MAX_BITS);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
  static_bl_desc =new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

  //static_init_done = true;
}


/* ===========================================================================
 * Initialize a new block.
 */
function init_block(s) {
  var n; /* iterates over tree elements */

  /* Initialize the trees. */
  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n*2]/*.Freq*/ = 0; }
  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n*2]/*.Freq*/ = 0; }
  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n*2]/*.Freq*/ = 0; }

  s.dyn_ltree[END_BLOCK*2]/*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.last_lit = s.matches = 0;
}


/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
function bi_windup(s)
{
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
}

/* ===========================================================================
 * Copy a stored block, storing first the length and its
 * one's complement if requested.
 */
function copy_block(s, buf, len, header)
//DeflateState *s;
//charf    *buf;    /* the input data */
//unsigned len;     /* its length */
//int      header;  /* true if block header must be written */
{
  bi_windup(s);        /* align on byte boundary */

  if (header) {
    put_short(s, len);
    put_short(s, ~len);
  }
//  while (len--) {
//    put_byte(s, *buf++);
//  }
  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
  s.pending += len;
}

/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
function smaller(tree, n, m, depth) {
  var _n2 = n*2;
  var _m2 = m*2;
  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
}

/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
function pqdownheap(s, tree, k)
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */
{
  var v = s.heap[k];
  var j = k << 1;  /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len &&
      smaller(tree, s.heap[j+1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;

    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
}


// inlined manually
// var SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
function compress_block(s, ltree, dtree)
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */
{
  var dist;           /* distance of matched string */
  var lc;             /* match length or unmatched char (if dist == 0) */
  var lx = 0;         /* running index in l_buf */
  var code;           /* the code to send */
  var extra;          /* number of extra bits to send */

  if (s.last_lit !== 0) {
    do {
      dist = (s.pending_buf[s.d_buf + lx*2] << 8) | (s.pending_buf[s.d_buf + lx*2 + 1]);
      lc = s.pending_buf[s.l_buf + lx];
      lx++;

      if (dist === 0) {
        send_code(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code+LITERALS+1, ltree); /* send the length code */
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);       /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code(dist);
        //Assert (code < D_CODES, "bad d_code");

        send_code(s, code, dtree);       /* send the distance code */
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);   /* send the extra distance bits */
        }
      } /* literal or match pair ? */

      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
      //       "pendingBuf overflow");

    } while (lx < s.last_lit);
  }

  send_code(s, END_BLOCK, ltree);
}


/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
function build_tree(s, desc)
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */
{
  var tree     = desc.dyn_tree;
  var stree    = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var elems    = desc.stat_desc.elems;
  var n, m;          /* iterate over heap elements */
  var max_code = -1; /* largest code with non zero frequency */
  var node;          /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE;

  for (n = 0; n < elems; n++) {
    if (tree[n * 2]/*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;

    } else {
      tree[n*2 + 1]/*.Len*/ = 0;
    }
  }

  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
    tree[node * 2]/*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;

    if (has_stree) {
      s.static_len -= stree[node*2 + 1]/*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;

  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems;              /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1/*SMALLEST*/];
    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1/*SMALLEST*/);
    /***/

    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;

    /* Create a new node father of n and m */
    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n*2 + 1]/*.Dad*/ = tree[m*2 + 1]/*.Dad*/ = node;

    /* and insert the new node in the heap */
    s.heap[1/*SMALLEST*/] = node++;
    pqdownheap(s, tree, 1/*SMALLEST*/);

  } while (s.heap_len >= 2);

  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen(s, desc);

  /* The field len is now set, we can generate the bit codes */
  gen_codes(tree, max_code, s.bl_count);
}


/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
function scan_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0*2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code+1)*2 + 1]/*.Len*/ = 0xffff; /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n+1)*2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      s.bl_tree[curlen * 2]/*.Freq*/ += count;

    } else if (curlen !== 0) {

      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
      s.bl_tree[REP_3_6*2]/*.Freq*/++;

    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10*2]/*.Freq*/++;

    } else {
      s.bl_tree[REPZ_11_138*2]/*.Freq*/++;
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
function send_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0*2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  /* tree[max_code+1].Len = -1; */  /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n+1)*2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count-3, 2);

    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count-3, 3);

    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count-11, 7);
    }

    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
function build_bl_tree(s) {
  var max_blindex;  /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

  /* Build the bit length tree: */
  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex]*2 + 1]/*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3*(max_blindex+1) + 5+5+4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
}


/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
function send_all_trees(s, lcodes, dcodes, blcodes)
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
{
  var rank;                    /* index in bl_order */

  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */
  send_bits(s, dcodes-1,   5);
  send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank]*2 + 1]/*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_ltree, lcodes-1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_dtree, dcodes-1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
}


/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "black list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
function detect_data_type(s) {
  /* black_mask is the bit mask of black-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  var black_mask = 0xf3ffc07f;
  var n;

  /* Check for non-textual ("black-listed") bytes. */
  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
    if ((black_mask & 1) && (s.dyn_ltree[n*2]/*.Freq*/ !== 0)) {
      return Z_BINARY;
    }
  }

  /* Check for textual ("white-listed") bytes. */
  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS; n++) {
    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
  }

  /* There are no "black-listed" or "white-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY;
}


var static_init_done = false;

/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
function _tr_init(s)
{

  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }

  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

  s.bi_buf = 0;
  s.bi_valid = 0;

  /* Initialize the first block of the first file: */
  init_block(s);
}


/* ===========================================================================
 * Send a stored block
 */
function _tr_stored_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  send_bits(s, (STORED_BLOCK<<1)+(last ? 1 : 0), 3);    /* send block type */
  copy_block(s, buf, stored_len, true); /* with header */
}


/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
function _tr_align(s) {
  send_bits(s, STATIC_TREES<<1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
}


/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and output the encoded block to the zip file.
 */
function _tr_flush_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
  var max_blindex = 0;        /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {

    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN) {
      s.strm.data_type = detect_data_type(s);
    }

    /* Construct the literal and distance trees */
    build_tree(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree(s);

    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = (s.opt_len+3+7) >>> 3;
    static_lenb = (s.static_len+3+7) >>> 3;

    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->last_lit));

    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }

  if ((stored_len+4 <= opt_lenb) && (buf !== -1)) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block(s, buf, stored_len, last);

  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

    send_bits(s, (STATIC_TREES<<1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);

  } else {
    send_bits(s, (DYN_TREES<<1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code+1, s.d_desc.max_code+1, max_blindex+1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block(s);

  if (last) {
    bi_windup(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
}

/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
function _tr_tally(s, dist, lc)
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{
  //var out_length, in_length, dcode;

  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
  s.last_lit++;

  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc*2]/*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--;             /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code[lc]+LITERALS+1) * 2]/*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
  }

// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility

//#ifdef TRUNCATE_BLOCK
//  /* Try to guess if it is profitable to stop the current block here */
//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
//    /* Compute an upper bound for the compressed length */
//    out_length = s.last_lit*8;
//    in_length = s.strstart - s.block_start;
//
//    for (dcode = 0; dcode < D_CODES; dcode++) {
//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
//    }
//    out_length >>>= 3;
//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
//    //       s->last_lit, in_length, out_length,
//    //       100L - out_length*100L/in_length));
//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
//      return true;
//    }
//  }
//#endif

  return (s.last_lit === s.lit_bufsize-1);
  /* We avoid equality with lit_bufsize because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */
}

exports._tr_init  = _tr_init;
exports._tr_stored_block = _tr_stored_block;
exports._tr_flush_block  = _tr_flush_block;
exports._tr_tally = _tr_tally;
exports._tr_align = _tr_align;

},{"../utils/common":38}],50:[function(require,module,exports){
'use strict';


function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = ''/*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2/*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

module.exports = ZStream;

},{}],51:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],52:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],53:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":52,"_process":51,"inherits":11}],54:[function(require,module,exports){
var zip = require('./zip');

module.exports = function(gj, options) {
    var content = zip(gj, options);
    location.href = 'data:application/zip;base64,' + content;
};

},{"./zip":63}],55:[function(require,module,exports){
module.exports.enlarge = function enlargeExtent(extent, pt) {
    if (pt[0] < extent.xmin) extent.xmin = pt[0];
    if (pt[0] > extent.xmax) extent.xmax = pt[0];
    if (pt[1] < extent.ymin) extent.ymin = pt[1];
    if (pt[1] > extent.ymax) extent.ymax = pt[1];
    return extent;
};

module.exports.enlargeExtent = function enlargeExtent(extent, ext) {
    if (ext.xmax > extent.xmax) extent.xmax = ext.xmax;
    if (ext.xmin < extent.xmin) extent.xmin = ext.xmin;
    if (ext.ymax > extent.ymax) extent.ymax = ext.ymax;
    if (ext.ymin < extent.ymin) extent.ymin = ext.ymin;
    return extent;
};

module.exports.blank = function() {
    return {
        xmin: Number.MAX_VALUE,
        ymin: Number.MAX_VALUE,
        xmax: -Number.MAX_VALUE,
        ymax: -Number.MAX_VALUE
    };
};

},{}],56:[function(require,module,exports){
var types = require('./types').jstypes;

module.exports.geojson = geojson;
module.exports.obj = obj;

function geojson(features) {
    var fields = {};
    features.forEach(collect);
    function collect(f) { inherit(fields, f.properties); }
    return obj(fields);
}

function inherit(a, b) {
    for (var i in b) { a[i] = b[i]; }
    return a;
}

function obj(_) {
    var fields = {}, o = [];
    for (var p in _) fields[p] = typeof _[p];
    for (var n in fields) {
        o.push({
            name: n,
            type: types[fields[n]]
        });
    }
    return o;
}

},{"./types":61}],57:[function(require,module,exports){
module.exports.point = justType('Point', 'POINT');
module.exports.line = justType('LineString', 'POLYLINE');
module.exports.polygon = justType('Polygon', 'POLYGON');

function justType(type, TYPE) {
    return function(gj) {
        var oftype = gj.features.filter(isType(type));
        return {
            geometries: oftype.map(justCoords),
            properties: oftype.map(justProps),
            type: TYPE
        };
    };
}

function justCoords(t) {
    if (t.geometry.coordinates[0] !== undefined &&
        t.geometry.coordinates[0][0] !== undefined &&
        t.geometry.coordinates[0][0][0] !== undefined) {
        return t.geometry.coordinates[0];
    } else {
        return t.geometry.coordinates;
    }
}

function justProps(t) {
    return t.properties;
}

function isType(t) {
    return function(f) { return f.geometry.type === t; };
}

},{}],58:[function(require,module,exports){
var ext = require('./extent');

module.exports.write = function writePoints(coordinates, extent, shpView, shxView) {

    var contentLength = 28, // 8 header, 20 content
        fileLength = 100,
        shpI = 0,
        shxI = 0;

    coordinates.forEach(function writePoint(coords, i) {
        // HEADER
        // 4 record number
        // 4 content length in 16-bit words (20/2)
        shpView.setInt32(shpI, i);
        shpView.setInt32(shpI + 4, 10);

        // record
        // (8 + 8) + 4 = 20 content length
        shpView.setInt32(shpI + 8, 1, true); // POINT=1
        shpView.setFloat64(shpI + 12, coords[0], true); // X
        shpView.setFloat64(shpI + 20, coords[1], true); // Y

        // index
        shxView.setInt32(shxI, fileLength / 2); // length in 16-bit words
        shxView.setInt32(shxI + 4, 10);

        shxI += 8;
        shpI += contentLength;
        fileLength += contentLength;
    });
};

module.exports.extent = function(coordinates) {
    return coordinates.reduce(function(extent, coords) {
        return ext.enlarge(extent, coords);
    }, ext.blank());
};

module.exports.parts = function parts(geometries, TYPE) {
    return geometries.length;
};

module.exports.shxLength = function(coordinates) {
    return coordinates.length * 8;
};

module.exports.shpLength = function(coordinates) {
    return coordinates.length * 28;
};

},{"./extent":55}],59:[function(require,module,exports){
var ext = require('./extent'),
    types = require('./types');

module.exports.write = function writePoints(geometries, extent, shpView, shxView, TYPE) {

    var shpI = 0,
        shxI = 0,
        shxOffset = 100;

    geometries.forEach(writePolyLine);

    function writePolyLine(coordinates, i) {

        var flattened = justCoords(coordinates),
            noParts = parts([coordinates], TYPE),
            contentLength = (flattened.length * 16) + 48 + (noParts - 1) * 4;

        var featureExtent = flattened.reduce(function(extent, c) {
            return ext.enlarge(extent, c);
        }, ext.blank());

        // INDEX
        shxView.setInt32(shxI, shxOffset / 2); // offset
        shxView.setInt32(shxI + 4, contentLength / 2); // offset length

        shxI += 8;
        shxOffset += contentLength + 8;

        shpView.setInt32(shpI, i + 1); // record number
        shpView.setInt32(shpI + 4, contentLength / 2); // length
        shpView.setInt32(shpI + 8, TYPE, true); // POLYLINE=3
        shpView.setFloat64(shpI + 12, featureExtent.xmin, true); // EXTENT
        shpView.setFloat64(shpI + 20, featureExtent.ymin, true);
        shpView.setFloat64(shpI + 28, featureExtent.xmax, true);
        shpView.setFloat64(shpI + 36, featureExtent.ymax, true);
        shpView.setInt32(shpI + 44, noParts, true);
        shpView.setInt32(shpI + 48, flattened.length, true); // POINTS
        shpView.setInt32(shpI + 52, 0, true); // The first part - index zero

        var onlyParts = coordinates.reduce(function (arr, coords) {
            if (Array.isArray(coords[0][0])) {
                arr = arr.concat(coords);
            } else {
                arr.push(coords);
            }
            return arr;
        }, []);
        for (var p = 1; p < noParts; p++) {
            shpView.setInt32( // set part index
                shpI + 52 + (p * 4),
                onlyParts.reduce(function (a, b, idx) {
                    return idx < p ? a + b.length : a;
                }, 0),
                true
            );
        }

        flattened.forEach(function writeLine(coords, i) {
            shpView.setFloat64(shpI + 56 + (i * 16) + (noParts - 1) * 4, coords[0], true); // X
            shpView.setFloat64(shpI + 56 + (i * 16) + (noParts - 1) * 4 + 8, coords[1], true); // Y
        });

        shpI += contentLength + 8;
    }
};

module.exports.shpLength = function(geometries) {
    return (geometries.length * 56) +
        // points
        (justCoords(geometries).length * 16);
};

module.exports.shxLength = function(geometries) {
    return geometries.length * 8;
};

module.exports.extent = function(coordinates) {
    return justCoords(coordinates).reduce(function(extent, c) {
        return ext.enlarge(extent, c);
    }, ext.blank());
};

function parts(geometries, TYPE) {
    var no = 1;
    if (TYPE === types.geometries.POLYGON || TYPE === types.geometries.POLYLINE)  {
        no = geometries.reduce(function (no, coords) {
            no += coords.length;
            if (Array.isArray(coords[0][0][0])) { // multi
                no += coords.reduce(function (no, rings) {
                    return no + rings.length - 1; // minus outer
                }, 0);
            }
            return no;
        }, 0);
    }
    return no;
}

module.exports.parts = parts;

function totalPoints(geometries) {
    var sum = 0;
    geometries.forEach(function(g) { sum += g.length; });
    return sum;
}

function justCoords(coords, l) {
    if (l === undefined) l = [];
    if (typeof coords[0][0] == 'object') {
        return coords.reduce(function(memo, c) {
            return memo.concat(justCoords(c));
        }, l);
    } else {
        return coords;
    }
}


},{"./extent":55,"./types":61}],60:[function(require,module,exports){
module.exports = 'GEOGCS["GCS_WGS_1984",DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137,298.257223563]],PRIMEM["Greenwich",0],UNIT["Degree",0.017453292519943295]]';

},{}],61:[function(require,module,exports){
module.exports.geometries = {
    NULL: 0,
    POINT: 1,
    POLYLINE: 3,
    POLYGON: 5,
    MULTIPOINT: 8,
    POINTZ: 11,
    POLYLINEZ: 13,
    POLYGONZ: 15,
    MULTIPOINTZ: 18,
    POINTM: 21,
    POLYLINEM: 23,
    POLYGONM: 25,
    MULTIPOINTM: 28,
    MULTIPATCH: 31,
};

},{}],62:[function(require,module,exports){
var types = require('./types'),
    dbf = require('dbf'),
    prj = require('./prj'),
    ext = require('./extent'),
    getFields = require('./fields'),
    assert = require('assert'),
    pointWriter = require('./points'),
    polyWriter = require('./poly');

var writers = {
    1: pointWriter,
    5: polyWriter,
    3: polyWriter
};

var recordHeaderLength = 8;

module.exports = write;

// Low-level writing interface
function write(rows, geometry_type, geometries, callback) {

    var TYPE = types.geometries[geometry_type],
        writer = writers[TYPE],
        parts = writer.parts(geometries, TYPE),
        shpLength = 100 + (parts - geometries.length) * 4 + writer.shpLength(geometries),
        shxLength = 100 + writer.shxLength(geometries),
        shpBuffer = new ArrayBuffer(shpLength),
        shpView = new DataView(shpBuffer),
        shxBuffer = new ArrayBuffer(shxLength),
        shxView = new DataView(shxBuffer),
        extent = writer.extent(geometries);

    writeHeader(shpView, TYPE);
    writeHeader(shxView, TYPE);
    writeExtent(extent, shpView);
    writeExtent(extent, shxView);

    writer.write(geometries, extent,
        new DataView(shpBuffer, 100),
        new DataView(shxBuffer, 100),
        TYPE);

    shpView.setInt32(24, shpLength / 2);
    shxView.setInt32(24, (50 + geometries.length * 4));

    var dbfBuf = dbf.structure(rows);

    callback(null, {
        shp: shpView,
        shx: shxView,
        dbf: dbfBuf,
        prj: prj
    });
}

function writeHeader(view, TYPE) {
    view.setInt32(0, 9994);
    view.setInt32(28, 1000, true);
    view.setInt32(32, TYPE, true);
}

function writeExtent(extent, view) {
    view.setFloat64(36, extent.xmin, true);
    view.setFloat64(44, extent.ymin, true);
    view.setFloat64(52, extent.xmax, true);
    view.setFloat64(60, extent.ymax, true);
}

},{"./extent":55,"./fields":56,"./points":58,"./poly":59,"./prj":60,"./types":61,"assert":1,"dbf":5}],63:[function(require,module,exports){
(function (process){
var write = require('./write'),
    geojson = require('./geojson'),
    prj = require('./prj'),
    JSZip = require('jszip');

module.exports = function(gj, options) {

    var zip = new JSZip(),
        layers = zip.folder(options && options.folder ? options.folder : 'layers');

    [geojson.point(gj), geojson.line(gj), geojson.polygon(gj)]
        .forEach(function(l) {
        if (l.geometries.length) {
            write(
                // field definitions
                l.properties,
                // geometry type
                l.type,
                // geometries
                l.geometries,
                function(err, files) {
                    var fileName = options && options.types[l.type.toLowerCase()] ? options.types[l.type.toLowerCase()] : l.type;
                    layers.file(fileName + '.shp', files.shp.buffer, { binary: true });
                    layers.file(fileName + '.shx', files.shx.buffer, { binary: true });
                    layers.file(fileName + '.dbf', files.dbf.buffer, { binary: true });
                    layers.file(fileName + '.prj', prj);
                });
        }
    });

    var generateOptions = { compression:'STORE' };

    if (!process.browser) {
      generateOptions.type = 'nodebuffer';
    }

    return zip.generate(generateOptions);
};

}).call(this,require('_process'))
},{"./geojson":57,"./prj":60,"./write":62,"_process":51,"jszip":20}],64:[function(require,module,exports){
module.exports.download = require('./src/download')
module.exports.write = require('./src/write')
module.exports.zip = require('./src/zip')

},{"./src/download":54,"./src/write":62,"./src/zip":63}]},{},[64])(64)
});
(function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;t="undefined"==typeof window?"undefined"==typeof global?"undefined"==typeof self?this:self:global:window,t.shp=e()}})(function(){var a=Math.log,n=Math.abs,r=Math.floor,o=Math.pow,d=String.fromCharCode,l=Math.min,p;return function(){function s(d,e,n){function t(o,i){if(!e[o]){if(!d[o]){var l="function"==typeof require&&require;if(!i&&l)return l(o,!0);if(r)return r(o,!0);var c=new Error("Cannot find module '"+o+"'");throw c.code="MODULE_NOT_FOUND",c}var a=e[o]={exports:{}};d[o][0].call(a.exports,function(e){var a=d[o][1][e];return t(a||e)},a,a.exports,s,d,e,n)}return e[o].exports}for(var r="function"==typeof require&&require,a=0;a<n.length;a++)t(n[a]);return t}return s}()({1:[function(e,t){'use strict';var a=e("lie"),n=e("buffer").Buffer;t.exports=function(e){return new a(function(t,a){var r=e.slice(-3),s=new XMLHttpRequest;s.open("GET",e,!0),"prj"!==r&&"cpg"!==r&&(s.responseType="arraybuffer"),s.addEventListener("load",function(){return 399<s.status?"prj"===r||"cpg"===r?t(!1):a(new Error(s.status)):"prj"!==r&&"cpg"!==r?t(n.from(s.response)):t(s.response)},!1),s.send()})}},{buffer:7,lie:35}],2:[function(e,t){(function(a){'use strict';var n=e("./binaryajax-browser"),r=e("buffer").Buffer;t.exports=async function(e){if(!a.fetch)return n(e);var t=e.slice(-3).toLowerCase(),s="prj"===t||"cpg"===t;try{var i=await fetch(e);if(399<i.status)throw new Error(i.statusText);if(s)return i.text();var i=await i.arrayBuffer();return r.from(i)}catch(t){if(s)return!1;throw t}}}).call(this,"undefined"==typeof global?"undefined"==typeof self?"undefined"==typeof window?{}:window:self:global)},{"./binaryajax-browser":1,buffer:7}],3:[function(e,t){'use strict';function n(e){for(var t=0,a=1,n=e.length,r,s;a<n;)r=s||e[0],s=e[a],t+=(s[0]-r[0])*(s[1]+r[1]),a++;return 0<t}function r(e,t){return n(t)||!e.length?e.push([t]):e[e.length-1].push(t),e}function s(e){return e?function(t,a){return e.inverse([t.readDoubleLE(a),t.readDoubleLE(a+8)])}:function(e,t){return[e.readDoubleLE(t),e.readDoubleLE(t+8)]}}function i(e,t){return this instanceof i?void(this.buffer=e,this.shpFuncs(t),this.rows=this.getRows()):new i(e,t)}i.prototype.parsePoint=function(e){return{type:"Point",coordinates:this.parseCoord(e,0)}},i.prototype.parseZPoint=function(e){var t=this.parsePoint(e);return t.coordinates.push(e.readDoubleLE(16)),t},i.prototype.parsePointArray=function(e,t,a){for(var n=[],r=0;r<a;)n.push(this.parseCoord(e,t)),t+=16,r++;return n},i.prototype.parseZPointArray=function(e,t,a,n){for(var r=0;r<a;)n[r].push(e.readDoubleLE(t)),r++,t+=8;return n},i.prototype.parseArrayGroup=function(e,t,a,n,r){for(var s=[],i=0,o=0,d,l;i<n;)(i++,a+=4,d=o,o=i===n?r:e.readInt32LE(a),l=o-d,!!l)&&(s.push(this.parsePointArray(e,t,l)),t+=l<<4);return s},i.prototype.parseZArrayGroup=function(e,t,a,n){for(var r=0;r<a;)n[r]=this.parseZPointArray(e,t,n[r].length,n[r]),t+=n[r].length<<3,r++;return n},i.prototype.parseMultiPoint=function(e){var t={},a=this.parseCoord(e,0),n=this.parseCoord(e,16);t.bbox=[a[0],a[1],n[0],n[1]];var r=e.readInt32LE(32,!0),s=36;return 1===r?(t.type="Point",t.coordinates=this.parseCoord(e,s)):(t.type="MultiPoint",t.coordinates=this.parsePointArray(e,s,r)),t},i.prototype.parseZMultiPoint=function(e){var t=this.parseMultiPoint(e),a;if("Point"===t.type)return t.coordinates.push(e.readDoubleLE(72)),t;a=t.coordinates.length;var n=52+(a<<4);return t.coordinates=this.parseZPointArray(e,n,a,t.coordinates),t},i.prototype.parsePolyline=function(e){var t={},a=this.parseCoord(e,0),n=this.parseCoord(e,16);t.bbox=[a[0],a[1],n[0],n[1]];var r=e.readInt32LE(32),s=e.readInt32LE(36),i,o;return 1===r?(t.type="LineString",i=44,t.coordinates=this.parsePointArray(e,i,s)):(t.type="MultiLineString",i=40+(r<<2),o=40,t.coordinates=this.parseArrayGroup(e,i,o,r,s)),t},i.prototype.parseZPolyline=function(e){var t=this.parsePolyline(e),a=t.coordinates.length,n;if("LineString"===t.type)return n=60+(a<<4),t.coordinates=this.parseZPointArray(e,n,a,t.coordinates),t;var r=t.coordinates.reduce(function(e,t){return e+t.length},0);return n=56+(r<<4)+(a<<2),t.coordinates=this.parseZArrayGroup(e,n,a,t.coordinates),t},i.prototype.polyFuncs=function(e){return"LineString"===e.type?(e.type="Polygon",e.coordinates=[e.coordinates],e):(e.coordinates=e.coordinates.reduce(r,[]),1===e.coordinates.length?(e.type="Polygon",e.coordinates=e.coordinates[0],e):(e.type="MultiPolygon",e))},i.prototype.parsePolygon=function(e){return this.polyFuncs(this.parsePolyline(e))},i.prototype.parseZPolygon=function(e){return this.polyFuncs(this.parseZPolyline(e))};var o={1:"parsePoint",3:"parsePolyline",5:"parsePolygon",8:"parseMultiPoint",11:"parseZPoint",13:"parseZPolyline",15:"parseZPolygon",18:"parseZMultiPoint"};i.prototype.shpFuncs=function(e){var t=this.getShpCode();if(20<t&&(t-=20),!(t in o))throw new Error("I don't know that shp type");this.parseFunc=this[o[t]],this.parseCoord=s(e)},i.prototype.getShpCode=function(){return this.parseHeader().shpCode},i.prototype.parseHeader=function(){var e=this.buffer.slice(0,100);return{length:e.readInt32BE(24),version:e.readInt32LE(28),shpCode:e.readInt32LE(32),bbox:[e.readDoubleLE(36),e.readDoubleLE(44),e.readDoubleLE(52),e.readDoubleLE(52)]}},i.prototype.getRows=function(){for(var e=100,t=this.buffer.byteLength,a=[],n;e<t;)n=this.getRow(e),e+=8,e+=n.len,n.type&&a.push(this.parseFunc(n.data));return a},i.prototype.getRow=function(e){var t=this.buffer.slice(e,e+12),a=t.readInt32BE(4)<<1,n=this.buffer.slice(e+12,e+a+8);return{id:t.readInt32BE(0),len:a,data:n,type:t.readInt32LE(8)}},t.exports=function(e,t){return new i(e,t).rows}},{}],4:[function(e,t){'use strict';var a=e("jszip");t.exports=function(e){var t=new a(e),n=t.file(/.+/),r={};return n.forEach(function(e){r[e.name]="shp"===e.name.slice(-3).toLowerCase()||"dbf"===e.name.slice(-3).toLowerCase()?e.asNodeBuffer():e.asText()}),r}},{jszip:20}],5:[function(e,t,a){'use strict';function n(e){var t=e.length;if(0<t%4)throw new Error("Invalid string. Length must be a multiple of 4");var a=e.indexOf("=");-1===a&&(a=t);var n=a===t?0:4-a%4;return[a,n]}function r(e,t,a){return 3*(t+a)/4-a}function s(e){var t=n(e),a=t[0],s=t[1],o=new u(r(e,a,s)),d=0,l=0<s?a-4:a,p,m;for(m=0;m<l;m+=4)p=c[e.charCodeAt(m)]<<18|c[e.charCodeAt(m+1)]<<12|c[e.charCodeAt(m+2)]<<6|c[e.charCodeAt(m+3)],o[d++]=255&p>>16,o[d++]=255&p>>8,o[d++]=255&p;return 2===s&&(p=c[e.charCodeAt(m)]<<2|c[e.charCodeAt(m+1)]>>4,o[d++]=255&p),1===s&&(p=c[e.charCodeAt(m)]<<10|c[e.charCodeAt(m+1)]<<4|c[e.charCodeAt(m+2)]>>2,o[d++]=255&p>>8,o[d++]=255&p),o}function o(e){return p[63&e>>18]+p[63&e>>12]+p[63&e>>6]+p[63&e]}function d(e,t,a){for(var n=[],r=t,s;r<a;r+=3)s=(16711680&e[r]<<16)+(65280&e[r+1]<<8)+(255&e[r+2]),n.push(o(s));return n.join("")}function l(e){for(var t=e.length,a=t%3,n=[],r=16383,s=0,o=t-a,l;s<o;s+=r)n.push(d(e,s,s+r>o?o:s+r));return 1===a?(l=e[t-1],n.push(p[l>>2]+p[63&l<<4]+"==")):2===a&&(l=(e[t-2]<<8)+e[t-1],n.push(p[l>>10]+p[63&l>>4]+p[63&l<<2]+"=")),n.join("")}a.byteLength=function(e){var t=n(e),a=t[0],r=t[1];return 3*(a+r)/4-r},a.toByteArray=s,a.fromByteArray=l;for(var p=[],c=[],u="undefined"==typeof Uint8Array?Array:Uint8Array,m="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",_=0,f=m.length;_<f;++_)p[_]=m[_],c[m.charCodeAt(_)]=_;c[45]=62,c[95]=63},{}],6:[function(){},{}],7:[function(e,t,a){(function(t,n){/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */'use strict';function s(){return n.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function p(e,t){if(s()<t)throw new RangeError("Invalid typed array length");return n.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t),e.__proto__=n.prototype):(null===e&&(e=new n(t)),e.length=t),e}function n(e,t,a){if(!n.TYPED_ARRAY_SUPPORT&&!(this instanceof n))return new n(e,t,a);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return _(this,e)}return c(this,e,t,a)}function c(e,t,a,n){if("number"==typeof t)throw new TypeError("\"value\" argument must not be a number");return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?g(e,t,a,n):"string"==typeof t?f(e,t,a):y(e,t)}function u(e){if("number"!=typeof e)throw new TypeError("\"size\" argument must be a number");else if(0>e)throw new RangeError("\"size\" argument must not be negative")}function m(e,t,a,n){return u(t),0>=t?p(e,t):void 0===a?p(e,t):"string"==typeof n?p(e,t).fill(a,n):p(e,t).fill(a)}function _(e,t){if(u(t),e=p(e,0>t?0:0|b(t)),!n.TYPED_ARRAY_SUPPORT)for(var a=0;a<t;++a)e[a]=0;return e}function f(e,t,a){if(("string"!=typeof a||""===a)&&(a="utf8"),!n.isEncoding(a))throw new TypeError("\"encoding\" must be a valid string encoding");var r=0|w(t,a);e=p(e,r);var s=e.write(t,a);return s!==r&&(e=e.slice(0,s)),e}function h(e,t){var a=0>t.length?0:0|b(t.length);e=p(e,a);for(var n=0;n<a;n+=1)e[n]=255&t[n];return e}function g(e,t,a,r){if(t.byteLength,0>a||t.byteLength<a)throw new RangeError("'offset' is out of bounds");if(t.byteLength<a+(r||0))throw new RangeError("'length' is out of bounds");return t=void 0===a&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,a):new Uint8Array(t,a,r),n.TYPED_ARRAY_SUPPORT?(e=t,e.__proto__=n.prototype):e=h(e,t),e}function y(e,t){if(n.isBuffer(t)){var a=0|b(t.length);return(e=p(e,a),0===e.length)?e:(t.copy(e,0,0,a),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||ee(t.length)?p(e,0):h(e,t);if("Buffer"===t.type&&ne(t.data))return h(e,t.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}function b(e){if(e>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|e}function x(e){return+e!=e&&(e=0),n.alloc(+e)}function w(e,t){if(n.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var a=e.length;if(0===a)return 0;for(var r=!1;;)switch(t){case"ascii":case"latin1":case"binary":return a;case"utf8":case"utf-8":case void 0:return W(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*a;case"hex":return a>>>1;case"base64":return V(e).length;default:if(r)return W(e).length;t=(""+t).toLowerCase(),r=!0;}}function E(e,t,a){var n=!1;if((void 0===t||0>t)&&(t=0),t>this.length)return"";if((void 0===a||a>this.length)&&(a=this.length),0>=a)return"";if(a>>>=0,t>>>=0,a<=t)return"";for(e||(e="utf8");;)switch(e){case"hex":return D(this,t,a);case"utf8":case"utf-8":return T(this,t,a);case"ascii":return P(this,t,a);case"latin1":case"binary":return N(this,t,a);case"base64":return L(this,t,a);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return j(this,t,a);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0;}}function C(e,t,a){var n=e[t];e[t]=e[a],e[a]=n}function A(e,t,a,r,s){if(0===e.length)return-1;if("string"==typeof a?(r=a,a=0):2147483647<a?a=2147483647:-2147483648>a&&(a=-2147483648),a=+a,isNaN(a)&&(a=s?0:e.length-1),0>a&&(a=e.length+a),a>=e.length){if(s)return-1;a=e.length-1}else if(0>a)if(s)a=0;else return-1;if("string"==typeof t&&(t=n.from(t,r)),n.isBuffer(t))return 0===t.length?-1:S(e,t,a,r,s);if("number"==typeof t)return t&=255,n.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?s?Uint8Array.prototype.indexOf.call(e,t,a):Uint8Array.prototype.lastIndexOf.call(e,t,a):S(e,[t],a,r,s);throw new TypeError("val must be string, number or Buffer")}function S(e,t,a,n,r){function s(e,t){return 1===o?e[t]:e.readUInt16BE(t*o)}var o=1,d=e.length,l=t.length;if(void 0!==n&&(n=(n+"").toLowerCase(),"ucs2"===n||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(2>e.length||2>t.length)return-1;o=2,d/=2,l/=2,a/=2}var p;if(r){var c=-1;for(p=a;p<d;p++)if(s(e,p)!==s(t,-1===c?0:p-c))-1!==c&&(p-=p-c),c=-1;else if(-1===c&&(c=p),p-c+1===l)return c*o}else for(a+l>d&&(a=d-l),p=a;0<=p;p--){for(var u=!0,m=0;m<l;m++)if(s(e,p+m)!==s(t,m)){u=!1;break}if(u)return p}return-1}function k(e,t,a,n){a=+a||0;var r=e.length-a;n?(n=+n,n>r&&(n=r)):n=r;var s=t.length;if(0!=s%2)throw new TypeError("Invalid hex string");n>s/2&&(n=s/2);for(var o=0,d;o<n;++o){if(d=parseInt(t.substr(2*o,2),16),isNaN(d))return o;e[a+o]=d}return o}function v(e,t,a,n){return $(W(t,e.length-a),e,a,n)}function I(e,t,a,n){return $(Q(t),e,a,n)}function R(e,t,a,n){return I(e,t,a,n)}function O(e,t,a,n){return $(V(t),e,a,n)}function z(e,t,a,n){return $(J(t,e.length-a),e,a,n)}function L(e,t,a){return 0===t&&a===e.length?te.fromByteArray(e):te.fromByteArray(e.slice(t,a))}function T(e,t,a){a=l(e.length,a);for(var n=[],r=t;r<a;){var s=e[r],o=null,d=239<s?4:223<s?3:191<s?2:1;if(r+d<=a){var p,c,u,m;1===d?128>s&&(o=s):2===d?(p=e[r+1],128==(192&p)&&(m=(31&s)<<6|63&p,127<m&&(o=m))):3===d?(p=e[r+1],c=e[r+2],128==(192&p)&&128==(192&c)&&(m=(15&s)<<12|(63&p)<<6|63&c,2047<m&&(55296>m||57343<m)&&(o=m))):4===d?(p=e[r+1],c=e[r+2],u=e[r+3],128==(192&p)&&128==(192&c)&&128==(192&u)&&(m=(15&s)<<18|(63&p)<<12|(63&c)<<6|63&u,65535<m&&1114112>m&&(o=m))):void 0}null===o?(o=65533,d=1):65535<o&&(o-=65536,n.push(55296|1023&o>>>10),o=56320|1023&o),n.push(o),r+=d}return B(n)}function B(e){var t=e.length;if(t<=4096)return d.apply(String,e);for(var a="",n=0;n<t;)a+=d.apply(String,e.slice(n,n+=4096));return a}function P(e,t,a){var n="";a=l(e.length,a);for(var r=t;r<a;++r)n+=d(127&e[r]);return n}function N(e,t,a){var n="";a=l(e.length,a);for(var r=t;r<a;++r)n+=d(e[r]);return n}function D(e,t,a){var n=e.length;(!t||0>t)&&(t=0),(!a||0>a||a>n)&&(a=n);for(var r="",s=t;s<a;++s)r+=X(e[s]);return r}function j(e,t,a){for(var n=e.slice(t,a),r="",s=0;s<n.length;s+=2)r+=d(n[s]+256*n[s+1]);return r}function U(e,t,a){if(0!=e%1||0>e)throw new RangeError("offset is not uint");if(e+t>a)throw new RangeError("Trying to access beyond buffer length")}function F(e,t,a,r,s,i){if(!n.isBuffer(e))throw new TypeError("\"buffer\" argument must be a Buffer instance");if(t>s||t<i)throw new RangeError("\"value\" argument is out of bounds");if(a+r>e.length)throw new RangeError("Index out of range")}function M(e,t,a,n){0>t&&(t=65535+t+1);for(var r=0,s=l(e.length-a,2);r<s;++r)e[a+r]=(t&255<<8*(n?r:1-r))>>>8*(n?r:1-r)}function G(e,t,a,n){0>t&&(t=4294967295+t+1);for(var r=0,s=l(e.length-a,4);r<s;++r)e[a+r]=255&t>>>8*(n?r:3-r)}function Z(e,t,a,n){if(a+n>e.length)throw new RangeError("Index out of range");if(0>a)throw new RangeError("Index out of range")}function Y(e,t,a,n,r){return r||Z(e,t,a,4,34028234663852886e22,-34028234663852886e22),ae.write(e,t,a,n,23,4),a+4}function q(e,t,a,n,r){return r||Z(e,t,a,8,17976931348623157e292,-17976931348623157e292),ae.write(e,t,a,n,52,8),a+8}function H(e){if(e=K(e).replace(re,""),2>e.length)return"";for(;0!=e.length%4;)e+="=";return e}function K(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}function X(e){return 16>e?"0"+e.toString(16):e.toString(16)}function W(e,t){t=t||1/0;for(var a=e.length,n=null,r=[],s=0,o;s<a;++s){if(o=e.charCodeAt(s),55295<o&&57344>o){if(!n){if(56319<o){-1<(t-=3)&&r.push(239,191,189);continue}else if(s+1===a){-1<(t-=3)&&r.push(239,191,189);continue}n=o;continue}if(56320>o){-1<(t-=3)&&r.push(239,191,189),n=o;continue}o=(n-55296<<10|o-56320)+65536}else n&&-1<(t-=3)&&r.push(239,191,189);if(n=null,128>o){if(0>(t-=1))break;r.push(o)}else if(2048>o){if(0>(t-=2))break;r.push(192|o>>6,128|63&o)}else if(65536>o){if(0>(t-=3))break;r.push(224|o>>12,128|63&o>>6,128|63&o)}else if(1114112>o){if(0>(t-=4))break;r.push(240|o>>18,128|63&o>>12,128|63&o>>6,128|63&o)}else throw new Error("Invalid code point")}return r}function Q(e){for(var t=[],a=0;a<e.length;++a)t.push(255&e.charCodeAt(a));return t}function J(e,t){for(var a=[],n=0,r,s,o;n<e.length&&!(0>(t-=2));++n)r=e.charCodeAt(n),s=r>>8,o=r%256,a.push(o),a.push(s);return a}function V(e){return te.toByteArray(H(e))}function $(e,t,a,n){for(var r=0;r<n&&!(r+a>=t.length||r>=e.length);++r)t[r+a]=e[r];return r}function ee(e){return e!==e}var te=e("base64-js"),ae=e("ieee754"),ne=e("isarray");a.Buffer=n,a.SlowBuffer=x,a.INSPECT_MAX_BYTES=50,n.TYPED_ARRAY_SUPPORT=t.TYPED_ARRAY_SUPPORT===void 0?function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(t){return!1}}():t.TYPED_ARRAY_SUPPORT,a.kMaxLength=s(),n.poolSize=8192,n._augment=function(e){return e.__proto__=n.prototype,e},n.from=function(e,t,a){return c(null,e,t,a)},n.TYPED_ARRAY_SUPPORT&&(n.prototype.__proto__=Uint8Array.prototype,n.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&n[Symbol.species]===n&&Object.defineProperty(n,Symbol.species,{value:null,configurable:!0})),n.alloc=function(e,t,a){return m(null,e,t,a)},n.allocUnsafe=function(e){return _(null,e)},n.allocUnsafeSlow=function(e){return _(null,e)},n.isBuffer=function(e){return!!(null!=e&&e._isBuffer)},n.compare=function(e,t){if(!n.isBuffer(e)||!n.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var a=e.length,r=t.length,s=0,o=l(a,r);s<o;++s)if(e[s]!==t[s]){a=e[s],r=t[s];break}return a<r?-1:r<a?1:0},n.isEncoding=function(e){switch((e+"").toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1;}},n.concat=function(e,t){if(!ne(e))throw new TypeError("\"list\" argument must be an Array of Buffers");if(0===e.length)return n.alloc(0);var a;if(t===void 0)for(t=0,a=0;a<e.length;++a)t+=e[a].length;var r=n.allocUnsafe(t),s=0;for(a=0;a<e.length;++a){var o=e[a];if(!n.isBuffer(o))throw new TypeError("\"list\" argument must be an Array of Buffers");o.copy(r,s),s+=o.length}return r},n.byteLength=w,n.prototype._isBuffer=!0,n.prototype.swap16=function(){var e=this.length;if(0!=e%2)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)C(this,t,t+1);return this},n.prototype.swap32=function(){var e=this.length;if(0!=e%4)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)C(this,t,t+3),C(this,t+1,t+2);return this},n.prototype.swap64=function(){var e=this.length;if(0!=e%8)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)C(this,t,t+7),C(this,t+1,t+6),C(this,t+2,t+5),C(this,t+3,t+4);return this},n.prototype.toString=function(){var e=0|this.length;return 0==e?"":0===arguments.length?T(this,0,e):E.apply(this,arguments)},n.prototype.equals=function(e){if(!n.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===n.compare(this,e)},n.prototype.inspect=function(){var e="",t=a.INSPECT_MAX_BYTES;return 0<this.length&&(e=this.toString("hex",0,t).match(/.{2}/g).join(" "),this.length>t&&(e+=" ... ")),"<Buffer "+e+">"},n.prototype.compare=function(e,t,a,r,s){if(!n.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===a&&(a=e?e.length:0),void 0===r&&(r=0),void 0===s&&(s=this.length),0>t||a>e.length||0>r||s>this.length)throw new RangeError("out of range index");if(r>=s&&t>=a)return 0;if(r>=s)return-1;if(t>=a)return 1;if(t>>>=0,a>>>=0,r>>>=0,s>>>=0,this===e)return 0;for(var o=s-r,d=a-t,p=l(o,d),c=this.slice(r,s),u=e.slice(t,a),m=0;m<p;++m)if(c[m]!==u[m]){o=c[m],d=u[m];break}return o<d?-1:d<o?1:0},n.prototype.includes=function(e,t,a){return-1!==this.indexOf(e,t,a)},n.prototype.indexOf=function(e,t,a){return A(this,e,t,a,!0)},n.prototype.lastIndexOf=function(e,t,a){return A(this,e,t,a,!1)},n.prototype.write=function(e,t,a,n){if(void 0===t)n="utf8",a=this.length,t=0;else if(void 0===a&&"string"==typeof t)n=t,a=this.length,t=0;else if(isFinite(t))t|=0,isFinite(a)?(a|=0,void 0===n&&(n="utf8")):(n=a,a=void 0);else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");var r=this.length-t;if((void 0===a||a>r)&&(a=r),0<e.length&&(0>a||0>t)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var s=!1;;)switch(n){case"hex":return k(this,e,t,a);case"utf8":case"utf-8":return v(this,e,t,a);case"ascii":return I(this,e,t,a);case"latin1":case"binary":return R(this,e,t,a);case"base64":return O(this,e,t,a);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return z(this,e,t,a);default:if(s)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),s=!0;}},n.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};n.prototype.slice=function(e,t){var a=this.length;e=~~e,t=t===void 0?a:~~t,0>e?(e+=a,0>e&&(e=0)):e>a&&(e=a),0>t?(t+=a,0>t&&(t=0)):t>a&&(t=a),t<e&&(t=e);var r;if(n.TYPED_ARRAY_SUPPORT)r=this.subarray(e,t),r.__proto__=n.prototype;else{var s=t-e;r=new n(s,void 0);for(var o=0;o<s;++o)r[o]=this[o+e]}return r},n.prototype.readUIntLE=function(e,t,a){e|=0,t|=0,a||U(e,t,this.length);for(var n=this[e],r=1,s=0;++s<t&&(r*=256);)n+=this[e+s]*r;return n},n.prototype.readUIntBE=function(e,t,a){e|=0,t|=0,a||U(e,t,this.length);for(var n=this[e+--t],r=1;0<t&&(r*=256);)n+=this[e+--t]*r;return n},n.prototype.readUInt8=function(e,t){return t||U(e,1,this.length),this[e]},n.prototype.readUInt16LE=function(e,t){return t||U(e,2,this.length),this[e]|this[e+1]<<8},n.prototype.readUInt16BE=function(e,t){return t||U(e,2,this.length),this[e]<<8|this[e+1]},n.prototype.readUInt32LE=function(e,t){return t||U(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},n.prototype.readUInt32BE=function(e,t){return t||U(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},n.prototype.readIntLE=function(e,t,a){e|=0,t|=0,a||U(e,t,this.length);for(var n=this[e],r=1,s=0;++s<t&&(r*=256);)n+=this[e+s]*r;return r*=128,n>=r&&(n-=o(2,8*t)),n},n.prototype.readIntBE=function(e,t,a){e|=0,t|=0,a||U(e,t,this.length);for(var n=t,r=1,s=this[e+--n];0<n&&(r*=256);)s+=this[e+--n]*r;return r*=128,s>=r&&(s-=o(2,8*t)),s},n.prototype.readInt8=function(e,t){return t||U(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},n.prototype.readInt16LE=function(e,t){t||U(e,2,this.length);var a=this[e]|this[e+1]<<8;return 32768&a?4294901760|a:a},n.prototype.readInt16BE=function(e,t){t||U(e,2,this.length);var a=this[e+1]|this[e]<<8;return 32768&a?4294901760|a:a},n.prototype.readInt32LE=function(e,t){return t||U(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},n.prototype.readInt32BE=function(e,t){return t||U(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},n.prototype.readFloatLE=function(e,t){return t||U(e,4,this.length),ae.read(this,e,!0,23,4)},n.prototype.readFloatBE=function(e,t){return t||U(e,4,this.length),ae.read(this,e,!1,23,4)},n.prototype.readDoubleLE=function(e,t){return t||U(e,8,this.length),ae.read(this,e,!0,52,8)},n.prototype.readDoubleBE=function(e,t){return t||U(e,8,this.length),ae.read(this,e,!1,52,8)},n.prototype.writeUIntLE=function(e,t,a,n){if(e=+e,t|=0,a|=0,!n){var r=o(2,8*a)-1;F(this,e,t,a,r,0)}var s=1,d=0;for(this[t]=255&e;++d<a&&(s*=256);)this[t+d]=255&e/s;return t+a},n.prototype.writeUIntBE=function(e,t,a,n){if(e=+e,t|=0,a|=0,!n){var r=o(2,8*a)-1;F(this,e,t,a,r,0)}var s=a-1,d=1;for(this[t+s]=255&e;0<=--s&&(d*=256);)this[t+s]=255&e/d;return t+a},n.prototype.writeUInt8=function(e,t,a){return e=+e,t|=0,a||F(this,e,t,1,255,0),n.TYPED_ARRAY_SUPPORT||(e=r(e)),this[t]=255&e,t+1},n.prototype.writeUInt16LE=function(e,t,a){return e=+e,t|=0,a||F(this,e,t,2,65535,0),n.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):M(this,e,t,!0),t+2},n.prototype.writeUInt16BE=function(e,t,a){return e=+e,t|=0,a||F(this,e,t,2,65535,0),n.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):M(this,e,t,!1),t+2},n.prototype.writeUInt32LE=function(e,t,a){return e=+e,t|=0,a||F(this,e,t,4,4294967295,0),n.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):G(this,e,t,!0),t+4},n.prototype.writeUInt32BE=function(e,t,a){return e=+e,t|=0,a||F(this,e,t,4,4294967295,0),n.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):G(this,e,t,!1),t+4},n.prototype.writeIntLE=function(e,t,a,n){if(e=+e,t|=0,!n){var r=o(2,8*a-1);F(this,e,t,a,r-1,-r)}var s=0,d=1,l=0;for(this[t]=255&e;++s<a&&(d*=256);)0>e&&0===l&&0!==this[t+s-1]&&(l=1),this[t+s]=255&(e/d>>0)-l;return t+a},n.prototype.writeIntBE=function(e,t,a,n){if(e=+e,t|=0,!n){var r=o(2,8*a-1);F(this,e,t,a,r-1,-r)}var s=a-1,d=1,l=0;for(this[t+s]=255&e;0<=--s&&(d*=256);)0>e&&0===l&&0!==this[t+s+1]&&(l=1),this[t+s]=255&(e/d>>0)-l;return t+a},n.prototype.writeInt8=function(e,t,a){return e=+e,t|=0,a||F(this,e,t,1,127,-128),n.TYPED_ARRAY_SUPPORT||(e=r(e)),0>e&&(e=255+e+1),this[t]=255&e,t+1},n.prototype.writeInt16LE=function(e,t,a){return e=+e,t|=0,a||F(this,e,t,2,32767,-32768),n.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):M(this,e,t,!0),t+2},n.prototype.writeInt16BE=function(e,t,a){return e=+e,t|=0,a||F(this,e,t,2,32767,-32768),n.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):M(this,e,t,!1),t+2},n.prototype.writeInt32LE=function(e,t,a){return e=+e,t|=0,a||F(this,e,t,4,2147483647,-2147483648),n.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):G(this,e,t,!0),t+4},n.prototype.writeInt32BE=function(e,t,a){return e=+e,t|=0,a||F(this,e,t,4,2147483647,-2147483648),0>e&&(e=4294967295+e+1),n.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):G(this,e,t,!1),t+4},n.prototype.writeFloatLE=function(e,t,a){return Y(this,e,t,!0,a)},n.prototype.writeFloatBE=function(e,t,a){return Y(this,e,t,!1,a)},n.prototype.writeDoubleLE=function(e,t,a){return q(this,e,t,!0,a)},n.prototype.writeDoubleBE=function(e,t,a){return q(this,e,t,!1,a)},n.prototype.copy=function(e,t,a,r){if(a||(a=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),0<r&&r<a&&(r=a),r===a)return 0;if(0===e.length||0===this.length)return 0;if(0>t)throw new RangeError("targetStart out of bounds");if(0>a||a>=this.length)throw new RangeError("sourceStart out of bounds");if(0>r)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-a&&(r=e.length-t+a);var s=r-a,o;if(this===e&&a<t&&t<r)for(o=s-1;0<=o;--o)e[o+t]=this[o+a];else if(1e3>s||!n.TYPED_ARRAY_SUPPORT)for(o=0;o<s;++o)e[o+t]=this[o+a];else Uint8Array.prototype.set.call(e,this.subarray(a,a+s),t);return s},n.prototype.fill=function(e,t,a,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,a=this.length):"string"==typeof a&&(r=a,a=this.length),1===e.length){var s=e.charCodeAt(0);256>s&&(e=s)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!n.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof e&&(e&=255);if(0>t||this.length<t||this.length<a)throw new RangeError("Out of range index");if(a<=t)return this;t>>>=0,a=a===void 0?this.length:a>>>0,e||(e=0);var o;if("number"==typeof e)for(o=t;o<a;++o)this[o]=e;else{var d=n.isBuffer(e)?e:W(new n(e,r).toString()),l=d.length;for(o=0;o<a-t;++o)this[o+t]=d[o%l]}return this};var re=/[^+\/0-9A-Za-z-_]/g}).call(this,"undefined"==typeof global?"undefined"==typeof self?"undefined"==typeof window?{}:window:self:global,e("buffer").Buffer)},{"base64-js":5,buffer:7,ieee754:8,isarray:10}],8:[function(e,t,s){s.read=function(t,a,n,r,l){var p=8*l-r-1,c=(1<<p)-1,u=c>>1,_=-7,f=n?l-1:0,h=n?-1:1,d=t[a+f],g,y;for(f+=h,g=d&(1<<-_)-1,d>>=-_,_+=p;0<_;g=256*g+t[a+f],f+=h,_-=8);for(y=g&(1<<-_)-1,g>>=-_,_+=r;0<_;y=256*y+t[a+f],f+=h,_-=8);if(0===g)g=1-u;else{if(g===c)return y?NaN:(d?-1:1)*(1/0);y+=o(2,r),g-=u}return(d?-1:1)*y*o(2,g-r)},s.write=function(t,l,p,u,_,f){var h=Math.LN2,g=8*f-_-1,y=(1<<g)-1,b=y>>1,x=23===_?o(2,-24)-o(2,-77):0,w=u?0:f-1,E=u?1:-1,d=0>l||0===l&&0>1/l?1:0,s,C,A;for(l=n(l),isNaN(l)||l===1/0?(C=isNaN(l)?1:0,s=y):(s=r(a(l)/h),1>l*(A=o(2,-s))&&(s--,A*=2),l+=1<=s+b?x/A:x*o(2,1-b),2<=l*A&&(s++,A/=2),s+b>=y?(C=0,s=y):1<=s+b?(C=(l*A-1)*o(2,_),s+=b):(C=l*o(2,b-1)*o(2,_),s=0));8<=_;t[p+w]=255&C,w+=E,C/=256,_-=8);for(s=s<<_|C,g+=_;0<g;t[p+w]=255&s,w+=E,s/=256,g-=8);t[p+w-E]|=128*d}},{}],9:[function(e,t){(function(e){'use strict';function a(){c=!0;for(var e=p.length,t,a;e;){for(a=p,p=[],t=-1;++t<e;)a[t]();e=p.length}c=!1}function n(e){1!==p.push(e)||c||s()}var r=e.MutationObserver||e.WebKitMutationObserver,s;if(r){var i=0,o=new r(a),d=e.document.createTextNode("");o.observe(d,{characterData:!0}),s=function(){d.data=i=++i%2}}else if(!e.setImmediate&&"undefined"!=typeof e.MessageChannel){var l=new e.MessageChannel;l.port1.onmessage=a,s=function(){l.port2.postMessage(0)}}else s="document"in e&&"onreadystatechange"in e.document.createElement("script")?function(){var t=e.document.createElement("script");t.onreadystatechange=function(){a(),t.onreadystatechange=null,t.parentNode.removeChild(t),t=null},e.document.documentElement.appendChild(t)}:function(){setTimeout(a,0)};var p=[],c;t.exports=n}).call(this,"undefined"==typeof global?"undefined"==typeof self?"undefined"==typeof window?{}:window:self:global)},{}],10:[function(e,t){var a={}.toString;t.exports=Array.isArray||function(e){return"[object Array]"==a.call(e)}},{}],11:[function(e,t){'use strict';function a(e){if(e){this.data=e,this.length=this.data.length,this.index=0,this.zero=0;for(var t=0;t<this.data.length;t++)e[t]&=255}}var n=e("./dataReader");a.prototype=new n,a.prototype.byteAt=function(e){return this.data[this.zero+e]},a.prototype.lastIndexOfSignature=function(e){for(var t=e.charCodeAt(0),a=e.charCodeAt(1),n=e.charCodeAt(2),r=e.charCodeAt(3),s=this.length-4;0<=s;--s)if(this.data[s]===t&&this.data[s+1]===a&&this.data[s+2]===n&&this.data[s+3]===r)return s-this.zero;return-1},a.prototype.readData=function(e){if(this.checkOffset(e),0===e)return[];var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=a},{"./dataReader":16}],12:[function(e,t,a){'use strict';a.encode=function(e){for(var t="",a=0,n,r,s,o,d,l,p;a<e.length;)n=e.charCodeAt(a++),r=e.charCodeAt(a++),s=e.charCodeAt(a++),o=n>>2,d=(3&n)<<4|r>>4,l=(15&r)<<2|s>>6,p=63&s,isNaN(r)?l=p=64:isNaN(s)&&(p=64),t=t+"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(o)+"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(d)+"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(l)+"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(p);return t},a.decode=function(e){var t="",a=0,n,r,s,o,l,p,c;for(e=e.replace(/[^A-Za-z0-9\+\/\=]/g,"");a<e.length;)o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(e.charAt(a++)),l="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(e.charAt(a++)),p="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(e.charAt(a++)),c="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(e.charAt(a++)),n=o<<2|l>>4,r=(15&l)<<4|p>>2,s=(3&p)<<6|c,t+=d(n),64!=p&&(t+=d(r)),64!=c&&(t+=d(s));return t}},{}],13:[function(e,t){'use strict';function a(){this.compressedSize=0,this.uncompressedSize=0,this.crc32=0,this.compressionMethod=null,this.compressedContent=null}a.prototype={getContent:function(){return null},getCompressedContent:function(){return null}},t.exports=a},{}],14:[function(e,t,a){'use strict';a.STORE={magic:"\0\0",compress:function(e){return e},uncompress:function(e){return e},compressInputType:null,uncompressInputType:null},a.DEFLATE=e("./flate")},{"./flate":19}],15:[function(e,t){'use strict';var a=e("./utils"),n=[0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,936918e3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117];t.exports=function(e,t){if("undefined"==typeof e||!e.length)return 0;var r="string"!==a.getTypeOf(e);"undefined"==typeof t&&(t=0);var s=0,o=0,d=0;t^=-1;for(var l=0,p=e.length;l<p;l++)d=r?e[l]:e.charCodeAt(l),o=255&(t^d),s=n[o],t=t>>>8^s;return-1^t}},{"./utils":32}],16:[function(e,t){'use strict';function a(){this.data=null,this.length=0,this.index=0,this.zero=0}var n=e("./utils");a.prototype={checkOffset:function(e){this.checkIndex(this.index+e)},checkIndex:function(e){if(this.length<this.zero+e||0>e)throw new Error("End of data reached (data length = "+this.length+", asked index = "+e+"). Corrupted zip ?")},setIndex:function(e){this.checkIndex(e),this.index=e},skip:function(e){this.setIndex(this.index+e)},byteAt:function(){},readInt:function(e){var t=0,a;for(this.checkOffset(e),a=this.index+e-1;a>=this.index;a--)t=(t<<8)+this.byteAt(a);return this.index+=e,t},readString:function(e){return n.transformTo("string",this.readData(e))},readData:function(){},lastIndexOfSignature:function(){},readDate:function(){var e=this.readInt(4);return new Date((127&e>>25)+1980,(15&e>>21)-1,31&e>>16,31&e>>11,63&e>>5,(31&e)<<1)}},t.exports=a},{"./utils":32}],17:[function(e,t,a){'use strict';a.base64=!1,a.binary=!1,a.dir=!1,a.createFolders=!1,a.date=null,a.compression=null,a.compressionOptions=null,a.comment=null,a.unixPermissions=null,a.dosPermissions=null},{}],18:[function(e,t,a){'use strict';var n=e("./utils");a.string2binary=function(e){return n.string2binary(e)},a.string2Uint8Array=function(e){return n.transformTo("uint8array",e)},a.uint8Array2String=function(e){return n.transformTo("string",e)},a.string2Blob=function(e){var t=n.transformTo("arraybuffer",e);return n.arrayBuffer2Blob(t)},a.arrayBuffer2Blob=function(e){return n.arrayBuffer2Blob(e)},a.transformTo=function(e,t){return n.transformTo(e,t)},a.getTypeOf=function(e){return n.getTypeOf(e)},a.checkSupport=function(e){return n.checkSupport(e)},a.MAX_VALUE_16BITS=n.MAX_VALUE_16BITS,a.MAX_VALUE_32BITS=n.MAX_VALUE_32BITS,a.pretty=function(e){return n.pretty(e)},a.findCompression=function(e){return n.findCompression(e)},a.isRegExp=function(e){return n.isRegExp(e)}},{"./utils":32}],19:[function(e,t,a){'use strict';var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Uint32Array,r=e("pako");a.uncompressInputType=n?"uint8array":"array",a.compressInputType=n?"uint8array":"array",a.magic="\b\0",a.compress=function(e,t){return r.deflateRaw(e,{level:t.level||-1})},a.uncompress=function(e){return r.inflateRaw(e)}},{pako:37}],20:[function(e,t){'use strict';function a(e,t){return this instanceof a?void(this.files={},this.comment=null,this.root="",e&&this.load(e,t),this.clone=function(){var e=new a;for(var t in this)"function"!=typeof this[t]&&(e[t]=this[t]);return e}):new a(e,t)}var n=e("./base64");a.prototype=e("./object"),a.prototype.load=e("./load"),a.support=e("./support"),a.defaults=e("./defaults"),a.utils=e("./deprecatedPublicUtils"),a.base64={encode:function(e){return n.encode(e)},decode:function(e){return n.decode(e)}},a.compressions=e("./compressions"),t.exports=a},{"./base64":12,"./compressions":14,"./defaults":17,"./deprecatedPublicUtils":18,"./load":21,"./object":24,"./support":28}],21:[function(e,t){'use strict';var a=e("./base64"),n=e("./utf8"),r=e("./utils"),s=e("./zipEntries");t.exports=function(e,t){var o,d,l,p;for(t=r.extend(t||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:n.utf8decode}),t.base64&&(e=a.decode(e)),d=new s(e,t),o=d.files,l=0;l<o.length;l++)p=o[l],this.file(p.fileNameStr,p.decompressed,{binary:!0,optimizedBinaryString:!0,date:p.date,dir:p.dir,comment:p.fileCommentStr.length?p.fileCommentStr:null,unixPermissions:p.unixPermissions,dosPermissions:p.dosPermissions,createFolders:t.createFolders});return d.zipComment.length&&(this.comment=d.zipComment),this}},{"./base64":12,"./utf8":31,"./utils":32,"./zipEntries":33}],22:[function(e,t){(function(e){'use strict';t.exports=function(t,a){return new e(t,a)},t.exports.test=function(t){return e.isBuffer(t)}}).call(this,e("buffer").Buffer)},{buffer:7}],23:[function(e,t){'use strict';function a(e){this.data=e,this.length=this.data.length,this.index=0,this.zero=0}var n=e("./uint8ArrayReader");a.prototype=new n,a.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=a},{"./uint8ArrayReader":29}],24:[function(e,t){'use strict';var a=e("./support"),n=e("./utils"),r=e("./crc32"),s=e("./signature"),i=e("./defaults"),o=e("./base64"),l=e("./compressions"),p=e("./compressedObject"),c=e("./nodeBuffer"),u=e("./utf8"),m=e("./stringWriter"),_=e("./uint8ArrayWriter"),f=function(e){if(e._data instanceof p&&(e._data=e._data.getContent(),e.options.binary=!0,e.options.base64=!1,"uint8array"===n.getTypeOf(e._data))){var t=e._data;e._data=new Uint8Array(t.length),0!==t.length&&e._data.set(t,0)}return e._data},h=function(e){var t=f(e),r=n.getTypeOf(t);return"string"===r?!e.options.binary&&a.nodebuffer?c(t,"utf-8"):e.asBinary():t},g=function(e){var t=f(this);return null===t||"undefined"==typeof t?"":(this.options.base64&&(t=o.decode(t)),t=e&&this.options.binary?R.utf8decode(t):n.transformTo("string",t),e||this.options.binary||(t=n.transformTo("string",R.utf8encode(t))),t)},y=function(e,t,a){this.name=e,this.dir=a.dir,this.date=a.date,this.comment=a.comment,this.unixPermissions=a.unixPermissions,this.dosPermissions=a.dosPermissions,this._data=t,this.options=a,this._initialMetadata={dir:a.dir,date:a.date}};y.prototype={asText:function(){return g.call(this,!0)},asBinary:function(){return g.call(this,!1)},asNodeBuffer:function(){var e=h(this);return n.transformTo("nodebuffer",e)},asUint8Array:function(){var e=h(this);return n.transformTo("uint8array",e)},asArrayBuffer:function(){return this.asUint8Array().buffer}};var b=function(e,t){var a="",n;for(n=0;n<t;n++)a+=d(255&e),e>>>=8;return a},x=function(e){return e=e||{},!0===e.base64&&(null===e.binary||void 0===e.binary)&&(e.binary=!0),e=n.extend(e,i),e.date=e.date||new Date,null!==e.compression&&(e.compression=e.compression.toUpperCase()),e},w=function(e,t,a){var r=n.getTypeOf(t),s;if(a=x(a),"string"==typeof a.unixPermissions&&(a.unixPermissions=parseInt(a.unixPermissions,8)),a.unixPermissions&&16384&a.unixPermissions&&(a.dir=!0),a.dosPermissions&&16&a.dosPermissions&&(a.dir=!0),a.dir&&(e=C(e)),a.createFolders&&(s=E(e))&&A.call(this,s,!0),a.dir||null===t||"undefined"==typeof t)a.base64=!1,a.binary=!1,t=null,r=null;else if("string"===r)a.binary&&!a.base64&&!0!==a.optimizedBinaryString&&(t=n.string2binary(t));else{if(a.base64=!1,a.binary=!0,!r&&!(t instanceof p))throw new Error("The data of '"+e+"' is in an unsupported format !");"arraybuffer"==r&&(t=n.transformTo("uint8array",t))}var i=new y(e,t,a);return this.files[e]=i,i},E=function(e){"/"==e.slice(-1)&&(e=e.substring(0,e.length-1));var t=e.lastIndexOf("/");return 0<t?e.substring(0,t):""},C=function(e){return"/"!=e.slice(-1)&&(e+="/"),e},A=function(e,t){return t="undefined"!=typeof t&&t,e=C(e),this.files[e]||w.call(this,e,null,{dir:!0,createFolders:t}),this.files[e]},S=function(e,t,a){var s=new p,i;return e._data instanceof p?(s.uncompressedSize=e._data.uncompressedSize,s.crc32=e._data.crc32,0===s.uncompressedSize||e.dir?(t=l.STORE,s.compressedContent="",s.crc32=0):e._data.compressionMethod===t.magic?s.compressedContent=e._data.getCompressedContent():(i=e._data.getContent(),s.compressedContent=t.compress(n.transformTo(t.compressInputType,i),a))):(i=h(e),(!i||0===i.length||e.dir)&&(t=l.STORE,i=""),s.uncompressedSize=i.length,s.crc32=r(i),s.compressedContent=t.compress(n.transformTo(t.compressInputType,i),a)),s.compressedSize=s.compressedContent.length,s.compressionMethod=t.magic,s},k=function(e,t){var a=e;return e||(a=t?16893:33204),(65535&a)<<16},v=function(e){return 63&(e||0)},I=function(e,t,a,i,d,l){var p=a.compressedContent,c=l!==u.utf8encode,m=n.transformTo("string",l(t.name)),_=n.transformTo("string",u.utf8encode(t.name)),f=t.comment||"",h=n.transformTo("string",l(f)),g=n.transformTo("string",u.utf8encode(f)),y=_.length!==t.name.length,x=g.length!==f.length,w=t.options,o="",E="",C="",A,S,I,R;I=t._initialMetadata.dir===t.dir?w.dir:t.dir,R=t._initialMetadata.date===t.date?w.date:t.date;var O=0,z=0;I&&(O|=16),"UNIX"===d?(z=798,O|=k(t.unixPermissions,I)):(z=20,O|=v(t.dosPermissions,I)),A=R.getHours(),A<<=6,A|=R.getMinutes(),A<<=5,A|=R.getSeconds()/2,S=R.getFullYear()-1980,S<<=4,S|=R.getMonth()+1,S<<=5,S|=R.getDate(),y&&(E=b(1,1)+b(r(m),4)+_,o+="up"+b(E.length,2)+E),x&&(C=b(1,1)+b(this.crc32(h),4)+g,o+="uc"+b(C.length,2)+C);var L="";L+="\n\0",L+=!c&&(y||x)?"\0\b":"\0\0",L+=a.compressionMethod,L+=b(A,2),L+=b(S,2),L+=b(a.crc32,4),L+=b(a.compressedSize,4),L+=b(a.uncompressedSize,4),L+=b(m.length,2),L+=b(o.length,2);var T=s.LOCAL_FILE_HEADER+L+m+o,B=s.CENTRAL_FILE_HEADER+b(z,2)+L+b(h.length,2)+"\0\0\0\0"+b(O,4)+b(i,4)+m+o+h;return{fileRecord:T,dirRecord:B,compressedObject:a}},R={load:function(){throw new Error("Load method is not defined. Is the file jszip-load.js included ?")},filter:function(e){var t=[],a,r,s,i;for(a in this.files)this.files.hasOwnProperty(a)&&(s=this.files[a],i=new y(s.name,s._data,n.extend(s.options)),r=a.slice(this.root.length,a.length),a.slice(0,this.root.length)===this.root&&e(r,i)&&t.push(i));return t},file:function(e,t,a){if(1===arguments.length){if(n.isRegExp(e)){var r=e;return this.filter(function(e,t){return!t.dir&&r.test(e)})}return this.filter(function(t,a){return!a.dir&&t===e})[0]||null}return e=this.root+e,w.call(this,e,t,a),this},folder:function(e){if(!e)return this;if(n.isRegExp(e))return this.filter(function(t,a){return a.dir&&e.test(t)});var t=this.root+e,a=A.call(this,t),r=this.clone();return r.root=a.name,r},remove:function(e){e=this.root+e;var t=this.files[e];if(t||("/"!=e.slice(-1)&&(e+="/"),t=this.files[e]),t&&!t.dir)delete this.files[e];else for(var a=this.filter(function(t,a){return a.name.slice(0,e.length)===e}),n=0;n<a.length;n++)delete this.files[a[n].name];return this},generate:function(e){e=n.extend(e||{},{base64:!0,compression:"STORE",compressionOptions:null,type:"base64",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:u.utf8encode}),n.checkSupport(e.type),("darwin"===e.platform||"freebsd"===e.platform||"linux"===e.platform||"sunos"===e.platform)&&(e.platform="UNIX"),"win32"===e.platform&&(e.platform="DOS");var t=[],a=0,r=0,d=n.transformTo("string",e.encodeFileName(e.comment||this.comment||"")),p,c;for(var f in this.files)if(this.files.hasOwnProperty(f)){var h=this.files[f],g=h.options.compression||e.compression.toUpperCase(),y=l[g];if(!y)throw new Error(g+" is not a valid compression method !");var x=h.options.compressionOptions||e.compressionOptions||{},w=S.call(this,h,y,x),E=I.call(this,f,h,w,a,e.platform,e.encodeFileName);a+=E.fileRecord.length+w.compressedSize,r+=E.dirRecord.length,t.push(E)}var C="";C=s.CENTRAL_DIRECTORY_END+"\0\0\0\0"+b(t.length,2)+b(t.length,2)+b(r,4)+b(a,4)+b(d.length,2)+d;var A=e.type.toLowerCase();for(p="uint8array"===A||"arraybuffer"===A||"blob"===A||"nodebuffer"===A?new _(a+r+C.length):new m(a+r+C.length),c=0;c<t.length;c++)p.append(t[c].fileRecord),p.append(t[c].compressedObject.compressedContent);for(c=0;c<t.length;c++)p.append(t[c].dirRecord);p.append(C);var k=p.finalize();switch(e.type.toLowerCase()){case"uint8array":case"arraybuffer":case"nodebuffer":return n.transformTo(e.type.toLowerCase(),k);case"blob":return n.arrayBuffer2Blob(n.transformTo("arraybuffer",k),e.mimeType);case"base64":return e.base64?o.encode(k):k;default:return k;}},crc32:function(e,t){return r(e,t)},utf8encode:function(e){return n.transformTo("string",u.utf8encode(e))},utf8decode:function(e){return u.utf8decode(e)}};t.exports=R},{"./base64":12,"./compressedObject":13,"./compressions":14,"./crc32":15,"./defaults":17,"./nodeBuffer":22,"./signature":25,"./stringWriter":27,"./support":28,"./uint8ArrayWriter":30,"./utf8":31,"./utils":32}],25:[function(e,t,a){'use strict';a.LOCAL_FILE_HEADER="PK\x03\x04",a.CENTRAL_FILE_HEADER="PK\x01\x02",a.CENTRAL_DIRECTORY_END="PK\x05\x06",a.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK\x06\x07",a.ZIP64_CENTRAL_DIRECTORY_END="PK\x06\x06",a.DATA_DESCRIPTOR="PK\x07\b"},{}],26:[function(e,t){'use strict';function a(e,t){this.data=e,t||(this.data=r.string2binary(this.data)),this.length=this.data.length,this.index=0,this.zero=0}var n=e("./dataReader"),r=e("./utils");a.prototype=new n,a.prototype.byteAt=function(e){return this.data.charCodeAt(this.zero+e)},a.prototype.lastIndexOfSignature=function(e){return this.data.lastIndexOf(e)-this.zero},a.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=a},{"./dataReader":16,"./utils":32}],27:[function(e,t){'use strict';var a=e("./utils"),n=function(){this.data=[]};n.prototype={append:function(e){e=a.transformTo("string",e),this.data.push(e)},finalize:function(){return this.data.join("")}},t.exports=n},{"./utils":32}],28:[function(e,t,a){(function(e){'use strict';if(a.base64=!0,a.array=!0,a.string=!0,a.arraybuffer="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array,a.nodebuffer="undefined"!=typeof e,a.uint8array="undefined"!=typeof Uint8Array,"undefined"==typeof ArrayBuffer)a.blob=!1;else{var t=new ArrayBuffer(0);try{a.blob=0===new Blob([t],{type:"application/zip"}).size}catch(s){try{var n=window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder,r=new n;r.append(t),a.blob=0===r.getBlob("application/zip").size}catch(t){a.blob=!1}}}}).call(this,e("buffer").Buffer)},{buffer:7}],29:[function(e,t){'use strict';function a(e){e&&(this.data=e,this.length=this.data.length,this.index=0,this.zero=0)}var n=e("./arrayReader");a.prototype=new n,a.prototype.readData=function(e){if(this.checkOffset(e),0===e)return new Uint8Array(0);var t=this.data.subarray(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=a},{"./arrayReader":11}],30:[function(e,t){'use strict';var a=e("./utils"),n=function(e){this.data=new Uint8Array(e),this.index=0};n.prototype={append:function(e){0!==e.length&&(e=a.transformTo("uint8array",e),this.data.set(e,this.index),this.index+=e.length)},finalize:function(){return this.data}},t.exports=n},{"./utils":32}],31:[function(e,t,a){'use strict';for(var n=e("./utils"),r=e("./support"),s=e("./nodeBuffer"),o=Array(256),d=0;256>d;d++)o[d]=252<=d?6:248<=d?5:240<=d?4:224<=d?3:192<=d?2:1;o[254]=o[254]=1;var p=function(e){var t=e.length,a=0,n,s,o,d,l;for(d=0;d<t;d++)s=e.charCodeAt(d),55296==(64512&s)&&d+1<t&&(o=e.charCodeAt(d+1),56320==(64512&o)&&(s=65536+(s-55296<<10)+(o-56320),d++)),a+=128>s?1:2048>s?2:65536>s?3:4;for(n=r.uint8array?new Uint8Array(a):Array(a),l=0,d=0;l<a;d++)s=e.charCodeAt(d),55296==(64512&s)&&d+1<t&&(o=e.charCodeAt(d+1),56320==(64512&o)&&(s=65536+(s-55296<<10)+(o-56320),d++)),128>s?n[l++]=s:2048>s?(n[l++]=192|s>>>6,n[l++]=128|63&s):65536>s?(n[l++]=224|s>>>12,n[l++]=128|63&s>>>6,n[l++]=128|63&s):(n[l++]=240|s>>>18,n[l++]=128|63&s>>>12,n[l++]=128|63&s>>>6,n[l++]=128|63&s);return n},c=function(e,t){var a;for(t=t||e.length,t>e.length&&(t=e.length),a=t-1;0<=a&&128==(192&e[a]);)a--;return 0>a?t:0===a?t:a+o[e[a]]>t?a:t},u=function(e){var t=e.length,a=Array(2*t),r,s,d,l;for(s=0,r=0;r<t;){if(d=e[r++],128>d){a[s++]=d;continue}if(l=o[d],4<l){a[s++]=65533,r+=l-1;continue}for(d&=2===l?31:3===l?15:7;1<l&&r<t;)d=d<<6|63&e[r++],l--;if(1<l){a[s++]=65533;continue}65536>d?a[s++]=d:(d-=65536,a[s++]=55296|1023&d>>10,a[s++]=56320|1023&d)}return a.length!==s&&(a.subarray?a=a.subarray(0,s):a.length=s),n.applyFromCharCode(a)};a.utf8encode=function(e){return r.nodebuffer?s(e,"utf-8"):p(e)},a.utf8decode=function(e){if(r.nodebuffer)return n.transformTo("nodebuffer",e).toString("utf-8");e=n.transformTo(r.uint8array?"uint8array":"array",e);for(var t=[],a=0,s=e.length;a<s;){var i=c(e,l(a+65536,s));r.uint8array?t.push(u(e.subarray(a,i))):t.push(u(e.slice(a,i))),a=i}return t.join("")}},{"./nodeBuffer":22,"./support":28,"./utils":32}],32:[function(e,t,a){'use strict';function n(e){return e}function s(e,t){for(var a=0;a<e.length;++a)t[a]=255&e.charCodeAt(a);return t}function i(e){var t=65536,n=[],s=e.length,o=a.getTypeOf(e),p=0,c=!0;try{"uint8array"===o?d.apply(null,new Uint8Array(0)):"nodebuffer"===o?d.apply(null,u(0)):void 0}catch(t){c=!1}if(!c){for(var m="",_=0;_<e.length;_++)m+=d(e[_]);return m}for(;p<s&&1<t;)try{"array"===o||"nodebuffer"===o?n.push(d.apply(null,e.slice(p,l(p+t,s)))):n.push(d.apply(null,e.subarray(p,l(p+t,s)))),p+=t}catch(a){t=r(t/2)}return n.join("")}function o(e,t){for(var a=0;a<e.length;a++)t[a]=e[a];return t}var p=e("./support"),c=e("./compressions"),u=e("./nodeBuffer");a.string2binary=function(e){for(var t="",a=0;a<e.length;a++)t+=d(255&e.charCodeAt(a));return t},a.arrayBuffer2Blob=function(e,t){a.checkSupport("blob"),t=t||"application/zip";try{return new Blob([e],{type:t})}catch(a){try{var n=window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder,r=new n;return r.append(e),r.getBlob(t)}catch(t){throw new Error("Bug : can't construct the Blob.")}}},a.applyFromCharCode=i;var m={};m.string={string:n,array:function(e){return s(e,Array(e.length))},arraybuffer:function(e){return m.string.uint8array(e).buffer},uint8array:function(e){return s(e,new Uint8Array(e.length))},nodebuffer:function(e){return s(e,u(e.length))}},m.array={string:i,array:n,arraybuffer:function(e){return new Uint8Array(e).buffer},uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return u(e)}},m.arraybuffer={string:function(e){return i(new Uint8Array(e))},array:function(e){return o(new Uint8Array(e),Array(e.byteLength))},arraybuffer:n,uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return u(new Uint8Array(e))}},m.uint8array={string:i,array:function(e){return o(e,Array(e.length))},arraybuffer:function(e){return e.buffer},uint8array:n,nodebuffer:function(e){return u(e)}},m.nodebuffer={string:i,array:function(e){return o(e,Array(e.length))},arraybuffer:function(e){return m.nodebuffer.uint8array(e).buffer},uint8array:function(e){return o(e,new Uint8Array(e.length))},nodebuffer:n},a.transformTo=function(e,t){if(t||(t=""),!e)return t;a.checkSupport(e);var n=a.getTypeOf(t),r=m[n][e](t);return r},a.getTypeOf=function(e){return"string"==typeof e?"string":"[object Array]"===Object.prototype.toString.call(e)?"array":p.nodebuffer&&u.test(e)?"nodebuffer":p.uint8array&&e instanceof Uint8Array?"uint8array":p.arraybuffer&&e instanceof ArrayBuffer?"arraybuffer":void 0},a.checkSupport=function(e){var t=p[e.toLowerCase()];if(!t)throw new Error(e+" is not supported by this browser")},a.MAX_VALUE_16BITS=65535,a.MAX_VALUE_32BITS=-1,a.pretty=function(e){var t="",a,n;for(n=0;n<(e||"").length;n++)a=e.charCodeAt(n),t+="\\x"+(16>a?"0":"")+a.toString(16).toUpperCase();return t},a.findCompression=function(e){for(var t in c)if(c.hasOwnProperty(t)&&c[t].magic===e)return c[t];return null},a.isRegExp=function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},a.extend=function(){var e={},t,a;for(t=0;t<arguments.length;t++)for(a in arguments[t])arguments[t].hasOwnProperty(a)&&"undefined"==typeof e[a]&&(e[a]=arguments[t][a]);return e}},{"./compressions":14,"./nodeBuffer":22,"./support":28}],33:[function(e,t){'use strict';function a(e,t){this.files=[],this.loadOptions=t,e&&this.load(e)}var r=e("./stringReader"),s=e("./nodeBufferReader"),i=e("./uint8ArrayReader"),o=e("./arrayReader"),d=e("./utils"),l=e("./signature"),p=e("./zipEntry"),c=e("./support"),u=e("./object");a.prototype={checkSignature:function(e){var t=this.reader.readString(4);if(t!==e)throw new Error("Corrupted zip or bug : unexpected signature ("+d.pretty(t)+", expected "+d.pretty(e)+")")},isSignature:function(e,t){var a=this.reader.index;this.reader.setIndex(e);var n=this.reader.readString(4);return this.reader.setIndex(a),n===t},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var e=this.reader.readData(this.zipCommentLength),t=c.uint8array?"uint8array":"array",a=d.transformTo(t,e);this.zipComment=this.loadOptions.decodeFileName(a)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.versionMadeBy=this.reader.readString(2),this.versionNeeded=this.reader.readInt(2),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var e=this.zip64EndOfCentralSize-44,t,a,n;0<e;)t=this.reader.readInt(2),a=this.reader.readInt(4),n=this.reader.readString(a),this.zip64ExtensibleData[t]={id:t,length:a,value:n}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var e,t;for(e=0;e<this.files.length;e++)t=this.files[e],this.reader.setIndex(t.localHeaderOffset),this.checkSignature(l.LOCAL_FILE_HEADER),t.readLocalPart(this.reader),t.handleUTF8(),t.processAttributes()},readCentralDir:function(){var e;for(this.reader.setIndex(this.centralDirOffset);this.reader.readString(4)===l.CENTRAL_FILE_HEADER;)e=new p({zip64:this.zip64},this.loadOptions),e.readCentralPart(this.reader),this.files.push(e);if(this.centralDirRecords!==this.files.length)if(0!==this.centralDirRecords&&0===this.files.length)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length);else;},readEndOfCentral:function(){var e=this.reader.lastIndexOfSignature(l.CENTRAL_DIRECTORY_END);if(0>e){var t=!this.isSignature(0,l.LOCAL_FILE_HEADER);if(t)throw new Error("Can't find end of central directory : is this a zip file ? If it is, see http://stuk.github.io/jszip/documentation/howto/read_zip.html");else throw new Error("Corrupted zip : can't find end of central directory")}this.reader.setIndex(e);var a=e;if(this.checkSignature(l.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===d.MAX_VALUE_16BITS||this.diskWithCentralDirStart===d.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===d.MAX_VALUE_16BITS||this.centralDirRecords===d.MAX_VALUE_16BITS||this.centralDirSize===d.MAX_VALUE_32BITS||this.centralDirOffset===d.MAX_VALUE_32BITS){if(this.zip64=!0,e=this.reader.lastIndexOfSignature(l.ZIP64_CENTRAL_DIRECTORY_LOCATOR),0>e)throw new Error("Corrupted zip : can't find the ZIP64 end of central directory locator");if(this.reader.setIndex(e),this.checkSignature(l.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,l.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(l.ZIP64_CENTRAL_DIRECTORY_END),0>this.relativeOffsetEndOfZip64CentralDir))throw new Error("Corrupted zip : can't find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(l.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var r=this.centralDirOffset+this.centralDirSize;this.zip64&&(r+=20,r+=12+this.zip64EndOfCentralSize);var s=a-r;if(0<s)this.isSignature(a,l.CENTRAL_FILE_HEADER)||(this.reader.zero=s);else if(0>s)throw new Error("Corrupted zip: missing "+n(s)+" bytes.")},prepareReader:function(e){var t=d.getTypeOf(e);if(d.checkSupport(t),"string"===t&&!c.uint8array)this.reader=new r(e,this.loadOptions.optimizedBinaryString);else if("nodebuffer"===t)this.reader=new s(e);else if(c.uint8array)this.reader=new i(d.transformTo("uint8array",e));else if(c.array)this.reader=new o(d.transformTo("array",e));else throw new Error("Unexpected error: unsupported type '"+t+"'")},load:function(e){this.prepareReader(e),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},t.exports=a},{"./arrayReader":11,"./nodeBufferReader":23,"./object":24,"./signature":25,"./stringReader":26,"./support":28,"./uint8ArrayReader":29,"./utils":32,"./zipEntry":34}],34:[function(e,t){'use strict';function a(e,t){this.options=e,this.loadOptions=t}var n=e("./stringReader"),r=e("./utils"),s=e("./compressedObject"),i=e("./object"),o=e("./support");a.prototype={isEncrypted:function(){return 1==(1&this.bitFlag)},useUTF8:function(){return 2048==(2048&this.bitFlag)},prepareCompressedContent:function(e,t,a){return function(){var n=e.index;e.setIndex(t);var r=e.readData(a);return e.setIndex(n),r}},prepareContent:function(e,t,a,n,s){return function(){var e=r.transformTo(n.uncompressInputType,this.getCompressedContent()),t=n.uncompress(e);if(t.length!==s)throw new Error("Bug : uncompressed data size mismatch");return t}},readLocalPart:function(e){var t,a;if(e.skip(22),this.fileNameLength=e.readInt(2),a=e.readInt(2),this.fileName=e.readData(this.fileNameLength),e.skip(a),-1==this.compressedSize||-1==this.uncompressedSize)throw new Error("Bug or corrupted zip : didn't get enough informations from the central directory (compressedSize == -1 || uncompressedSize == -1)");if(t=r.findCompression(this.compressionMethod),null===t)throw new Error("Corrupted zip : compression "+r.pretty(this.compressionMethod)+" unknown (inner file : "+r.transformTo("string",this.fileName)+")");if(this.decompressed=new s,this.decompressed.compressedSize=this.compressedSize,this.decompressed.uncompressedSize=this.uncompressedSize,this.decompressed.crc32=this.crc32,this.decompressed.compressionMethod=this.compressionMethod,this.decompressed.getCompressedContent=this.prepareCompressedContent(e,e.index,this.compressedSize,t),this.decompressed.getContent=this.prepareContent(e,e.index,this.compressedSize,t,this.uncompressedSize),this.loadOptions.checkCRC32&&(this.decompressed=r.transformTo("string",this.decompressed.getContent()),i.crc32(this.decompressed)!==this.crc32))throw new Error("Corrupted zip : CRC32 mismatch")},readCentralPart:function(e){if(this.versionMadeBy=e.readInt(2),this.versionNeeded=e.readInt(2),this.bitFlag=e.readInt(2),this.compressionMethod=e.readString(2),this.date=e.readDate(),this.crc32=e.readInt(4),this.compressedSize=e.readInt(4),this.uncompressedSize=e.readInt(4),this.fileNameLength=e.readInt(2),this.extraFieldsLength=e.readInt(2),this.fileCommentLength=e.readInt(2),this.diskNumberStart=e.readInt(2),this.internalFileAttributes=e.readInt(2),this.externalFileAttributes=e.readInt(4),this.localHeaderOffset=e.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");this.fileName=e.readData(this.fileNameLength),this.readExtraFields(e),this.parseZIP64ExtraField(e),this.fileComment=e.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var e=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),e===0&&(this.dosPermissions=63&this.externalFileAttributes),e===3&&(this.unixPermissions=65535&this.externalFileAttributes>>16),this.dir||"/"!==this.fileNameStr.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(){if(this.extraFields[1]){var e=new n(this.extraFields[1].value);this.uncompressedSize===r.MAX_VALUE_32BITS&&(this.uncompressedSize=e.readInt(8)),this.compressedSize===r.MAX_VALUE_32BITS&&(this.compressedSize=e.readInt(8)),this.localHeaderOffset===r.MAX_VALUE_32BITS&&(this.localHeaderOffset=e.readInt(8)),this.diskNumberStart===r.MAX_VALUE_32BITS&&(this.diskNumberStart=e.readInt(4))}},readExtraFields:function(e){var t=e.index,a,n,r;for(this.extraFields=this.extraFields||{};e.index<t+this.extraFieldsLength;)a=e.readInt(2),n=e.readInt(2),r=e.readString(n),this.extraFields[a]={id:a,length:n,value:r}},handleUTF8:function(){var e=o.uint8array?"uint8array":"array";if(this.useUTF8())this.fileNameStr=i.utf8decode(this.fileName),this.fileCommentStr=i.utf8decode(this.fileComment);else{var t=this.findExtraFieldUnicodePath();if(null!==t)this.fileNameStr=t;else{var a=r.transformTo(e,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(a)}var n=this.findExtraFieldUnicodeComment();if(null!==n)this.fileCommentStr=n;else{var s=r.transformTo(e,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(s)}}},findExtraFieldUnicodePath:function(){var e=this.extraFields[28789];if(e){var t=new n(e.value);return 1===t.readInt(1)?i.crc32(this.fileName)===t.readInt(4)?i.utf8decode(t.readString(e.length-5)):null:null}return null},findExtraFieldUnicodeComment:function(){var e=this.extraFields[25461];if(e){var t=new n(e.value);return 1===t.readInt(1)?i.crc32(this.fileComment)===t.readInt(4)?i.utf8decode(t.readString(e.length-5)):null:null}return null}},t.exports=a},{"./compressedObject":13,"./object":24,"./stringReader":26,"./support":28,"./utils":32}],35:[function(e,t){'use strict';function a(){}function n(e){if("function"!=typeof e)throw new TypeError("resolver must be a function");this.state=_,this.queue=[],this.outcome=void 0,e!==a&&d(this,e)}function r(e,t,a){this.promise=e,"function"==typeof t&&(this.onFulfilled=t,this.callFulfilled=this.otherCallFulfilled),"function"==typeof a&&(this.onRejected=a,this.callRejected=this.otherCallRejected)}function s(t,a,n){p(function(){var e;try{e=a(n)}catch(a){return c.reject(t,a)}e===t?c.reject(t,new TypeError("Cannot resolve promise with itself")):c.resolve(t,e)})}function o(e){var t=e&&e.then;if(e&&("object"==typeof e||"function"==typeof e)&&"function"==typeof t)return function(){t.apply(e,arguments)}}function d(e,t){function a(t){r||(r=!0,c.reject(e,t))}function n(t){r||(r=!0,c.resolve(e,t))}var r=!1,s=l(function(){t(n,a)});"error"===s.status&&a(s.value)}function l(e,t){var a={};try{a.value=e(t),a.status="success"}catch(t){a.status="error",a.value=t}return a}var p=e("immediate"),c={},u=["REJECTED"],m=["FULFILLED"],_=["PENDING"];t.exports=n,n.prototype["finally"]=function(e){if("function"!=typeof e)return this;var t=this.constructor;return this.then(function(a){return t.resolve(e()).then(function(){return a})},function(a){return t.resolve(e()).then(function(){throw a})})},n.prototype["catch"]=function(e){return this.then(null,e)},n.prototype.then=function(e,t){if("function"!=typeof e&&this.state===m||"function"!=typeof t&&this.state===u)return this;var n=new this.constructor(a);if(this.state!==_){var i=this.state===m?e:t;s(n,i,this.outcome)}else this.queue.push(new r(n,e,t));return n},r.prototype.callFulfilled=function(e){c.resolve(this.promise,e)},r.prototype.otherCallFulfilled=function(e){s(this.promise,this.onFulfilled,e)},r.prototype.callRejected=function(e){c.reject(this.promise,e)},r.prototype.otherCallRejected=function(e){s(this.promise,this.onRejected,e)},c.resolve=function(e,t){var a=l(o,t);if("error"===a.status)return c.reject(e,a.value);var n=a.value;if(n)d(e,n);else{e.state=m,e.outcome=t;for(var r=-1,s=e.queue.length;++r<s;)e.queue[r].callFulfilled(t)}return e},c.reject=function(e,t){e.state=u,e.outcome=t;for(var a=-1,n=e.queue.length;++a<n;)e.queue[a].callRejected(t);return e},n.resolve=function(e){return e instanceof this?e:c.resolve(new this(a),e)},n.reject=function(e){var t=new this(a);return c.reject(t,e)},n.all=function(e){function t(e,t){function a(e){o[t]=e,++d!==r||s||(s=!0,c.resolve(p,o))}n.resolve(e).then(a,function(e){s||(s=!0,c.reject(p,e))})}var n=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var r=e.length,s=!1;if(!r)return this.resolve([]);for(var o=Array(r),d=0,l=-1,p=new this(a);++l<r;)t(e[l],l);return p},n.race=function(e){function t(e){n.resolve(e).then(function(e){s||(s=!0,c.resolve(d,e))},function(e){s||(s=!0,c.reject(d,e))})}var n=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var r=e.length,s=!1;if(!r)return this.resolve([]);for(var o=-1,d=new this(a);++o<r;)t(e[o]);return d}},{immediate:9}],36:[function(e,t){(function(){function e(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function a(){return 1}function n(e){m||"string"==typeof e||"number"==typeof e||(m=!0,console.error(new TypeError("LRU: key must be a string or number. Almost certainly a bug! "+typeof e).stack))}function r(e){return this instanceof r?void("number"==typeof e&&(e={max:e}),!e&&(e={}),this._max=e.max,(!this._max||"number"!=typeof this._max||0>=this._max)&&(this._max=1/0),this._lengthCalculator=e.length||a,"function"!=typeof this._lengthCalculator&&(this._lengthCalculator=a),this._allowStale=e.stale||!1,this._maxAge=e.maxAge||null,this._dispose=e.dispose,this.reset()):new r(e)}function s(e,t,a){n(t);var r=e._cache[t];return r&&(o(e,r)?(c(e,r),!e._allowStale&&(r=void 0)):a&&d(e,r),r&&(r=r.value)),r}function o(e,t){if(!t||!t.maxAge&&!e._maxAge)return!1;var a=!1,n=Date.now()-t.now;return a=t.maxAge?n>t.maxAge:e._maxAge&&n>e._maxAge,a}function d(e,t){p(e,t),t.lu=e._mru++,e._lruList[t.lu]=t}function l(e){for(;e._lru<e._mru&&e._length>e._max;)c(e,e._lruList[e._lru])}function p(e,t){for(delete e._lruList[t.lu];e._lru<e._mru&&!e._lruList[e._lru];)e._lru++}function c(e,t){t&&(e._dispose&&e._dispose(t.key,t.value),e._length-=t.length,e._itemCount--,delete e._cache[t.key],p(e,t))}function u(e,t,a,n,r,s){this.key=e,this.value=t,this.lu=a,this.length=n,this.now=r,s&&(this.maxAge=s)}"object"==typeof t&&t.exports?t.exports=r:this.LRUCache=r;var m=!1;Object.defineProperty(r.prototype,"max",{set:function(e){e&&"number"==typeof e&&!(0>=e)||(e=1/0),this._max=e,this._length>this._max&&l(this)},get:function(){return this._max},enumerable:!0}),Object.defineProperty(r.prototype,"lengthCalculator",{set:function(e){if("function"!=typeof e)for(var t in this._lengthCalculator=a,this._length=this._itemCount,this._cache)this._cache[t].length=1;else for(var t in this._lengthCalculator=e,this._length=0,this._cache)this._cache[t].length=this._lengthCalculator(this._cache[t].value),this._length+=this._cache[t].length;this._length>this._max&&l(this)},get:function(){return this._lengthCalculator},enumerable:!0}),Object.defineProperty(r.prototype,"length",{get:function(){return this._length},enumerable:!0}),Object.defineProperty(r.prototype,"itemCount",{get:function(){return this._itemCount},enumerable:!0}),r.prototype.forEach=function(e,t){t=t||this;for(var a=0,n=this._itemCount,r=this._mru-1;0<=r&&a<n;r--)if(this._lruList[r]){a++;var s=this._lruList[r];o(this,s)&&(c(this,s),!this._allowStale&&(s=void 0)),s&&e.call(t,s.value,s.key,this)}},r.prototype.keys=function(){for(var e=Array(this._itemCount),t=0,a=this._mru-1;0<=a&&t<this._itemCount;a--)if(this._lruList[a]){var n=this._lruList[a];e[t++]=n.key}return e},r.prototype.values=function(){for(var e=Array(this._itemCount),t=0,a=this._mru-1;0<=a&&t<this._itemCount;a--)if(this._lruList[a]){var n=this._lruList[a];e[t++]=n.value}return e},r.prototype.reset=function(){if(this._dispose&&this._cache)for(var e in this._cache)this._dispose(e,this._cache[e].value);this._cache=Object.create(null),this._lruList=Object.create(null),this._mru=0,this._lru=0,this._length=0,this._itemCount=0},r.prototype.dump=function(){for(var e=[],t=0,a=this._mru-1;0<=a&&t<this._itemCount;a--)if(this._lruList[a]){var n=this._lruList[a];o(this,n)||(++t,e.push({k:n.key,v:n.value,e:n.now+(n.maxAge||0)}))}return e},r.prototype.dumpLru=function(){return this._lruList},r.prototype.set=function(t,a,r){r=r||this._maxAge,n(t);var s=r?Date.now():0,i=this._lengthCalculator(a);if(e(this._cache,t))return i>this._max?(c(this,this._cache[t]),!1):(this._dispose&&this._dispose(t,this._cache[t].value),this._cache[t].now=s,this._cache[t].maxAge=r,this._cache[t].value=a,this._length+=i-this._cache[t].length,this._cache[t].length=i,this.get(t),this._length>this._max&&l(this),!0);var o=new u(t,a,this._mru++,i,s,r);return o.length>this._max?(this._dispose&&this._dispose(t,a),!1):(this._length+=o.length,this._lruList[o.lu]=this._cache[t]=o,this._itemCount++,this._length>this._max&&l(this),!0)},r.prototype.has=function(t){if(n(t),!e(this._cache,t))return!1;var a=this._cache[t];return!o(this,a)},r.prototype.get=function(e){return n(e),s(this,e,!0)},r.prototype.peek=function(e){return n(e),s(this,e,!1)},r.prototype.pop=function(){var e=this._lruList[this._lru];return c(this,e),e||null},r.prototype.del=function(e){n(e),c(this,this._cache[e])},r.prototype.load=function(e){this.reset();for(var t=Date.now(),a=e.length-1,r;0<=a;a--){r=e[a],n(r.k);var s=r.e||0;if(0===s)this.set(r.k,r.v);else{var i=s-t;0<i&&this.set(r.k,r.v,i)}}}})()},{}],37:[function(e,t){'use strict';var a=e("./lib/utils/common").assign,n=e("./lib/deflate"),r=e("./lib/inflate"),s=e("./lib/zlib/constants"),i={};a(i,n,r,s),t.exports=i},{"./lib/deflate":38,"./lib/inflate":39,"./lib/utils/common":40,"./lib/zlib/constants":43}],38:[function(e,t,a){'use strict';function n(e){if(!(this instanceof n))return new n(e);this.options=i.assign({level:-1,method:8,chunkSize:16384,windowBits:15,memLevel:8,strategy:0,to:""},e||{});var t=this.options;t.raw&&0<t.windowBits?t.windowBits=-t.windowBits:t.gzip&&0<t.windowBits&&16>t.windowBits&&(t.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new l,this.strm.avail_out=0;var a=s.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(0!==a)throw new Error(d[a]);if(t.header&&s.deflateSetHeader(this.strm,t.header),t.dictionary){var r;if(r="string"==typeof t.dictionary?o.string2buf(t.dictionary):"[object ArrayBuffer]"===p.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,a=s.deflateSetDictionary(this.strm,r),0!==a)throw new Error(d[a]);this._dict_set=!0}}function r(e,t){var a=new n(t);if(a.push(e,!0),a.err)throw a.msg||d[a.err];return a.result}var s=e("./zlib/deflate"),i=e("./utils/common"),o=e("./utils/strings"),d=e("./zlib/messages"),l=e("./zlib/zstream"),p=Object.prototype.toString,c=4,u=0,m=1,_=2;n.prototype.push=function(e,t){var a=this.strm,n=this.options.chunkSize,r,d;if(this.ended)return!1;d=t===~~t?t:!0===t?c:0,a.input="string"==typeof e?o.string2buf(e):"[object ArrayBuffer]"===p.call(e)?new Uint8Array(e):e,a.next_in=0,a.avail_in=a.input.length;do{if(0===a.avail_out&&(a.output=new i.Buf8(n),a.next_out=0,a.avail_out=n),r=s.deflate(a,d),r!==m&&r!==u)return this.onEnd(r),this.ended=!0,!1;(0===a.avail_out||0===a.avail_in&&(d===c||d===_))&&("string"===this.options.to?this.onData(o.buf2binstring(i.shrinkBuf(a.output,a.next_out))):this.onData(i.shrinkBuf(a.output,a.next_out)))}while((0<a.avail_in||0===a.avail_out)&&r!==m);return d===c?(r=s.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===u):d!==_||(this.onEnd(u),a.avail_out=0,!0)},n.prototype.onData=function(e){this.chunks.push(e)},n.prototype.onEnd=function(e){e===u&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},a.Deflate=n,a.deflate=r,a.deflateRaw=function(e,t){return t=t||{},t.raw=!0,r(e,t)},a.gzip=function(e,t){return t=t||{},t.gzip=!0,r(e,t)}},{"./utils/common":40,"./utils/strings":41,"./zlib/deflate":45,"./zlib/messages":50,"./zlib/zstream":52}],39:[function(e,t,a){'use strict';function n(e){if(!(this instanceof n))return new n(e);this.options=i.assign({chunkSize:16384,windowBits:0,to:""},e||{});var t=this.options;t.raw&&0<=t.windowBits&&16>t.windowBits&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),0<=t.windowBits&&16>t.windowBits&&!(e&&e.windowBits)&&(t.windowBits+=32),15<t.windowBits&&48>t.windowBits&&0==(15&t.windowBits)&&(t.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new p,this.strm.avail_out=0;var a=s.inflateInit2(this.strm,t.windowBits);if(a!==d.Z_OK)throw new Error(l[a]);if(this.header=new c,s.inflateGetHeader(this.strm,this.header),t.dictionary&&("string"==typeof t.dictionary?t.dictionary=o.string2buf(t.dictionary):"[object ArrayBuffer]"===u.call(t.dictionary)&&(t.dictionary=new Uint8Array(t.dictionary)),t.raw&&(a=s.inflateSetDictionary(this.strm,t.dictionary),a!==d.Z_OK)))throw new Error(l[a])}function r(e,t){var a=new n(t);if(a.push(e,!0),a.err)throw a.msg||l[a.err];return a.result}var s=e("./zlib/inflate"),i=e("./utils/common"),o=e("./utils/strings"),d=e("./zlib/constants"),l=e("./zlib/messages"),p=e("./zlib/zstream"),c=e("./zlib/gzheader"),u=Object.prototype.toString;n.prototype.push=function(e,t){var a=this.strm,n=this.options.chunkSize,r=this.options.dictionary,l=!1,p,c,m,_,f;if(this.ended)return!1;c=t===~~t?t:!0===t?d.Z_FINISH:d.Z_NO_FLUSH,a.input="string"==typeof e?o.binstring2buf(e):"[object ArrayBuffer]"===u.call(e)?new Uint8Array(e):e,a.next_in=0,a.avail_in=a.input.length;do{if(0===a.avail_out&&(a.output=new i.Buf8(n),a.next_out=0,a.avail_out=n),p=s.inflate(a,d.Z_NO_FLUSH),p===d.Z_NEED_DICT&&r&&(p=s.inflateSetDictionary(this.strm,r)),p===d.Z_BUF_ERROR&&!0===l&&(p=d.Z_OK,l=!1),p!==d.Z_STREAM_END&&p!==d.Z_OK)return this.onEnd(p),this.ended=!0,!1;a.next_out&&(0===a.avail_out||p===d.Z_STREAM_END||0===a.avail_in&&(c===d.Z_FINISH||c===d.Z_SYNC_FLUSH))&&("string"===this.options.to?(m=o.utf8border(a.output,a.next_out),_=a.next_out-m,f=o.buf2string(a.output,m),a.next_out=_,a.avail_out=n-_,_&&i.arraySet(a.output,a.output,m,_,0),this.onData(f)):this.onData(i.shrinkBuf(a.output,a.next_out))),0===a.avail_in&&0===a.avail_out&&(l=!0)}while((0<a.avail_in||0===a.avail_out)&&p!==d.Z_STREAM_END);return p===d.Z_STREAM_END&&(c=d.Z_FINISH),c===d.Z_FINISH?(p=s.inflateEnd(this.strm),this.onEnd(p),this.ended=!0,p===d.Z_OK):c!==d.Z_SYNC_FLUSH||(this.onEnd(d.Z_OK),a.avail_out=0,!0)},n.prototype.onData=function(e){this.chunks.push(e)},n.prototype.onEnd=function(e){e===d.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},a.Inflate=n,a.inflate=r,a.inflateRaw=function(e,t){return t=t||{},t.raw=!0,r(e,t)},a.ungzip=r},{"./utils/common":40,"./utils/strings":41,"./zlib/constants":43,"./zlib/gzheader":46,"./zlib/inflate":48,"./zlib/messages":50,"./zlib/zstream":52}],40:[function(e,t,a){'use strict';function n(e,t){return Object.prototype.hasOwnProperty.call(e,t)}var r="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;a.assign=function(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var a=t.shift();if(a){if("object"!=typeof a)throw new TypeError(a+"must be non-object");for(var r in a)n(a,r)&&(e[r]=a[r])}}return e},a.shrinkBuf=function(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)};var s={arraySet:function(e,t,a,n,r){if(t.subarray&&e.subarray)return void e.set(t.subarray(a,a+n),r);for(var s=0;s<n;s++)e[r+s]=t[a+s]},flattenChunks:function(e){var t,a,n,r,s,o;for(n=0,t=0,a=e.length;t<a;t++)n+=e[t].length;for(o=new Uint8Array(n),r=0,(t=0,a=e.length);t<a;t++)s=e[t],o.set(s,r),r+=s.length;return o}},i={arraySet:function(e,t,a,n,r){for(var s=0;s<n;s++)e[r+s]=t[a+s]},flattenChunks:function(e){return[].concat.apply([],e)}};a.setTyped=function(e){e?(a.Buf8=Uint8Array,a.Buf16=Uint16Array,a.Buf32=Int32Array,a.assign(a,s)):(a.Buf8=Array,a.Buf16=Array,a.Buf32=Array,a.assign(a,i))},a.setTyped(r)},{}],41:[function(e,t,a){'use strict';function n(e,t){if(65534>t&&(e.subarray&&o||!e.subarray&&s))return d.apply(null,r.shrinkBuf(e,t));for(var a="",n=0;n<t;n++)a+=d(e[n]);return a}var r=e("./common"),s=!0,o=!0;try{d.apply(null,[0])}catch(e){s=!1}try{d.apply(null,new Uint8Array(1))}catch(e){o=!1}for(var l=new r.Buf8(256),p=0;256>p;p++)l[p]=252<=p?6:248<=p?5:240<=p?4:224<=p?3:192<=p?2:1;l[254]=l[254]=1,a.string2buf=function(e){var t=e.length,a=0,n,s,o,d,l;for(d=0;d<t;d++)s=e.charCodeAt(d),55296==(64512&s)&&d+1<t&&(o=e.charCodeAt(d+1),56320==(64512&o)&&(s=65536+(s-55296<<10)+(o-56320),d++)),a+=128>s?1:2048>s?2:65536>s?3:4;for(n=new r.Buf8(a),l=0,d=0;l<a;d++)s=e.charCodeAt(d),55296==(64512&s)&&d+1<t&&(o=e.charCodeAt(d+1),56320==(64512&o)&&(s=65536+(s-55296<<10)+(o-56320),d++)),128>s?n[l++]=s:2048>s?(n[l++]=192|s>>>6,n[l++]=128|63&s):65536>s?(n[l++]=224|s>>>12,n[l++]=128|63&s>>>6,n[l++]=128|63&s):(n[l++]=240|s>>>18,n[l++]=128|63&s>>>12,n[l++]=128|63&s>>>6,n[l++]=128|63&s);return n},a.buf2binstring=function(e){return n(e,e.length)},a.binstring2buf=function(e){for(var t=new r.Buf8(e.length),a=0,n=t.length;a<n;a++)t[a]=e.charCodeAt(a);return t},a.buf2string=function(e,t){var a=t||e.length,r=Array(2*a),s,o,d,p;for(o=0,s=0;s<a;){if(d=e[s++],128>d){r[o++]=d;continue}if(p=l[d],4<p){r[o++]=65533,s+=p-1;continue}for(d&=2===p?31:3===p?15:7;1<p&&s<a;)d=d<<6|63&e[s++],p--;if(1<p){r[o++]=65533;continue}65536>d?r[o++]=d:(d-=65536,r[o++]=55296|1023&d>>10,r[o++]=56320|1023&d)}return n(r,o)},a.utf8border=function(e,t){var a;for(t=t||e.length,t>e.length&&(t=e.length),a=t-1;0<=a&&128==(192&e[a]);)a--;return 0>a?t:0===a?t:a+l[e[a]]>t?a:t}},{"./common":40}],42:[function(e,t){'use strict';t.exports=function(e,t,a,r){for(var s=0|65535&e,i=0|65535&e>>>16,o=0;0!==a;){o=2e3<a?2e3:a,a-=o;do s=0|s+t[r++],i=0|i+s;while(--o);s%=65521,i%=65521}return 0|(s|i<<16)}},{}],43:[function(e,t){'use strict';t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],44:[function(e,t){'use strict';var a=function(){for(var e=[],t=0,a;256>t;t++){a=t;for(var r=0;8>r;r++)a=1&a?3988292384^a>>>1:a>>>1;e[t]=a}return e}();t.exports=function(e,t,n,r){e^=-1;for(var s=r;s<r+n;s++)e=e>>>8^a[255&(e^t[s])];return-1^e}},{}],45:[function(e,t,a){'use strict';function n(e,t){return e.msg=R[t],t}function r(e){return(e<<1)-(4<e?9:0)}function i(e){for(var t=e.length;0<=--t;)e[t]=0}function o(e){var t=e.state,a=t.pending;a>e.avail_out&&(a=e.avail_out);0===a||(S.arraySet(e.output,t.pending_buf,t.pending_out,a,e.next_out),e.next_out+=a,t.pending_out+=a,e.total_out+=a,e.avail_out-=a,t.pending-=a,0===t.pending&&(t.pending_out=0))}function d(e,t){k._tr_flush_block(e,0<=e.block_start?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,o(e.strm)}function l(e,t){e.pending_buf[e.pending++]=t}function p(e,t){e.pending_buf[e.pending++]=255&t>>>8,e.pending_buf[e.pending++]=255&t}function c(e,t,a,n){var r=e.avail_in;return(r>n&&(r=n),0===r)?0:(e.avail_in-=r,S.arraySet(t,e.input,e.next_in,r,a),1===e.state.wrap?e.adler=v(e.adler,t,r,a):2===e.state.wrap&&(e.adler=I(e.adler,t,r,a)),e.next_in+=r,e.total_in+=r,r)}function u(e,t){var a=e.max_chain_length,n=e.strstart,r=e.prev_length,s=e.nice_match,i=e.strstart>e.w_size-262?e.strstart-(e.w_size-262):0,o=e.window,d=e.w_mask,l=e.prev,p=e.strstart+258,c=o[n+r-1],u=o[n+r],m,_;e.prev_length>=e.good_match&&(a>>=2),s>e.lookahead&&(s=e.lookahead);do{if(m=t,o[m+r]!==u||o[m+r-1]!==c||o[m]!==o[n]||o[++m]!==o[n+1])continue;n+=2,m++;do;while(o[++n]===o[++m]&&o[++n]===o[++m]&&o[++n]===o[++m]&&o[++n]===o[++m]&&o[++n]===o[++m]&&o[++n]===o[++m]&&o[++n]===o[++m]&&o[++n]===o[++m]&&n<p);if(_=258-(p-n),n=p-258,_>r){if(e.match_start=t,r=_,_>=s)break;c=o[n+r-1],u=o[n+r]}}while((t=l[t&d])>i&&0!=--a);return r<=e.lookahead?r:e.lookahead}function m(e){var t=e.w_size,a,r,s,i,o;do{if(i=e.window_size-e.lookahead-e.strstart,e.strstart>=t+(t-262)){S.arraySet(e.window,e.window,t,t,0),e.match_start-=t,e.strstart-=t,e.block_start-=t,r=e.hash_size,a=r;do s=e.head[--a],e.head[a]=s>=t?s-t:0;while(--r);r=t,a=r;do s=e.prev[--a],e.prev[a]=s>=t?s-t:0;while(--r);i+=t}if(0===e.strm.avail_in)break;if(r=c(e.strm,e.window,e.strstart+e.lookahead,i),e.lookahead+=r,3<=e.lookahead+e.insert)for(o=e.strstart-e.insert,e.ins_h=e.window[o],e.ins_h=(e.ins_h<<e.hash_shift^e.window[o+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[o+3-1])&e.hash_mask,e.prev[o&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=o,o++,e.insert--,!(3>e.lookahead+e.insert)););}while(262>e.lookahead&&0!==e.strm.avail_in)}function _(e,t){for(var a,n;;){if(262>e.lookahead){if(m(e),262>e.lookahead&&0===t)return 1;if(0===e.lookahead)break}if(a=0,3<=e.lookahead&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,a=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==a&&e.strstart-a<=e.w_size-262&&(e.match_length=u(e,a)),!(3<=e.match_length))n=k._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;else if(n=k._tr_tally(e,e.strstart-e.match_start,e.match_length-3),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&3<=e.lookahead){e.match_length--;do e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,a=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart;while(0!=--e.match_length);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;if(n&&(d(e,!1),0===e.strm.avail_out))return 1}return e.insert=2>e.strstart?e.strstart:2,4===t?(d(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(d(e,!1),0===e.strm.avail_out)?1:2}function f(e,t){for(var a,n,r;;){if(262>e.lookahead){if(m(e),262>e.lookahead&&0===t)return 1;if(0===e.lookahead)break}if(a=0,3<=e.lookahead&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,a=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=2,0!==a&&e.prev_length<e.max_lazy_match&&e.strstart-a<=e.w_size-262&&(e.match_length=u(e,a),5>=e.match_length&&(1===e.strategy||3===e.match_length&&4096<e.strstart-e.match_start)&&(e.match_length=2)),3<=e.prev_length&&e.match_length<=e.prev_length){r=e.strstart+e.lookahead-3,n=k._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-3),e.lookahead-=e.prev_length-1,e.prev_length-=2;do++e.strstart<=r&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,a=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart);while(0!=--e.prev_length);if(e.match_available=0,e.match_length=2,e.strstart++,n&&(d(e,!1),0===e.strm.avail_out))return 1}else if(!e.match_available)e.match_available=1,e.strstart++,e.lookahead--;else if(n=k._tr_tally(e,0,e.window[e.strstart-1]),n&&d(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return 1}return e.match_available&&(n=k._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=2>e.strstart?e.strstart:2,4===t?(d(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(d(e,!1),0===e.strm.avail_out)?1:2}function h(e,t){for(var a=e.window,n,r,s,i;;){if(258>=e.lookahead){if(m(e),258>=e.lookahead&&0===t)return 1;if(0===e.lookahead)break}if(e.match_length=0,3<=e.lookahead&&0<e.strstart&&(s=e.strstart-1,r=a[s],r===a[++s]&&r===a[++s]&&r===a[++s])){i=e.strstart+258;do;while(r===a[++s]&&r===a[++s]&&r===a[++s]&&r===a[++s]&&r===a[++s]&&r===a[++s]&&r===a[++s]&&r===a[++s]&&s<i);e.match_length=258-(i-s),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(3<=e.match_length?(n=k._tr_tally(e,1,e.match_length-3),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(n=k._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),n&&(d(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(d(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(d(e,!1),0===e.strm.avail_out)?1:2}function g(e,t){for(var a;;){if(0===e.lookahead&&(m(e),0===e.lookahead)){if(0===t)return 1;break}if(e.match_length=0,a=k._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,a&&(d(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(d(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(d(e,!1),0===e.strm.avail_out)?1:2}function y(e,t,a,n,r){this.good_length=e,this.max_lazy=t,this.nice_length=a,this.max_chain=n,this.func=r}function b(e){e.window_size=2*e.w_size,i(e.head),e.max_lazy_match=O[e.level].max_lazy,e.good_match=O[e.level].good_length,e.nice_match=O[e.level].nice_length,e.max_chain_length=O[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=2,e.match_available=0,e.ins_h=0}function x(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=8,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new S.Buf16(1146),this.dyn_dtree=new S.Buf16(122),this.bl_tree=new S.Buf16(78),i(this.dyn_ltree),i(this.dyn_dtree),i(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new S.Buf16(16),this.heap=new S.Buf16(573),i(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new S.Buf16(573),i(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function w(e){var t;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=2,t=e.state,t.pending=0,t.pending_out=0,0>t.wrap&&(t.wrap=-t.wrap),t.status=t.wrap?42:113,e.adler=2===t.wrap?0:1,t.last_flush=0,k._tr_init(t),0):n(e,-2)}function E(e){var t=w(e);return 0===t&&b(e.state),t}function C(e,t,a,r,i,o){if(!e)return-2;var d=1;if(-1===t&&(t=6),0>r?(d=0,r=-r):15<r&&(d=2,r-=16),1>i||9<i||8!==a||8>r||15<r||0>t||9<t||0>o||4<o)return n(e,-2);8===r&&(r=9);var l=new x;return e.state=l,l.strm=e,l.wrap=d,l.gzhead=null,l.w_bits=r,l.w_size=1<<l.w_bits,l.w_mask=l.w_size-1,l.hash_bits=i+7,l.hash_size=1<<l.hash_bits,l.hash_mask=l.hash_size-1,l.hash_shift=~~((l.hash_bits+3-1)/3),l.window=new S.Buf8(2*l.w_size),l.head=new S.Buf16(l.hash_size),l.prev=new S.Buf16(l.w_size),l.lit_bufsize=1<<i+6,l.pending_buf_size=4*l.lit_bufsize,l.pending_buf=new S.Buf8(l.pending_buf_size),l.d_buf=1*l.lit_bufsize,l.l_buf=3*l.lit_bufsize,l.level=t,l.strategy=o,l.method=a,E(e)}function A(e,t){var a,d,c,u;if(!e||!e.state||5<t||0>t)return e?n(e,-2):-2;if(d=e.state,!e.output||!e.input&&0!==e.avail_in||666===d.status&&4!==t)return n(e,0===e.avail_out?-5:-2);if(d.strm=e,a=d.last_flush,d.last_flush=t,42===d.status)if(2===d.wrap)e.adler=0,l(d,31),l(d,139),l(d,8),d.gzhead?(l(d,(d.gzhead.text?1:0)+(d.gzhead.hcrc?2:0)+(d.gzhead.extra?4:0)+(d.gzhead.name?8:0)+(d.gzhead.comment?16:0)),l(d,255&d.gzhead.time),l(d,255&d.gzhead.time>>8),l(d,255&d.gzhead.time>>16),l(d,255&d.gzhead.time>>24),l(d,9===d.level?2:2<=d.strategy||2>d.level?4:0),l(d,255&d.gzhead.os),d.gzhead.extra&&d.gzhead.extra.length&&(l(d,255&d.gzhead.extra.length),l(d,255&d.gzhead.extra.length>>8)),d.gzhead.hcrc&&(e.adler=I(e.adler,d.pending_buf,d.pending,0)),d.gzindex=0,d.status=69):(l(d,0),l(d,0),l(d,0),l(d,0),l(d,0),l(d,9===d.level?2:2<=d.strategy||2>d.level?4:0),l(d,3),d.status=113);else{var m=8+(d.w_bits-8<<4)<<8,_=-1;_=2<=d.strategy||2>d.level?0:6>d.level?1:6===d.level?2:3,m|=_<<6,0!==d.strstart&&(m|=32),m+=31-m%31,d.status=113,p(d,m),0!==d.strstart&&(p(d,e.adler>>>16),p(d,65535&e.adler)),e.adler=1}if(69===d.status)if(d.gzhead.extra){for(c=d.pending;d.gzindex<(65535&d.gzhead.extra.length)&&!(d.pending===d.pending_buf_size&&(d.gzhead.hcrc&&d.pending>c&&(e.adler=I(e.adler,d.pending_buf,d.pending-c,c)),o(e),c=d.pending,d.pending===d.pending_buf_size));)l(d,255&d.gzhead.extra[d.gzindex]),d.gzindex++;d.gzhead.hcrc&&d.pending>c&&(e.adler=I(e.adler,d.pending_buf,d.pending-c,c)),d.gzindex===d.gzhead.extra.length&&(d.gzindex=0,d.status=73)}else d.status=73;if(73===d.status)if(d.gzhead.name){c=d.pending;do{if(d.pending===d.pending_buf_size&&(d.gzhead.hcrc&&d.pending>c&&(e.adler=I(e.adler,d.pending_buf,d.pending-c,c)),o(e),c=d.pending,d.pending===d.pending_buf_size)){u=1;break}u=d.gzindex<d.gzhead.name.length?255&d.gzhead.name.charCodeAt(d.gzindex++):0,l(d,u)}while(0!==u);d.gzhead.hcrc&&d.pending>c&&(e.adler=I(e.adler,d.pending_buf,d.pending-c,c)),0===u&&(d.gzindex=0,d.status=91)}else d.status=91;if(91===d.status)if(d.gzhead.comment){c=d.pending;do{if(d.pending===d.pending_buf_size&&(d.gzhead.hcrc&&d.pending>c&&(e.adler=I(e.adler,d.pending_buf,d.pending-c,c)),o(e),c=d.pending,d.pending===d.pending_buf_size)){u=1;break}u=d.gzindex<d.gzhead.comment.length?255&d.gzhead.comment.charCodeAt(d.gzindex++):0,l(d,u)}while(0!==u);d.gzhead.hcrc&&d.pending>c&&(e.adler=I(e.adler,d.pending_buf,d.pending-c,c)),0===u&&(d.status=103)}else d.status=103;if(103===d.status&&(d.gzhead.hcrc?(d.pending+2>d.pending_buf_size&&o(e),d.pending+2<=d.pending_buf_size&&(l(d,255&e.adler),l(d,255&e.adler>>8),e.adler=0,d.status=113)):d.status=113),0!==d.pending){if(o(e),0===e.avail_out)return d.last_flush=-1,0;}else if(0===e.avail_in&&r(t)<=r(a)&&4!==t)return n(e,-5);if(666===d.status&&0!==e.avail_in)return n(e,-5);if(0!==e.avail_in||0!==d.lookahead||0!==t&&666!==d.status){var f=2===d.strategy?g(d,t):3===d.strategy?h(d,t):O[d.level].func(d,t);if((3===f||4===f)&&(d.status=666),1===f||3===f)return 0===e.avail_out&&(d.last_flush=-1),0;if(2===f&&(1===t?k._tr_align(d):5!==t&&(k._tr_stored_block(d,0,0,!1),3===t&&(i(d.head),0===d.lookahead&&(d.strstart=0,d.block_start=0,d.insert=0))),o(e),0===e.avail_out))return d.last_flush=-1,0}return 4===t?0>=d.wrap?1:(2===d.wrap?(l(d,255&e.adler),l(d,255&e.adler>>8),l(d,255&e.adler>>16),l(d,255&e.adler>>24),l(d,255&e.total_in),l(d,255&e.total_in>>8),l(d,255&e.total_in>>16),l(d,255&e.total_in>>24)):(p(d,e.adler>>>16),p(d,65535&e.adler)),o(e),0<d.wrap&&(d.wrap=-d.wrap),0===d.pending?1:0):0}var S=e("../utils/common"),k=e("./trees"),v=e("./adler32"),I=e("./crc32"),R=e("./messages"),O;O=[new y(0,0,0,0,function(e,t){var a=65535;for(a>e.pending_buf_size-5&&(a=e.pending_buf_size-5);;){if(1>=e.lookahead){if(m(e),0===e.lookahead&&0===t)return 1;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var n=e.block_start+a;if((0===e.strstart||e.strstart>=n)&&(e.lookahead=e.strstart-n,e.strstart=n,d(e,!1),0===e.strm.avail_out))return 1;if(e.strstart-e.block_start>=e.w_size-262&&(d(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(d(e,!0),0===e.strm.avail_out?3:4):e.strstart>e.block_start&&(d(e,!1),0===e.strm.avail_out)?1:1}),new y(4,4,8,4,_),new y(4,5,16,8,_),new y(4,6,32,32,_),new y(4,4,16,16,f),new y(8,16,32,32,f),new y(8,16,128,128,f),new y(8,32,128,256,f),new y(32,128,258,1024,f),new y(32,258,258,4096,f)],a.deflateInit=function(e,t){return C(e,t,8,15,8,0)},a.deflateInit2=C,a.deflateReset=E,a.deflateResetKeep=w,a.deflateSetHeader=function(e,t){return e&&e.state?2===e.state.wrap?(e.state.gzhead=t,0):-2:-2},a.deflate=A,a.deflateEnd=function(e){var t;return e&&e.state?(t=e.state.status,42!==t&&69!==t&&73!==t&&91!==t&&103!==t&&113!==t&&666!==t)?n(e,-2):(e.state=null,113===t?n(e,-3):0):-2},a.deflateSetDictionary=function(e,t){var a=t.length,r,o,d,l,p,c,u,_;if(!e||!e.state)return-2;if(r=e.state,l=r.wrap,2===l||1===l&&42!==r.status||r.lookahead)return-2;for(1===l&&(e.adler=v(e.adler,t,a,0)),r.wrap=0,a>=r.w_size&&(0===l&&(i(r.head),r.strstart=0,r.block_start=0,r.insert=0),_=new S.Buf8(r.w_size),S.arraySet(_,t,a-r.w_size,r.w_size,0),t=_,a=r.w_size),p=e.avail_in,c=e.next_in,u=e.input,e.avail_in=a,e.next_in=0,e.input=t,m(r);3<=r.lookahead;){o=r.strstart,d=r.lookahead-2;do r.ins_h=(r.ins_h<<r.hash_shift^r.window[o+3-1])&r.hash_mask,r.prev[o&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=o,o++;while(--d);r.strstart=o,r.lookahead=2,m(r)}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=2,r.match_available=0,e.next_in=c,e.input=u,e.avail_in=p,r.wrap=l,0},a.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":40,"./adler32":42,"./crc32":44,"./messages":50,"./trees":51}],46:[function(e,t){'use strict';t.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},{}],47:[function(e,t){'use strict';t.exports=function(e,t){var a,n,r,s,i,o,d,l,p,c,u,m,_,f,h,g,y,b,x,w,E,C,A,S,k;a=e.state,n=e.next_in,S=e.input,r=n+(e.avail_in-5),s=e.next_out,k=e.output,i=s-(t-e.avail_out),o=s+(e.avail_out-257),d=a.dmax,l=a.wsize,p=a.whave,c=a.wnext,u=a.window,m=a.hold,_=a.bits,f=a.lencode,h=a.distcode,g=(1<<a.lenbits)-1,y=(1<<a.distbits)-1;top:do{15>_&&(m+=S[n++]<<_,_+=8,m+=S[n++]<<_,_+=8),b=f[m&g];dolen:for(;;){if(x=b>>>24,m>>>=x,_-=x,x=255&b>>>16,0===x)k[s++]=65535&b;else if(16&x){w=65535&b,x&=15,x&&(_<x&&(m+=S[n++]<<_,_+=8),w+=m&(1<<x)-1,m>>>=x,_-=x),15>_&&(m+=S[n++]<<_,_+=8,m+=S[n++]<<_,_+=8),b=h[m&y];dodist:for(;;){if(x=b>>>24,m>>>=x,_-=x,x=255&b>>>16,16&x){if(E=65535&b,x&=15,_<x&&(m+=S[n++]<<_,_+=8,_<x&&(m+=S[n++]<<_,_+=8)),E+=m&(1<<x)-1,E>d){e.msg="invalid distance too far back",a.mode=30;break top}if(m>>>=x,_-=x,x=s-i,E>x){if(x=E-x,x>p&&a.sane){e.msg="invalid distance too far back",a.mode=30;break top}if(C=0,A=u,0===c){if(C+=l-x,x<w){w-=x;do k[s++]=u[C++];while(--x);C=s-E,A=k}}else if(c<x){if(C+=l+c-x,x-=c,x<w){w-=x;do k[s++]=u[C++];while(--x);if(C=0,c<w){x=c,w-=x;do k[s++]=u[C++];while(--x);C=s-E,A=k}}}else if(C+=c-x,x<w){w-=x;do k[s++]=u[C++];while(--x);C=s-E,A=k}for(;2<w;)k[s++]=A[C++],k[s++]=A[C++],k[s++]=A[C++],w-=3;w&&(k[s++]=A[C++],1<w&&(k[s++]=A[C++]))}else{C=s-E;do k[s++]=k[C++],k[s++]=k[C++],k[s++]=k[C++],w-=3;while(2<w);w&&(k[s++]=k[C++],1<w&&(k[s++]=k[C++]))}}else if(0==(64&x)){b=h[(65535&b)+(m&(1<<x)-1)];continue dodist}else{e.msg="invalid distance code",a.mode=30;break top}break}}else if(0==(64&x)){b=f[(65535&b)+(m&(1<<x)-1)];continue dolen}else if(32&x){a.mode=12;break top}else{e.msg="invalid literal/length code",a.mode=30;break top}break}}while(n<r&&s<o);return w=_>>3,n-=w,_-=w<<3,m&=(1<<_)-1,e.next_in=n,e.next_out=s,e.avail_in=n<r?5+(r-n):5-(n-r),e.avail_out=s<o?257+(o-s):257-(s-o),a.hold=m,void(a.bits=_)}},{}],48:[function(e,t,a){'use strict';function r(e){return(255&e>>>24)+(65280&e>>>8)+((65280&e)<<8)+((255&e)<<24)}function s(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new m.Buf16(320),this.work=new m.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function i(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=1,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new m.Buf32(852),t.distcode=t.distdyn=new m.Buf32(592),t.sane=1,t.back=-1,0):-2}function o(e){var t;return e&&e.state?(t=e.state,t.wsize=0,t.whave=0,t.wnext=0,i(e)):-2}function l(e,t){var a,n;return e&&e.state?(n=e.state,0>t?(a=0,t=-t):(a=(t>>4)+1,48>t&&(t&=15)),t&&(8>t||15<t))?-2:(null!==n.window&&n.wbits!==t&&(n.window=null),n.wrap=a,n.wbits=t,o(e)):-2}function p(e,t){var a,n;return e?(n=new s,e.state=n,n.window=null,a=l(e,t),0!==a&&(e.state=null),a):-2}function c(e){if(y){var t;for(b=new m.Buf32(512),x=new m.Buf32(32),t=0;144>t;)e.lens[t++]=8;for(;256>t;)e.lens[t++]=9;for(;280>t;)e.lens[t++]=7;for(;288>t;)e.lens[t++]=8;for(g(1,e.lens,0,288,b,0,e.work,{bits:9}),t=0;32>t;)e.lens[t++]=5;g(2,e.lens,0,32,x,0,e.work,{bits:5}),y=!1}e.lencode=b,e.lenbits=9,e.distcode=x,e.distbits=5}function u(e,t,a,n){var r=e.state,s;return null===r.window&&(r.wsize=1<<r.wbits,r.wnext=0,r.whave=0,r.window=new m.Buf8(r.wsize)),n>=r.wsize?(m.arraySet(r.window,t,a-r.wsize,r.wsize,0),r.wnext=0,r.whave=r.wsize):(s=r.wsize-r.wnext,s>n&&(s=n),m.arraySet(r.window,t,a-n,s,r.wnext),n-=s,n?(m.arraySet(r.window,t,a-n,n,0),r.wnext=n,r.whave=r.wsize):(r.wnext+=s,r.wnext===r.wsize&&(r.wnext=0),r.whave<r.wsize&&(r.whave+=s))),0}var m=e("../utils/common"),_=e("./adler32"),f=e("./crc32"),h=e("./inffast"),g=e("./inftrees"),y=!0,b,x;a.inflateReset=o,a.inflateReset2=l,a.inflateResetKeep=i,a.inflateInit=function(e){return p(e,15)},a.inflateInit2=p,a.inflate=function(e,t){var a=0,s=new m.Buf8(4),i=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],o,l,p,y,b,x,w,E,C,A,S,k,v,I,R,O,z,L,T,B,P,N,D,j;if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return-2;o=e.state,12===o.mode&&(o.mode=13),b=e.next_out,p=e.output,w=e.avail_out,y=e.next_in,l=e.input,x=e.avail_in,E=o.hold,C=o.bits,A=x,S=w,N=0;inf_leave:for(;;)switch(o.mode){case 1:if(0===o.wrap){o.mode=13;break}for(;16>C;){if(0===x)break inf_leave;x--,E+=l[y++]<<C,C+=8}if(2&o.wrap&&35615===E){o.check=0,s[0]=255&E,s[1]=255&E>>>8,o.check=f(o.check,s,2,0),E=0,C=0,o.mode=2;break}if(o.flags=0,o.head&&(o.head.done=!1),!(1&o.wrap)||(((255&E)<<8)+(E>>8))%31){e.msg="incorrect header check",o.mode=30;break}if(8!==(15&E)){e.msg="unknown compression method",o.mode=30;break}if(E>>>=4,C-=4,P=(15&E)+8,0===o.wbits)o.wbits=P;else if(P>o.wbits){e.msg="invalid window size",o.mode=30;break}o.dmax=1<<P,e.adler=o.check=1,o.mode=512&E?10:12,E=0,C=0;break;case 2:for(;16>C;){if(0===x)break inf_leave;x--,E+=l[y++]<<C,C+=8}if(o.flags=E,8!==(255&o.flags)){e.msg="unknown compression method",o.mode=30;break}if(57344&o.flags){e.msg="unknown header flags set",o.mode=30;break}o.head&&(o.head.text=1&E>>8),512&o.flags&&(s[0]=255&E,s[1]=255&E>>>8,o.check=f(o.check,s,2,0)),E=0,C=0,o.mode=3;case 3:for(;32>C;){if(0===x)break inf_leave;x--,E+=l[y++]<<C,C+=8}o.head&&(o.head.time=E),512&o.flags&&(s[0]=255&E,s[1]=255&E>>>8,s[2]=255&E>>>16,s[3]=255&E>>>24,o.check=f(o.check,s,4,0)),E=0,C=0,o.mode=4;case 4:for(;16>C;){if(0===x)break inf_leave;x--,E+=l[y++]<<C,C+=8}o.head&&(o.head.xflags=255&E,o.head.os=E>>8),512&o.flags&&(s[0]=255&E,s[1]=255&E>>>8,o.check=f(o.check,s,2,0)),E=0,C=0,o.mode=5;case 5:if(1024&o.flags){for(;16>C;){if(0===x)break inf_leave;x--,E+=l[y++]<<C,C+=8}o.length=E,o.head&&(o.head.extra_len=E),512&o.flags&&(s[0]=255&E,s[1]=255&E>>>8,o.check=f(o.check,s,2,0)),E=0,C=0}else o.head&&(o.head.extra=null);o.mode=6;case 6:if(1024&o.flags&&(k=o.length,k>x&&(k=x),k&&(o.head&&(P=o.head.extra_len-o.length,!o.head.extra&&(o.head.extra=Array(o.head.extra_len)),m.arraySet(o.head.extra,l,y,k,P)),512&o.flags&&(o.check=f(o.check,l,k,y)),x-=k,y+=k,o.length-=k),o.length))break inf_leave;o.length=0,o.mode=7;case 7:if(2048&o.flags){if(0===x)break inf_leave;k=0;do P=l[y+k++],o.head&&P&&65536>o.length&&(o.head.name+=d(P));while(P&&k<x);if(512&o.flags&&(o.check=f(o.check,l,k,y)),x-=k,y+=k,P)break inf_leave}else o.head&&(o.head.name=null);o.length=0,o.mode=8;case 8:if(4096&o.flags){if(0===x)break inf_leave;k=0;do P=l[y+k++],o.head&&P&&65536>o.length&&(o.head.comment+=d(P));while(P&&k<x);if(512&o.flags&&(o.check=f(o.check,l,k,y)),x-=k,y+=k,P)break inf_leave}else o.head&&(o.head.comment=null);o.mode=9;case 9:if(512&o.flags){for(;16>C;){if(0===x)break inf_leave;x--,E+=l[y++]<<C,C+=8}if(E!==(65535&o.check)){e.msg="header crc mismatch",o.mode=30;break}E=0,C=0}o.head&&(o.head.hcrc=1&o.flags>>9,o.head.done=!0),e.adler=o.check=0,o.mode=12;break;case 10:for(;32>C;){if(0===x)break inf_leave;x--,E+=l[y++]<<C,C+=8}e.adler=o.check=r(E),E=0,C=0,o.mode=11;case 11:if(0===o.havedict)return e.next_out=b,e.avail_out=w,e.next_in=y,e.avail_in=x,o.hold=E,o.bits=C,2;e.adler=o.check=1,o.mode=12;case 12:if(5===t||6===t)break inf_leave;case 13:if(o.last){E>>>=7&C,C-=7&C,o.mode=27;break}for(;3>C;){if(0===x)break inf_leave;x--,E+=l[y++]<<C,C+=8}switch(o.last=1&E,E>>>=1,C-=1,3&E){case 0:o.mode=14;break;case 1:if(c(o),o.mode=20,6===t){E>>>=2,C-=2;break inf_leave}break;case 2:o.mode=17;break;case 3:e.msg="invalid block type",o.mode=30;}E>>>=2,C-=2;break;case 14:for(E>>>=7&C,C-=7&C;32>C;){if(0===x)break inf_leave;x--,E+=l[y++]<<C,C+=8}if((65535&E)!=(65535^E>>>16)){e.msg="invalid stored block lengths",o.mode=30;break}if(o.length=65535&E,E=0,C=0,o.mode=15,6===t)break inf_leave;case 15:o.mode=16;case 16:if(k=o.length,k){if(k>x&&(k=x),k>w&&(k=w),0===k)break inf_leave;m.arraySet(p,l,y,k,b),x-=k,y+=k,w-=k,b+=k,o.length-=k;break}o.mode=12;break;case 17:for(;14>C;){if(0===x)break inf_leave;x--,E+=l[y++]<<C,C+=8}if(o.nlen=(31&E)+257,E>>>=5,C-=5,o.ndist=(31&E)+1,E>>>=5,C-=5,o.ncode=(15&E)+4,E>>>=4,C-=4,286<o.nlen||30<o.ndist){e.msg="too many length or distance symbols",o.mode=30;break}o.have=0,o.mode=18;case 18:for(;o.have<o.ncode;){for(;3>C;){if(0===x)break inf_leave;x--,E+=l[y++]<<C,C+=8}o.lens[i[o.have++]]=7&E,E>>>=3,C-=3}for(;19>o.have;)o.lens[i[o.have++]]=0;if(o.lencode=o.lendyn,o.lenbits=7,D={bits:o.lenbits},N=g(0,o.lens,0,19,o.lencode,0,o.work,D),o.lenbits=D.bits,N){e.msg="invalid code lengths set",o.mode=30;break}o.have=0,o.mode=19;case 19:for(;o.have<o.nlen+o.ndist;){for(;;){if(a=o.lencode[E&(1<<o.lenbits)-1],R=a>>>24,O=255&a>>>16,z=65535&a,R<=C)break;if(0===x)break inf_leave;x--,E+=l[y++]<<C,C+=8}if(16>z)E>>>=R,C-=R,o.lens[o.have++]=z;else{if(16===z){for(j=R+2;C<j;){if(0===x)break inf_leave;x--,E+=l[y++]<<C,C+=8}if(E>>>=R,C-=R,0===o.have){e.msg="invalid bit length repeat",o.mode=30;break}P=o.lens[o.have-1],k=3+(3&E),E>>>=2,C-=2}else if(17===z){for(j=R+3;C<j;){if(0===x)break inf_leave;x--,E+=l[y++]<<C,C+=8}E>>>=R,C-=R,P=0,k=3+(7&E),E>>>=3,C-=3}else{for(j=R+7;C<j;){if(0===x)break inf_leave;x--,E+=l[y++]<<C,C+=8}E>>>=R,C-=R,P=0,k=11+(127&E),E>>>=7,C-=7}if(o.have+k>o.nlen+o.ndist){e.msg="invalid bit length repeat",o.mode=30;break}for(;k--;)o.lens[o.have++]=P}}if(30===o.mode)break;if(0===o.lens[256]){e.msg="invalid code -- missing end-of-block",o.mode=30;break}if(o.lenbits=9,D={bits:o.lenbits},N=g(1,o.lens,0,o.nlen,o.lencode,0,o.work,D),o.lenbits=D.bits,N){e.msg="invalid literal/lengths set",o.mode=30;break}if(o.distbits=6,o.distcode=o.distdyn,D={bits:o.distbits},N=g(2,o.lens,o.nlen,o.ndist,o.distcode,0,o.work,D),o.distbits=D.bits,N){e.msg="invalid distances set",o.mode=30;break}if(o.mode=20,6===t)break inf_leave;case 20:o.mode=21;case 21:if(6<=x&&258<=w){e.next_out=b,e.avail_out=w,e.next_in=y,e.avail_in=x,o.hold=E,o.bits=C,h(e,S),b=e.next_out,p=e.output,w=e.avail_out,y=e.next_in,l=e.input,x=e.avail_in,E=o.hold,C=o.bits,12===o.mode&&(o.back=-1);break}for(o.back=0;;){if(a=o.lencode[E&(1<<o.lenbits)-1],R=a>>>24,O=255&a>>>16,z=65535&a,R<=C)break;if(0===x)break inf_leave;x--,E+=l[y++]<<C,C+=8}if(O&&0==(240&O)){for(L=R,T=O,B=z;;){if(a=o.lencode[B+((E&(1<<L+T)-1)>>L)],R=a>>>24,O=255&a>>>16,z=65535&a,L+R<=C)break;if(0===x)break inf_leave;x--,E+=l[y++]<<C,C+=8}E>>>=L,C-=L,o.back+=L}if(E>>>=R,C-=R,o.back+=R,o.length=z,0===O){o.mode=26;break}if(32&O){o.back=-1,o.mode=12;break}if(64&O){e.msg="invalid literal/length code",o.mode=30;break}o.extra=15&O,o.mode=22;case 22:if(o.extra){for(j=o.extra;C<j;){if(0===x)break inf_leave;x--,E+=l[y++]<<C,C+=8}o.length+=E&(1<<o.extra)-1,E>>>=o.extra,C-=o.extra,o.back+=o.extra}o.was=o.length,o.mode=23;case 23:for(;;){if(a=o.distcode[E&(1<<o.distbits)-1],R=a>>>24,O=255&a>>>16,z=65535&a,R<=C)break;if(0===x)break inf_leave;x--,E+=l[y++]<<C,C+=8}if(0==(240&O)){for(L=R,T=O,B=z;;){if(a=o.distcode[B+((E&(1<<L+T)-1)>>L)],R=a>>>24,O=255&a>>>16,z=65535&a,L+R<=C)break;if(0===x)break inf_leave;x--,E+=l[y++]<<C,C+=8}E>>>=L,C-=L,o.back+=L}if(E>>>=R,C-=R,o.back+=R,64&O){e.msg="invalid distance code",o.mode=30;break}o.offset=z,o.extra=15&O,o.mode=24;case 24:if(o.extra){for(j=o.extra;C<j;){if(0===x)break inf_leave;x--,E+=l[y++]<<C,C+=8}o.offset+=E&(1<<o.extra)-1,E>>>=o.extra,C-=o.extra,o.back+=o.extra}if(o.offset>o.dmax){e.msg="invalid distance too far back",o.mode=30;break}o.mode=25;case 25:if(0===w)break inf_leave;if(k=S-w,o.offset>k){if(k=o.offset-k,k>o.whave&&o.sane){e.msg="invalid distance too far back",o.mode=30;break}k>o.wnext?(k-=o.wnext,v=o.wsize-k):v=o.wnext-k,k>o.length&&(k=o.length),I=o.window}else I=p,v=b-o.offset,k=o.length;k>w&&(k=w),w-=k,o.length-=k;do p[b++]=I[v++];while(--k);0===o.length&&(o.mode=21);break;case 26:if(0===w)break inf_leave;p[b++]=o.length,w--,o.mode=21;break;case 27:if(o.wrap){for(;32>C;){if(0===x)break inf_leave;x--,E|=l[y++]<<C,C+=8}if(S-=w,e.total_out+=S,o.total+=S,S&&(e.adler=o.check=o.flags?f(o.check,p,S,b-S):_(o.check,p,S,b-S)),S=w,(o.flags?E:r(E))!==o.check){e.msg="incorrect data check",o.mode=30;break}E=0,C=0}o.mode=28;case 28:if(o.wrap&&o.flags){for(;32>C;){if(0===x)break inf_leave;x--,E+=l[y++]<<C,C+=8}if(E!==(4294967295&o.total)){e.msg="incorrect length check",o.mode=30;break}E=0,C=0}o.mode=29;case 29:N=1;break inf_leave;case 30:N=-3;break inf_leave;case 31:return-4;case 32:default:return-2;}return(e.next_out=b,e.avail_out=w,e.next_in=y,e.avail_in=x,o.hold=E,o.bits=C,(o.wsize||S!==e.avail_out&&30>o.mode&&(27>o.mode||4!==t))&&u(e,e.output,e.next_out,S-e.avail_out))?(o.mode=31,-4):(A-=e.avail_in,S-=e.avail_out,e.total_in+=A,e.total_out+=S,o.total+=S,o.wrap&&S&&(e.adler=o.check=o.flags?f(o.check,p,S,e.next_out-S):_(o.check,p,S,e.next_out-S)),e.data_type=o.bits+(o.last?64:0)+(12===o.mode?128:0)+(20===o.mode||15===o.mode?256:0),(0===A&&0===S||4===t)&&0===N&&(N=-5),N)},a.inflateEnd=function(e){if(!e||!e.state)return-2;var t=e.state;return t.window&&(t.window=null),e.state=null,0},a.inflateGetHeader=function(e,t){var a;return e&&e.state?(a=e.state,0==(2&a.wrap))?-2:(a.head=t,t.done=!1,0):-2},a.inflateSetDictionary=function(e,t){var a=t.length,n,r,s;return e&&e.state?(n=e.state,0!==n.wrap&&11!==n.mode)?-2:11===n.mode&&(r=1,r=_(r,t,a,0),r!==n.check)?-3:(s=u(e,t,a,a),s)?(n.mode=31,-4):(n.havedict=1,0):-2},a.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":40,"./adler32":42,"./crc32":44,"./inffast":47,"./inftrees":49}],49:[function(e,t){'use strict';var a=e("../utils/common"),n=15,r=852,s=592,i=0,o=1,d=2,l=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],p=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],c=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],u=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(e,t,m,_,f,h,g,y){var b=y.bits,x=0,w=0,E=0,C=0,A=0,S=0,k=0,v=0,I=0,R=0,O=null,z=0,L=new a.Buf16(n+1),T=new a.Buf16(n+1),B=null,P=0,N,D,j,U,F,M,G,Z,Y;for(x=0;x<=n;x++)L[x]=0;for(w=0;w<_;w++)L[t[m+w]]++;for(A=b,C=n;1<=C&&0===L[C];C--);if(A>C&&(A=C),0===C)return f[h++]=20971520,f[h++]=20971520,y.bits=1,0;for(E=1;E<C&&0===L[E];E++);for(A<E&&(A=E),v=1,x=1;x<=n;x++)if(v<<=1,v-=L[x],0>v)return-1;if(0<v&&(e===i||1!==C))return-1;for(T[1]=0,x=1;x<n;x++)T[x+1]=T[x]+L[x];for(w=0;w<_;w++)0!==t[m+w]&&(g[T[t[m+w]]++]=w);if(e===i?(O=B=g,M=19):e===o?(O=l,z-=257,B=p,P-=257,M=256):(O=c,B=u,M=-1),R=0,w=0,x=E,F=h,S=A,k=0,j=-1,I=1<<A,U=I-1,e===o&&I>r||e===d&&I>s)return 1;for(;;){G=x-k,g[w]<M?(Z=0,Y=g[w]):g[w]>M?(Z=B[P+g[w]],Y=O[z+g[w]]):(Z=96,Y=0),N=1<<x-k,D=1<<S,E=D;do D-=N,f[F+(R>>k)+D]=0|(G<<24|Z<<16|Y);while(0!==D);for(N=1<<x-1;R&N;)N>>=1;if(0===N?R=0:(R&=N-1,R+=N),w++,0==--L[x]){if(x===C)break;x=t[m+g[w]]}if(x>A&&(R&U)!==j){for(0===k&&(k=A),F+=E,S=x-k,v=1<<S;S+k<C&&(v-=L[S+k],!(0>=v));)S++,v<<=1;if(I+=1<<S,e===o&&I>r||e===d&&I>s)return 1;j=R&U,f[j]=0|(A<<24|S<<16|F-h)}}return 0!==R&&(f[F+R]=0|(4194304|x-k<<24)),y.bits=A,0}},{"../utils/common":40}],50:[function(e,t){'use strict';t.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],51:[function(e,t,a){'use strict';function n(e){for(var t=e.length;0<=--t;)e[t]=0}function r(e,t,a,n,r){this.static_tree=e,this.extra_bits=t,this.extra_base=a,this.elems=n,this.max_length=r,this.has_stree=e&&e.length}function i(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}function o(e){return 256>e?M[e]:M[256+(e>>>7)]}function d(e,t){e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=255&t>>>8}function l(e,t,a){e.bi_valid>16-a?(e.bi_buf|=65535&t<<e.bi_valid,d(e,e.bi_buf),e.bi_buf=t>>16-e.bi_valid,e.bi_valid+=a-16):(e.bi_buf|=65535&t<<e.bi_valid,e.bi_valid+=a)}function p(e,t,a){l(e,a[2*t],a[2*t+1])}function c(e,t){var a=0;do a|=1&e,e>>>=1,a<<=1;while(0<--t);return a>>>1}function u(e){16===e.bi_valid?(d(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):8<=e.bi_valid&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8)}function _(e,t){var a=t.dyn_tree,r=t.max_code,s=t.stat_desc.static_tree,i=t.stat_desc.has_stree,o=t.stat_desc.extra_bits,d=t.stat_desc.extra_base,l=t.stat_desc.max_length,p=0,c,u,_,g,y,b;for(g=0;g<=15;g++)e.bl_count[g]=0;for(a[2*e.heap[e.heap_max]+1]=0,c=e.heap_max+1;573>c;c++)(u=e.heap[c],g=a[2*a[2*u+1]+1]+1,g>l&&(g=l,p++),a[2*u+1]=g,!(u>r))&&(e.bl_count[g]++,y=0,u>=d&&(y=o[u-d]),b=a[2*u],e.opt_len+=b*(g+y),i&&(e.static_len+=b*(s[2*u+1]+y)));if(0!==p){do{for(g=l-1;0===e.bl_count[g];)g--;e.bl_count[g]--,e.bl_count[g+1]+=2,e.bl_count[l]--,p-=2}while(0<p);for(g=l;0!==g;g--)for(u=e.bl_count[g];0!==u;)(_=e.heap[--c],!(_>r))&&(a[2*_+1]!==g&&(e.opt_len+=(g-a[2*_+1])*a[2*_],a[2*_+1]=g),u--)}}function f(e,t,a){var r=Array(16),s=0,i,o;for(i=1;i<=15;i++)r[i]=s=s+a[i-1]<<1;for(o=0;o<=t;o++){var d=e[2*o+1];0!==d&&(e[2*o]=c(r[d]++,d))}}function h(){var e=Array(16),t,a,s,i,o;for(s=0,i=0;i<28;i++)for(Z[i]=s,t=0;t<1<<P[i];t++)G[s++]=i;for(G[s-1]=i,o=0,i=0;16>i;i++)for(Y[i]=o,t=0;t<1<<N[i];t++)M[o++]=i;for(o>>=7;i<30;i++)for(Y[i]=o<<7,t=0;t<1<<N[i]-7;t++)M[256+o++]=i;for(a=0;a<=15;a++)e[a]=0;for(t=0;143>=t;)U[2*t+1]=8,t++,e[8]++;for(;255>=t;)U[2*t+1]=9,t++,e[9]++;for(;279>=t;)U[2*t+1]=7,t++,e[7]++;for(;287>=t;)U[2*t+1]=8,t++,e[8]++;for(f(U,287,e),t=0;t<30;t++)F[2*t+1]=5,F[2*t]=c(t,5);H=new r(U,P,257,286,15),K=new r(F,N,0,30,15),X=new r([],D,0,19,7)}function g(e){var t;for(t=0;t<286;t++)e.dyn_ltree[2*t]=0;for(t=0;t<30;t++)e.dyn_dtree[2*t]=0;for(t=0;t<19;t++)e.bl_tree[2*t]=0;e.dyn_ltree[512]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function y(e){8<e.bi_valid?d(e,e.bi_buf):0<e.bi_valid&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function b(e,t,a,n){y(e),n&&(d(e,a),d(e,~a)),z.arraySet(e.pending_buf,e.window,t,a,e.pending),e.pending+=a}function x(e,t,a,n){var r=2*t,s=2*a;return e[r]<e[s]||e[r]===e[s]&&n[t]<=n[a]}function w(e,t,a){for(var n=e.heap[a],r=a<<1;r<=e.heap_len&&(r<e.heap_len&&x(t,e.heap[r+1],e.heap[r],e.depth)&&r++,!x(t,n,e.heap[r],e.depth));)e.heap[a]=e.heap[r],a=r,r<<=1;e.heap[a]=n}function E(e,t,a){var n=0,r,s,i,d;if(0!==e.last_lit)do r=e.pending_buf[e.d_buf+2*n]<<8|e.pending_buf[e.d_buf+2*n+1],s=e.pending_buf[e.l_buf+n],n++,0===r?p(e,s,t):(i=G[s],p(e,i+256+1,t),d=P[i],0!==d&&(s-=Z[i],l(e,s,d)),r--,i=o(r),p(e,i,a),d=N[i],0!==d&&(r-=Y[i],l(e,r,d)));while(n<e.last_lit);p(e,256,t)}function C(e,t){var a=t.dyn_tree,r=t.stat_desc.static_tree,s=t.stat_desc.has_stree,i=t.stat_desc.elems,o=-1,d,l,p;for(e.heap_len=0,e.heap_max=573,d=0;d<i;d++)0===a[2*d]?a[2*d+1]=0:(e.heap[++e.heap_len]=o=d,e.depth[d]=0);for(;2>e.heap_len;)p=e.heap[++e.heap_len]=2>o?++o:0,a[2*p]=1,e.depth[p]=0,e.opt_len--,s&&(e.static_len-=r[2*p+1]);for(t.max_code=o,d=e.heap_len>>1;1<=d;d--)w(e,a,d);p=i;do d=e.heap[1],e.heap[1]=e.heap[e.heap_len--],w(e,a,1),l=e.heap[1],e.heap[--e.heap_max]=d,e.heap[--e.heap_max]=l,a[2*p]=a[2*d]+a[2*l],e.depth[p]=(e.depth[d]>=e.depth[l]?e.depth[d]:e.depth[l])+1,a[2*d+1]=a[2*l+1]=p,e.heap[1]=p++,w(e,a,1);while(2<=e.heap_len);e.heap[--e.heap_max]=e.heap[1],_(e,t),f(a,o,e.bl_count)}function A(e,t,a){var r=-1,s=t[1],i=0,o=7,d=4,l,p;for(0===s&&(o=138,d=3),t[2*(a+1)+1]=65535,l=0;l<=a;l++){if(p=s,s=t[2*(l+1)+1],++i<o&&p===s)continue;else i<d?e.bl_tree[2*p]+=i:0===p?10>=i?e.bl_tree[34]++:e.bl_tree[36]++:(p!==r&&e.bl_tree[2*p]++,e.bl_tree[32]++);i=0,r=p,0===s?(o=138,d=3):p===s?(o=6,d=3):(o=7,d=4)}}function S(e,t,a){var r=-1,s=t[1],i=0,o=7,d=4,c,u;for(0===s&&(o=138,d=3),c=0;c<=a;c++){if(u=s,s=t[2*(c+1)+1],++i<o&&u===s)continue;else if(i<d)do p(e,u,e.bl_tree);while(0!=--i);else 0===u?10>=i?(p(e,17,e.bl_tree),l(e,i-3,3)):(p(e,18,e.bl_tree),l(e,i-11,7)):(u!==r&&(p(e,u,e.bl_tree),i--),p(e,16,e.bl_tree),l(e,i-3,2));i=0,r=u,0===s?(o=138,d=3):u===s?(o=6,d=3):(o=7,d=4)}}function k(e){var t;for(A(e,e.dyn_ltree,e.l_desc.max_code),A(e,e.dyn_dtree,e.d_desc.max_code),C(e,e.bl_desc),t=18;3<=t&&0===e.bl_tree[2*j[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}function v(e,t,a,n){var r;for(l(e,t-257,5),l(e,a-1,5),l(e,n-4,4),r=0;r<n;r++)l(e,e.bl_tree[2*j[r]+1],3);S(e,e.dyn_ltree,t-1),S(e,e.dyn_dtree,a-1)}function I(e){var t=4093624447,a;for(a=0;31>=a;a++,t>>>=1)if(1&t&&0!==e.dyn_ltree[2*a])return 0;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return 1;for(a=32;a<256;a++)if(0!==e.dyn_ltree[2*a])return 1;return 0}function R(e){q||(h(),q=!0),e.l_desc=new i(e.dyn_ltree,H),e.d_desc=new i(e.dyn_dtree,K),e.bl_desc=new i(e.bl_tree,X),e.bi_buf=0,e.bi_valid=0,g(e)}function O(e,t,a,n){l(e,0+(n?1:0),3),b(e,t,a,!0)}var z=e("../utils/common"),L=29,T=256+1+L,B=30,P=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],N=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],D=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],j=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],U=Array(2*(T+2));n(U);var F=Array(2*B);n(F);var M=Array(512);n(M);var G=Array(258-3+1);n(G);var Z=Array(L);n(Z);var Y=Array(B);n(Y);var q=!1,H,K,X;a._tr_init=R,a._tr_stored_block=O,a._tr_flush_block=function(e,t,a,n){var r=0,s,i;0<e.level?(e.strm.data_type===2&&(e.strm.data_type=I(e)),C(e,e.l_desc),C(e,e.d_desc),r=k(e),s=e.opt_len+3+7>>>3,i=e.static_len+3+7>>>3,i<=s&&(s=i)):s=i=a+5,a+4<=s&&-1!==t?O(e,t,a,n):e.strategy===4||i===s?(l(e,2+(n?1:0),3),E(e,U,F)):(l(e,4+(n?1:0),3),v(e,e.l_desc.max_code+1,e.d_desc.max_code+1,r+1),E(e,e.dyn_ltree,e.dyn_dtree)),g(e),n&&y(e)},a._tr_tally=function(e,t,a){return e.pending_buf[e.d_buf+2*e.last_lit]=255&t>>>8,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&t,e.pending_buf[e.l_buf+e.last_lit]=255&a,e.last_lit++,0===t?e.dyn_ltree[2*a]++:(e.matches++,t--,e.dyn_ltree[2*(G[a]+256+1)]++,e.dyn_dtree[2*o(t)]++),e.last_lit===e.lit_bufsize-1},a._tr_align=function(e){l(e,2,3),p(e,256,U),u(e)}},{"../utils/common":40}],52:[function(e,t){'use strict';t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},{}],53:[function(e,t){function a(e){var t=new r,a=t.write(e)+t.end();return a.replace(/\0/g,"").trim()}function n(t,r){if(!t)return a;try{new TextDecoder(t.trim())}catch(o){var i=s.exec(t);return i&&!r?n("windows-"+i[1],!0):a}return function(e){var a=new TextDecoder(t),n=a.decode(e,{stream:!0})+a.decode();return n.replace(/\0/g,"").trim()}}e("text-encoding-polyfill");var r=e("string_decoder").StringDecoder;t.exports=n;var s=/^(?:ASNI\s)?(\d+)$/m},{string_decoder:56,"text-encoding-polyfill":57}],54:[function(e,t){function a(e){var t={lastUpdated:new Date(e.readUInt8(1)+1900,e.readUInt8(2),e.readUInt8(3)),records:e.readUInt32LE(4),headerLen:e.readUInt16LE(8),recLen:e.readUInt16LE(10)};return t}function n(e,t,a){for(var n=[],r=32;r<t&&(n.push({name:a(e.slice(r,r+11)),dataType:d(e.readUInt8(r+11)),len:e.readUInt8(r+16),decimal:e.readUInt8(r+17)}),13!==e.readUInt8(r+32));)r+=32;return n}function r(e,t,a,n,r){var s=e.slice(t,t+a),i=r(s);return"N"===n||"F"===n||"O"===n?parseFloat(i,10):"D"===n?new Date(i.slice(0,4),parseInt(i.slice(4,6),10)-1,i.slice(6,8)):"L"===n?"y"===i.toLowerCase()||"t"===i.toLowerCase():i}function s(e,t,a,n){for(var s={},o=0,d=a.length,l,p;o<d;)p=a[o],l=r(e,t,p.len,p.dataType,n),t+=p.len,"undefined"!=typeof l&&(s[p.name]=l),o++;return s}var i=e("./decoder");t.exports=function(e,t){for(var r=i(t),o=a(e),d=n(e,o.headerLen-1,r),l=(d.length+1<<5)+2,p=o.recLen,c=o.records,u=[];c;)u.push(s(e,l,d,r)),l+=p,c--;return u}},{"./decoder":53}],55:[function(e,t,s){(function(e,a){"object"==typeof s&&"undefined"!=typeof t?t.exports=a():"function"==typeof p&&p.amd?p(a):e.proj4=a()})(this,function(){'use strict';var le=Math.asin,pe=Math.acos,ue=Math.atan2,me=Math.PI,_e=Math.atan,fe=Math.exp,he=Math.tan,ge=Math.sin,ye=Math.cos,be=Math.sqrt;function e(e,t){if(e[t])return e[t];for(var a=Object.keys(e),n=t.toLowerCase().replace(Pe,""),r=-1,s,o;++r<a.length;)if(s=a[r],o=s.toLowerCase().replace(Pe,""),o===n)return e[s]}function t(e){if("string"!=typeof e)throw new Error("not a string");this.text=e.trim(),this.level=0,this.place=0,this.root=null,this.stack=[],this.currentObject=null,this.state=1}function s(e){var a=new t(e);return a.output()}function p(e,t,a){Array.isArray(t)&&(a.unshift(t),t=null);var n=t?{}:e,r=a.reduce(function(e,t){return c(t,e),e},n);t&&(e[t]=r)}function c(e,t){if(!Array.isArray(e))return void(t[e]=!0);var a=e.shift();if("PARAMETER"===a&&(a=e.shift()),1===e.length)return Array.isArray(e[0])?(t[a]={},void c(e[0],t[a])):void(t[a]=e[0]);if(!e.length)return void(t[a]=!0);if("TOWGS84"===a)return void(t[a]=e);if("AXIS"===a)return a in t||(t[a]=[]),void t[a].push(e);Array.isArray(a)||(t[a]={});var n;switch(a){case"UNIT":case"PRIMEM":case"VERT_DATUM":return t[a]={name:e[0].toLowerCase(),convert:e[1]},void(3===e.length&&c(e[2],t[a]));case"SPHEROID":case"ELLIPSOID":return t[a]={name:e[0],a:e[1],rf:e[2]},void(4===e.length&&c(e[3],t[a]));case"PROJECTEDCRS":case"PROJCRS":case"GEOGCS":case"GEOCCS":case"PROJCS":case"LOCAL_CS":case"GEODCRS":case"GEODETICCRS":case"GEODETICDATUM":case"EDATUM":case"ENGINEERINGDATUM":case"VERT_CS":case"VERTCRS":case"VERTICALCRS":case"COMPD_CS":case"COMPOUNDCRS":case"ENGINEERINGCRS":case"ENGCRS":case"FITTED_CS":case"LOCAL_DATUM":case"DATUM":return e[0]=["name",e[0]],void p(t,a,e);default:for(n=-1;++n<e.length;)if(!Array.isArray(e[n]))return c(e,t[a]);return p(t,a,e);}}function u(e,t){var a=t[0],n=t[1];!(a in e)&&n in e&&(e[a]=e[n],3===t.length&&(e[a]=t[2](e[a])))}function m(e){return e*qe}function _(e){function t(t){var a=e.to_meter||1;return t*a}if("GEOGCS"===e.type?e.projName="longlat":"LOCAL_CS"===e.type?(e.projName="identity",e.local=!0):"object"==typeof e.PROJECTION?e.projName=Object.keys(e.PROJECTION)[0]:e.projName=e.PROJECTION,e.AXIS){for(var a="",n=0,r=e.AXIS.length;n<r;++n){var s=e.AXIS[n],o=s[0].toLowerCase();-1===o.indexOf("north")?-1===o.indexOf("south")?-1===o.indexOf("east")?-1!==o.indexOf("west")&&(a+="w"):a+="e":a+="s":a+="n"}2===a.length&&(a+="u"),3===a.length&&(e.axis=a)}e.UNIT&&(e.units=e.UNIT.name.toLowerCase(),"metre"===e.units&&(e.units="meter"),e.UNIT.convert&&("GEOGCS"===e.type?e.DATUM&&e.DATUM.SPHEROID&&(e.to_meter=e.UNIT.convert*e.DATUM.SPHEROID.a):e.to_meter=e.UNIT.convert));var d=e.GEOGCS;"GEOGCS"===e.type&&(d=e),d&&(e.datumCode=d.DATUM?d.DATUM.name.toLowerCase():d.name.toLowerCase(),"d_"===e.datumCode.slice(0,2)&&(e.datumCode=e.datumCode.slice(2)),("new_zealand_geodetic_datum_1949"===e.datumCode||"new_zealand_1949"===e.datumCode)&&(e.datumCode="nzgd49"),("wgs_1984"===e.datumCode||"world_geodetic_system_1984"===e.datumCode)&&("Mercator_Auxiliary_Sphere"===e.PROJECTION&&(e.sphere=!0),e.datumCode="wgs84"),"_ferro"===e.datumCode.slice(-6)&&(e.datumCode=e.datumCode.slice(0,-6)),"_jakarta"===e.datumCode.slice(-8)&&(e.datumCode=e.datumCode.slice(0,-8)),~e.datumCode.indexOf("belge")&&(e.datumCode="rnb72"),d.DATUM&&d.DATUM.SPHEROID&&(e.ellps=d.DATUM.SPHEROID.name.replace("_19","").replace(/[Cc]larke\_18/,"clrk"),"international"===e.ellps.toLowerCase().slice(0,13)&&(e.ellps="intl"),e.a=d.DATUM.SPHEROID.a,e.rf=parseFloat(d.DATUM.SPHEROID.rf,10)),d.DATUM&&d.DATUM.TOWGS84&&(e.datum_params=d.DATUM.TOWGS84),~e.datumCode.indexOf("osgb_1936")&&(e.datumCode="osgb36"),~e.datumCode.indexOf("osni_1952")&&(e.datumCode="osni52"),(~e.datumCode.indexOf("tm65")||~e.datumCode.indexOf("geodetic_datum_of_1965"))&&(e.datumCode="ire65"),"ch1903+"===e.datumCode&&(e.datumCode="ch1903"),~e.datumCode.indexOf("israel")&&(e.datumCode="isr93")),e.b&&!isFinite(e.b)&&(e.b=e.a);[["standard_parallel_1","Standard_Parallel_1"],["standard_parallel_2","Standard_Parallel_2"],["false_easting","False_Easting"],["false_northing","False_Northing"],["central_meridian","Central_Meridian"],["latitude_of_origin","Latitude_Of_Origin"],["latitude_of_origin","Central_Parallel"],["scale_factor","Scale_Factor"],["k0","scale_factor"],["latitude_of_center","Latitude_Of_Center"],["latitude_of_center","Latitude_of_center"],["lat0","latitude_of_center",m],["longitude_of_center","Longitude_Of_Center"],["longitude_of_center","Longitude_of_center"],["longc","longitude_of_center",m],["x0","false_easting",t],["y0","false_northing",t],["long0","central_meridian",m],["lat0","latitude_of_origin",m],["lat0","standard_parallel_1",m],["lat1","standard_parallel_1",m],["lat2","standard_parallel_2",m],["azimuth","Azimuth"],["alpha","azimuth",m],["srsCode","name"]].forEach(function(t){return u(e,t)}),!e.long0&&e.longc&&("Albers_Conic_Equal_Area"===e.projName||"Lambert_Azimuthal_Equal_Area"===e.projName)&&(e.long0=e.longc),!e.lat_ts&&e.lat1&&("Stereographic_South_Pole"===e.projName||"Polar Stereographic (variant B)"===e.projName)&&(e.lat0=m(0<e.lat1?90:-90),e.lat_ts=e.lat1)}function f(e){var t=this;if(2===arguments.length){var a=arguments[1];f[e]="string"==typeof a?"+"===a.charAt(0)?Ne(arguments[1]):He(arguments[1]):a}else if(1===arguments.length){if(Array.isArray(e))return e.map(function(e){Array.isArray(e)?f.apply(t,e):f(e)});if("string"!=typeof e)"EPSG"in e?f["EPSG:"+e.EPSG]=e:"ESRI"in e?f["ESRI:"+e.ESRI]=e:"IAU2000"in e?f["IAU2000:"+e.IAU2000]=e:console.log(e);else if(e in f)return f[e]}}function h(e){return"string"==typeof e}function g(e){return e in f}function y(e){return Ke.some(function(t){return-1<e.indexOf(t)})}function b(t){var a=e(t,"authority");if(a){var n=e(a,"epsg");return n&&-1<Xe.indexOf(n)}}function x(t){var a=e(t,"extension");return a?e(a,"proj4"):void 0}function w(e){return"+"===e[0]}function E(e){if(h(e)){if(g(e))return f[e];if(y(e)){var t=He(e);if(b(t))return f["EPSG:3857"];var a=x(t);return a?Ne(a):t}if(w(e))return Ne(e)}else return e}function C(){var e=this.b/this.a;this.es=1-e*e,"x0"in this||(this.x0=0),"y0"in this||(this.y0=0),this.e=be(this.es),this.lat_ts?this.sphere?this.k0=ye(this.lat_ts):this.k0=Qe(this.e,ge(this.lat_ts),ye(this.lat_ts)):!this.k0&&(this.k?this.k0=this.k:this.k0=1)}function A(e){return e}function S(e,t){var a=nt.length;return e.names?(nt[a]=e,e.names.forEach(function(e){at[e.toLowerCase()]=a}),this):(console.log(t),!0)}function k(t,n,r,s){var i=t*t,o=n*n,d=(i-o)/i,l=0;s?(t*=1-d*(Ae+d*(Se+d*ke)),i=t*t,d=0):l=be(d);var p=(i-o)/o;return{es:d,e:l,ep2:p}}function v(t,r,s,i,o){if(!t){var d=e(rt,i);d||(d=st),t=d.a,r=d.b,s=d.rf}return s&&!r&&(r=(1-1/s)*t),(0===s||n(t-r)<ve)&&(o=!0,r=t),{a:t,b:r,rf:s,sphere:o}}function I(e,t,n,a,r,s){var i={};return i.datum_type=void 0===e||"none"===e?5:4,t&&(i.datum_params=t.map(parseFloat),(0!==i.datum_params[0]||0!==i.datum_params[1]||0!==i.datum_params[2])&&(i.datum_type=1),3<i.datum_params.length&&(0!==i.datum_params[3]||0!==i.datum_params[4]||0!==i.datum_params[5]||0!==i.datum_params[6])&&(i.datum_type=2,i.datum_params[3]*=we,i.datum_params[4]*=we,i.datum_params[5]*=we,i.datum_params[6]=i.datum_params[6]/1e6+1)),i.a=n,i.b=a,i.es=r,i.ep2=s,i}function R(t,a){if(!(this instanceof R))return new R(t);a=a||function(e){if(e)throw e};var n=E(t);if("object"!=typeof n)return void a(t);var r=R.projections.get(n.projName);if(!r)return void a(t);if(n.datumCode&&"none"!==n.datumCode){var s=e(it,n.datumCode);s&&(n.datum_params=s.towgs84?s.towgs84.split(","):null,n.ellps=s.ellipse,n.datumName=s.datumName?s.datumName:n.datumCode)}n.k0=n.k0||1,n.axis=n.axis||"enu",n.ellps=n.ellps||"wgs84";var i=v(n.a,n.b,n.rf,n.ellps,n.sphere),o=k(i.a,i.b,i.rf,n.R_A),d=n.datum||I(n.datumCode,n.datum_params,i.a,i.b,o.es,o.ep2);We(this,n),We(this,r),this.a=i.a,this.b=i.b,this.rf=i.rf,this.sphere=i.sphere,this.es=o.es,this.e=o.e,this.ep2=o.ep2,this.datum=d,this.init(),a(null,this)}function O(e,t){return e.datum_type===t.datum_type&&!(e.a!==t.a||5e-11<n(e.es-t.es))&&(1===e.datum_type?e.datum_params[0]===t.datum_params[0]&&e.datum_params[1]===t.datum_params[1]&&e.datum_params[2]===t.datum_params[2]:2!==e.datum_type||e.datum_params[0]===t.datum_params[0]&&e.datum_params[1]===t.datum_params[1]&&e.datum_params[2]===t.datum_params[2]&&e.datum_params[3]===t.datum_params[3]&&e.datum_params[4]===t.datum_params[4]&&e.datum_params[5]===t.datum_params[5]&&e.datum_params[6]===t.datum_params[6])}function z(e,t,n){var a=e.x,r=e.y,s=e.z?e.z:0,i,o,d,l;if(r<-Ce&&r>-1.001*Ce)r=-Ce;else if(r>Ce&&r<1.001*Ce)r=Ce;else{if(r<-Ce)return{x:-Infinity,y:-Infinity,z:e.z};if(r>Ce)return{x:1/0,y:1/0,z:e.z}}return a>me&&(a-=2*me),o=ge(r),l=ye(r),d=o*o,i=n/be(1-t*d),{x:(i+s)*l*ye(a),y:(i+s)*l*ge(a),z:(i*(1-t)+s)*o}}function L(e,t,r,a){var s=1e-12,i=e.x,o=e.y,d=e.z?e.z:0,l,p,c,u,m,_,f,h,g,y,b,x,w,E,C,A;if(l=be(i*i+o*o),p=be(i*i+o*o+d*d),!(l/r<s))E=ue(o,i);else if(E=0,p/r<s)return C=Ce,A=-a,{x:e.x,y:e.y,z:e.z};c=d/p,u=l/p,m=1/be(1-t*(2-t)*u*u),h=u*(1-t)*m,g=c*m,w=0;do w++,f=r/be(1-t*g*g),A=l*h+d*g-f*(1-t*g*g),_=t*f/(f+A),m=1/be(1-_*(2-_)*u*u),y=u*(1-_)*m,b=c*m,x=b*h-y*g,h=y,g=b;while(x*x>s*s&&w<30);return C=_e(b/n(y)),{x:E,y:C,z:A}}function T(e,t,a){if(1===t)return{x:e.x+a[0],y:e.y+a[1],z:e.z+a[2]};if(2===t){var n=a[0],r=a[1],s=a[2],i=a[3],o=a[4],d=a[5],l=a[6];return{x:l*(e.x-d*e.y+o*e.z)+n,y:l*(d*e.x+e.y-i*e.z)+r,z:l*(-o*e.x+i*e.y+e.z)+s}}}function B(e,t,a){if(1===t)return{x:e.x-a[0],y:e.y-a[1],z:e.z-a[2]};if(2===t){var n=a[0],r=a[1],s=a[2],i=a[3],o=a[4],d=a[5],l=a[6],p=(e.x-n)/l,c=(e.y-r)/l,u=(e.z-s)/l;return{x:p+d*c-o*u,y:-d*p+c+i*u,z:o*p-i*c+u}}}function P(e){return 1===e||2===e}function N(e){var t=Number.isFinite;if("function"==typeof t){if(t(e))return;throw new TypeError("coordinates must be finite numbers")}if("number"!=typeof e||e!==e||!isFinite(e))throw new TypeError("coordinates must be finite numbers")}function D(e,t){return(1===e.datum.datum_type||2===e.datum.datum_type)&&"WGS84"!==t.datumCode||(1===t.datum.datum_type||2===t.datum.datum_type)&&"WGS84"!==e.datumCode}function j(e,t,a){var n;return Array.isArray(a)&&(a=lt(a)),pt(a),e.datum&&t.datum&&D(e,t)&&(n=new R("WGS84"),a=j(e,n,a),e=n),"enu"!==e.axis&&(a=dt(e,!1,a)),"longlat"===e.projName?a={x:a.x*Ie,y:a.y*Ie,z:a.z||0}:(e.to_meter&&(a={x:a.x*e.to_meter,y:a.y*e.to_meter,z:a.z||0}),a=e.inverse(a)),e.from_greenwich&&(a.x+=e.from_greenwich),a=ot(e.datum,t.datum,a),t.from_greenwich&&(a={x:a.x-t.from_greenwich,y:a.y,z:a.z||0}),"longlat"===t.projName?a={x:a.x*Re,y:a.y*Re,z:a.z||0}:(a=t.forward(a),t.to_meter&&(a={x:a.x/t.to_meter,y:a.y/t.to_meter,z:a.z||0})),"enu"===t.axis?a:dt(t,!0,a)}function U(e,t,a){var n,r,s;return Array.isArray(a)?(n=j(e,t,a)||{x:NaN,y:NaN},2<a.length?"undefined"!=typeof e.name&&"geocent"===e.name||"undefined"!=typeof t.name&&"geocent"===t.name?"number"==typeof n.z?[n.x,n.y,n.z].concat(a.splice(3)):[n.x,n.y,a[2]].concat(a.splice(3)):[n.x,n.y].concat(a.splice(2)):[n.x,n.y]):(r=j(e,t,a),s=Object.keys(a),2===s.length)?r:(s.forEach(function(n){if("undefined"!=typeof e.name&&"geocent"===e.name||"undefined"!=typeof t.name&&"geocent"===t.name){if("x"===n||"y"===n||"z"===n)return;}else if("x"===n||"y"===n)return;r[n]=a[n]}),r)}function F(e){return e instanceof R?e:e.oProj?e.oProj:R(e)}function M(e,t,a){e=F(e);var n=!1,r;return"undefined"==typeof t?(t=e,e=ct,n=!0):("undefined"!=typeof t.x||Array.isArray(t))&&(a=t,t=e,e=ct,n=!0),t=F(t),a?U(e,t,a):(r={forward:function(a){return U(e,t,a)},inverse:function(a){return U(t,e,a)}},n&&(r.oProj=t),r)}function G(e,t){return t=t||5,W(H({lat:e[1],lon:e[0]}),t)}function Z(e){var t=K($(e.toUpperCase()));return t.lat&&t.lon?[t.lon,t.lat]:[(t.left+t.right)/2,(t.top+t.bottom)/2]}function Y(e){return e*(me/180)}function q(e){return 180*(e/me)}function H(e){var t=Math.round,n=e.lat,s=e.lon,i=6378137,a=.00669438,o=.9996,d=Y(n),l=Y(s),p,c,u,m,_,f,h,g,y;y=r((s+180)/6)+1,180===s&&(y=60),56<=n&&64>n&&3<=s&&12>s&&(y=32),72<=n&&84>n&&(0<=s&&9>s?y=31:9<=s&&21>s?y=33:21<=s&&33>s?y=35:33<=s&&42>s&&(y=37)),p=6*(y-1)-180+3,g=Y(p),c=a/(1-a),u=i/be(1-a*ge(d)*ge(d)),m=he(d)*he(d),_=c*ye(d)*ye(d),f=ye(d)*(l-g),h=i*((1-a/4-3*a*a/64-5*a*a*a/256)*d-(3*a/8+3*a*a/32+45*a*a*a/1024)*ge(2*d)+(15*a*a/256+45*a*a*a/1024)*ge(4*d)-35*a*a*a/3072*ge(6*d));var b=o*u*(65+65*(65*(65*(1-m+_)))/6+65*(65*(65*(65*(65*(5-18*m+m*m+72*_-58*c)))))/120)+5e5,x=o*(h+u*he(d)*(4225/2+65*(65*(65*(65*(5-m+9*_+4*_*_))))/24+65*(65*(65*(65*(65*(65*(61-58*m+m*m+600*_-330*c))))))/720));return 0>n&&(x+=1e7),{northing:t(x),easting:t(b),zoneNumber:y,zoneLetter:X(n)}}function K(e){var t=e.northing,n=e.easting,r=e.zoneLetter,s=e.zoneNumber;if(0>s||60<s)return null;var i=.9996,d=6378137,a=.00669438,l=(1-be(1-a))/(1+be(1-a)),p=t,c,u,m,_,f,h,g,b,x,w;"N">r&&(p-=1e7),b=6*(s-1)-180+3,c=a/(1-a),g=p/i,x=g/(d*(1-a/4-3*a*a/64-5*a*a*a/256)),w=x+(3*l/2-27*l*l*l/32)*ge(2*x)+(21*l*l/16-55*l*l*l*l/32)*ge(4*x)+151*l*l*l/96*ge(6*x),u=d/be(1-a*ge(w)*ge(w)),m=he(w)*he(w),_=c*ye(w)*ye(w),f=d*(1-a)/o(1-a*ge(w)*ge(w),1.5),h=(n-5e5)/(u*i);var E=w-u*he(w)/f*(h*h/2-(5+3*m+10*_-4*_*_-9*c)*h*h*h*h/24+(61+90*m+298*_+45*m*m-252*c-3*_*_)*h*h*h*h*h*h/720);E=q(E);var C=(h-(1+2*m+_)*h*h*h/6+(5-2*_+28*m-3*_*_+8*c+24*m*m)*h*h*h*h*h/120)/ye(w);C=b+q(C);var A;if(e.accuracy){var S=K({northing:e.northing+e.accuracy,easting:e.easting+e.accuracy,zoneLetter:e.zoneLetter,zoneNumber:e.zoneNumber});A={top:S.lat,right:S.lon,bottom:E,left:C}}else A={lat:E,lon:C};return A}function X(e){var t="Z";return 84>=e&&72<=e?t="X":72>e&&64<=e?t="W":64>e&&56<=e?t="V":56>e&&48<=e?t="U":48>e&&40<=e?t="T":40>e&&32<=e?t="S":32>e&&24<=e?t="R":24>e&&16<=e?t="Q":16>e&&8<=e?t="P":8>e&&0<=e?t="N":0>e&&-8<=e?t="M":-8>e&&-16<=e?t="L":-16>e&&-24<=e?t="K":-24>e&&-32<=e?t="J":-32>e&&-40<=e?t="H":-40>e&&-48<=e?t="G":-48>e&&-56<=e?t="F":-56>e&&-64<=e?t="E":-64>e&&-72<=e?t="D":-72>e&&-80<=e&&(t="C"),t}function W(e,t){var a="00000"+e.easting,n="00000"+e.northing;return e.zoneNumber+e.zoneLetter+Q(e.easting,e.northing,e.zoneNumber)+a.substr(a.length-5,t)+n.substr(n.length-5,t)}function Q(e,t,a){var n=J(a),s=r(e/1e5),i=r(t/1e5)%20;return V(s,i,n)}function J(e){var t=e%6;return 0===t&&(t=6),t}function V(e,t,a){var n=a-1,r="AJSAJS".charCodeAt(n),s="AFAFAF".charCodeAt(n),i=r+e-1,o=s+t,l=!1;90<i&&(i=i-90+65-1,l=!0),(73===i||73>r&&73<i||(73<i||73>r)&&l)&&i++,(79===i||79>r&&79<i||(79<i||79>r)&&l)&&(i++,73===i&&i++),90<i&&(i=i-90+65-1),86<o?(o=o-86+65-1,l=!0):l=!1,(73===o||73>s&&73<o||(73<o||73>s)&&l)&&o++,(79===o||79>s&&79<o||(79<o||79>s)&&l)&&(o++,73===o&&o++),86<o&&(o=o-86+65-1);var p=d(i)+d(o);return p}function $(e){if(e&&0===e.length)throw"MGRSPoint coverting from nothing";for(var t=e.length,a=null,n="",r=0,s;!/[A-Z]/.test(s=e.charAt(r));){if(2<=r)throw"MGRSPoint bad conversion from: "+e;n+=s,r++}var d=parseInt(n,10);if(0===r||r+3>t)throw"MGRSPoint bad conversion from: "+e;var l=e.charAt(r++);if("A">=l||"B"===l||"Y"===l||"Z"<=l||"I"===l||"O"===l)throw"MGRSPoint zone letter "+l+" not handled: "+e;a=e.substring(r,r+=2);for(var p=J(d),c=ee(a.charAt(0),p),u=te(a.charAt(1),p);u<ae(l);)u+=2e6;var m=t-r;if(0!=m%2)throw"MGRSPoint has to have an even number \nof digits after the zone letter and two 100km letters - front \nhalf for easting meters, second half for \nnorthing meters"+e;var _=m/2,f=0,h=0,g,y,b,x,w;return 0<_&&(g=1e5/o(10,_),y=e.substring(r,r+_),f=parseFloat(y)*g,b=e.substring(r+_),h=parseFloat(b)*g),x=f+c,w=h+u,{easting:x,northing:w,zoneLetter:l,zoneNumber:d,accuracy:g}}function ee(t,e){for(var a="AJSAJS".charCodeAt(e-1),n=1e5,r=!1;a!==t.charCodeAt(0);){if(a++,73===a&&a++,79===a&&a++,90<a){if(r)throw"Bad character: "+t;a=65,r=!0}n+=1e5}return n}function te(e,t){if("V"<e)throw"MGRSPoint given invalid Northing "+e;for(var a="AFAFAF".charCodeAt(t-1),n=0,r=!1;a!==e.charCodeAt(0);){if(a++,73===a&&a++,79===a&&a++,86<a){if(r)throw"Bad character: "+e;a=65,r=!0}n+=1e5}return n}function ae(e){var t;if(t="C"===e?11e5:"D"===e?2e6:"E"===e?28e5:"F"===e?37e5:"G"===e?46e5:"H"===e?55e5:"J"===e?64e5:"K"===e?73e5:"L"===e?82e5:"M"===e?91e5:"N"===e?0:"P"===e?8e5:"Q"===e?17e5:"R"===e?26e5:"S"===e?35e5:"T"===e?44e5:"U"===e?53e5:"V"===e?62e5:"W"===e?7e6:"X"===e?79e5:-1,0<=t)return t;throw"Invalid zone letter: "+e}function ne(e,t,a){if(!(this instanceof ne))return new ne(e,t,a);if(Array.isArray(e))this.x=e[0],this.y=e[1],this.z=e[2]||0;else if("object"==typeof e)this.x=e.x,this.y=e.y,this.z=e.z||0;else if("string"==typeof e&&"undefined"==typeof t){var n=e.split(",");this.x=parseFloat(n[0],10),this.y=parseFloat(n[1],10),this.z=parseFloat(n[2],10)||0}else this.x=e,this.y=t,this.z=a||0;console.warn("proj4.Point will be removed in version 3, use proj4.toPoint")}function re(e){var a=[],n;return a[0]=e*qt,n=e*e,a[0]+=n*Ht,a[1]=n*Xt,n*=e,a[0]+=n*Kt,a[1]+=n*Wt,a[2]=n*Qt,a}function se(e,a){var n=e+e;return e+a[0]*ge(n)+a[1]*ge(n+n)+a[2]*ge(n+n+n)}function ie(e,t,a,r){var s;return e<ve?(r.value=_a.AREA_0,s=0):(s=ue(t,a),n(s)<=Oe?r.value=_a.AREA_0:s>Oe&&s<=Ce+Oe?(r.value=_a.AREA_1,s-=Ce):s>Ce+Oe||s<=-(Ce+Oe)?(r.value=_a.AREA_2,s=0<=s?s-Le:s+Le):(r.value=_a.AREA_3,s+=Ce)),s}function oe(e,t){var a=e+t;return a<-Le?a+=ze:a>+Le&&(a-=ze),a}function de(e,t,a,r){for(var s=t,i;r&&(i=e(s),s-=i,!(n(i)<a));--r);return s}var xe=5,we=484813681109536e-20,Ce=me/2,Ae=.16666666666666666,Se=.04722222222222222,ke=.022156084656084655,ve=1e-10,Ie=.017453292519943295,Re=57.29577951308232,Oe=me/4,ze=2*me,Le=3.14159265359,Te={};Te.greenwich=0,Te.lisbon=-9.131906111111,Te.paris=2.337229166667,Te.bogota=-74.080916666667,Te.madrid=-3.687938888889,Te.rome=12.452333333333,Te.bern=7.439583333333,Te.jakarta=106.807719444444,Te.ferro=-17.666666666667,Te.brussels=4.367975,Te.stockholm=18.058277777778,Te.athens=23.7163375,Te.oslo=10.722916666667;var Be={ft:{to_meter:.3048},"us-ft":{to_meter:1200/3937}},Pe=/[\s_\-\/\(\)]/g,Ne=function(t){var a={},n=t.split("+").map(function(e){return e.trim()}).filter(function(e){return e}).reduce(function(e,t){var a=t.split("=");return a.push(!0),e[a[0].toLowerCase()]=a[1],e},{}),r={proj:"projName",datum:"datumCode",rf:function(e){a.rf=parseFloat(e)},lat_0:function(e){a.lat0=e*Ie},lat_1:function(e){a.lat1=e*Ie},lat_2:function(e){a.lat2=e*Ie},lat_ts:function(e){a.lat_ts=e*Ie},lon_0:function(e){a.long0=e*Ie},lon_1:function(e){a.long1=e*Ie},lon_2:function(e){a.long2=e*Ie},alpha:function(e){a.alpha=parseFloat(e)*Ie},lonc:function(e){a.longc=e*Ie},x_0:function(e){a.x0=parseFloat(e)},y_0:function(e){a.y0=parseFloat(e)},k_0:function(e){a.k0=parseFloat(e)},k:function(e){a.k0=parseFloat(e)},a:function(e){a.a=parseFloat(e)},b:function(e){a.b=parseFloat(e)},r_a:function(){a.R_A=!0},zone:function(e){a.zone=parseInt(e,10)},south:function(){a.utmSouth=!0},towgs84:function(e){a.datum_params=e.split(",").map(function(e){return parseFloat(e)})},to_meter:function(e){a.to_meter=parseFloat(e)},units:function(t){a.units=t;var n=e(Be,t);n&&(a.to_meter=n.to_meter)},from_greenwich:function(e){a.from_greenwich=e*Ie},pm:function(t){var n=e(Te,t);a.from_greenwich=(n?n:parseFloat(t))*Ie},nadgrids:function(e){"@null"===e?a.datumCode="none":a.nadgrids=e},axis:function(e){3===e.length&&-1!=="ewnsud".indexOf(e.substr(0,1))&&-1!=="ewnsud".indexOf(e.substr(1,1))&&-1!=="ewnsud".indexOf(e.substr(2,1))&&(a.axis=e)}},s,i,o;for(s in n)i=n[s],s in r?(o=r[s],"function"==typeof o?o(i):a[o]=i):a[s]=i;return"string"==typeof a.datumCode&&"WGS84"!==a.datumCode&&(a.datumCode=a.datumCode.toLowerCase()),a},De=1,je=2,Ue=3,Fe=4,Me=5,Ge=-1,Ze=/[,\]]/,Ye=/[\d\.E\-\+]/;t.prototype.readCharicter=function(){var e=this.text[this.place++];if(this.state!==Fe)for(;/\s/.test(e);){if(this.place>=this.text.length)return;e=this.text[this.place++]}switch(this.state){case De:return this.neutral(e);case je:return this.keyword(e);case Fe:return this.quoted(e);case Me:return this.afterquote(e);case Ue:return this.number(e);case Ge:}},t.prototype.afterquote=function(e){if("\""===e)return this.word+="\"",void(this.state=Fe);if(Ze.test(e))return this.word=this.word.trim(),void this.afterItem(e);throw new Error("havn't handled \""+e+"\" in afterquote yet, index "+this.place)},t.prototype.afterItem=function(e){return","===e?(null!==this.word&&this.currentObject.push(this.word),this.word=null,void(this.state=De)):"]"===e?(this.level--,null!==this.word&&(this.currentObject.push(this.word),this.word=null),this.state=De,this.currentObject=this.stack.pop(),void(this.currentObject||(this.state=Ge))):void 0},t.prototype.number=function(e){if(Ye.test(e))return void(this.word+=e);if(Ze.test(e))return this.word=parseFloat(this.word),void this.afterItem(e);throw new Error("havn't handled \""+e+"\" in number yet, index "+this.place)},t.prototype.quoted=function(e){return"\""===e?void(this.state=Me):void(this.word+=e)},t.prototype.keyword=function(e){if(/[A-Za-z84]/.test(e))return void(this.word+=e);if("["===e){var t=[];return t.push(this.word),this.level++,null===this.root?this.root=t:this.currentObject.push(t),this.stack.push(this.currentObject),this.currentObject=t,void(this.state=De)}if(Ze.test(e))return void this.afterItem(e);throw new Error("havn't handled \""+e+"\" in keyword yet, index "+this.place)},t.prototype.neutral=function(e){if(/[A-Za-z]/.test(e))return this.word=e,void(this.state=je);if("\""===e)return this.word="",void(this.state=Fe);if(Ye.test(e))return this.word=e,void(this.state=Ue);if(Ze.test(e))return void this.afterItem(e);throw new Error("havn't handled \""+e+"\" in neutral yet, index "+this.place)},t.prototype.output=function(){for(;this.place<this.text.length;)this.readCharicter();if(this.state===Ge)return this.root;throw new Error("unable to parse string \""+this.text+"\". State is "+this.state)};var qe=.017453292519943295,He=function(e){var t=s(e),a=t.shift(),n=t.shift();t.unshift(["name",n]),t.unshift(["type",a]);var r={};return c(t,r),_(r),r};(function(e){e("EPSG:4326","+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees"),e("EPSG:4269","+title=NAD83 (long/lat) +proj=longlat +a=6378137.0 +b=6356752.31414036 +ellps=GRS80 +datum=NAD83 +units=degrees"),e("EPSG:3857","+title=WGS 84 / Pseudo-Mercator +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs"),e.WGS84=e["EPSG:4326"],e["EPSG:3785"]=e["EPSG:3857"],e.GOOGLE=e["EPSG:3857"],e["EPSG:900913"]=e["EPSG:3857"],e["EPSG:102113"]=e["EPSG:3857"]})(f);var Ke=["PROJECTEDCRS","PROJCRS","GEOGCS","GEOCCS","PROJCS","LOCAL_CS","GEODCRS","GEODETICCRS","GEODETICDATUM","ENGCRS","ENGINEERINGCRS"],Xe=["3857","900913","3785","102113"],We=function(e,t){e=e||{};var a,n;if(!t)return e;for(n in t)a=t[n],void 0!==a&&(e[n]=a);return e},Qe=function(e,t,a){var n=e*t;return a/be(1-n*n)},Je=function(e){return 0>e?-1:1},Ve=function(e){return n(e)<=Le?e:e-Je(e)*ze},$e=function(e,t,a){var n=e*a;return n=o((1-n)/(1+n),.5*e),he(.5*(Ce-t))/n},et=function(e,t){for(var a=Ce-2*_e(t),r=0,s,d;15>=r;r++)if(s=e*ge(a),d=Ce-2*_e(t*o((1-s)/(1+s),.5*e))-a,a+=d,1e-10>=n(d))return a;return-9999},tt=[{init:C,forward:function(e){var t=e.x,r=e.y;if(90<r*Re&&-90>r*Re&&180<t*Re&&-180>t*Re)return null;var s,i;if(n(n(r)-Ce)<=ve)return null;if(this.sphere)s=this.x0+this.a*this.k0*Ve(t-this.long0),i=this.y0+this.a*this.k0*a(he(Oe+.5*r));else{var o=ge(r),d=$e(this.e,r,o);s=this.x0+this.a*this.k0*Ve(t-this.long0),i=this.y0-this.a*this.k0*a(d)}return e.x=s,e.y=i,e},inverse:function(e){var t=e.x-this.x0,a=e.y-this.y0,n,r;if(this.sphere)r=Ce-2*_e(fe(-a/(this.a*this.k0)));else{var s=fe(-a/(this.a*this.k0));if(r=et(this.e,s),-9999===r)return null}return n=Ve(this.long0+t/(this.a*this.k0)),e.x=n,e.y=r,e},names:["Mercator","Popular Visualisation Pseudo Mercator","Mercator_1SP","Mercator_Auxiliary_Sphere","merc"]},{init:function(){},forward:A,inverse:A,names:["longlat","identity"]}],at={},nt=[],rt={};rt.MERIT={a:6378137,rf:298.257,ellipseName:"MERIT 1983"},rt.SGS85={a:6378136,rf:298.257,ellipseName:"Soviet Geodetic System 85"},rt.GRS80={a:6378137,rf:298.257222101,ellipseName:"GRS 1980(IUGG, 1980)"},rt.IAU76={a:6378140,rf:298.257,ellipseName:"IAU 1976"},rt.airy={a:6377563.396,b:6356256.91,ellipseName:"Airy 1830"},rt.APL4={a:6378137,rf:298.25,ellipseName:"Appl. Physics. 1965"},rt.NWL9D={a:6378145,rf:298.25,ellipseName:"Naval Weapons Lab., 1965"},rt.mod_airy={a:6377340.189,b:6356034.446,ellipseName:"Modified Airy"},rt.andrae={a:6377104.43,rf:300,ellipseName:"Andrae 1876 (Den., Iclnd.)"},rt.aust_SA={a:6378160,rf:298.25,ellipseName:"Australian Natl & S. Amer. 1969"},rt.GRS67={a:6378160,rf:298.247167427,ellipseName:"GRS 67(IUGG 1967)"},rt.bessel={a:6377397.155,rf:299.1528128,ellipseName:"Bessel 1841"},rt.bess_nam={a:6377483.865,rf:299.1528128,ellipseName:"Bessel 1841 (Namibia)"},rt.clrk66={a:6378206.4,b:6356583.8,ellipseName:"Clarke 1866"},rt.clrk80={a:6378249.145,rf:293.4663,ellipseName:"Clarke 1880 mod."},rt.clrk58={a:6378293.645208759,rf:294.2606763692654,ellipseName:"Clarke 1858"},rt.CPM={a:6375738.7,rf:334.29,ellipseName:"Comm. des Poids et Mesures 1799"},rt.delmbr={a:6376428,rf:311.5,ellipseName:"Delambre 1810 (Belgium)"},rt.engelis={a:6378136.05,rf:298.2566,ellipseName:"Engelis 1985"},rt.evrst30={a:6377276.345,rf:300.8017,ellipseName:"Everest 1830"},rt.evrst48={a:6377304.063,rf:300.8017,ellipseName:"Everest 1948"},rt.evrst56={a:6377301.243,rf:300.8017,ellipseName:"Everest 1956"},rt.evrst69={a:6377295.664,rf:300.8017,ellipseName:"Everest 1969"},rt.evrstSS={a:6377298.556,rf:300.8017,ellipseName:"Everest (Sabah & Sarawak)"},rt.fschr60={a:6378166,rf:298.3,ellipseName:"Fischer (Mercury Datum) 1960"},rt.fschr60m={a:6378155,rf:298.3,ellipseName:"Fischer 1960"},rt.fschr68={a:6378150,rf:298.3,ellipseName:"Fischer 1968"},rt.helmert={a:6378200,rf:298.3,ellipseName:"Helmert 1906"},rt.hough={a:6378270,rf:297,ellipseName:"Hough"},rt.intl={a:6378388,rf:297,ellipseName:"International 1909 (Hayford)"},rt.kaula={a:6378163,rf:298.24,ellipseName:"Kaula 1961"},rt.lerch={a:6378139,rf:298.257,ellipseName:"Lerch 1979"},rt.mprts={a:6397300,rf:191,ellipseName:"Maupertius 1738"},rt.new_intl={a:6378157.5,b:6356772.2,ellipseName:"New International 1967"},rt.plessis={a:6376523,rf:6355863,ellipseName:"Plessis 1817 (France)"},rt.krass={a:6378245,rf:298.3,ellipseName:"Krassovsky, 1942"},rt.SEasia={a:6378155,b:6356773.3205,ellipseName:"Southeast Asia"},rt.walbeck={a:6376896,b:6355834.8467,ellipseName:"Walbeck"},rt.WGS60={a:6378165,rf:298.3,ellipseName:"WGS 60"},rt.WGS66={a:6378145,rf:298.25,ellipseName:"WGS 66"},rt.WGS7={a:6378135,rf:298.26,ellipseName:"WGS 72"};var st=rt.WGS84={a:6378137,rf:298.257223563,ellipseName:"WGS 84"};rt.sphere={a:6370997,b:6370997,ellipseName:"Normal Sphere (r=6370997)"};var it={};it.wgs84={towgs84:"0,0,0",ellipse:"WGS84",datumName:"WGS84"},it.ch1903={towgs84:"674.374,15.056,405.346",ellipse:"bessel",datumName:"swiss"},it.ggrs87={towgs84:"-199.87,74.79,246.62",ellipse:"GRS80",datumName:"Greek_Geodetic_Reference_System_1987"},it.nad83={towgs84:"0,0,0",ellipse:"GRS80",datumName:"North_American_Datum_1983"},it.nad27={nadgrids:"@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat",ellipse:"clrk66",datumName:"North_American_Datum_1927"},it.potsdam={towgs84:"606.0,23.0,413.0",ellipse:"bessel",datumName:"Potsdam Rauenberg 1950 DHDN"},it.carthage={towgs84:"-263.0,6.0,431.0",ellipse:"clark80",datumName:"Carthage 1934 Tunisia"},it.hermannskogel={towgs84:"653.0,-212.0,449.0",ellipse:"bessel",datumName:"Hermannskogel"},it.osni52={towgs84:"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15",ellipse:"airy",datumName:"Irish National"},it.ire65={towgs84:"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15",ellipse:"mod_airy",datumName:"Ireland 1965"},it.rassadiran={towgs84:"-133.63,-157.5,-158.62",ellipse:"intl",datumName:"Rassadiran"},it.nzgd49={towgs84:"59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993",ellipse:"intl",datumName:"New Zealand Geodetic Datum 1949"},it.osgb36={towgs84:"446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894",ellipse:"airy",datumName:"Airy 1830"},it.s_jtsk={towgs84:"589,76,480",ellipse:"bessel",datumName:"S-JTSK (Ferro)"},it.beduaram={towgs84:"-106,-87,188",ellipse:"clrk80",datumName:"Beduaram"},it.gunung_segara={towgs84:"-403,684,41",ellipse:"bessel",datumName:"Gunung Segara Jakarta"},it.rnb72={towgs84:"106.869,-52.2978,103.724,-0.33657,0.456955,-1.84218,1",ellipse:"intl",datumName:"Reseau National Belge 1972"},R.projections={start:function(){tt.forEach(S)},add:S,get:function(e){if(!e)return!1;var t=e.toLowerCase();if("undefined"!=typeof at[t]&&nt[at[t]])return nt[at[t]]}},R.projections.start(),"use strict";var ot=function(e,t,a){return O(e,t)?a:e.datum_type===xe||t.datum_type===xe?a:e.es!==t.es||e.a!==t.a||P(e.datum_type)||P(t.datum_type)?(a=z(a,e.es,e.a),P(e.datum_type)&&(a=T(a,e.datum_type,e.datum_params)),P(t.datum_type)&&(a=B(a,t.datum_type,t.datum_params)),L(a,t.es,t.a,t.b)):a},dt=function(e,a,n){var r=n.x,s=n.y,o=n.z||0,d={},l,p,c;for(c=0;3>c;c++)if(!(a&&2===c&&void 0===n.z))switch(0===c?(l=r,p=-1==="ew".indexOf(e.axis[c])?"y":"x"):1===c?(l=s,p=-1==="ns".indexOf(e.axis[c])?"x":"y"):(l=o,p="z"),e.axis[c]){case"e":case"w":case"n":case"s":d[p]=l;break;case"u":void 0!==n[p]&&(d.z=l);break;case"d":void 0!==n[p]&&(d.z=-l);break;default:return null;}return d},lt=function(e){var t={x:e[0],y:e[1]};return 2<e.length&&(t.z=e[2]),3<e.length&&(t.m=e[3]),t},pt=function(e){N(e.x),N(e.y)},ct=R("WGS84");ne.fromMGRS=function(e){return new ne(Z(e))},ne.prototype.toMGRS=function(e){return G([this.x,this.y],e)};var ut=.046875,mt=.01953125,_t=.01068115234375,ft=function(e){var a=[];a[0]=1-e*(.25+e*(ut+e*(mt+e*_t))),a[1]=e*(.75-e*(ut+e*(mt+e*_t)));var n=e*e;return a[2]=n*(.46875-e*(.013020833333333334+e*.007120768229166667)),n*=e,a[3]=n*(.3645833333333333-e*.005696614583333333),a[4]=n*e*.3076171875,a},ht=function(e,t,a,n){return a*=t,t*=t,n[0]*e-a*(n[1]+t*(n[2]+t*(n[3]+t*n[4])))},gt=function(e,a,r){for(var o=e,d=20;d;--d){var l=ge(o),s=1-a*l*l;if(s=(ht(o,l,ye(o),r)-e)*(s*be(s))*(1/(1-a)),o-=s,n(s)<ve)return o}return o},yt={init:function(){this.x0=void 0===this.x0?0:this.x0,this.y0=void 0===this.y0?0:this.y0,this.long0=void 0===this.long0?0:this.long0,this.lat0=void 0===this.lat0?0:this.lat0,this.es&&(this.en=ft(this.es),this.ml0=ht(this.lat0,ge(this.lat0),ye(this.lat0),this.en))},forward:function(e){var r=e.x,s=e.y,i=Ve(r-this.long0),d=ge(s),l=ye(s),p,u,m;if(!this.es){var _=l*ge(i);if(n(n(_)-1)<ve)return 93;if(u=.5*this.a*this.k0*a((1+_)/(1-_))+this.x0,m=l*ye(i)/be(1-o(_,2)),_=n(m),1<=_){if(_-1>ve)return 93;m=0}else m=pe(m);0>s&&(m=-m),m=this.a*this.k0*(m-this.lat0)+this.y0}else{var f=l*i,h=o(f,2),g=this.ep2*o(l,2),c=o(g,2),w=n(l)>ve?he(s):0,E=o(w,2),t=o(E,2);p=1-this.es*o(d,2),f/=be(p);var C=ht(s,d,l,this.en);u=this.a*(this.k0*f*(1+h/6*(1-E+g+h/20*(5-18*E+t+14*g-58*E*g+h/42*(61+179*t-t*E-479*E)))))+this.x0,m=this.a*(this.k0*(C-this.ml0+d*i*f/2*(1+h/12*(5-E+9*g+4*c+h/30*(61+t-58*E+270*g-330*E*g+h/56*(1385+543*t-t*E-3111*E))))))+this.y0}return e.x=u,e.y=m,e},inverse:function(e){var a=(e.x-this.x0)*(1/this.a),r=(e.y-this.y0)*(1/this.a),s,i,l,p;if(!this.es){var u=fe(a/this.k0),m=.5*(u-1/u),_=this.lat0+r/this.k0,f=ye(_);s=be((1-o(f,2))/(1+o(m,2))),l=le(s),0>r&&(l=-l),p=0===m&&0===f?0:Ve(ue(m,f)+this.long0)}else if(s=this.ml0+r/this.k0,i=gt(s,this.es,this.en),n(i)<Ce){var h=ge(i),g=ye(i),y=n(g)>ve?he(i):0,b=this.ep2*o(g,2),c=o(b,2),x=o(y,2),t=o(x,2);s=1-this.es*o(h,2);var w=a*be(s)/this.k0,d=o(w,2);s*=y,l=i-.5*(s*d/(1-this.es))*(1-d/12*(5+3*x-9*b*x+b-4*c-d/30*(61+90*x-252*b*x+45*t+46*b-d/56*(1385+3633*x+4095*t+1574*t*x)))),p=Ve(this.long0+w*(1-d/6*(1+2*x+b-d/20*(5+28*x+24*t+8*b*x+6*b-d/42*(61+662*x+1320*t+720*t*x))))/g)}else l=Ce*Je(r),p=0;return e.x=p,e.y=l,e},names:["Transverse_Mercator","Transverse Mercator","tmerc"]},bt=function(e){var t=fe(e);return t=(t-1/t)/2,t},xt=function(e,t){var r=Math.max;e=n(e),t=n(t);var s=r(e,t),a=l(e,t)/(s?s:1);return s*be(1+o(a,2))},wt=function(e){var t=1+e,n=t-1;return 0===n?e:e*a(t)/n},Et=function(e){var t=n(e);return t=wt(t*(1+t/(xt(1,t)+1))),0>e?-t:t},Ct=function(e,t){for(var a=2*ye(2*t),n=e.length-1,r=e[n],s=0,o;0<=--n;)o=-s+a*r+e[n],s=r,r=o;return t+o*ge(2*t)},At=function(e,t){for(var a=2*ye(t),n=e.length-1,r=e[n],s=0,o;0<=--n;)o=-s+a*r+e[n],s=r,r=o;return ge(t)*o},St=function(e){var t=fe(e);return t=(t+1/t)/2,t},kt=function(e,t,a){for(var n=ge(t),s=ye(t),o=bt(a),d=St(a),l=2*s*d,p=-2*n*o,c=e.length-1,u=e[c],m=0,_=0,f=0,h,g;0<=--c;)h=_,g=m,_=u,m=f,u=-h+l*_-p*m+e[c],f=-g+p*_+l*m;return l=n*d,p=s*o,[l*u-p*f,l*f+p*u]},vt={init:function(){if(void 0===this.es||0>=this.es)throw new Error("incorrect elliptical usage");this.x0=void 0===this.x0?0:this.x0,this.y0=void 0===this.y0?0:this.y0,this.long0=void 0===this.long0?0:this.long0,this.lat0=void 0===this.lat0?0:this.lat0,this.cgb=[],this.cbg=[],this.utg=[],this.gtu=[];var e=this.es/(1+be(1-this.es)),t=e/(2-e),a=t;this.cgb[0]=t*(2+t*(-2/3+t*(-2+t*(116/45+t*(26/45+t*(-2854/675)))))),this.cbg[0]=t*(-2+t*(2/3+t*(4/3+t*(-82/45+t*(32/45+t*(4642/4725)))))),a*=t,this.cgb[1]=a*(7/3+t*(-8/5+t*(-227/45+t*(2704/315+t*(2323/945))))),this.cbg[1]=a*(5/3+t*(-16/15+t*(-13/9+t*(904/315+t*(-1522/945))))),a*=t,this.cgb[2]=a*(56/15+t*(-136/35+t*(-1262/105+t*(73814/2835)))),this.cbg[2]=a*(-26/15+t*(34/21+t*(8/5+t*(-12686/2835)))),a*=t,this.cgb[3]=a*(4279/630+t*(-332/35+t*(-399572/14175))),this.cbg[3]=a*(1237/630+t*(-12/5+t*(-24832/14175))),a*=t,this.cgb[4]=a*(4174/315+t*(-144838/6237)),this.cbg[4]=a*(-734/315+t*(109598/31185)),a*=t,this.cgb[5]=a*(601676/22275),this.cbg[5]=a*(444337/155925),a=o(t,2),this.Qn=this.k0/(1+t)*(1+a*(1/4+a*(1/64+a/256))),this.utg[0]=t*(-.5+t*(2/3+t*(-37/96+t*(1/360+t*(81/512+t*(-96199/604800)))))),this.gtu[0]=t*(.5+t*(-2/3+t*(5/16+t*(41/180+t*(-127/288+t*(7891/37800)))))),this.utg[1]=a*(-1/48+t*(-1/15+t*(437/1440+t*(-46/105+t*(1118711/3870720))))),this.gtu[1]=a*(13/48+t*(-3/5+t*(557/1440+t*(281/630+t*(-1983433/1935360))))),a*=t,this.utg[2]=a*(-17/480+t*(37/840+t*(209/4480+t*(-5569/90720)))),this.gtu[2]=a*(61/240+t*(-103/140+t*(15061/26880+t*(167603/181440)))),a*=t,this.utg[3]=a*(-4397/161280+t*(11/504+t*(830251/7257600))),this.gtu[3]=a*(49561/161280+t*(-179/168+t*(6601661/7257600))),a*=t,this.utg[4]=a*(-4583/161280+t*(108847/3991680)),this.gtu[4]=a*(34729/80640+t*(-3418889/1995840)),a*=t,this.utg[5]=a*(-20648693/638668800),this.gtu[5]=a*(212378941/319334400);var n=Ct(this.cbg,this.lat0);this.Zb=-this.Qn*(n+At(this.gtu,2*n))},forward:function(e){var t=Ve(e.x-this.long0),a=e.y;a=Ct(this.cbg,a);var r=ge(a),s=ye(a),i=ge(t),o=ye(t);a=ue(r,o*s),t=ue(i*s,xt(r,s*o)),t=Et(he(t));var d=kt(this.gtu,2*a,2*t);a+=d[0],t+=d[1];var l,p;return 2.623395162778>=n(t)?(l=this.a*(this.Qn*t)+this.x0,p=this.a*(this.Qn*a+this.Zb)+this.y0):(l=1/0,p=1/0),e.x=l,e.y=p,e},inverse:function(e){var t=(e.x-this.x0)*(1/this.a),a=(e.y-this.y0)*(1/this.a);a=(a-this.Zb)/this.Qn,t/=this.Qn;var r,s;if(2.623395162778>=n(t)){var i=kt(this.utg,2*a,2*t);a+=i[0],t+=i[1],t=_e(bt(t));var o=ge(a),d=ye(a),l=ge(t),p=ye(t);a=ue(o*p,xt(l,p*d)),t=ue(l,p*d),r=Ve(t+this.long0),s=Ct(this.cgb,a)}else r=1/0,s=1/0;return e.x=r,e.y=s,e},names:["Extended_Transverse_Mercator","Extended Transverse Mercator","etmerc"]},It=function(e,t){if(void 0===e){if(e=r(30*(Ve(t)+me)/me)+1,0>e)return 0;if(60<e)return 60}return e},Rt={init:function(){var e=It(this.zone,this.long0);if(void 0===e)throw new Error("unknown utm zone");this.lat0=0,this.long0=(6*n(e)-183)*Ie,this.x0=5e5,this.y0=this.utmSouth?1e7:0,this.k0=.9996,vt.init.apply(this),this.forward=vt.forward,this.inverse=vt.inverse},names:["Universal Transverse Mercator System","utm"],dependsOn:"etmerc"},Ot=function(e,t){return o((1-e)/(1+e),t)},zt={init:function(){var e=ge(this.lat0),t=ye(this.lat0);t*=t,this.rc=be(1-this.es)/(1-this.es*e*e),this.C=be(1+this.es*t*t/(1-this.es)),this.phic0=le(e/this.C),this.ratexp=.5*this.C*this.e,this.K=he(.5*this.phic0+Oe)/(o(he(.5*this.lat0+Oe),this.C)*Ot(this.e*e,this.ratexp))},forward:function(e){var t=e.x,a=e.y;return e.y=2*_e(this.K*o(he(.5*a+Oe),this.C)*Ot(this.e*ge(a),this.ratexp))-Ce,e.x=this.C*t,e},inverse:function(e){for(var t=e.x/this.C,a=e.y,r=o(he(.5*a+Oe)/this.K,1/this.C),s=20;0<s&&(a=2*_e(r*Ot(this.e*ge(e.y),-.5*this.e))-Ce,!(n(a-e.y)<1e-14));--s)e.y=a;return s?(e.x=t,e.y=a,e):null},names:["gauss"]},Lt={init:function(){zt.init.apply(this),this.rc&&(this.sinc0=ge(this.phic0),this.cosc0=ye(this.phic0),this.R2=2*this.rc,!this.title&&(this.title="Oblique Stereographic Alternative"))},forward:function(e){var t,a,n,r;return e.x=Ve(e.x-this.long0),zt.forward.apply(this,[e]),t=ge(e.y),a=ye(e.y),n=ye(e.x),r=this.k0*this.R2/(1+this.sinc0*t+this.cosc0*a*n),e.x=r*a*ge(e.x),e.y=r*(this.cosc0*t-this.sinc0*a*n),e.x=this.a*e.x+this.x0,e.y=this.a*e.y+this.y0,e},inverse:function(e){var t,a,n,r,s;if(e.x=(e.x-this.x0)/this.a,e.y=(e.y-this.y0)/this.a,e.x/=this.k0,e.y/=this.k0,s=be(e.x*e.x+e.y*e.y)){var i=2*ue(s,this.R2);t=ge(i),a=ye(i),r=le(a*this.sinc0+e.y*t*this.cosc0/s),n=ue(e.x*t,s*this.cosc0*a-e.y*this.sinc0*t)}else r=this.phic0,n=0;return e.x=n,e.y=r,zt.inverse.apply(this,[e]),e.x=Ve(e.x+this.long0),e},names:["Stereographic_North_Pole","Oblique_Stereographic","Polar_Stereographic","sterea","Oblique Stereographic Alternative","Double_Stereographic"]},Tt={init:function(){this.coslat0=ye(this.lat0),this.sinlat0=ge(this.lat0),this.sphere?1===this.k0&&!isNaN(this.lat_ts)&&n(this.coslat0)<=ve&&(this.k0=.5*(1+Je(this.lat0)*ge(this.lat_ts))):(n(this.coslat0)<=ve&&(0<this.lat0?this.con=1:this.con=-1),this.cons=be(o(1+this.e,1+this.e)*o(1-this.e,1-this.e)),1===this.k0&&!isNaN(this.lat_ts)&&n(this.coslat0)<=ve&&(this.k0=.5*this.cons*Qe(this.e,ge(this.lat_ts),ye(this.lat_ts))/$e(this.e,this.con*this.lat_ts,this.con*ge(this.lat_ts))),this.ms1=Qe(this.e,this.sinlat0,this.coslat0),this.X0=2*_e(this.ssfn_(this.lat0,this.sinlat0,this.e))-Ce,this.cosX0=ye(this.X0),this.sinX0=ge(this.X0))},forward:function(e){var t=e.x,a=e.y,r=ge(a),s=ye(a),i=Ve(t-this.long0),o,d,l,p,c,u;return n(n(t-this.long0)-me)<=ve&&n(a+this.lat0)<=ve?(e.x=NaN,e.y=NaN,e):this.sphere?(o=2*this.k0/(1+this.sinlat0*r+this.coslat0*s*ye(i)),e.x=65*this.a*s*ge(i)+this.x0,e.y=65*this.a*(this.coslat0*r-this.sinlat0*s*ye(i))+this.y0,e):(d=2*_e(this.ssfn_(a,r,this.e))-Ce,p=ye(d),l=ge(d),n(this.coslat0)<=ve)?(c=$e(this.e,a*this.con,this.con*r),u=2*this.a*this.k0*c/this.cons,e.x=this.x0+u*ge(t-this.long0),e.y=this.y0-this.con*u*ye(t-this.long0),e):(n(this.sinlat0)<ve?(o=2*this.a*this.k0/(1+p*ye(i)),e.y=65*l):(o=2*this.a*this.k0*this.ms1/(this.cosX0*(1+this.sinX0*l+this.cosX0*p*ye(i))),e.y=65*(this.cosX0*l-this.sinX0*p*ye(i))+this.y0),e.x=65*p*ge(i)+this.x0,e)},inverse:function(e){e.x-=this.x0,e.y-=this.y0;var t=be(e.x*e.x+e.y*e.y),a,r,s,i,o;if(this.sphere){var d=2*_e(t/(2*this.a*this.k0));return(a=this.long0,r=this.lat0,t<=ve)?(e.x=a,e.y=r,e):(r=le(ye(d)*this.sinlat0+e.y*ge(d)*this.coslat0/t),a=n(this.coslat0)<ve?0<this.lat0?Ve(this.long0+ue(e.x,-1*e.y)):Ve(this.long0+ue(e.x,e.y)):Ve(this.long0+ue(e.x*ge(d),t*this.coslat0*ye(d)-e.y*this.sinlat0*ge(d))),e.x=a,e.y=r,e)}if(n(this.coslat0)<=ve){if(t<=ve)return r=this.lat0,a=this.long0,e.x=a,e.y=r,e;e.x*=this.con,e.y*=this.con,s=t*this.cons/(2*this.a*this.k0),r=this.con*et(this.e,s),a=this.con*Ve(this.con*this.long0+ue(e.x,-1*e.y))}else i=2*_e(t*this.cosX0/(2*this.a*this.k0*this.ms1)),a=this.long0,t<=ve?o=this.X0:(o=le(ye(i)*this.sinX0+e.y*ge(i)*this.cosX0/t),a=Ve(this.long0+ue(e.x*ge(i),t*this.cosX0*ye(i)-e.y*this.sinX0*ge(i)))),r=-1*et(this.e,he(.5*(Ce+o)));return e.x=a,e.y=r,e},names:["stere","Stereographic_South_Pole","Polar Stereographic (variant B)"],ssfn_:function(e,t,a){return t*=a,he(.5*(Ce+e))*o((1-t)/(1+t),.5*a)}},Bt={init:function(){var t=this.lat0;this.lambda0=this.long0;var n=ge(t),r=this.a,s=this.rf,i=1/s,d=2*i-o(i,2),l=this.e=be(d);this.R=this.k0*r*be(1-d)/(1-d*o(n,2)),this.alpha=be(1+d/(1-d)*o(ye(t),4)),this.b0=le(n/this.alpha);var e=a(he(me/4+this.b0/2)),p=a(he(me/4+t/2)),c=a((1+l*n)/(1-l*n));this.K=e-this.alpha*p+this.alpha*l/2*c},forward:function(e){var t=a(he(me/4-e.y/2)),n=this.e/2*a((1+this.e*ge(e.y))/(1-this.e*ge(e.y))),r=-this.alpha*(t+n)+this.K,s=2*(_e(fe(r))-me/4),i=this.alpha*(e.x-this.lambda0),o=_e(ge(73)/(ge(this.b0)*he(s)+ye(this.b0)*ye(73))),d=le(ye(this.b0)*ge(s)-ge(this.b0)*ye(s)*ye(73));return e.y=this.R/2*a((1+ge(d))/(1-ge(d)))+this.y0,e.x=this.R*o+this.x0,e},inverse:function(e){for(var t=e.x-this.x0,r=e.y-this.y0,s=t/this.R,i=2*(_e(fe(r/this.R))-me/4),o=le(ye(this.b0)*ge(i)+ge(this.b0)*ye(i)*ye(s)),d=_e(ge(s)/(ye(this.b0)*ye(s)-ge(this.b0)*he(i))),l=this.lambda0+73/this.alpha,p=0,c=o,u=-1e3,m=0;1e-7<n(c-u);){if(20<++m)return;p=1/this.alpha*(a(he(me/4+o/2))-this.K)+this.e*a(he(me/4+le(this.e*ge(c))/2)),u=c,c=2*_e(fe(p))-me/2}return e.x=l,e.y=c,e},names:["somerc"]},Pt={init:function(){this.no_off=this.no_off||!1,this.no_rot=this.no_rot||!1,isNaN(this.k0)&&(this.k0=1);var e=ge(this.lat0),t=ye(this.lat0),a=this.e*e;this.bl=be(1+this.es/(1-this.es)*o(t,4)),this.al=this.a*this.bl*this.k0*be(1-this.es)/(1-a*a);var n=$e(this.e,this.lat0,e),r=this.bl/t*be((1-this.es)/(1-a*a));1>r*r&&(r=1);var s,i;if(!isNaN(this.longc))s=0<=this.lat0?r+be(r*r-1):r-be(r*r-1),this.el=s*o(n,this.bl),i=.5*(s-1/s),this.gamma0=le(ge(this.alpha)/r),this.long0=this.longc-le(i*he(this.gamma0))/this.bl;else{var d=$e(this.e,this.lat1,ge(this.lat1)),l=$e(this.e,this.lat2,ge(this.lat2));this.el=0<=this.lat0?(r+be(r*r-1))*o(n,this.bl):(r-be(r*r-1))*o(n,this.bl);var p=o(d,this.bl),c=o(l,this.bl);s=this.el/p,i=.5*(s-1/s);var u=(this.el*this.el-c*p)/(this.el*this.el+c*p),m=Ve(this.long1-this.long2);this.long0=.5*(this.long1+this.long2)-_e(u*he(.5*this.bl*m)/((c-p)/(c+p)))/this.bl,this.long0=Ve(this.long0);var _=Ve(this.long1-this.long0);this.gamma0=_e(ge(this.bl*_)/i),this.alpha=le(r*ge(this.gamma0))}this.uc=this.no_off?0:0<=this.lat0?this.al/this.bl*ue(be(r*r-1),ye(this.alpha)):-1*this.al/this.bl*ue(be(r*r-1),ye(this.alpha))},forward:function(e){var r=Number.POSITIVE_INFINITY,s=e.x,i=e.y,d=Ve(s-this.long0),l,p,c;if(n(n(i)-Ce)<=ve)c=0<i?-1:1,p=this.al/this.bl*a(he(Oe+.5*(c*this.gamma0))),l=-1*c*Ce*this.al/this.bl;else{var u=$e(this.e,i,ge(i)),t=this.el/o(u,this.bl),m=.5*(t-1/t),_=ge(this.bl*d),f=(m*ge(this.gamma0)-_*ye(this.gamma0))/(.5*(t+1/t));p=n(n(f)-1)<=ve?r:.5*this.al*a((1-f)/(1+f))/this.bl,l=n(ye(this.bl*d))<=ve?this.al*this.bl*d:this.al*ue(m*ye(this.gamma0)+_*ge(this.gamma0),ye(this.bl*d))/this.bl}return this.no_rot?(e.x=this.x0+l,e.y=this.y0+p):(l-=this.uc,e.x=this.x0+p*ye(this.alpha)+l*ge(this.alpha),e.y=this.y0+l*ye(this.alpha)-p*ge(this.alpha)),e},inverse:function(e){var t,a;this.no_rot?(a=e.y-this.y0,t=e.x-this.x0):(a=(e.x-this.x0)*ye(this.alpha)-(e.y-this.y0)*ge(this.alpha),t=(e.y-this.y0)*ye(this.alpha)+(e.x-this.x0)*ge(this.alpha),t+=this.uc);var r=fe(-1*this.bl*a/this.al),s=.5*(r-1/r),i=ge(this.bl*t/this.al),d=(i*ye(this.gamma0)+s*ge(this.gamma0))/(.5*(r+1/r)),l=o(this.el/be((1+d)/(1-d)),1/this.bl);return n(d-1)<ve?(e.x=this.long0,e.y=Ce):n(d+1)<ve?(e.x=this.long0,e.y=-1*Ce):(e.y=et(this.e,l),e.x=Ve(this.long0-ue(s*ye(this.gamma0)-i*ge(this.gamma0),ye(this.bl*t/this.al))/this.bl)),e},names:["Hotine_Oblique_Mercator","Hotine Oblique Mercator","Hotine_Oblique_Mercator_Azimuth_Natural_Origin","Hotine_Oblique_Mercator_Azimuth_Center","omerc"]},Nt={init:function(){if(this.lat2||(this.lat2=this.lat1),this.k0||(this.k0=1),this.x0=this.x0||0,this.y0=this.y0||0,!(n(this.lat1+this.lat2)<ve)){var e=this.b/this.a;this.e=be(1-e*e);var t=ge(this.lat1),r=ye(this.lat1),s=Qe(this.e,t,r),i=$e(this.e,this.lat1,t),d=ge(this.lat2),l=ye(this.lat2),p=Qe(this.e,d,l),c=$e(this.e,this.lat2,d),u=$e(this.e,this.lat0,ge(this.lat0));this.ns=n(this.lat1-this.lat2)>ve?a(s/p)/a(i/c):t,isNaN(this.ns)&&(this.ns=t),this.f0=s/(this.ns*o(i,this.ns)),this.rh=this.a*this.f0*o(u,this.ns),this.title||(this.title="Lambert Conformal Conic")}},forward:function(e){var t=e.x,a=e.y;n(2*n(a)-me)<=ve&&(a=Je(a)*(Ce-2*ve));var r=n(n(a)-Ce),s,i;if(r>ve)s=$e(this.e,a,ge(a)),i=this.a*this.f0*o(s,this.ns);else{if(r=a*this.ns,0>=r)return null;i=0}var d=this.ns*Ve(t-this.long0);return e.x=this.k0*(i*ge(d))+this.x0,e.y=this.k0*(this.rh-i*ye(d))+this.y0,e},inverse:function(e){var t=(e.x-this.x0)/this.k0,a=this.rh-(e.y-this.y0)/this.k0,n,r,s,i,d;0<this.ns?(n=be(t*t+a*a),r=1):(n=-be(t*t+a*a),r=-1);var l=0;if(0!==n&&(l=ue(r*t,r*a)),!(0!==n||0<this.ns))i=-Ce;else if(r=1/this.ns,s=o(n/(this.a*this.f0),r),i=et(this.e,s),-9999===i)return null;return d=Ve(l/this.ns+this.long0),e.x=d,e.y=i,e},names:["Lambert Tangential Conformal Conic Projection","Lambert_Conformal_Conic","Lambert_Conformal_Conic_2SP","lcc"]},Dt={init:function(){this.a=6377397.155,this.es=.006674372230614,this.e=be(this.es),this.lat0||(this.lat0=.863937979737193),this.long0||(this.long0=.7417649320975901-.308341501185665),this.k0||(this.k0=.9999),this.s45=.785398163397448,this.s90=2*this.s45,this.fi0=this.lat0,this.e2=this.es,this.e=be(this.e2),this.alfa=be(1+this.e2*o(ye(this.fi0),4)/(1-this.e2)),this.uq=1.04216856380474,this.u0=le(ge(this.fi0)/this.alfa),this.g=o((1+this.e*ge(this.fi0))/(1-this.e*ge(this.fi0)),this.alfa*this.e/2),this.k=he(this.u0/2+this.s45)/o(he(this.fi0/2+this.s45),this.alfa)*this.g,this.k1=this.k0,this.n0=this.a*be(1-this.e2)/(1-this.e2*o(ge(this.fi0),2)),this.s0=1.37008346281555,this.n=ge(this.s0),this.ro0=this.k1*this.n0/he(this.s0),this.ad=this.s90-this.uq},forward:function(e){var t=e.x,a=e.y,n=Ve(t-this.long0),r,i,l,p,c,m,_;return r=o((1+this.e*ge(a))/(1-this.e*ge(a)),this.alfa*this.e/2),i=2*(_e(this.k*o(he(a/2+this.s45),this.alfa)/r)-this.s45),l=-n*this.alfa,p=le(ye(this.ad)*ge(i)+ge(this.ad)*ye(i)*ye(l)),c=le(ye(i)*ge(l)/ye(p)),m=this.n*c,_=this.ro0*o(he(this.s0/2+this.s45),this.n)/o(he(p/2+this.s45),this.n),e.y=_*ye(m)/1,e.x=_*ge(m)/1,this.czech||(e.y*=-1,e.x*=-1),e},inverse:function(e){var t=e.x,a,r,i,l,p,c,m,_;e.x=e.y,e.y=t,this.czech||(e.y*=-1,e.x*=-1),c=be(e.x*e.x+e.y*e.y),p=ue(e.y,e.x),l=p/ge(this.s0),i=2*(_e(o(this.ro0/c,1/this.n)*he(this.s0/2+this.s45))-this.s45),a=le(ye(this.ad)*ge(i)-ge(this.ad)*ye(i)*ye(l)),r=le(ye(i)*ge(l)/ye(a)),e.x=this.long0-r/this.alfa,m=a,_=0;var f=0;do e.y=2*(_e(o(this.k,-1/this.alfa)*o(he(a/2+this.s45),1/this.alfa)*o((1+this.e*ge(m))/(1-this.e*ge(m)),this.e/2))-this.s45),1e-10>n(m-e.y)&&(_=1),m=e.y,f+=1;while(0===_&&15>f);return 15<=f?null:e},names:["Krovak","krovak"]},jt=function(e,t,a,n,r){return e*r-t*ge(2*r)+a*ge(4*r)-n*ge(6*r)},Ut=function(e){return 1-.25*e*(1+e/16*(3+1.25*e))},Ft=function(e){return .375*e*(1+.25*e*(1+.46875*e))},Mt=function(e){return .05859375*e*e*(1+.75*e)},Gt=function(e){return e*e*e*(35/3072)},Zt=function(t,a,e){var n=a*e;return t/be(1-n*n)},i=function(e){return n(e)<Ce?e:e-Je(e)*me},ce=function(e,t,a,r,s){var o,d;o=e/t;for(var l=0;15>l;l++)if(d=(e-(t*o-a*ge(2*o)+r*ge(4*o)-s*ge(6*o)))/(t-2*a*ye(2*o)+4*r*ye(4*o)-6*s*ye(6*o)),o+=d,1e-10>=n(d))return o;return NaN},Ee={init:function(){this.sphere||(this.e0=Ut(this.es),this.e1=Ft(this.es),this.e2=Mt(this.es),this.e3=Gt(this.es),this.ml0=this.a*jt(this.e0,this.e1,this.e2,this.e3,this.lat0))},forward:function(e){var t=e.x,a=e.y,n,r;if(t=Ve(t-this.long0),this.sphere)n=this.a*le(ye(a)*ge(t)),r=this.a*(ue(he(a),ye(t))-this.lat0);else{var s=ge(a),i=ye(a),o=Zt(this.a,this.e,s),d=he(a)*he(a),l=t*ye(a),p=l*l,c=this.es*i*i/(1-this.es),u=this.a*jt(this.e0,this.e1,this.e2,this.e3,a);n=o*l*(1-p*d*(1/6-(8-d+8*c)*p/120)),r=u-this.ml0+o*s/i*p*(.5+(5-d+6*c)*p/24)}return e.x=n+this.x0,e.y=r+this.y0,e},inverse:function(e){e.x-=this.x0,e.y-=this.y0;var t=e.x/this.a,a=e.y/this.a,r,s;if(this.sphere){var d=a+this.lat0;r=le(ge(d)*ye(t)),s=ue(he(t),ye(d))}else{var l=this.ml0/this.a+a,p=ce(l,this.e0,this.e1,this.e2,this.e3);if(n(n(p)-Ce)<=ve)return e.x=this.long0,e.y=Ce,0>a&&(e.y*=-1),e;var c=Zt(this.a,this.e,ge(p)),u=c*c*c/this.a/this.a*(1-this.es),m=o(he(p),2),_=t*this.a/c,f=_*_;r=p-c*he(p)/u*_*_*(.5-(1+3*m)*_*_/24),s=_*(1-f*(m/3+(1+3*m)*m*f/15))/ye(p)}return e.x=Ve(s+this.long0),e.y=i(r),e},names:["Cassini","Cassini_Soldner","cass"]},Yt=function(e,t){var n;return 1e-7<e?(n=e*t,(1-e*e)*(t/(1-n*n)-.5/e*a((1-n)/(1+n)))):2*t},qt=.3333333333333333,Ht=.17222222222222222,Kt=.10257936507936508,Xt=.06388888888888888,Wt=.0664021164021164,Qt=.016415012942191543,Jt={init:function(){var e=n(this.lat0);if(this.mode=n(e-Ce)<ve?0>this.lat0?this.S_POLE:this.N_POLE:n(e)<ve?this.EQUIT:this.OBLIQ,0<this.es){var t;switch(this.qp=Yt(this.e,1),this.mmf=.5/(1-this.es),this.apa=re(this.es),this.mode){case this.N_POLE:this.dd=1;break;case this.S_POLE:this.dd=1;break;case this.EQUIT:this.rq=be(.5*this.qp),this.dd=1/this.rq,this.xmf=1,this.ymf=.5*this.qp;break;case this.OBLIQ:this.rq=be(.5*this.qp),t=ge(this.lat0),this.sinb1=Yt(this.e,t)/this.qp,this.cosb1=be(1-this.sinb1*this.sinb1),this.dd=ye(this.lat0)/(be(1-this.es*t*t)*this.rq*this.cosb1),this.ymf=(this.xmf=this.rq)/this.dd,this.xmf*=this.dd;}}else this.mode===this.OBLIQ&&(this.sinph0=ge(this.lat0),this.cosph0=ye(this.lat0))},forward:function(e){var t=e.x,a=e.y,r,s,i,o,d,l,p,c,u,m;if(t=Ve(t-this.long0),!this.sphere){switch(p=0,c=0,u=0,i=ye(t),o=ge(t),d=ge(a),l=Yt(this.e,d),(this.mode===this.OBLIQ||this.mode===this.EQUIT)&&(p=l/this.qp,c=be(1-p*p)),this.mode){case this.OBLIQ:u=1+this.sinb1*p+this.cosb1*c*i;break;case this.EQUIT:u=1+c*i;break;case this.N_POLE:u=Ce+a,l=this.qp-l;break;case this.S_POLE:u=a-Ce,l=this.qp+l;}if(n(u)<ve)return null;switch(this.mode){case this.OBLIQ:case this.EQUIT:u=be(2/u),s=this.mode===this.OBLIQ?this.ymf*u*(this.cosb1*p-this.sinb1*c*i):(u=be(2/(1+c*i)))*p*this.ymf,r=this.xmf*u*c*o;break;case this.N_POLE:case this.S_POLE:0<=l?(r=(u=be(l))*o,s=i*(this.mode===this.S_POLE?u:-u)):r=s=0;}}else if(d=ge(a),m=ye(a),i=ye(t),this.mode===this.OBLIQ||this.mode===this.EQUIT){if(s=this.mode===this.EQUIT?1+m*i:1+this.sinph0*d+this.cosph0*m*i,s<=ve)return null;s=be(2/s),r=s*m*ge(t),s*=this.mode===this.EQUIT?d:this.cosph0*d-this.sinph0*m*i}else if(this.mode===this.N_POLE||this.mode===this.S_POLE){if(this.mode===this.N_POLE&&(i=-i),n(a+this.phi0)<ve)return null;s=Oe-.5*a,s=2*(this.mode===this.S_POLE?ye(s):ge(s)),r=s*ge(t),s*=i}return e.x=this.a*r+this.x0,e.y=this.a*s+this.y0,e},inverse:function(e){e.x-=this.x0,e.y-=this.y0;var t=e.x/this.a,a=e.y/this.a,r,s,i,o,d,l,p;if(this.sphere){var c=0,u=0,m;if(m=be(t*t+a*a),s=.5*m,1<s)return null;switch(s=2*le(s),(this.mode===this.OBLIQ||this.mode===this.EQUIT)&&(u=ge(s),c=ye(s)),this.mode){case this.EQUIT:s=n(m)<=ve?0:le(a*u/m),t*=u,a=c*m;break;case this.OBLIQ:s=n(m)<=ve?this.phi0:le(c*this.sinph0+a*u*this.cosph0/m),t*=u*this.cosph0,a=(c-ge(s)*this.sinph0)*m;break;case this.N_POLE:a=-a,s=Ce-s;break;case this.S_POLE:s-=Ce;}r=0===a&&(this.mode===this.EQUIT||this.mode===this.OBLIQ)?0:ue(t,a)}else{if(p=0,this.mode===this.OBLIQ||this.mode===this.EQUIT){if(t/=this.dd,a*=this.dd,l=be(t*t+a*a),l<ve)return e.x=0,e.y=this.phi0,e;o=2*le(.5*l/this.rq),i=ye(o),t*=o=ge(o),this.mode===this.OBLIQ?(p=i*this.sinb1+a*o*this.cosb1/l,d=this.qp*p,a=l*this.cosb1*i-a*this.sinb1*o):(p=a*o/l,d=this.qp*p,a=l*i)}else if(this.mode===this.N_POLE||this.mode===this.S_POLE){if(this.mode===this.N_POLE&&(a=-a),d=t*t+a*a,!d)return e.x=0,e.y=this.phi0,e;p=1-d/this.qp,this.mode===this.S_POLE&&(p=-p)}r=ue(t,a),s=se(le(p),this.apa)}return e.x=Ve(this.long0+r),e.y=s,e},names:["Lambert Azimuthal Equal Area","Lambert_Azimuthal_Equal_Area","laea"],S_POLE:1,N_POLE:2,EQUIT:3,OBLIQ:4},Vt=function(e){return 1<n(e)&&(e=1<e?1:-1),le(e)},$t={init:function(){n(this.lat1+this.lat2)<ve||(this.temp=this.b/this.a,this.es=1-o(this.temp,2),this.e3=be(this.es),this.sin_po=ge(this.lat1),this.cos_po=ye(this.lat1),this.t1=this.sin_po,this.con=this.sin_po,this.ms1=Qe(this.e3,this.sin_po,this.cos_po),this.qs1=Yt(this.e3,this.sin_po,this.cos_po),this.sin_po=ge(this.lat2),this.cos_po=ye(this.lat2),this.t2=this.sin_po,this.ms2=Qe(this.e3,this.sin_po,this.cos_po),this.qs2=Yt(this.e3,this.sin_po,this.cos_po),this.sin_po=ge(this.lat0),this.cos_po=ye(this.lat0),this.t3=this.sin_po,this.qs0=Yt(this.e3,this.sin_po,this.cos_po),this.ns0=n(this.lat1-this.lat2)>ve?(this.ms1*this.ms1-this.ms2*this.ms2)/(this.qs2-this.qs1):this.con,this.c=this.ms1*this.ms1+this.ns0*this.qs1,this.rh=this.a*be(this.c-this.ns0*this.qs0)/this.ns0)},forward:function(e){var t=e.x,a=e.y;this.sin_phi=ge(a),this.cos_phi=ye(a);var n=Yt(this.e3,this.sin_phi,this.cos_phi),r=this.a*be(this.c-this.ns0*n)/this.ns0,s=this.ns0*Ve(t-this.long0),i=r*ge(s)+this.x0,o=this.rh-r*ye(s)+this.y0;return e.x=i,e.y=o,e},inverse:function(e){var t,a,n,r,s,i;return e.x-=this.x0,e.y=this.rh-e.y+this.y0,0<=this.ns0?(t=be(e.x*e.x+e.y*e.y),n=1):(t=-be(e.x*e.x+e.y*e.y),n=-1),r=0,0!==t&&(r=ue(n*e.x,n*e.y)),n=t*this.ns0/this.a,this.sphere?i=le((this.c-n*n)/(2*this.ns0)):(a=(this.c-n*n)/this.ns0,i=this.phi1z(this.e3,a)),s=Ve(r/this.ns0+this.long0),e.x=s,e.y=i,e},names:["Albers_Conic_Equal_Area","Albers","aea"],phi1z:function(e,t){var r=Vt(.5*t),s,o,d,l,p;if(e<ve)return r;for(var c=1;25>=c;c++)if(s=ge(r),o=ye(r),d=e*s,l=1-d*d,p=.5*l*l/o*(t/(1-e*e)-s/l+.5/e*a((1-d)/(1+d))),r+=p,1e-7>=n(p))return r;return null}},ea={init:function(){this.sin_p14=ge(this.lat0),this.cos_p14=ye(this.lat0),this.infinity_dist=1e3*this.a,this.rc=1},forward:function(e){var t=e.x,a=e.y,r,s,i,o,d,l,p,c;return i=Ve(t-this.long0),r=ge(a),s=ye(a),o=ye(i),l=this.sin_p14*r+this.cos_p14*s*o,d=1,0<l||n(l)<=ve?(p=this.x0+this.a*d*s*ge(i)/l,c=this.y0+this.a*d*(this.cos_p14*r-this.sin_p14*s*o)/l):(p=this.x0+this.infinity_dist*s*ge(i),c=this.y0+this.infinity_dist*(this.cos_p14*r-this.sin_p14*s*o)),e.x=p,e.y=c,e},inverse:function(e){var t,a,n,r,s,i;return e.x=(e.x-this.x0)/this.a,e.y=(e.y-this.y0)/this.a,e.x/=this.k0,e.y/=this.k0,(t=be(e.x*e.x+e.y*e.y))?(r=ue(t,this.rc),a=ge(r),n=ye(r),i=Vt(n*this.sin_p14+e.y*a*this.cos_p14/t),s=ue(e.x*a,t*this.cos_p14*n-e.y*this.sin_p14*a),s=Ve(this.long0+s)):(i=this.phic0,s=0),e.x=s,e.y=i,e},names:["gnom"]},ta=function(e,t){var r=1-(1-e*e)/(2*e)*a((1-e)/(1+e));if(1e-6>n(n(t)-r))return 0>t?-1*Ce:Ce;for(var s=le(.5*t),d=0,l,p,c,u;30>d;d++)if(p=ge(s),c=ye(s),u=e*p,l=o(1-u*u,2)/(2*c)*(t/(1-e*e)-p/(1-u*u)+.5/e*a((1-u)/(1+u))),s+=l,1e-10>=n(l))return s;return NaN},aa={init:function(){this.sphere||(this.k0=Qe(this.e,ge(this.lat_ts),ye(this.lat_ts)))},forward:function(e){var t=e.x,a=e.y,n=Ve(t-this.long0),r,s;if(this.sphere)r=this.x0+this.a*n*ye(this.lat_ts),s=this.y0+this.a*ge(a)/ye(this.lat_ts);else{var i=Yt(this.e,ge(a));r=this.x0+this.a*this.k0*n,s=this.y0+.5*(this.a*i)/this.k0}return e.x=r,e.y=s,e},inverse:function(e){e.x-=this.x0,e.y-=this.y0;var t,a;return this.sphere?(t=Ve(this.long0+e.x/this.a/ye(this.lat_ts)),a=le(e.y/this.a*ye(this.lat_ts))):(a=ta(this.e,2*e.y*this.k0/this.a),t=Ve(this.long0+e.x/(this.a*this.k0))),e.x=t,e.y=a,e},names:["cea"]},na={init:function(){this.x0=this.x0||0,this.y0=this.y0||0,this.lat0=this.lat0||0,this.long0=this.long0||0,this.lat_ts=this.lat_ts||0,this.title=this.title||"Equidistant Cylindrical (Plate Carre)",this.rc=ye(this.lat_ts)},forward:function(e){var t=e.x,a=e.y,n=Ve(t-this.long0),r=i(a-this.lat0);return e.x=this.x0+this.a*n*this.rc,e.y=this.y0+this.a*r,e},inverse:function(e){var t=e.x,a=e.y;return e.x=Ve(this.long0+(t-this.x0)/(this.a*this.rc)),e.y=i(this.lat0+(a-this.y0)/this.a),e},names:["Equirectangular","Equidistant_Cylindrical","eqc"]},ra={init:function(){this.temp=this.b/this.a,this.es=1-o(this.temp,2),this.e=be(this.es),this.e0=Ut(this.es),this.e1=Ft(this.es),this.e2=Mt(this.es),this.e3=Gt(this.es),this.ml0=this.a*jt(this.e0,this.e1,this.e2,this.e3,this.lat0)},forward:function(e){var t=e.x,a=e.y,r=Ve(t-this.long0),s,o,d;if(d=r*ge(a),this.sphere)n(a)<=ve?(s=this.a*r,o=-1*this.a*this.lat0):(s=this.a*ge(d)/he(a),o=this.a*(i(a-this.lat0)+(1-ye(d))/he(a)));else if(n(a)<=ve)s=this.a*r,o=-1*this.ml0;else{var l=Zt(this.a,this.e,ge(a))/he(a);s=l*ge(d),o=this.a*jt(this.e0,this.e1,this.e2,this.e3,a)-this.ml0+l*(1-ye(d))}return e.x=s+this.x0,e.y=o+this.y0,e},inverse:function(e){var t,a,r,s,d,l,p,c,u;if(r=e.x-this.x0,s=e.y-this.y0,this.sphere){if(n(s+this.a*this.lat0)<=ve)t=Ve(r/this.a+this.long0),a=0;else{l=this.lat0+s/this.a,p=r*r/this.a/this.a+l*l,c=l;var m;for(d=20;d;--d)if(m=he(c),u=-1*(l*(c*m+1)-c-.5*(c*c+p)*m)/((c-l)/m-1),c+=u,n(u)<=ve){a=c;break}t=Ve(this.long0+le(r*he(c)/this.a)/ge(a))}}else if(n(s+this.ml0)<=ve)a=0,t=Ve(this.long0+r/this.a);else{l=(this.ml0+s)/this.a,p=r*r/this.a/this.a+l*l,c=l;var _,f,h,g,b;for(d=20;d;--d)if(b=this.e*ge(c),_=be(1-b*b)*he(c),f=this.a*jt(this.e0,this.e1,this.e2,this.e3,c),h=this.e0-2*this.e1*ye(2*c)+4*this.e2*ye(4*c)-6*this.e3*ye(6*c),g=f/this.a,u=(l*(_*g+1)-g-.5*_*(g*g+p))/(this.es*ge(2*c)*(g*g+p-2*l*g)/(4*_)+(l-g)*(_*h-2/ge(2*c))-h),c-=u,n(u)<=ve){a=c;break}_=be(1-this.es*o(ge(a),2))*he(a),t=Ve(this.long0+le(r*_/this.a)/ge(a))}return e.x=t,e.y=a,e},names:["Polyconic","poly"]},sa={init:function(){this.A=[],this.A[1]=.6399175073,this.A[2]=-.1358797613,this.A[3]=.063294409,this.A[4]=-.02526853,this.A[5]=.0117879,this.A[6]=-.0055161,this.A[7]=.0026906,this.A[8]=-.001333,this.A[9]=67e-5,this.A[10]=-34e-5,this.B_re=[],this.B_im=[],this.B_re[1]=.7557853228,this.B_im[1]=0,this.B_re[2]=.249204646,this.B_im[2]=.003371507,this.B_re[3]=-.001541739,this.B_im[3]=.04105856,this.B_re[4]=-.10162907,this.B_im[4]=.01727609,this.B_re[5]=-.26623489,this.B_im[5]=-.36249218,this.B_re[6]=-.6870983,this.B_im[6]=-1.1651967,this.C_re=[],this.C_im=[],this.C_re[1]=1.3231270439,this.C_im[1]=0,this.C_re[2]=-.577245789,this.C_im[2]=-.007809598,this.C_re[3]=.508307513,this.C_im[3]=-.112208952,this.C_re[4]=-.15094762,this.C_im[4]=.18200602,this.C_re[5]=1.01418179,this.C_im[5]=1.64497696,this.C_re[6]=1.9660549,this.C_im[6]=2.5127645,this.D=[],this.D[1]=1.5627014243,this.D[2]=.5185406398,this.D[3]=-.03333098,this.D[4]=-.1052906,this.D[5]=-.0368594,this.D[6]=.007317,this.D[7]=.0122,this.D[8]=.00394,this.D[9]=-.0013},forward:function(e){var t=e.x,a=e.y,r=a-this.lat0,s=t-this.long0,i=1,o=0,d;for(d=1;10>=d;d++)i*=1E-5*(r/we),o+=this.A[d]*i;var l=o,p=s,c=1,u=0,m=0,_=0,f,h;for(d=1;6>=d;d++)f=c*l-u*p,h=u*l+c*p,c=f,u=h,m=m+this.B_re[d]*c-this.B_im[d]*u,_=_+this.B_im[d]*c+this.B_re[d]*u;return e.x=_*this.a+this.x0,e.y=m*this.a+this.y0,e},inverse:function(e){var t=e.x,a=e.y,r=t-this.x0,s=a-this.y0,o=s/this.a,d=r/this.a,l=1,p=0,c=0,u=0,m,_,f;for(m=1;6>=m;m++)_=l*o-p*d,f=p*o+l*d,l=_,p=f,c=c+this.C_re[m]*l-this.C_im[m]*p,u=u+this.C_im[m]*l+this.C_re[m]*p;for(var h=0;h<this.iterations;h++){var g=c,y=u,b=o,x=d,w,E;for(m=2;6>=m;m++)w=g*c-y*u,E=y*c+g*u,g=w,y=E,b+=(m-1)*(this.B_re[m]*g-this.B_im[m]*y),x+=(m-1)*(this.B_im[m]*g+this.B_re[m]*y);g=1,y=0;var C=this.B_re[1],A=this.B_im[1];for(m=2;6>=m;m++)w=g*c-y*u,E=y*c+g*u,g=w,y=E,C+=m*(this.B_re[m]*g-this.B_im[m]*y),A+=m*(this.B_im[m]*g+this.B_re[m]*y);var S=C*C+A*A;c=(b*C+x*A)/S,u=(x*C-b*A)/S}var k=c,v=u,I=1,R=0;for(m=1;9>=m;m++)I*=k,R+=this.D[m]*I;var O=this.lat0+1E5*(R*we),z=this.long0+v;return e.x=z,e.y=O,e},names:["New_Zealand_Map_Grid","nzmg"]},ia={init:function(){},forward:function(e){var t=e.x,n=e.y,r=Ve(t-this.long0),s=this.x0+this.a*r,i=this.y0+1.25*(this.a*a(he(me/4+n/2.5)));return e.x=s,e.y=i,e},inverse:function(e){e.x-=this.x0,e.y-=this.y0;var t=Ve(this.long0+e.x/this.a),a=2.5*(_e(fe(.8*e.y/this.a))-me/4);return e.x=t,e.y=a,e},names:["Miller_Cylindrical","mill"]},oa={init:function(){this.sphere?(this.n=1,this.m=0,this.es=0,this.C_y=be((this.m+1)/this.n),this.C_x=this.C_y/(this.m+1)):this.en=ft(this.es)},forward:function(e){var t=e.x,a=e.y,r,o;if(t=Ve(t-this.long0),this.sphere){if(!this.m)a=1===this.n?a:le(this.n*ge(a));else for(var d=this.n*ge(a),l=20,p;l&&(p=(this.m*a+ge(a)-d)/(this.m+ye(a)),a-=p,!(n(p)<ve));--l);r=this.a*this.C_x*t*(this.m+ye(a)),o=this.a*this.C_y*a}else{var u=ge(a),s=ye(a);o=this.a*ht(a,u,s,this.en),r=this.a*t*s/be(1-this.es*u*u)}return e.x=r,e.y=o,e},inverse:function(e){var t,a,r,o;return e.x-=this.x0,r=e.x/this.a,e.y-=this.y0,t=e.y/this.a,this.sphere?(t/=this.C_y,r/=this.C_x*(this.m+ye(t)),this.m?t=Vt((this.m*t+ge(t))/this.n):1!==this.n&&(t=Vt(ge(t)/this.n)),r=Ve(r+this.long0),t=i(t)):(t=gt(e.y/this.a,this.es,this.en),o=n(t),o<Ce?(o=ge(t),a=this.long0+e.x*be(1-this.es*o*o)/(this.a*ye(t)),r=Ve(a)):o-ve<Ce&&(r=this.long0)),e.x=r,e.y=t,e},names:["Sinusoidal","sinu"]},da={init:function(){},forward:function(e){for(var t=e.x,a=e.y,r=Ve(t-this.long0),s=a,i=me*ge(a),o;o=-(s+ge(s)-i)/(1+ye(s)),s+=o,!(n(o)<ve););s/=2,me/2-n(a)<ve&&(r=0);var d=.900316316158*this.a*r*ye(s)+this.x0,l=1.4142135623731*this.a*ge(s)+this.y0;return e.x=d,e.y=l,e},inverse:function(e){var t,a;e.x-=this.x0,e.y-=this.y0,a=e.y/(1.4142135623731*this.a),.999999999999<n(a)&&(a=.999999999999),t=le(a);var r=Ve(this.long0+e.x/(.900316316158*this.a*ye(t)));r<-me&&(r=-me),r>me&&(r=me),a=(2*t+ge(2*t))/me,1<n(a)&&(a=1);var s=le(a);return e.x=r,e.y=s,e},names:["Mollweide","moll"]},la={init:function(){n(this.lat1+this.lat2)<ve||(this.lat2=this.lat2||this.lat1,this.temp=this.b/this.a,this.es=1-o(this.temp,2),this.e=be(this.es),this.e0=Ut(this.es),this.e1=Ft(this.es),this.e2=Mt(this.es),this.e3=Gt(this.es),this.sinphi=ge(this.lat1),this.cosphi=ye(this.lat1),this.ms1=Qe(this.e,this.sinphi,this.cosphi),this.ml1=jt(this.e0,this.e1,this.e2,this.e3,this.lat1),n(this.lat1-this.lat2)<ve?this.ns=this.sinphi:(this.sinphi=ge(this.lat2),this.cosphi=ye(this.lat2),this.ms2=Qe(this.e,this.sinphi,this.cosphi),this.ml2=jt(this.e0,this.e1,this.e2,this.e3,this.lat2),this.ns=(this.ms1-this.ms2)/(this.ml2-this.ml1)),this.g=this.ml1+this.ms1/this.ns,this.ml0=jt(this.e0,this.e1,this.e2,this.e3,this.lat0),this.rh=this.a*(this.g-this.ml0))},forward:function(e){var t=e.x,a=e.y,n;if(this.sphere)n=this.a*(this.g-a);else{var r=jt(this.e0,this.e1,this.e2,this.e3,a);n=this.a*(this.g-r)}var s=this.ns*Ve(t-this.long0),i=this.x0+n*ge(s),o=this.y0+this.rh-n*ye(s);return e.x=i,e.y=o,e},inverse:function(e){e.x-=this.x0,e.y=this.rh-e.y+this.y0;var t,a,n,r;0<=this.ns?(a=be(e.x*e.x+e.y*e.y),t=1):(a=-be(e.x*e.x+e.y*e.y),t=-1);var s=0;if(0!==a&&(s=ue(t*e.x,t*e.y)),this.sphere)return r=Ve(this.long0+s/this.ns),n=i(this.g-a/this.a),e.x=r,e.y=n,e;var o=this.g-a/this.a;return n=ce(o,this.e0,this.e1,this.e2,this.e3),r=Ve(this.long0+s/this.ns),e.x=r,e.y=n,e},names:["Equidistant_Conic","eqdc"]},pa={init:function(){this.R=this.a},forward:function(e){var t=e.x,a=e.y,r=Ve(t-this.long0),s,i;n(a)<=ve&&(s=this.x0+this.R*r,i=this.y0);var o=Vt(2*n(a/me));(n(r)<=ve||n(n(a)-Ce)<=ve)&&(s=this.x0,i=0<=a?this.y0+me*this.R*he(.5*o):this.y0+me*this.R*-he(.5*o));var d=.5*n(me/r-r/me),l=d*d,p=ge(o),c=ye(o),u=c/(p+c-1),_=u*(2/p-1),m=_*_,f=me*this.R*(d*(u-m)+be(l*(u-m)*(u-m)-(m+l)*(u*u-m)))/(m+l);0>r&&(f=-f),s=this.x0+f;var h=l+u;return f=me*this.R*(_*h-d*be((m+l)*(l+1)-h*h))/(m+l),i=0<=a?this.y0+f:this.y0-f,e.x=s,e.y=i,e},inverse:function(e){var t,a,r,s,i,o,l,p,c,u,m,_,f;return e.x-=this.x0,e.y-=this.y0,m=me*this.R,r=e.x/m,s=e.y/m,i=r*r+s*s,o=-n(s)*(1+i),l=o-2*s*s+r*r,p=-2*o+1+2*s*s+i*i,f=s*s/p+(2*l*l*l/p/p/p-9*o*l/p/p)/27,c=(o-l*l/3/p)/p,u=2*be(-c/3),m=3*f/c/u,1<n(m)&&(0<=m?m=1:m=-1),_=pe(m)/3,a=0<=e.y?(-u*ye(_+me/3)-l/3/p)*me:-(-u*ye(_+me/3)-l/3/p)*me,t=n(r)<ve?this.long0:Ve(this.long0+me*(i-1+be(1+2*(r*r-s*s)+i*i))/2/r),e.x=t,e.y=a,e},names:["Van_der_Grinten_I","VanDerGrinten","vandg"]},ca={init:function(){this.sin_p12=ge(this.lat0),this.cos_p12=ye(this.lat0)},forward:function(e){var t=e.x,a=e.y,r=ge(e.y),i=ye(e.y),o=Ve(t-this.long0),d,l,p,u,m,_,f,h,g,y,b,x,w,E,C,A,S,k,v,I,R,O,z;return this.sphere?n(this.sin_p12-1)<=ve?(e.x=this.x0+this.a*(Ce-a)*ge(o),e.y=this.y0-this.a*(Ce-a)*ye(o),e):n(this.sin_p12+1)<=ve?(e.x=this.x0+this.a*(Ce+a)*ge(o),e.y=this.y0+this.a*(Ce+a)*ye(o),e):(k=this.sin_p12*r+this.cos_p12*i*ye(o),A=pe(k),S=A/ge(A),e.x=this.x0+this.a*S*i*ge(o),e.y=this.y0+this.a*S*(this.cos_p12*r-this.sin_p12*i*ye(o)),e):(d=Ut(this.es),l=Ft(this.es),p=Mt(this.es),u=Gt(this.es),n(this.sin_p12-1)<=ve?(m=this.a*jt(d,l,p,u,Ce),_=this.a*jt(d,l,p,u,a),e.x=this.x0+(m-_)*ge(o),e.y=this.y0-(m-_)*ye(o),e):n(this.sin_p12+1)<=ve?(m=this.a*jt(d,l,p,u,Ce),_=this.a*jt(d,l,p,u,a),e.x=this.x0+(m+_)*ge(o),e.y=this.y0+(m+_)*ye(o),e):(f=r/i,h=Zt(this.a,this.e,this.sin_p12),g=Zt(this.a,this.e,r),y=_e((1-this.es)*f+this.es*h*this.sin_p12/(g*i)),b=ue(ge(o),this.cos_p12*he(y)-this.sin_p12*ye(o)),v=0===b?le(this.cos_p12*ge(y)-this.sin_p12*ye(y)):n(n(b)-me)<=ve?-le(this.cos_p12*ge(y)-this.sin_p12*ye(y)):le(ge(o)*ye(y)/ge(b)),x=this.e*this.sin_p12/be(1-this.es),w=this.e*this.cos_p12*ye(b)/be(1-this.es),E=x*w,C=w*w,I=v*v,R=I*v,O=R*v,z=O*v,A=h*v*(1-I*C*(1-C)/6+R/8*E*(1-2*C)+O/120*(C*(4-7*C)-3*x*x*(1-7*C))-z/48*E),e.x=this.x0+A*ge(b),e.y=this.y0+A*ye(b),e))},inverse:function(e){e.x-=this.x0,e.y-=this.y0;var t,a,r,s,i,d,l,p,c,u,m,_,f,h,g,y,b,x,w,E,C,S,k;return this.sphere?(t=be(e.x*e.x+e.y*e.y),t>2*Ce*this.a)?void 0:(a=t/this.a,r=ge(a),s=ye(a),i=this.long0,n(t)<=ve?d=this.lat0:(d=Vt(s*this.sin_p12+e.y*r*this.cos_p12/t),l=n(this.lat0)-Ce,i=n(l)<=ve?0<=this.lat0?Ve(this.long0+ue(e.x,-e.y)):Ve(this.long0-ue(-e.x,e.y)):Ve(this.long0+ue(e.x*r,t*this.cos_p12*s-e.y*this.sin_p12*r))),e.x=i,e.y=d,e):(p=Ut(this.es),c=Ft(this.es),u=Mt(this.es),m=Gt(this.es),n(this.sin_p12-1)<=ve?(_=this.a*jt(p,c,u,m,Ce),t=be(e.x*e.x+e.y*e.y),f=_-t,d=ce(f/this.a,p,c,u,m),i=Ve(this.long0+ue(e.x,-1*e.y)),e.x=i,e.y=d,e):n(this.sin_p12+1)<=ve?(_=this.a*jt(p,c,u,m,Ce),t=be(e.x*e.x+e.y*e.y),f=t-_,d=ce(f/this.a,p,c,u,m),i=Ve(this.long0+ue(e.x,e.y)),e.x=i,e.y=d,e):(t=be(e.x*e.x+e.y*e.y),y=ue(e.x,e.y),h=Zt(this.a,this.e,this.sin_p12),b=ye(y),x=this.e*this.cos_p12*b,w=-x*x/(1-this.es),E=3*this.es*(1-w)*this.sin_p12*this.cos_p12*b/(1-this.es),C=t/h,S=C-w*(1+w)*o(C,3)/6-E*(1+3*w)*o(C,4)/24,k=1-w*S*S/2-C*S*S*S/6,g=le(this.sin_p12*ye(S)+this.cos_p12*ge(S)*b),i=Ve(this.long0+le(ge(y)*ge(S)/ye(g))),d=_e((1-this.es*k*this.sin_p12/ge(g))*he(g)/(1-this.es)),e.x=i,e.y=d,e))},names:["Azimuthal_Equidistant","aeqd"]},ua={init:function(){this.sin_p14=ge(this.lat0),this.cos_p14=ye(this.lat0)},forward:function(e){var t=e.x,a=e.y,r,s,i,o,d,l,p,c;return i=Ve(t-this.long0),r=ge(a),s=ye(a),o=ye(i),l=this.sin_p14*r+this.cos_p14*s*o,d=1,(0<l||n(l)<=ve)&&(p=this.a*d*s*ge(i),c=this.y0+this.a*d*(this.cos_p14*r-this.sin_p14*s*o)),e.x=p,e.y=c,e},inverse:function(e){var t,a,r,s,i,o,d;return(e.x-=this.x0,e.y-=this.y0,t=be(e.x*e.x+e.y*e.y),a=Vt(t/this.a),r=ge(a),s=ye(a),o=this.long0,n(t)<=ve)?(d=this.lat0,e.x=o,e.y=d,e):(d=Vt(s*this.sin_p14+e.y*r*this.cos_p14/t),i=n(this.lat0)-Ce,n(i)<=ve)?(o=0<=this.lat0?Ve(this.long0+ue(e.x,-e.y)):Ve(this.long0-ue(-e.x,e.y)),e.x=o,e.y=d,e):(o=Ve(this.long0+ue(e.x*r,t*this.cos_p14*s-e.y*this.sin_p14*r)),e.x=o,e.y=d,e)},names:["ortho"]},ma={FRONT:1,RIGHT:2,BACK:3,LEFT:4,TOP:5,BOTTOM:6},_a={AREA_0:1,AREA_1:2,AREA_2:3,AREA_3:4},fa={init:function(){this.x0=this.x0||0,this.y0=this.y0||0,this.lat0=this.lat0||0,this.long0=this.long0||0,this.lat_ts=this.lat_ts||0,this.title=this.title||"Quadrilateralized Spherical Cube",this.face=this.lat0>=Ce-Oe/2?ma.TOP:this.lat0<=-(Ce-Oe/2)?ma.BOTTOM:n(this.long0)<=Oe?ma.FRONT:n(this.long0)<=Ce+Oe?0<this.long0?ma.RIGHT:ma.LEFT:ma.BACK,0!==this.es&&(this.one_minus_f=1-(this.a-this.b)/this.a,this.one_minus_f_squared=this.one_minus_f*this.one_minus_f)},forward:function(e){var a={x:0,y:0},n={value:0},i,o,d,l,p,c;if(e.x-=this.long0,i=0===this.es?e.y:_e(this.one_minus_f_squared*he(e.y)),o=e.x,this.face===ma.TOP)l=Ce-i,o>=Oe&&o<=Ce+Oe?(n.value=_a.AREA_0,d=o-Ce):o>Ce+Oe||o<=-(Ce+Oe)?(n.value=_a.AREA_1,d=0<o?o-Le:o+Le):o>-(Ce+Oe)&&o<=-Oe?(n.value=_a.AREA_2,d=o+Ce):(n.value=_a.AREA_3,d=o);else if(this.face===ma.BOTTOM)l=Ce+i,o>=Oe&&o<=Ce+Oe?(n.value=_a.AREA_0,d=-o+Ce):o<Oe&&o>=-Oe?(n.value=_a.AREA_1,d=-o):o<-Oe&&o>=-(Ce+Oe)?(n.value=_a.AREA_2,d=-o-Ce):(n.value=_a.AREA_3,d=0<o?-o+Le:-o-Le);else{var u,m,_,f,h,g,y;this.face===ma.RIGHT?o=oe(o,+Ce):this.face===ma.BACK?o=oe(o,+Le):this.face===ma.LEFT&&(o=oe(o,-Ce)),f=ge(i),h=ye(i),g=ge(o),y=ye(o),u=h*y,m=h*g,_=f,this.face===ma.FRONT?(l=pe(u),d=ie(l,_,m,n)):this.face===ma.RIGHT?(l=pe(m),d=ie(l,_,-u,n)):this.face===ma.BACK?(l=pe(-u),d=ie(l,_,-m,n)):this.face===ma.LEFT?(l=pe(-m),d=ie(l,_,u,n)):(l=d=0,n.value=_a.AREA_0)}return c=_e(12/Le*(d+pe(ge(d)*ye(Oe))-Ce)),p=be((1-ye(l))/(ye(c)*ye(c))/(1-ye(_e(1/ye(d))))),n.value===_a.AREA_1?c+=Ce:n.value===_a.AREA_2?c+=Le:n.value===_a.AREA_3&&(c+=1.5*Le),a.x=p*ye(c),a.y=p*ge(c),a.x=a.x*this.a+this.x0,a.y=a.y*this.a+this.y0,e.x=a.x,e.y=a.y,e},inverse:function(e){var a={lam:0,phi:0},i={value:0},o,d,l,p,c,u,m,_,f;if(e.x=(e.x-this.x0)/this.a,e.y=(e.y-this.y0)/this.a,d=_e(be(e.x*e.x+e.y*e.y)),o=ue(e.y,e.x),0<=e.x&&e.x>=n(e.y)?i.value=_a.AREA_0:0<=e.y&&e.y>=n(e.x)?(i.value=_a.AREA_1,o-=Ce):0>e.x&&-e.x>=n(e.y)?(i.value=_a.AREA_2,o=0>o?o+Le:o-Le):(i.value=_a.AREA_3,o+=Ce),f=Le/12*he(o),c=ge(f)/(ye(f)-1/be(2)),u=_e(c),l=ye(o),p=he(d),m=1-l*l*p*p*(1-ye(_e(1/ye(u)))),-1>m?m=-1:1<m&&(m=1),this.face===ma.TOP)_=pe(m),a.phi=Ce-_,a.lam=i.value===_a.AREA_0?u+Ce:i.value===_a.AREA_1?0>u?u+Le:u-Le:i.value===_a.AREA_2?u-Ce:u;else if(this.face===ma.BOTTOM)_=pe(m),a.phi=_-Ce,a.lam=i.value===_a.AREA_0?-u+Ce:i.value===_a.AREA_1?-u:i.value===_a.AREA_2?-u-Ce:0>u?-u-Le:-u+Le;else{var h,g,y;h=m,f=h*h,y=1<=f?0:be(1-f)*ge(u),f+=y*y,g=1<=f?0:be(1-f),i.value===_a.AREA_1?(f=g,g=-y,y=f):i.value===_a.AREA_2?(g=-g,y=-y):i.value===_a.AREA_3&&(f=g,g=y,y=-f),this.face===ma.RIGHT?(f=h,h=-g,g=f):this.face===ma.BACK?(h=-h,g=-g):this.face===ma.LEFT&&(f=h,h=g,g=-f),a.phi=pe(-y)-Ce,a.lam=ue(g,h),this.face===ma.RIGHT?a.lam=oe(a.lam,-Ce):this.face===ma.BACK?a.lam=oe(a.lam,-Le):this.face===ma.LEFT&&(a.lam=oe(a.lam,+Ce))}if(0!==this.es){var b,x,w;b=0>a.phi?1:0,x=he(a.phi),w=this.b/be(x*x+this.one_minus_f_squared),a.phi=_e(be(this.a*this.a-w*w)/(this.one_minus_f*w)),b&&(a.phi=-a.phi)}return a.lam+=this.long0,e.x=a.lam,e.y=a.phi,e},names:["Quadrilateralized Spherical Cube","Quadrilateralized_Spherical_Cube","qsc"]},ha=[[1,22199e-21,-715515e-10,31103e-10],[.9986,-482243e-9,-24897e-9,-13309e-10],[.9954,-83103e-8,-448605e-10,-9.86701e-7],[.99,-.00135364,-59661e-9,36777e-10],[.9822,-.00167442,-449547e-11,-572411e-11],[.973,-.00214868,-903571e-10,1.8736e-8],[.96,-.00305085,-900761e-10,164917e-11],[.9427,-.00382792,-653386e-10,-26154e-10],[.9216,-.00467746,-10457e-8,481243e-11],[.8962,-.00536223,-323831e-10,-543432e-11],[.8679,-.00609363,-113898e-9,332484e-11],[.835,-.00698325,-640253e-10,9.34959e-7],[.7986,-.00755338,-500009e-10,9.35324e-7],[.7597,-.00798324,-35971e-9,-227626e-11],[.7186,-.00851367,-701149e-10,-86303e-10],[.6732,-.00986209,-199569e-9,191974e-10],[.6213,-.010418,883923e-10,624051e-11],[.5722,-.00906601,182e-6,624051e-11],[.5322,-.00677797,275608e-9,624051e-11]],ga=[[-520417e-23,.0124,121431e-23,-845284e-16],[.062,.0124,-1.26793e-9,422642e-15],[.124,.0124,5.07171e-9,-1.60604e-9],[.186,.0123999,-1.90189e-8,6.00152e-9],[.248,.0124002,7.10039e-8,-2.24e-8],[.31,.0123992,-2.64997e-7,8.35986e-8],[.372,.0124029,9.88983e-7,-3.11994e-7],[.434,.0123893,-369093e-11,-4.35621e-7],[.4958,.0123198,-102252e-10,-3.45523e-7],[.5571,.0121916,-154081e-10,-5.82288e-7],[.6176,.0119938,-241424e-10,-5.25327e-7],[.6769,.011713,-320223e-10,-5.16405e-7],[.7346,.0113541,-397684e-10,-6.09052e-7],[.7903,.0109107,-489042e-10,-104739e-11],[.8435,.0103431,-64615e-9,-1.40374e-9],[.8936,.00969686,-64636e-9,-8547e-9],[.9394,.00840947,-192841e-9,-42106e-10],[.9761,.00616527,-256e-6,-42106e-10],[1,.00328947,-319159e-9,-42106e-10]],ya=.8487,ba=1.3523,xa=Re/5,wa=function(e,t){return e[0]+t*(e[1]+t*(e[2]+t*e[3]))},Ea=function(e,t){return e[1]+t*(2*e[2]+3*t*e[3])},Ca={init:function(){this.x0=this.x0||0,this.y0=this.y0||0,this.long0=this.long0||0,this.es=0,this.title=this.title||"Robinson"},forward:function(e){var t=Ve(e.x-this.long0),a=n(e.y),s=r(a*xa);0>s?s=0:18<=s&&(s=17),a=Re*(a-1/xa*s);var o={x:wa(ha[s],a)*t,y:wa(ga[s],a)};return 0>e.y&&(o.y=-o.y),o.x=o.x*this.a*ya+this.x0,o.y=o.y*this.a*ba+this.y0,o},inverse:function(e){var a={x:(e.x-this.x0)/(this.a*ya),y:n(e.y-this.y0)/(this.a*ba)};if(1<=a.y)a.x/=ha[18][0],a.y=0>e.y?-Ce:Ce;else{var s=r(18*a.y);for(0>s?s=0:18<=s&&(s=17);;)if(ga[s][0]>a.y)--s;else if(ga[s+1][0]<=a.y)++s;else break;var o=ga[s],d=5*(a.y-o[0])/(ga[s+1][0]-o[0]);d=de(function(e){return(wa(o,e)-a.y)/Ea(o,e)},d,ve,100),a.x/=wa(ha[s],d),a.y=(5*s+d)*Ie,0>e.y&&(a.y=-a.y)}return a.x=Ve(a.x+this.long0),a},names:["Robinson","robin"]},Aa={init:function(){this.name="geocent"},forward:function(e){var t=z(e,this.es,this.a);return t},inverse:function(e){var t=L(e,this.es,this.a,this.b);return t},names:["Geocentric","geocentric","geocent","Geocent"]};return M.defaultDatum="WGS84",M.Proj=R,M.WGS84=new M.Proj("WGS84"),M.Point=ne,M.toPoint=lt,M.defs=f,M.transform=j,M.mgrs={forward:G,inverse:function(e){var t=K($(e.toUpperCase()));return t.lat&&t.lon?[t.lon,t.lat,t.lon,t.lat]:[t.left,t.bottom,t.right,t.top]},toPoint:Z},M.version="2.6.1",function(e){e.Proj.projections.add(yt),e.Proj.projections.add(vt),e.Proj.projections.add(Rt),e.Proj.projections.add(Lt),e.Proj.projections.add(Tt),e.Proj.projections.add(Bt),e.Proj.projections.add(Pt),e.Proj.projections.add(Nt),e.Proj.projections.add(Dt),e.Proj.projections.add(Ee),e.Proj.projections.add(Jt),e.Proj.projections.add($t),e.Proj.projections.add(ea),e.Proj.projections.add(aa),e.Proj.projections.add(na),e.Proj.projections.add(ra),e.Proj.projections.add(sa),e.Proj.projections.add(ia),e.Proj.projections.add(oa),e.Proj.projections.add(da),e.Proj.projections.add(la),e.Proj.projections.add(pa),e.Proj.projections.add(ca),e.Proj.projections.add(ua),e.Proj.projections.add(fa),e.Proj.projections.add(Ca),e.Proj.projections.add(Aa)}(M),M})},{}],56:[function(e,t,a){function n(e){if(e&&!d(e))throw new Error("Unknown encoding: "+e)}function r(e){return e.toString(this.encoding)}function s(e){this.charReceived=e.length%2,this.charLength=this.charReceived?2:0}function i(e){this.charReceived=e.length%3,this.charLength=this.charReceived?3:0}var o=e("buffer").Buffer,d=o.isEncoding||function(e){switch(e&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1;}},l=a.StringDecoder=function(e){switch(this.encoding=(e||"utf8").toLowerCase().replace(/[-_]/,""),n(e),this.encoding){case"utf8":this.surrogateSize=3;break;case"ucs2":case"utf16le":this.surrogateSize=2,this.detectIncompleteChar=s;break;case"base64":this.surrogateSize=3,this.detectIncompleteChar=i;break;default:return void(this.write=r);}this.charBuffer=new o(6),this.charReceived=0,this.charLength=0};l.prototype.write=function(e){for(var t="",a;this.charLength;){if(a=e.length>=this.charLength-this.charReceived?this.charLength-this.charReceived:e.length,e.copy(this.charBuffer,this.charReceived,0,a),this.charReceived+=a,this.charReceived<this.charLength)return"";e=e.slice(a,e.length),t=this.charBuffer.slice(0,this.charLength).toString(this.encoding);var n=t.charCodeAt(t.length-1);if(55296<=n&&56319>=n){this.charLength+=this.surrogateSize,t="";continue}if(this.charReceived=this.charLength=0,0===e.length)return t;break}this.detectIncompleteChar(e);var r=e.length;this.charLength&&(e.copy(this.charBuffer,0,e.length-this.charReceived,r),r-=this.charReceived),t+=e.toString(this.encoding,0,r);var r=t.length-1,n=t.charCodeAt(r);if(55296<=n&&56319>=n){var s=this.surrogateSize;return this.charLength+=s,this.charReceived+=s,this.charBuffer.copy(this.charBuffer,s,0,s),e.copy(this.charBuffer,0,0,s),t.substring(0,r)}return t},l.prototype.detectIncompleteChar=function(e){for(var t=3<=e.length?3:e.length;0<t;t--){var a=e[e.length-t];if(1==t&&6==a>>5){this.charLength=2;break}if(2>=t&&14==a>>4){this.charLength=3;break}if(3>=t&&30==a>>3){this.charLength=4;break}}this.charReceived=t},l.prototype.end=function(e){var t="";if(e&&e.length&&(t=this.write(e)),this.charReceived){var a=this.charReceived,n=this.charBuffer,r=this.encoding;t+=n.slice(0,a).toString(r)}return t}},{buffer:7}],57:[function(e,t){t.exports=e("./lib/encoding.js")},{"./lib/encoding.js":58}],58:[function(e,t){(function(a){'use strict';function n(e,t,a){return t<=e&&e<=a}function s(e,t){return-1!==e.indexOf(t)}function i(e){if(e===void 0)return{};if(e===Object(e))return e;throw TypeError("Could not convert argument to dictionary")}function o(e){for(var t=e+"",a=t.length,n=0,r=[];n<a;){var s=t.charCodeAt(n);if(55296>s||57343<s)r.push(s);else if(56320<=s&&57343>=s)r.push(65533);else if(55296<=s&&56319>=s)if(n===a-1)r.push(65533);else{var o=t.charCodeAt(n+1);if(56320<=o&&57343>=o){r.push(65536+((1023&s)<<10)+(1023&o)),n+=1}else r.push(65533)}n+=1}return r}function l(e){for(var t="",a=0,n;a<e.length;++a)n=e[a],65535>=n?t+=d(n):(n-=65536,t+=d((n>>10)+55296,(1023&n)+56320));return t}function p(e){return 0<=e&&127>=e}function c(e){this.tokens=[].slice.call(e),this.tokens.reverse()}function u(e,t){if(e)throw TypeError("Decoder error");return t||65533}function m(e){throw TypeError("The code point "+e+" could not be encoded.")}function _(e){return e=(e+"").trim().toLowerCase(),Object.prototype.hasOwnProperty.call(W,e)?W[e]:null}function f(e,t){return t?t[e]||null:null}function h(e,t){var a=t.indexOf(e);return-1===a?null:a}function g(e){if(!("encoding-indexes"in a))throw Error("Indexes missing. Did you forget to include encoding-indexes.js first?");return a["encoding-indexes"][e]}function y(e){if(39419<e&&189e3>e||1237575<e)return null;if(7457===e)return 59335;var t=0,a=0,n=g("gb18030-ranges"),r;for(r=0;r<n.length;++r){var s=n[r];if(s[0]<=e)t=s[0],a=s[1];else break}return a+e-t}function b(e){if(59335===e)return 7457;var t=0,a=0,n=g("gb18030-ranges"),r;for(r=0;r<n.length;++r){var s=n[r];if(s[1]<=e)t=s[1],a=s[0];else break}return a+e-t}function x(e){V=V||g("jis0208").map(function(e,t){return n(t,8272,8835)?null:e});var t=V;return t.indexOf(e)}function w(e){$=$||g("big5").map(function(e,t){return t<5024?null:e});var t=$;return 9552===e||9566===e||9569===e||9578===e||21313===e||21317===e?t.lastIndexOf(e):h(e,t)}function E(e,t){if(!(this instanceof E))throw TypeError("Called as a function. Did you forget 'new'?");e=void 0===e?"utf-8":e+"",t=i(t),this._encoding=null,this._decoder=null,this._ignoreBOM=!1,this._BOMseen=!1,this._error_mode="replacement",this._do_not_flush=!1;var a=_(e);if(null===a||"replacement"===a.name)throw RangeError("Unknown encoding: "+e);if(!J[a.name])throw Error("Decoder not present. Did you forget to include encoding-indexes.js first?");var n=this;return n._encoding=a,!!t.fatal&&(n._error_mode="fatal"),!!t.ignoreBOM&&(n._ignoreBOM=!0),Object.defineProperty||(this.encoding=n._encoding.name.toLowerCase(),this.fatal="fatal"===n._error_mode,this.ignoreBOM=n._ignoreBOM),n}function C(e,t){if(!(this instanceof C))throw TypeError("Called as a function. Did you forget 'new'?");t=i(t),this._encoding=null,this._encoder=null,this._do_not_flush=!1,this._fatal=!t.fatal?"replacement":"fatal";var n=this;if(!!t.NONSTANDARD_allowLegacyEncoding){e=void 0===e?"utf-8":e+"";var r=_(e);if(null===r||"replacement"===r.name)throw RangeError("Unknown encoding: "+e);if(!Q[r.name])throw Error("Encoder not present. Did you forget to include encoding-indexes.js first?");n._encoding=r}else n._encoding=_("utf-8"),void 0!==e&&"console"in a&&console.warn("TextEncoder constructor called with encoding label, which is ignored.");return Object.defineProperty||(this.encoding=n._encoding.name.toLowerCase()),n}function A(e){var t=e.fatal,a=0,r=0,s=0,i=128,o=191;this.handler=function(e,d){if(-1===d&&0!==s)return s=0,u(t);if(-1===d)return-1;if(0===s){if(n(d,0,127))return d;if(n(d,194,223))s=1,a=31&d;else if(n(d,224,239))224===d&&(i=160),237===d&&(o=159),s=2,a=15&d;else if(n(d,240,244))240===d&&(i=144),244===d&&(o=143),s=3,a=7&d;else return u(t);return null}if(!n(d,i,o))return a=s=r=0,i=128,o=191,e.prepend(d),u(t);if(i=128,o=191,a=a<<6|63&d,r+=1,r!==s)return null;var l=a;return a=s=r=0,l}}function S(e){e.fatal;this.handler=function(e,t){if(t===-1)return-1;if(H(t))return t;var a,r;n(t,128,2047)?(a=1,r=192):n(t,2048,65535)?(a=2,r=224):n(t,65536,1114111)&&(a=3,r=240);for(var s=[(t>>6*a)+r];0<a;){var i=t>>6*(a-1);s.push(128|63&i),a-=1}return s}}function k(e,t){var a=t.fatal;this.handler=function(t,n){if(n===-1)return-1;if(p(n))return n;var r=e[n-128];return null===r?u(a):r}}function v(e,t){t.fatal;this.handler=function(t,a){if(-1===a)return-1;if(H(a))return a;var n=h(a,e);return null===n&&m(a),n+128}}function I(e){var t=e.fatal,a=0,r=0,s=0;this.handler=function(e,i){if(i===-1&&0===a&&0===r&&0===s)return-1;i===-1&&(0!==a||0!==r||0!==s)&&(a=0,r=0,s=0,u(t));var o;if(0!==s){o=null,n(i,48,57)&&(o=y(10*(126*(10*(a-129)+r-48)+s-129)+i-48));var d=[r,s,i];return a=0,r=0,s=0,null===o?(e.prepend(d),u(t)):o}if(0!==r)return n(i,129,254)?(s=i,null):(e.prepend([r,i]),a=0,r=0,u(t));if(0!==a){if(n(i,48,57))return r=i,null;var l=a,c=null;a=0;var m=127>i?64:65;return(n(i,64,126)||n(i,128,254))&&(c=190*(l-129)+(i-m)),o=null===c?null:f(c,g("gb18030")),null===o&&p(i)&&e.prepend(i),null===o?u(t):o}return p(i)?i:128===i?8364:n(i,129,254)?(a=i,null):u(t)}}function R(e,t){e.fatal;this.handler=function(e,a){if(a===-1)return-1;if(H(a))return a;if(58853===a)return m(a);if(t&&8364===a)return 128;var n=h(a,g("gb18030"));if(null!==n){var r=q(n/190)+129,s=n%190,i=63>s?64:65;return[r,s+i]}if(t)return m(a);n=b(a);var o=q(n/10/126/10);n-=10*(126*(10*o));var d=q(n/10/126);n-=126*(10*d);var l=q(n/10),p=n-10*l;return[o+129,d+48,l+129,p+48]}}function O(e){var t=e.fatal,a=0;this.handler=function(e,r){if(-1===r&&0!==a)return a=0,u(t);if(-1===r&&0===a)return-1;if(0!==a){var s=a,i=null;a=0;var o=127>r?64:98;switch((n(r,64,126)||n(r,161,254))&&(i=157*(s-129)+(r-o)),i){case 1133:return[202,772];case 1135:return[202,780];case 1164:return[234,772];case 1166:return[234,780];}var d=null===i?null:f(i,g("big5"));return null===d&&p(r)&&e.prepend(r),null===d?u(t):d}return p(r)?r:n(r,129,254)?(a=r,null):u(t)}}function z(e){e.fatal;this.handler=function(e,t){if(t===-1)return-1;if(H(t))return t;var a=w(t);if(null===a)return m(t);var n=q(a/157)+129;if(161>n)return m(t);var r=a%157,s=63>r?64:98;return[n,r+s]}}function L(e){var t=e.fatal,a=!1,r=0;this.handler=function(e,s){if(-1===s&&0!==r)return r=0,u(t);if(-1===s&&0===r)return-1;if(142===r&&n(s,161,223))return r=0,65216+s;if(143===r&&n(s,161,254))return a=!0,r=s,null;if(0!==r){var i=r;r=0;var o=null;return n(i,161,254)&&n(s,161,254)&&(o=f(94*(i-161)+(s-161),g(a?"jis0212":"jis0208"))),a=!1,n(s,161,254)||e.prepend(s),null===o?u(t):o}return p(s)?s:142===s||143===s||n(s,161,254)?(r=s,null):u(t)}}function T(e){e.fatal;this.handler=function(e,t){if(t===-1)return-1;if(H(t))return t;if(165===t)return 92;if(8254===t)return 126;if(n(t,65377,65439))return[142,t-65377+161];8722===t&&(t=65293);var a=h(t,g("jis0208"));if(null===a)return m(t);var r=q(a/94)+161;return[r,a%94+161]}}function B(e){var t=e.fatal,a={ASCII:0,Roman:1,Katakana:2,LeadByte:3,TrailByte:4,EscapeStart:5,Escape:6},r=a.ASCII,s=a.ASCII,i=0,o=!1;this.handler=function(e,d){switch(r){default:case a.ASCII:return 27===d?(r=a.EscapeStart,null):n(d,0,127)&&14!==d&&15!==d&&27!==d?(o=!1,d):-1===d?-1:(o=!1,u(t));case a.Roman:return 27===d?(r=a.EscapeStart,null):92===d?(o=!1,165):126===d?(o=!1,8254):n(d,0,127)&&14!==d&&15!==d&&27!==d&&92!==d&&126!==d?(o=!1,d):-1===d?-1:(o=!1,u(t));case a.Katakana:return 27===d?(r=a.EscapeStart,null):n(d,33,95)?(o=!1,65344+d):-1===d?-1:(o=!1,u(t));case a.LeadByte:return 27===d?(r=a.EscapeStart,null):n(d,33,126)?(o=!1,i=d,r=a.TrailByte,null):-1===d?-1:(o=!1,u(t));case a.TrailByte:if(27===d)return r=a.EscapeStart,u(t);if(n(d,33,126)){r=a.LeadByte;var l=94*(i-33)+d-33,p=f(l,g("jis0208"));return null===p?u(t):p}return-1===d?(r=a.LeadByte,e.prepend(d),u(t)):(r=a.LeadByte,u(t));case a.EscapeStart:return 36===d||40===d?(i=d,r=a.Escape,null):(e.prepend(d),o=!1,r=s,u(t));case a.Escape:var c=i;i=0;var m=null;if(40===c&&66===d&&(m=a.ASCII),40===c&&74===d&&(m=a.Roman),40===c&&73===d&&(m=a.Katakana),36===c&&(64===d||66===d)&&(m=a.LeadByte),null!==m){r=r=m;var _=o;return o=!0,_?u(t):null}return e.prepend([c,d]),o=!1,r=s,u(t);}}}function P(e){var t=e.fatal,a={ASCII:0,Roman:1,jis0208:2},n=a.ASCII;this.handler=function(e,t){if(-1===t&&n!==a.ASCII)return e.prepend(t),n=a.ASCII,[27,40,66];if(-1===t&&n===a.ASCII)return-1;if((n===a.ASCII||n===a.Roman)&&(14===t||15===t||27===t))return m(65533);if(n===a.ASCII&&H(t))return t;if(n===a.Roman&&(H(t)&&92!==t&&126!==t||165==t||8254==t)){if(H(t))return t;if(165===t)return 92;if(8254===t)return 126}if(H(t)&&n!==a.ASCII)return e.prepend(t),n=a.ASCII,[27,40,66];if((165===t||8254===t)&&n!==a.Roman)return e.prepend(t),n=a.Roman,[27,40,74];8722===t&&(t=65293);var r=h(t,g("jis0208"));if(null===r)return m(t);if(n!==a.jis0208)return e.prepend(t),n=a.jis0208,[27,36,66];var s=q(r/94)+33;return[s,r%94+33]}}function N(e){var t=e.fatal,a=0;this.handler=function(e,r){if(-1===r&&0!==a)return a=0,u(t);if(-1===r&&0===a)return-1;if(0!==a){var s=a,i=null;a=0;var o=127>r?64:65,d=160>s?129:193;if((n(r,64,126)||n(r,128,252))&&(i=188*(s-d)+r-o),n(i,8836,10715))return 48508+i;var l=null===i?null:f(i,g("jis0208"));return null===l&&p(r)&&e.prepend(r),null===l?u(t):l}return p(r)||128===r?r:n(r,161,223)?65216+r:n(r,129,159)||n(r,224,252)?(a=r,null):u(t)}}function D(e){e.fatal;this.handler=function(e,t){if(t===-1)return-1;if(H(t)||128===t)return t;if(165===t)return 92;if(8254===t)return 126;if(n(t,65377,65439))return t-65377+161;8722===t&&(t=65293);var a=x(t);if(null===a)return m(t);var r=q(a/188),s=31>r?129:193,i=a%188,o=63>i?64:65;return[r+s,i+o]}}function j(e){var t=e.fatal,a=0;this.handler=function(e,r){if(-1===r&&0!==a)return a=0,u(t);if(-1===r&&0===a)return-1;if(0!==a){var s=a,i=null;a=0,n(r,65,254)&&(i=190*(s-129)+(r-65));var o=null===i?null:f(i,g("euc-kr"));return null===i&&p(r)&&e.prepend(r),null===o?u(t):o}return p(r)?r:n(r,129,254)?(a=r,null):u(t)}}function U(e){e.fatal;this.handler=function(e,t){if(t===-1)return-1;if(H(t))return t;var a=h(t,g("euc-kr"));if(null===a)return m(t);var n=q(a/190)+129;return[n,a%190+65]}}function F(e,t){var a=e>>8,n=255&e;return t?[a,n]:[n,a]}function M(e,t){var a=t.fatal,r=null,s=null;this.handler=function(t,i){if(-1===i&&(null!==r||null!==s))return u(a);if(-1===i&&null===r&&null===s)return-1;if(null===r)return r=i,null;var o;if(o=e?(r<<8)+i:(i<<8)+r,r=null,null!==s){var d=s;return(s=null,n(o,56320,57343))?65536+1024*(d-55296)+(o-56320):(t.prepend(F(o,e)),u(a))}return n(o,55296,56319)?(s=o,null):n(o,56320,57343)?u(a):o}}function G(e,t){t.fatal;this.handler=function(t,a){if(a===-1)return-1;if(n(a,0,65535))return F(a,e);var r=F((a-65536>>10)+55296,e),s=F((1023&a-65536)+56320,e);return r.concat(s)}}function Z(e){e.fatal;this.handler=function(e,t){return-1===t?-1:p(t)?t:63360+t-128}}function Y(e){e.fatal;this.handler=function(e,t){return-1===t?-1:H(t)?t:n(t,63360,63487)?t-63360+128:m(t)}}"undefined"!=typeof t&&t.exports&&!a["encoding-indexes"]&&e("./encoding-indexes.js");var q=r,H=p,K=-1;c.prototype={endOfStream:function(){return!this.tokens.length},read:function(){return this.tokens.length?this.tokens.pop():K},prepend:function(e){if(Array.isArray(e))for(var t=e;t.length;)this.tokens.push(t.pop());else this.tokens.push(e)},push:function(e){if(Array.isArray(e))for(var t=e;t.length;)this.tokens.unshift(t.shift());else this.tokens.unshift(e)}};(function(){}).prototype={handler:function(){}},function(){}.prototype={handler:function(){}};var X=[{encodings:[{labels:["unicode-1-1-utf-8","utf-8","utf8"],name:"UTF-8"}],heading:"The Encoding"},{encodings:[{labels:["866","cp866","csibm866","ibm866"],name:"IBM866"},{labels:["csisolatin2","iso-8859-2","iso-ir-101","iso8859-2","iso88592","iso_8859-2","iso_8859-2:1987","l2","latin2"],name:"ISO-8859-2"},{labels:["csisolatin3","iso-8859-3","iso-ir-109","iso8859-3","iso88593","iso_8859-3","iso_8859-3:1988","l3","latin3"],name:"ISO-8859-3"},{labels:["csisolatin4","iso-8859-4","iso-ir-110","iso8859-4","iso88594","iso_8859-4","iso_8859-4:1988","l4","latin4"],name:"ISO-8859-4"},{labels:["csisolatincyrillic","cyrillic","iso-8859-5","iso-ir-144","iso8859-5","iso88595","iso_8859-5","iso_8859-5:1988"],name:"ISO-8859-5"},{labels:["arabic","asmo-708","csiso88596e","csiso88596i","csisolatinarabic","ecma-114","iso-8859-6","iso-8859-6-e","iso-8859-6-i","iso-ir-127","iso8859-6","iso88596","iso_8859-6","iso_8859-6:1987"],name:"ISO-8859-6"},{labels:["csisolatingreek","ecma-118","elot_928","greek","greek8","iso-8859-7","iso-ir-126","iso8859-7","iso88597","iso_8859-7","iso_8859-7:1987","sun_eu_greek"],name:"ISO-8859-7"},{labels:["csiso88598e","csisolatinhebrew","hebrew","iso-8859-8","iso-8859-8-e","iso-ir-138","iso8859-8","iso88598","iso_8859-8","iso_8859-8:1988","visual"],name:"ISO-8859-8"},{labels:["csiso88598i","iso-8859-8-i","logical"],name:"ISO-8859-8-I"},{labels:["csisolatin6","iso-8859-10","iso-ir-157","iso8859-10","iso885910","l6","latin6"],name:"ISO-8859-10"},{labels:["iso-8859-13","iso8859-13","iso885913"],name:"ISO-8859-13"},{labels:["iso-8859-14","iso8859-14","iso885914"],name:"ISO-8859-14"},{labels:["csisolatin9","iso-8859-15","iso8859-15","iso885915","iso_8859-15","l9"],name:"ISO-8859-15"},{labels:["iso-8859-16"],name:"ISO-8859-16"},{labels:["cskoi8r","koi","koi8","koi8-r","koi8_r"],name:"KOI8-R"},{labels:["koi8-ru","koi8-u"],name:"KOI8-U"},{labels:["csmacintosh","mac","macintosh","x-mac-roman"],name:"macintosh"},{labels:["dos-874","iso-8859-11","iso8859-11","iso885911","tis-620","windows-874"],name:"windows-874"},{labels:["cp1250","windows-1250","x-cp1250"],name:"windows-1250"},{labels:["cp1251","windows-1251","x-cp1251"],name:"windows-1251"},{labels:["ansi_x3.4-1968","ascii","cp1252","cp819","csisolatin1","ibm819","iso-8859-1","iso-ir-100","iso8859-1","iso88591","iso_8859-1","iso_8859-1:1987","l1","latin1","us-ascii","windows-1252","x-cp1252"],name:"windows-1252"},{labels:["cp1253","windows-1253","x-cp1253"],name:"windows-1253"},{labels:["cp1254","csisolatin5","iso-8859-9","iso-ir-148","iso8859-9","iso88599","iso_8859-9","iso_8859-9:1989","l5","latin5","windows-1254","x-cp1254"],name:"windows-1254"},{labels:["cp1255","windows-1255","x-cp1255"],name:"windows-1255"},{labels:["cp1256","windows-1256","x-cp1256"],name:"windows-1256"},{labels:["cp1257","windows-1257","x-cp1257"],name:"windows-1257"},{labels:["cp1258","windows-1258","x-cp1258"],name:"windows-1258"},{labels:["x-mac-cyrillic","x-mac-ukrainian"],name:"x-mac-cyrillic"}],heading:"Legacy single-byte encodings"},{encodings:[{labels:["chinese","csgb2312","csiso58gb231280","gb2312","gb_2312","gb_2312-80","gbk","iso-ir-58","x-gbk"],name:"GBK"},{labels:["gb18030"],name:"gb18030"}],heading:"Legacy multi-byte Chinese (simplified) encodings"},{encodings:[{labels:["big5","big5-hkscs","cn-big5","csbig5","x-x-big5"],name:"Big5"}],heading:"Legacy multi-byte Chinese (traditional) encodings"},{encodings:[{labels:["cseucpkdfmtjapanese","euc-jp","x-euc-jp"],name:"EUC-JP"},{labels:["csiso2022jp","iso-2022-jp"],name:"ISO-2022-JP"},{labels:["csshiftjis","ms932","ms_kanji","shift-jis","shift_jis","sjis","windows-31j","x-sjis"],name:"Shift_JIS"}],heading:"Legacy multi-byte Japanese encodings"},{encodings:[{labels:["cseuckr","csksc56011987","euc-kr","iso-ir-149","korean","ks_c_5601-1987","ks_c_5601-1989","ksc5601","ksc_5601","windows-949"],name:"EUC-KR"}],heading:"Legacy multi-byte Korean encodings"},{encodings:[{labels:["csiso2022kr","hz-gb-2312","iso-2022-cn","iso-2022-cn-ext","iso-2022-kr"],name:"replacement"},{labels:["utf-16be"],name:"UTF-16BE"},{labels:["utf-16","utf-16le"],name:"UTF-16LE"},{labels:["x-user-defined"],name:"x-user-defined"}],heading:"Legacy miscellaneous encodings"}],W={};X.forEach(function(e){e.encodings.forEach(function(e){e.labels.forEach(function(t){W[t]=e})})});var Q={},J={},V,$;Object.defineProperty&&(Object.defineProperty(E.prototype,"encoding",{get:function(){return this._encoding.name.toLowerCase()}}),Object.defineProperty(E.prototype,"fatal",{get:function(){return"fatal"===this._error_mode}}),Object.defineProperty(E.prototype,"ignoreBOM",{get:function(){return this._ignoreBOM}})),E.prototype.decode=function(e,t){var a;a="object"==typeof e&&e instanceof ArrayBuffer?new Uint8Array(e):"object"==typeof e&&"buffer"in e&&e.buffer instanceof ArrayBuffer?new Uint8Array(e.buffer,e.byteOffset,e.byteLength):new Uint8Array(0),t=i(t),this._do_not_flush||(this._decoder=J[this._encoding.name]({fatal:"fatal"===this._error_mode}),this._BOMseen=!1),this._do_not_flush=!!t.stream;for(var n=new c(a),r=[],o,d;(d=n.read(),d!==K)&&!(o=this._decoder.handler(n,d),-1===o);)null!==o&&(Array.isArray(o)?r.push.apply(r,o):r.push(o));if(!this._do_not_flush){do{if(o=this._decoder.handler(n,n.read()),-1===o)break;if(null===o)continue;Array.isArray(o)?r.push.apply(r,o):r.push(o)}while(!n.endOfStream());this._decoder=null}return function(e){return!s(["UTF-8","UTF-16LE","UTF-16BE"],this._encoding.name)||this._ignoreBOM||this._BOMseen||(0<e.length&&65279===e[0]?(this._BOMseen=!0,e.shift()):0<e.length&&(this._BOMseen=!0)),l(e)}.call(this,r)},Object.defineProperty&&Object.defineProperty(C.prototype,"encoding",{get:function(){return this._encoding.name.toLowerCase()}}),C.prototype.encode=function(e,t){e=e===void 0?"":e+"",t=i(t),this._do_not_flush||(this._encoder=Q[this._encoding.name]({fatal:"fatal"===this._fatal})),this._do_not_flush=!!t.stream;for(var a=new c(o(e)),n=[],r,s;(s=a.read(),s!==K)&&!(r=this._encoder.handler(a,s),-1===r);)Array.isArray(r)?n.push.apply(n,r):n.push(r);if(!this._do_not_flush){for(;r=this._encoder.handler(a,a.read()),-1!==r;)Array.isArray(r)?n.push.apply(n,r):n.push(r);this._encoder=null}return new Uint8Array(n)},Q["UTF-8"]=function(e){return new S(e)},J["UTF-8"]=function(e){return new A(e)},function(){"encoding-indexes"in a&&X.forEach(function(e){"Legacy single-byte encodings"!==e.heading||e.encodings.forEach(function(e){var t=e.name,a=g(t.toLowerCase());J[t]=function(e){return new k(a,e)},Q[t]=function(e){return new v(a,e)}})})}(),J.GBK=function(e){return new I(e)},Q.GBK=function(e){return new R(e,!0)},Q.gb18030=function(e){return new R(e)},J.gb18030=function(e){return new I(e)},Q.Big5=function(e){return new z(e)},J.Big5=function(e){return new O(e)},Q["EUC-JP"]=function(e){return new T(e)},J["EUC-JP"]=function(e){return new L(e)},Q["ISO-2022-JP"]=function(e){return new P(e)},J["ISO-2022-JP"]=function(e){return new B(e)},Q.Shift_JIS=function(e){return new D(e)},J.Shift_JIS=function(e){return new N(e)},Q["EUC-KR"]=function(e){return new U(e)},J["EUC-KR"]=function(e){return new j(e)},Q["UTF-16BE"]=function(e){return new G(!0,e)},J["UTF-16BE"]=function(e){return new M(!0,e)},Q["UTF-16LE"]=function(e){return new G(!1,e)},J["UTF-16LE"]=function(e){return new M(!1,e)},Q["x-user-defined"]=function(e){return new Y(e)},J["x-user-defined"]=function(e){return new Z(e)},a.TextEncoder||(a.TextEncoder=C),a.TextDecoder||(a.TextDecoder=E),"undefined"!=typeof t&&t.exports&&(t.exports={TextEncoder:a.TextEncoder,TextDecoder:a.TextDecoder,EncodingIndexes:a["encoding-indexes"]})})(this||{})},{"./encoding-indexes.js":6}],59:[function(e,t){(function(a){'use strict';function n(e){if(!e)throw new Error("forgot to pass buffer");return m.isBuffer(e)?e:e instanceof a.ArrayBuffer?m.from(e):e.buffer instanceof a.ArrayBuffer?1===e.BYTES_PER_ELEMENT?m.from(e):m.from(e.buffer):void 0}function r(e,t){return"string"==typeof e&&_.has(e)?c.resolve(_.get(e)):r.getShapefile(e,t).then(function(t){return"string"==typeof e&&_.set(e,t),t})}function s(e,t){return d(e).then(function(e){return r.parseZip(e,t)})}var i=e("proj4");i.default&&(i=i.default);var o=e("./unzip"),d=e("./binaryajax"),l=e("./parseShp"),p=e("parsedbf"),c=e("lie"),u=e("lru-cache"),m=e("buffer").Buffer,_=new u({max:20});r.combine=function(e){for(var t={type:"FeatureCollection",features:[]},a=0,n=e[0].length;a<n;)t.features.push({type:"Feature",geometry:e[0][a],properties:e[1][a]}),a++;return t},r.parseZip=function(e,t){e=n(e);var a=o(e),s=[];for(var d in t=t||[],a)-1===d.indexOf("__MACOSX")&&("shp"===d.slice(-3).toLowerCase()?(s.push(d.slice(0,-4)),a[d.slice(0,-3)+d.slice(-3).toLowerCase()]=a[d]):"prj"===d.slice(-3).toLowerCase()?a[d.slice(0,-3)+d.slice(-3).toLowerCase()]=i(a[d]):"json"===d.slice(-4).toLowerCase()||-1<t.indexOf(d.split(".").pop())?s.push(d.slice(0,-3)+d.slice(-3).toLowerCase()):("dbf"===d.slice(-3).toLowerCase()||"cpg"===d.slice(-3).toLowerCase())&&(a[d.slice(0,-3)+d.slice(-3).toLowerCase()]=a[d]));if(!s.length)throw new Error("no layers founds");var c=s.map(function(e){var n=e.lastIndexOf("."),s,i;return-1<n&&-1<e.slice(n).indexOf("json")?(s=JSON.parse(a[e]),s.fileName=e.slice(0,n)):-1<t.indexOf(e.slice(n+1))?(s=a[e],s.fileName=e):(a[e+".dbf"]&&(i=p(a[e+".dbf"],a[e+".cpg"])),s=r.combine([l(a[e+".shp"],a[e+".prj"]),i]),s.fileName=e),s});return 1===c.length?c[0]:c},r.getShapefile=function(e,t){return"string"==typeof e?".zip"===e.slice(-4).toLowerCase()?s(e,t):c.all([c.all([d(e+".shp"),d(e+".prj")]).then(function(e){var t=!1;try{e[1]&&(t=i(e[1]))}catch(a){t=!1}return l(e[0],t)}),c.all([d(e+".dbf"),d(e+".cpg")]).then(function(e){return p(e[0],e[1])})]).then(r.combine):new c(function(t){t(r.parseZip(e))})},r.parseShp=function(e,t){if(e=n(e),m.isBuffer(t)&&(t=t.toString()),"string"==typeof t)try{t=i(t)}catch(a){t=!1}return l(e)},r.parseDbf=function(e,t){return e=n(e),p(e,t)},t.exports=r}).call(this,"undefined"==typeof global?"undefined"==typeof self?"undefined"==typeof window?{}:window:self:global)},{"./binaryajax":2,"./parseShp":3,"./unzip":4,buffer:7,lie:35,"lru-cache":36,parsedbf:54,proj4:55}]},{},[59])(59)});
!function i(r,s,o){function a(e,t){if(!s[e]){if(!r[e]){var n="function"==typeof require&&require;if(!t&&n)return n(e,!0);if(u)return u(e,!0);throw(n=new Error("Cannot find module '"+e+"'")).code="MODULE_NOT_FOUND",n}n=s[e]={exports:{}},r[e][0].call(n.exports,function(t){return a(r[e][1][t]||t)},n,n.exports,i,r,s,o)}return s[e].exports}for(var u="function"==typeof require&&require,t=0;t<o.length;t++)a(o[t]);return a}({1:[function(t,e,n){window.turf={along:t("../node_modules/turf-along/index.js"),bezier:t("../node_modules/turf-bezier/index.js"),buffer:t("../node_modules/turf-buffer/index.js"),center:t("../node_modules/turf-center/index.js"),centroid:t("../node_modules/turf-centroid/index.js"),destination:t("../node_modules/turf-destination/index.js"),envelope:t("../node_modules/turf-envelope/index.js"),explode:t("../node_modules/turf-explode/index.js"),midpoint:t("../node_modules/turf-midpoint/index.js"),sample:t("../node_modules/turf-sample/index.js"),simplify:t("../node_modules/turf-simplify/index.js"),tin:t("../node_modules/turf-tin/index.js"),union:t("../node_modules/turf-union/index.js"),within:t("../node_modules/turf-within/index.js")}},{"../node_modules/turf-along/index.js":5,"../node_modules/turf-bezier/index.js":9,"../node_modules/turf-buffer/index.js":11,"../node_modules/turf-center/index.js":12,"../node_modules/turf-centroid/index.js":13,"../node_modules/turf-destination/index.js":14,"../node_modules/turf-envelope/index.js":16,"../node_modules/turf-explode/index.js":17,"../node_modules/turf-midpoint/index.js":22,"../node_modules/turf-sample/index.js":23,"../node_modules/turf-simplify/index.js":24,"../node_modules/turf-tin/index.js":25,"../node_modules/turf-union/index.js":26,"../node_modules/turf-within/index.js":27}],2:[function(t,e,n){e.exports=function(t){if(!t||!t.type)return null;var e=i[t.type];if(!e)return null;return"geometry"===e?{type:"FeatureCollection",features:[{type:"Feature",properties:{},geometry:t}]}:"feature"===e?{type:"FeatureCollection",features:[t]}:"featurecollection"===e?t:void 0};var i={Point:"geometry",MultiPoint:"geometry",LineString:"geometry",MultiLineString:"geometry",Polygon:"geometry",MultiPolygon:"geometry",GeometryCollection:"geometry",Feature:"feature",FeatureCollection:"featurecollection"}},{}],3:[function(t,e,n){var i,r;i=this,r=function(t){"use strict";function e(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])}function n(){}function c(){}function g(){}function i(){}function r(){}function s(){}function o(){}function p(t){this.message=t}function a(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t}function u(){0===arguments.length?p.call(this):1===arguments.length&&p.call(this,arguments[0])}function l(){}function d(){var t,e,n;this.x=null,this.y=null,this.z=null,0===arguments.length?d.call(this,0,0):1===arguments.length?(t=arguments[0],d.call(this,t.x,t.y,t.z)):2===arguments.length?(e=arguments[0],n=arguments[1],d.call(this,e,n,d.NULL_ORDINATE)):3===arguments.length&&(t=arguments[0],e=arguments[1],n=arguments[2],this.x=t,this.y=e,this.z=n)}function h(){if(this.dimensionsToTest=2,0===arguments.length)h.call(this,2);else if(1===arguments.length){var t=arguments[0];if(2!==t&&3!==t)throw new c;this.dimensionsToTest=t}}function f(){}function m(){}function y(t){this.message=t||""}function v(){}function x(t){this.message=t||""}function E(t){this.message=t||""}function I(){this.array_=[],arguments[0]instanceof m&&this.addAll(arguments[0])}function N(){var t,e;I.apply(this),0===arguments.length||(1===arguments.length?(e=arguments[0],this.ensureCapacity(e.length),this.add(e,!0)):2===arguments.length&&(t=arguments[0],e=arguments[1],this.ensureCapacity(t.length),this.add(t,e)))}function C(){var t,e,n,i;this.minx=null,this.maxx=null,this.miny=null,this.maxy=null,0===arguments.length?this.init():1===arguments.length?arguments[0]instanceof d?(t=arguments[0],this.init(t.x,t.x,t.y,t.y)):arguments[0]instanceof C&&(e=arguments[0],this.init(e)):2===arguments.length?(n=arguments[0],i=arguments[1],this.init(n.x,i.x,n.y,i.y)):4===arguments.length&&(t=arguments[0],e=arguments[1],n=arguments[2],i=arguments[3],this.init(t,e,n,i))}function S(){}function w(){S.call(this,"Projective point not representable on the Cartesian plane.")}function L(){}function R(t,e){return t.interfaces_&&-1<t.interfaces_().indexOf(e)}function T(){}function P(t){this.str=t}function b(t){this.value=t}function O(){}function _(){var t,e,n;this.hi=0,(this.lo=0)===arguments.length?this.init(0):1===arguments.length?"number"==typeof arguments[0]?(t=arguments[0],this.init(t)):arguments[0]instanceof _?(e=arguments[0],this.init(e)):"string"==typeof arguments[0]&&(n=arguments[0],_.call(this,_.parse(n))):2===arguments.length&&(e=arguments[0],n=arguments[1],this.init(e,n))}function M(){}function D(){}function A(){}function F(){var t,e,n,i,r,s,o,a,u;this.x=null,this.y=null,this.w=null,0===arguments.length?(this.x=0,this.y=0,this.w=1):1===arguments.length?(e=arguments[0],this.x=e.x,this.y=e.y,this.w=1):2===arguments.length?"number"==typeof arguments[0]&&"number"==typeof arguments[1]?(t=arguments[0],e=arguments[1],this.x=t,this.y=e,this.w=1):arguments[0]instanceof F&&arguments[1]instanceof F?(u=arguments[0],o=arguments[1],this.x=u.y*o.w-o.y*u.w,this.y=o.x*u.w-u.x*o.w,this.w=u.x*o.y-o.x*u.y):arguments[0]instanceof d&&arguments[1]instanceof d&&(a=arguments[0],n=arguments[1],this.x=a.y-n.y,this.y=n.x-a.x,this.w=a.x*n.y-n.x*a.y):3===arguments.length?(i=arguments[0],r=arguments[1],s=arguments[2],this.x=i,this.y=r,this.w=s):4===arguments.length&&(o=arguments[1],u=arguments[2],n=arguments[3],i=(a=arguments[0]).y-o.y,r=o.x-a.x,s=a.x*o.y-o.x*a.y,o=u.y-n.y,a=n.x-u.x,u=u.x*n.y-n.x*u.y,this.x=r*u-a*s,this.y=o*s-i*u,this.w=i*a-o*r)}function G(){}function q(){}function B(){this.envelope=null,this.factory=null,this.SRID=null,this.userData=null;var t=arguments[0];this.factory=t,this.SRID=t.getSRID()}function z(){}function V(){}function k(){}function Y(){}function U(){}function X(){}function H(){}function W(){}function j(){}function K(){}function Z(){}function J(){}function Q(){this.array_=[],arguments[0]instanceof m&&this.addAll(arguments[0])}function $(t){return null==t?Gs:t.color}function tt(t){return null==t?null:t.parent}function et(t,e){null!==t&&(t.color=e)}function nt(t){return null==t?null:t.left}function it(t){return null==t?null:t.right}function rt(){this.root_=null,this.size_=0}function st(){}function ot(){}function at(){this.array_=[],arguments[0]instanceof m&&this.addAll(arguments[0])}function ut(){}function lt(){}function ht(){}function ct(){}function ft(){this.geometries=null;var t=arguments[0];if(B.call(this,arguments[1]),null===t&&(t=[]),B.hasNullElements(t))throw new c;this.geometries=t}function gt(){ft.call(this,arguments[0],arguments[1])}function dt(){var t,e;this.geom=null,this.geomFact=null,this.bnRule=null,this.endpointMap=null,1===arguments.length?(e=arguments[0],dt.call(this,e,V.MOD2_BOUNDARY_RULE)):2===arguments.length&&(t=arguments[0],e=arguments[1],this.geom=t,this.geomFact=t.getFactory(),this.bnRule=e)}function pt(){this.count=null}function mt(){}function yt(){}function vt(){}function xt(){}function Et(){}function It(){}function Nt(){}function Ct(){this.points=null;var t=arguments[0];B.call(this,arguments[1]),this.init(t)}function St(){}function wt(){this.coordinates=null;var t=arguments[0];B.call(this,arguments[1]),this.init(t)}function Lt(){}function Rt(){this.shell=null,this.holes=null;var t=arguments[0],e=arguments[1];if(B.call(this,arguments[2]),null===t&&(t=this.getFactory().createLinearRing()),null===e&&(e=[]),B.hasNullElements(e))throw new c;if(t.isEmpty()&&B.hasNonEmptyElements(e))throw new c;this.shell=t,this.holes=e}function Tt(){ft.call(this,arguments[0],arguments[1])}function Pt(){var t,e;arguments[0]instanceof d&&arguments[1]instanceof Yt?(t=arguments[0],e=arguments[1],Pt.call(this,e.getCoordinateSequenceFactory().create(t),e)):R(arguments[0],D)&&arguments[1]instanceof Yt&&(Ct.call(this,arguments[0],arguments[1]),this.validateConstruction())}function bt(){ft.call(this,arguments[0],arguments[1])}function Ot(){var t;this.factory=null,this.isUserDataCopied=!1,0===arguments.length||1===arguments.length&&(t=arguments[0],this.factory=t)}function _t(){}function Mt(){}function Dt(){}function At(){}function Ft(){if(this.dimension=3,this.coordinates=null,1===arguments.length){if(arguments[0]instanceof Array){var t=arguments[0];Ft.call(this,t,3)}else if(Number.isInteger(arguments[0])){var e=arguments[0];this.coordinates=new Array(e).fill(null);for(var n=0;n<e;n++)this.coordinates[n]=new d}else if(R(arguments[0],D)){var i=arguments[0];if(null===i)return this.coordinates=new Array(0).fill(null),null;this.dimension=i.getDimension(),this.coordinates=new Array(i.size()).fill(null);for(n=0;n<this.coordinates.length;n++)this.coordinates[n]=i.getCoordinateCopy(n)}}else if(2===arguments.length)if(arguments[0]instanceof Array&&Number.isInteger(arguments[1])){var r=arguments[0],t=arguments[1];this.coordinates=r,this.dimension=t,null===r&&(this.coordinates=new Array(0).fill(null))}else if(Number.isInteger(arguments[0])&&Number.isInteger(arguments[1])){var s=arguments[0],r=arguments[1];this.coordinates=new Array(s).fill(null),this.dimension=r;for(n=0;n<s;n++)this.coordinates[n]=new d}}function Gt(){}function qt(n,i,r){var s=[0],o=!1;return n.push(s),{next:function(){var t,e=s[0];return!o&&e<i.length?(t=r?[i[e],r[e]]:i[e],s[0]++):(o=!0,n.splice(n.indexOf(s),1)),{done:o,value:t}}}}function Bt(){return this._values.length}function zt(){this.map_=new Us}function Vt(){var t,e;this.modelType=null,this.scale=null,0===arguments.length?this.modelType=Vt.FLOATING:1===arguments.length&&(arguments[0]instanceof kt?(t=arguments[0],(this.modelType=t)===Vt.FIXED&&this.setScale(1)):"number"==typeof arguments[0]?(e=arguments[0],this.modelType=Vt.FIXED,this.setScale(e)):arguments[0]instanceof Vt&&(e=arguments[0],this.modelType=e.modelType,this.scale=e.scale))}function kt(){this.name=null;var t=arguments[0];this.name=t,kt.nameToTypeMap.put(t,this)}function Yt(){var t,e,n,i;this.precisionModel=null,this.coordinateSequenceFactory=null,this.SRID=null,0===arguments.length?Yt.call(this,new Vt,0):1===arguments.length?R(arguments[0],G)?(t=arguments[0],Yt.call(this,new Vt,0,t)):arguments[0]instanceof Vt&&(e=arguments[0],Yt.call(this,e,0,Yt.getDefaultCoordinateSequenceFactory())):2===arguments.length?(n=arguments[0],i=arguments[1],Yt.call(this,n,i,Yt.getDefaultCoordinateSequenceFactory())):3===arguments.length&&(e=arguments[0],n=arguments[1],i=arguments[2],this.precisionModel=e,this.coordinateSequenceFactory=i,this.SRID=n)}function Ut(t){this.geometryFactory=t||new Yt}function Xt(t){this.parser=new Ut(t)}function Ht(){this.result=null,this.inputLines=Array(2).fill().map(function(){return Array(2)}),this.intPt=new Array(2).fill(null),this.intLineIndex=null,this._isProper=null,this.pa=null,this.pb=null,this.precisionModel=null,this.intPt[0]=new d,this.intPt[1]=new d,this.pa=this.intPt[0],this.pb=this.intPt[1],this.result=0}function Wt(){Ht.apply(this)}function jt(){}function Kt(){this.p=null,this.crossingCount=0,this.isPointOnSegment=!1;var t=arguments[0];this.p=t}function Zt(){}function Jt(){var t,e,n,i;this.p0=null,this.p1=null,0===arguments.length?Jt.call(this,new d,new d):1===arguments.length?(e=arguments[0],Jt.call(this,e.p0,e.p1)):2===arguments.length?(n=arguments[0],i=arguments[1],this.p0=n,this.p1=i):4===arguments.length&&(t=arguments[0],e=arguments[1],n=arguments[2],i=arguments[3],Jt.call(this,new d(t,e),new d(n,i)))}function Qt(){var t;this.matrix=null,0===arguments.length?(this.matrix=Array(3).fill().map(function(){return Array(3)}),this.setAll(lt.FALSE)):1===arguments.length&&("string"==typeof arguments[0]?(t=arguments[0],Qt.call(this),this.set(t)):arguments[0]instanceof Qt&&(t=arguments[0],Qt.call(this),this.matrix[L.INTERIOR][L.INTERIOR]=t.matrix[L.INTERIOR][L.INTERIOR],this.matrix[L.INTERIOR][L.BOUNDARY]=t.matrix[L.INTERIOR][L.BOUNDARY],this.matrix[L.INTERIOR][L.EXTERIOR]=t.matrix[L.INTERIOR][L.EXTERIOR],this.matrix[L.BOUNDARY][L.INTERIOR]=t.matrix[L.BOUNDARY][L.INTERIOR],this.matrix[L.BOUNDARY][L.BOUNDARY]=t.matrix[L.BOUNDARY][L.BOUNDARY],this.matrix[L.BOUNDARY][L.EXTERIOR]=t.matrix[L.BOUNDARY][L.EXTERIOR],this.matrix[L.EXTERIOR][L.INTERIOR]=t.matrix[L.EXTERIOR][L.INTERIOR],this.matrix[L.EXTERIOR][L.BOUNDARY]=t.matrix[L.EXTERIOR][L.BOUNDARY],this.matrix[L.EXTERIOR][L.EXTERIOR]=t.matrix[L.EXTERIOR][L.EXTERIOR]))}function $t(){this.areaBasePt=null,this.triangleCent3=new d,this.areasum2=0,this.cg3=new d,this.lineCentSum=new d,this.totalLength=0,this.ptCount=0,this.ptCentSum=new d;var t=arguments[0];this.areaBasePt=null,this.add(t)}function te(t){this.message=t||""}function ee(){this.array_=[]}function ne(){this.treeSet=new at,this.list=new I}function ie(){var t,e;this.geomFactory=null,this.inputPts=null,1===arguments.length?(e=arguments[0],ie.call(this,ie.extractCoordinates(e),e.getFactory())):2===arguments.length&&(t=arguments[0],e=arguments[1],this.inputPts=ne.filterCoordinates(t),this.geomFactory=e)}function re(){this.origin=null;var t=arguments[0];this.origin=t}function se(){this.inputGeom=null,this.factory=null,this.pruneEmptyGeometry=!0,this.preserveGeometryCollectionType=!0,this.preserveCollections=!1,this.preserveType=!1}function oe(){var t,e;this.snapTolerance=0,this.srcPts=null,this.seg=new Jt,this.allowSnappingToSourceVertices=!1,this._isClosed=!1,arguments[0]instanceof Ct&&"number"==typeof arguments[1]?(t=arguments[0],e=arguments[1],oe.call(this,t.getCoordinates(),e)):arguments[0]instanceof Array&&"number"==typeof arguments[1]&&(t=arguments[0],e=arguments[1],this.srcPts=t,this._isClosed=oe.isClosed(t),this.snapTolerance=e)}function ae(){this.srcGeom=null;var t=arguments[0];this.srcGeom=t}function ue(){var t,e,n;se.apply(this),this.snapTolerance=null,this.snapPts=null,this.isSelfSnap=!1,2===arguments.length?(e=arguments[0],n=arguments[1],this.snapTolerance=e,this.snapPts=n):3===arguments.length&&(t=arguments[0],e=arguments[1],n=arguments[2],this.snapTolerance=t,this.snapPts=e,this.isSelfSnap=n)}function le(){this.isFirst=!0,this.commonMantissaBitsCount=53,this.commonBits=0,this.commonSignExp=null}function he(){this.commonCoord=null,this.ccFilter=new ce}function ce(){this.commonBitsX=new le,this.commonBitsY=new le}function fe(){this.trans=null;var t=arguments[0];this.trans=t}function ge(){this.parent=null,this.atStart=null,this.max=null,this.index=null,this.subcollectionIterator=null;var t=arguments[0];this.parent=t,this.atStart=!0,this.index=0,this.max=t.getNumGeometries()}function de(){if(this.boundaryRule=V.OGC_SFS_BOUNDARY_RULE,this.isIn=null,this.numBoundaries=null,0!==arguments.length&&1===arguments.length){var t=arguments[0];if(null===t)throw new c;this.boundaryRule=t}}function pe(){}function me(){}function ye(){this.pts=null,this.data=null;var t=arguments[0],e=arguments[1];this.pts=t,this.data=e}function ve(){}function xe(){this.bounds=null,this.item=null;var t=arguments[0],e=arguments[1];this.bounds=t,this.item=e}function Ee(){this._size=null,this.items=null,this._size=0,this.items=new I,this.items.add(null)}function Ie(){}function Ne(){}function Ce(){var t;this.childBoundables=new I,this.bounds=null,this.level=null,0===arguments.length||1===arguments.length&&(t=arguments[0],this.level=t)}function Se(){this.boundable1=null,this.boundable2=null,this._distance=null,this.itemDistance=null;var t=arguments[0],e=arguments[1],n=arguments[2];this.boundable1=t,this.boundable2=e,this.itemDistance=n,this._distance=this.distance()}function we(){var t;this.root=null,this.built=!1,this.itemBoundables=new I,this.nodeCapacity=null,0===arguments.length?we.call(this,we.DEFAULT_NODE_CAPACITY):1===arguments.length&&(l.isTrue(1<(t=arguments[0]),"Node capacity must be greater than 1"),this.nodeCapacity=t)}function Le(){}function Re(){var t;0===arguments.length?Re.call(this,Re.DEFAULT_NODE_CAPACITY):1===arguments.length&&(t=arguments[0],we.call(this,t))}function Te(){Ce.call(this,arguments[0])}function Pe(){}function be(){this.segString=null,this.coord=null,this.segmentIndex=null,this.segmentOctant=null,this._isInterior=null;var t=arguments[0],e=arguments[1],n=arguments[2],i=arguments[3];this.segString=t,this.coord=new d(e),this.segmentIndex=n,this.segmentOctant=i,this._isInterior=!e.equals2D(t.getCoordinate(n))}function Oe(){this.nodeMap=new rt,this.edge=null;var t=arguments[0];this.edge=t}function _e(){this.nodeList=null,this.edge=null,this.nodeIt=null,this.currNode=null,this.nextNode=null;var t=arguments[this.currSegIndex=0];this.nodeList=t,this.edge=t.getEdge(),this.nodeIt=t.iterator(),this.readNextNode()}function Me(){}function De(){this.nodeList=new Oe(this),this.pts=null,this.data=null;var t=arguments[0],e=arguments[1];this.pts=t,this.data=e}function Ae(){this.tempEnv1=new C,this.tempEnv2=new C,this.overlapSeg1=new Jt,this.overlapSeg2=new Jt}function Fe(){this.pts=null,this.start=null,this.end=null,this.env=null,this.context=null,this.id=null;var t=arguments[0],e=arguments[1],n=arguments[2],i=arguments[3];this.pts=t,this.start=e,this.end=n,this.context=i}function Ge(){}function qe(){}function Be(){}function ze(){var t;this.segInt=null,0===arguments.length||1===arguments.length&&(t=arguments[0],this.setSegmentIntersector(t))}function Ve(){this.monoChains=new I,this.index=new Re,this.idCounter=0,this.nodedSegStrings=null,(this.nOverlaps=0)===arguments.length||1===arguments.length&&ze.call(this,arguments[0])}function ke(){Ae.apply(this),this.si=null;var t=arguments[0];this.si=t}function Ye(){var t,e;this.pt=null,1===arguments.length?p.call(this,arguments[0]):2===arguments.length&&(t=arguments[0],e=arguments[1],p.call(this,Ye.msgWithCoord(t,e)),this.pt=new d(e))}function Ue(){}function Xe(){this.findAllIntersections=!1,this.isCheckEndSegmentsOnly=!1,this.li=null,this.interiorIntersection=null,this.intSegments=null,this.intersections=new I,this.intersectionCount=0,this.keepIntersections=!0;var t=arguments[0];this.li=t,this.interiorIntersection=null}function He(){this.li=new Wt,this.segStrings=null,this.findAllIntersections=!1,this.segInt=null,this._isValid=!0;var t=arguments[0];this.segStrings=t}function We(){this.nv=null;var t=arguments[0];this.nv=new He(We.toSegmentStrings(t))}function je(){this.mapOp=null;var t=arguments[0];this.mapOp=t}function Ke(){}function Ze(){var t;if(this.location=null,1===arguments.length){if(arguments[0]instanceof Array){var e=arguments[0];this.init(e.length)}else if(Number.isInteger(arguments[0])){var n=arguments[0];this.init(1),this.location[Ke.ON]=n}else if(arguments[0]instanceof Ze){var i=arguments[0];if(this.init(i.location.length),null!==i)for(var r=0;r<this.location.length;r++)this.location[r]=i.location[r]}}else 3===arguments.length&&(t=arguments[0],e=arguments[1],n=arguments[2],this.init(3),this.location[Ke.ON]=t,this.location[Ke.LEFT]=e,this.location[Ke.RIGHT]=n)}function Je(){var t,e,n,i,r,s;this.elt=new Array(2).fill(null),1===arguments.length?Number.isInteger(arguments[0])?(t=arguments[0],this.elt[0]=new Ze(t),this.elt[1]=new Ze(t)):arguments[0]instanceof Je&&(e=arguments[0],this.elt[0]=new Ze(e.elt[0]),this.elt[1]=new Ze(e.elt[1])):2===arguments.length?(e=arguments[0],n=arguments[1],this.elt[0]=new Ze(L.NONE),this.elt[1]=new Ze(L.NONE),this.elt[e].setLocation(n)):3===arguments.length?(i=arguments[0],r=arguments[1],s=arguments[2],this.elt[0]=new Ze(i,r,s),this.elt[1]=new Ze(i,r,s)):4===arguments.length&&(n=arguments[0],i=arguments[1],r=arguments[2],s=arguments[3],this.elt[0]=new Ze(L.NONE,L.NONE,L.NONE),this.elt[1]=new Ze(L.NONE,L.NONE,L.NONE),this.elt[n].setLocations(i,r,s))}function Qe(){this.startDe=null,this.maxNodeDegree=-1,this.edges=new I,this.pts=new I,this.label=new Je(L.NONE),this.ring=null,this._isHole=null,this.shell=null,this.holes=new I,this.geometryFactory=null;var t=arguments[0],e=arguments[1];this.geometryFactory=e,this.computePoints(t),this.computeRing()}function $e(){Qe.call(this,arguments[0],arguments[1])}function tn(){Qe.call(this,arguments[0],arguments[1])}function en(){var t;this.label=null,this._isInResult=!1,this._isCovered=!1,this._isCoveredSet=!1,this._isVisited=!1,0===arguments.length||1===arguments.length&&(t=arguments[0],this.label=t)}function nn(){en.apply(this),this.coord=null,this.edges=null;var t=arguments[0],e=arguments[1];this.coord=t,this.edges=e,this.label=new Je(0,L.NONE)}function rn(){this.nodeMap=new rt,this.nodeFact=null;var t=arguments[0];this.nodeFact=t}function sn(){var t,e,n,i;this.edge=null,this.label=null,this.node=null,this.p0=null,this.p1=null,this.dx=null,this.dy=null,this.quadrant=null,1===arguments.length?(t=arguments[0],this.edge=t):3===arguments.length?(e=arguments[0],n=arguments[1],i=arguments[2],sn.call(this,e,n,i,null)):4===arguments.length&&(t=arguments[0],e=arguments[1],n=arguments[2],i=arguments[3],sn.call(this,t),this.init(e,n),this.label=i)}function on(){this._isForward=null,this._isInResult=!1,this._isVisited=!1,this.sym=null,this.next=null,this.nextMin=null,this.edgeRing=null,this.minEdgeRing=null,this.depth=[0,-999,-999];var t=arguments[0],e=arguments[1];sn.call(this,t),(this._isForward=e)?this.init(t.getCoordinate(0),t.getCoordinate(1)):(e=t.getNumPoints()-1,this.init(t.getCoordinate(e),t.getCoordinate(e-1))),this.computeDirectedLabel()}function an(){}function un(){var t;this.edges=new I,this.nodes=null,this.edgeEndList=new I,0===arguments.length?this.nodes=new rn(new an):1===arguments.length&&(t=arguments[0],this.nodes=new rn(t))}function ln(){this.geometryFactory=null,this.shellList=new I;var t=arguments[0];this.geometryFactory=t}function hn(){this.op=null,this.geometryFactory=null,this.ptLocator=null,this.lineEdgesList=new I,this.resultLineList=new I;var t=arguments[0],e=arguments[1],n=arguments[2];this.op=t,this.geometryFactory=e,this.ptLocator=n}function cn(){this.op=null,this.geometryFactory=null,this.resultPointList=new I;var t=arguments[0],e=arguments[1];this.op=t,this.geometryFactory=e}function fn(){}function gn(){this.geom=null;var t=arguments[0];this.geom=t}function dn(){this.edgeMap=new rt,this.edgeList=null,this.ptInAreaLocation=[L.NONE,L.NONE]}function pn(){dn.apply(this),this.resultAreaEdgeList=null,this.label=null,this.SCANNING_FOR_INCOMING=1,this.LINKING_TO_OUTGOING=2}function mn(){an.apply(this)}function yn(){this.mce=null,this.chainIndex=null;var t=arguments[0],e=arguments[1];this.mce=t,this.chainIndex=e}function vn(){var t,e,n;this.label=null,this.xValue=null,this.eventType=null,this.insertEvent=null,this.deleteEventIndex=null,this.obj=null,2===arguments.length?(e=arguments[0],n=arguments[1],this.eventType=vn.DELETE,this.xValue=e,this.insertEvent=n):3===arguments.length&&(t=arguments[0],e=arguments[1],n=arguments[2],this.eventType=vn.INSERT,this.label=t,this.xValue=e,this.obj=n)}function xn(){}function En(){this._hasIntersection=!1,this.hasProper=!1,this.hasProperInterior=!1,this.properIntersectionPoint=null,this.li=null,this.includeProper=null,this.recordIsolated=null,this.isSelfIntersection=null,this.numIntersections=0,this.numTests=0,this.bdyNodes=null,this._isDone=!1,this.isDoneWhenProperInt=!1;var t=arguments[0],e=arguments[1],n=arguments[2];this.li=t,this.includeProper=e,this.recordIsolated=n}function In(){xn.apply(this),this.events=new I,this.nOverlaps=null}function Nn(){this.min=g.POSITIVE_INFINITY,this.max=g.NEGATIVE_INFINITY}function Cn(){}function Sn(){Nn.apply(this),this.item=null;var t=arguments[0],e=arguments[1],n=arguments[2];this.min=t,this.max=e,this.item=n}function wn(){Nn.apply(this),this.node1=null,this.node2=null;var t=arguments[0],e=arguments[1];this.node1=t,this.node2=e,this.buildExtent(this.node1,this.node2)}function Ln(){this.leaves=new I,this.root=null,this.level=0}function Rn(){var t,e;this.lines=null,this.isForcedToLineString=!1,1===arguments.length?(e=arguments[0],this.lines=e):2===arguments.length&&(t=arguments[0],e=arguments[1],this.lines=t,this.isForcedToLineString=e)}function Tn(){this.items=new I}function Pn(){this.index=null;var t=arguments[0];if(!R(t,Lt))throw new c;this.index=new On(t)}function bn(){this.counter=null;var t=arguments[0];this.counter=t}function On(){this.index=new Ln;var t=arguments[0];this.init(t)}function _n(){this.coord=null,this.segmentIndex=null,this.dist=null;var t=arguments[0],e=arguments[1],n=arguments[2];this.coord=new d(t),this.segmentIndex=e,this.dist=n}function Mn(){this.nodeMap=new rt,this.edge=null;var t=arguments[0];this.edge=t}function Dn(){}function An(){this.e=null,this.pts=null,this.startIndex=null,this.env1=new C,this.env2=new C;var t=arguments[0];this.e=t,this.pts=t.getCoordinates();t=new Dn;this.startIndex=t.getChainStartIndices(this.pts)}function Fn(){this.depth=Array(2).fill().map(function(){return Array(3)});for(var t=0;t<2;t++)for(var e=0;e<3;e++)this.depth[t][e]=Fn.NULL_VALUE}function Gn(){var t,e;en.apply(this),this.pts=null,this.env=null,this.eiList=new Mn(this),this.name=null,this.mce=null,this._isIsolated=!0,this.depth=new Fn,this.depthDelta=0,1===arguments.length?(e=arguments[0],Gn.call(this,e,null)):2===arguments.length&&(t=arguments[0],e=arguments[1],this.pts=t,this.label=e)}function qn(){var t,e,n;un.apply(this),this.parentGeom=null,this.lineEdgeMap=new zt,this.boundaryNodeRule=null,this.useBoundaryDeterminationRule=!0,this.argIndex=null,this.boundaryNodes=null,this._hasTooFewPoints=!1,this.invalidPoint=null,this.areaPtLocator=null,this.ptLocator=new de,2===arguments.length?(e=arguments[0],n=arguments[1],qn.call(this,e,n,V.OGC_SFS_BOUNDARY_RULE)):3===arguments.length&&(t=arguments[0],e=arguments[1],n=arguments[2],this.argIndex=t,this.parentGeom=e,this.boundaryNodeRule=n,null!==e&&this.add(e))}function Bn(){var t,e,n;this.li=new Wt,this.resultPrecisionModel=null,this.arg=null,1===arguments.length?(e=arguments[0],this.setComputationPrecision(e.getPrecisionModel()),this.arg=new Array(1).fill(null),this.arg[0]=new qn(0,e)):2===arguments.length?(n=arguments[0],t=arguments[1],Bn.call(this,n,t,V.OGC_SFS_BOUNDARY_RULE)):3===arguments.length&&(e=arguments[1],n=arguments[2],0<=(t=arguments[0]).getPrecisionModel().compareTo(e.getPrecisionModel())?this.setComputationPrecision(t.getPrecisionModel()):this.setComputationPrecision(e.getPrecisionModel()),this.arg=new Array(2).fill(null),this.arg[0]=new qn(0,t,n),this.arg[1]=new qn(1,e,n))}function zn(){this.pts=null,this._orientation=null;var t=arguments[0];this.pts=t,this._orientation=zn.orientation(t)}function Vn(){this.edges=new I,this.ocaMap=new rt}function kn(){this.ptLocator=new de,this.geomFact=null,this.resultGeom=null,this.graph=null,this.edgeList=new Vn,this.resultPolyList=new I,this.resultLineList=new I,this.resultPointList=new I;var t=arguments[0],e=arguments[1];Bn.call(this,t,e),this.graph=new un(new mn),this.geomFact=t.getFactory()}function Yn(){this.geom=new Array(2).fill(null),this.snapTolerance=null,this.cbr=null;var t=arguments[0],e=arguments[1];this.geom[0]=t,this.geom[1]=e,this.computeSnapTolerance()}function Un(){this.geom=new Array(2).fill(null);var t=arguments[0],e=arguments[1];this.geom[0]=t,this.geom[1]=e}function Xn(){this.factory=null,this.interiorPoint=null;var t=arguments[this.maxWidth=0];this.factory=t.getFactory(),this.add(t)}function Hn(){this.poly=null,this.centreY=null,this.hiY=g.MAX_VALUE,this.loY=-g.MAX_VALUE;var t=arguments[0];this.poly=t,this.hiY=t.getEnvelopeInternal().getMaxY(),this.loY=t.getEnvelopeInternal().getMinY(),this.centreY=Xn.avg(this.loY,this.hiY)}function Wn(){this.centroid=null,this.minDistance=g.MAX_VALUE,this.interiorPoint=null;var t=arguments[0];this.centroid=t.getCentroid().getCoordinate(),this.addInterior(t),null===this.interiorPoint&&this.addEndpoints(t)}function jn(){this.centroid=null,this.minDistance=g.MAX_VALUE,this.interiorPoint=null;var t=arguments[0];this.centroid=t.getCentroid().getCoordinate(),this.add(t)}function Kn(){}function Zn(){this.p0=null,this.p1=null,this.p2=null;var t=arguments[0],e=arguments[1],n=arguments[2];this.p0=t,this.p1=e,this.p2=n}function Jn(){this.input=null,this.extremalPts=null,this.centre=null;var t=arguments[this.radius=0];this.input=t}function Qn(){var t,e;this.inputGeom=null,this.isConvex=null,this.convexHullPts=null,this.minBaseSeg=new Jt,this.minWidthPt=null,this.minPtIndex=null,this.minWidth=0,1===arguments.length?(e=arguments[0],Qn.call(this,e,!1)):2===arguments.length&&(t=arguments[0],e=arguments[1],this.inputGeom=t,this.isConvex=e)}function $n(){this.inputGeom=null,this.distanceTolerance=null;var t=arguments[0];this.inputGeom=t}function ti(){se.apply(this),this.distanceTolerance=null;var t=arguments[0];this.distanceTolerance=t}function ei(){this._orig=null,this._sym=null,this._next=null;var t=arguments[0];this._orig=t}function ni(){this._isMarked=!1,ei.call(this,arguments[0])}function ii(){this.vertexMap=new zt}function ri(){this._isStart=!1,ni.call(this,arguments[0])}function si(){ii.apply(this)}function oi(){this.result=null,this.factory=null,this.graph=null,this.lines=new I,this.nodeEdgeStack=new ee,this.ringStartEdge=null,this.graph=new si}function ai(){this.items=new I,this.subnode=new Array(4).fill(null)}function ui(){}function li(){this.pt=new d,this.level=0,this.env=null;var t=arguments[0];this.computeKey(t)}function hi(){ai.apply(this),this.env=null,this.centrex=null,this.centrey=null,this.level=null;var t=arguments[0],e=arguments[1];this.env=t,this.level=e,this.centrex=(t.getMinX()+t.getMaxX())/2,this.centrey=(t.getMinY()+t.getMaxY())/2}function ci(){}function fi(){ai.apply(this)}function gi(){this.root=null,this.minExtent=1,this.root=new fi}function di(t){this.geometryFactory=t||new Yt}function pi(t){this.geometryFactory=t||new Yt,this.precisionModel=this.geometryFactory.getPrecisionModel(),this.parser=new di(this.geometryFactory)}function mi(){this.parser=new di(this.geometryFactory)}function yi(t){this.geometryFactory=t||new Yt,this.precisionModel=this.geometryFactory.getPrecisionModel(),this.parser=new Ut(this.geometryFactory)}function vi(t){return[t.x,t.y]}function xi(t){this.geometryFactory=t||new Yt}function Ei(){var t,e;this.noder=null,this.scaleFactor=null,this.offsetX=null,this.offsetY=null,this.isScaled=!1,2===arguments.length?(t=arguments[0],e=arguments[1],Ei.call(this,t,e,0,0)):4===arguments.length&&(t=arguments[0],e=arguments[1],this.noder=t,this.scaleFactor=e,this.isScaled=!this.isIntegerPrecision())}function Ii(){var t,e;this.inputGeom=null,this.isClosedEndpointsInInterior=!0,this.nonSimpleLocation=null,1===arguments.length?(e=arguments[0],this.inputGeom=e):2===arguments.length&&(t=arguments[0],e=arguments[1],this.inputGeom=t,this.isClosedEndpointsInInterior=!e.isInBoundary(2))}function Ni(){this.pt=null,this.isClosed=null,this.degree=null;var t=arguments[0];this.pt=t,this.isClosed=!1,this.degree=0}function Ci(){var t,e,n,i;this.quadrantSegments=Ci.DEFAULT_QUADRANT_SEGMENTS,this.endCapStyle=Ci.CAP_ROUND,this.joinStyle=Ci.JOIN_ROUND,this.mitreLimit=Ci.DEFAULT_MITRE_LIMIT,this._isSingleSided=!1,this.simplifyFactor=Ci.DEFAULT_SIMPLIFY_FACTOR,0===arguments.length||(1===arguments.length?(e=arguments[0],this.setQuadrantSegments(e)):2===arguments.length?(n=arguments[0],i=arguments[1],this.setQuadrantSegments(n),this.setEndCapStyle(i)):4===arguments.length&&(t=arguments[0],e=arguments[1],n=arguments[2],i=arguments[3],this.setQuadrantSegments(t),this.setEndCapStyle(e),this.setJoinStyle(n),this.setMitreLimit(i)))}function Si(){this.minIndex=-1,this.minCoord=null,this.minDe=null,this.orientedDe=null}function wi(){this.array_=[]}function Li(){this.finder=null,this.dirEdgeList=new I,this.nodes=new I,this.rightMostCoord=null,this.env=null,this.finder=new Si}function Ri(){this.inputLine=null,this.distanceTol=null,this.isDeleted=null,this.angleOrientation=Zt.COUNTERCLOCKWISE;var t=arguments[0];this.inputLine=t}function Ti(){this.ptList=null,this.precisionModel=null,this.minimimVertexDistance=0,this.ptList=new I}function Pi(){this.maxCurveSegmentError=0,this.filletAngleQuantum=null,this.closingSegLengthFactor=1,this.segList=null,this.distance=0,this.precisionModel=null,this.bufParams=null,this.li=null,this.s0=null,this.s1=null,this.s2=null,this.seg0=new Jt,this.seg1=new Jt,this.offset0=new Jt,this.offset1=new Jt,this.side=0,this._hasNarrowConcaveAngle=!1;var t=arguments[0],e=arguments[1],n=arguments[2];this.precisionModel=t,this.bufParams=e,this.li=new Wt,this.filletAngleQuantum=Math.PI/2/e.getQuadrantSegments(),8<=e.getQuadrantSegments()&&e.getJoinStyle()===Ci.JOIN_ROUND&&(this.closingSegLengthFactor=Pi.MAX_CLOSING_SEG_LEN_FACTOR),this.init(n)}function bi(){this.distance=0,this.precisionModel=null,this.bufParams=null;var t=arguments[0],e=arguments[1];this.precisionModel=t,this.bufParams=e}function Oi(){this.subgraphs=null,this.seg=new Jt,this.cga=new Zt;var t=arguments[0];this.subgraphs=t}function _i(){this.upwardSeg=null,this.leftDepth=null;var t=arguments[0],e=arguments[1];this.upwardSeg=new Jt(t),this.leftDepth=e}function Mi(){this.inputGeom=null,this.distance=null,this.curveBuilder=null,this.curveList=new I;var t=arguments[0],e=arguments[1],n=arguments[2];this.inputGeom=t,this.distance=e,this.curveBuilder=n}function Di(){this._hasIntersection=!1,this.hasProper=!1,this.hasProperInterior=!1,this.hasInterior=!1,this.properIntersectionPoint=null,this.li=null,this.isSelfIntersection=null,this.numIntersections=0,this.numInteriorIntersections=0,this.numProperIntersections=0;var t=arguments[this.numTests=0];this.li=t}function Ai(){this.bufParams=null,this.workingPrecisionModel=null,this.workingNoder=null,this.geomFact=null,this.graph=null,this.edgeList=new Vn;var t=arguments[0];this.bufParams=t}function Fi(){this.li=new Wt,this.segStrings=null;var t=arguments[0];this.segStrings=t}function Gi(){this.li=null,this.pt=null,this.originalPt=null,this.ptScaled=null,this.p0Scaled=null,this.p1Scaled=null,this.scaleFactor=null,this.minx=null,this.maxx=null,this.miny=null,this.maxy=null,this.corner=new Array(4).fill(null),this.safeEnv=null;var t=arguments[0],e=arguments[1],n=arguments[2];if(this.originalPt=t,this.pt=t,this.scaleFactor=e,this.li=n,e<=0)throw new c;1!==e&&(this.pt=new d(this.scale(t.x),this.scale(t.y)),this.p0Scaled=new d,this.p1Scaled=new d),this.initCorners(this.pt)}function qi(){this.tempEnv1=new C,this.selectedSegment=new Jt}function Bi(){this.index=null;var t=arguments[0];this.index=t}function zi(){qi.apply(this),this.hotPixel=null,this.parentEdge=null,this.hotPixelVertexIndex=null,this._isNodeAdded=!1;var t=arguments[0],e=arguments[1],n=arguments[2];this.hotPixel=t,this.parentEdge=e,this.hotPixelVertexIndex=n}function Vi(){this.li=null,this.interiorIntersections=null;var t=arguments[0];this.li=t,this.interiorIntersections=new I}function ki(){this.pm=null,this.li=null,this.scaleFactor=null,this.noder=null,this.pointSnapper=null,this.nodedSegStrings=null;var t=arguments[0];this.pm=t,this.li=new Wt,this.li.setPrecisionModel(t),this.scaleFactor=t.getScale()}function Yi(){var t,e;this.argGeom=null,this.distance=null,this.bufParams=new Ci,this.resultGeometry=null,this.saveException=null,1===arguments.length?(e=arguments[0],this.argGeom=e):2===arguments.length&&(t=arguments[0],e=arguments[1],this.argGeom=t,this.bufParams=e)}function Ui(){this.comps=null;var t=arguments[0];this.comps=t}function Xi(){var t,e,n;this.component=null,this.segIndex=null,this.pt=null,2===arguments.length?(e=arguments[0],n=arguments[1],Xi.call(this,e,Xi.INSIDE_AREA,n)):3===arguments.length&&(t=arguments[0],e=arguments[1],n=arguments[2],this.component=t,this.segIndex=e,this.pt=n)}function Hi(){this.pts=null;var t=arguments[0];this.pts=t}function Wi(){this.locations=null;var t=arguments[0];this.locations=t}function ji(){var t,e,n;this.geom=null,this.terminateDistance=0,this.ptLocator=new de,this.minDistanceLocation=null,this.minDistance=g.MAX_VALUE,2===arguments.length?(e=arguments[0],n=arguments[1],ji.call(this,e,n,0)):3===arguments.length&&(t=arguments[0],e=arguments[1],n=arguments[2],this.geom=new Array(2).fill(null),this.geom[0]=t,this.geom[1]=e,this.terminateDistance=n)}function Ki(){this.factory=null,this.directedEdges=new I,this.coordinates=null;var t=arguments[0];this.factory=t}function Zi(){this._isMarked=!1,this._isVisited=!1,this.data=null}function Ji(){Zi.apply(this),this.parentEdge=null,this.from=null,this.to=null,this.p0=null,this.p1=null,this.sym=null,this.edgeDirection=null,this.quadrant=null,this.angle=null;var t=arguments[0],e=arguments[1],n=arguments[2],i=arguments[3];this.from=t,this.to=e,this.edgeDirection=i,this.p0=t.getCoordinate(),this.p1=n;t=this.p1.x-this.p0.x,n=this.p1.y-this.p0.y;this.quadrant=Ge.quadrant(t,n),this.angle=Math.atan2(n,t)}function Qi(){Ji.call(this,arguments[0],arguments[1],arguments[2],arguments[3])}function $i(){var t,e;Zi.apply(this),this.dirEdge=null,0===arguments.length||2===arguments.length&&(t=arguments[0],e=arguments[1],this.setDirectedEdges(t,e))}function tr(){this.outEdges=new I,this.sorted=!1}function er(){var t,e;Zi.apply(this),this.pt=null,this.deStar=null,1===arguments.length?(e=arguments[0],er.call(this,e,new tr)):2===arguments.length&&(t=arguments[0],e=arguments[1],this.pt=t,this.deStar=e)}function nr(){$i.apply(this),this.line=null;var t=arguments[0];this.line=t}function ir(){this.nodeMap=new rt}function rr(){this.edges=new Q,this.dirEdges=new Q,this.nodeMap=new ir}function sr(){rr.apply(this)}function or(){this.graph=new sr,this.mergedLineStrings=null,this.factory=null,this.edgeStrings=null}function ar(){this.edgeRing=null,this.next=null,this.label=-1,Ji.call(this,arguments[0],arguments[1],arguments[2],arguments[3])}function ur(){$i.apply(this),this.line=null;var t=arguments[0];this.line=t}function lr(){this.factory=null,this.deList=new I,this.lowestEdge=null,this.ring=null,this.ringPts=null,this.holes=null,this.shell=null,this._isHole=null,this._isProcessed=!1,this._isIncludedSet=!1,this._isIncluded=!1;var t=arguments[0];this.factory=t}function hr(){}function cr(){rr.apply(this),this.factory=null;var t=arguments[0];this.factory=t}function fr(){var t;this.lineStringAdder=new gr(this),this.graph=null,this.dangles=new I,this.cutEdges=new I,this.invalidRingLines=new I,this.holeList=null,this.shellList=null,this.polyList=null,this.isCheckingRingsValid=!0,this.extractOnlyPolygonal=null,this.geomFactory=null,0===arguments.length?fr.call(this,!1):1===arguments.length&&(t=arguments[0],this.extractOnlyPolygonal=t)}function gr(){this.p=null;var t=arguments[0];this.p=t}function dr(){}function pr(){var t;this.edgeEnds=new I,1===arguments.length?(t=arguments[0],pr.call(this,null,t)):2===arguments.length&&(t=arguments[1],sn.call(this,t.getEdge(),t.getCoordinate(),t.getDirectedCoordinate(),new Je(t.getLabel())),this.insert(t))}function mr(){dn.apply(this)}function yr(){nn.call(this,arguments[0],arguments[1])}function vr(){an.apply(this)}function xr(){this.li=new Wt,this.ptLocator=new de,this.arg=null,this.nodes=new rn(new vr),this.im=null,this.isolatedEdges=new I,this.invalidPoint=null;var t=arguments[0];this.arg=t}function Er(){this.rectEnv=null;var t=arguments[0];this.rectEnv=t.getEnvelopeInternal()}function Ir(){this.li=new Wt,this.rectEnv=null,this.diagUp0=null,this.diagUp1=null,this.diagDown0=null,this.diagDown1=null;var t=arguments[0];this.rectEnv=t,this.diagUp0=new d(t.getMinX(),t.getMinY()),this.diagUp1=new d(t.getMaxX(),t.getMaxY()),this.diagDown0=new d(t.getMinX(),t.getMaxY()),this.diagDown1=new d(t.getMaxX(),t.getMinY())}function Nr(){this._isDone=!1}function Cr(){this.rectangle=null,this.rectEnv=null;var t=arguments[0];this.rectangle=t,this.rectEnv=t.getEnvelopeInternal()}function Sr(){Nr.apply(this),this.rectEnv=null,this._intersects=!1;var t=arguments[0];this.rectEnv=t}function wr(){Nr.apply(this),this.rectSeq=null,this.rectEnv=null,this._containsPoint=!1;var t=arguments[0];this.rectSeq=t.getExteriorRing().getCoordinateSequence(),this.rectEnv=t.getEnvelopeInternal()}function Lr(){Nr.apply(this),this.rectEnv=null,this.rectIntersector=null,this.hasIntersection=!1,this.p0=new d,this.p1=new d;var t=arguments[0];this.rectEnv=t.getEnvelopeInternal(),this.rectIntersector=new Ir(this.rectEnv)}function Rr(){var t,e,n;this._relate=null,2===arguments.length?(e=arguments[0],n=arguments[1],Bn.call(this,e,n),this._relate=new xr(this.arg)):3===arguments.length&&(t=arguments[0],e=arguments[1],n=arguments[2],Bn.call(this,t,e,n),this._relate=new xr(this.arg))}function Tr(){this.geomFactory=null,this.skipEmpty=!1,this.inputGeoms=null;var t=arguments[0];this.geomFactory=Tr.extractFactory(t),this.inputGeoms=t}function Pr(){this.pointGeom=null,this.otherGeom=null,this.geomFact=null;var t=arguments[0],e=arguments[1];this.pointGeom=t,this.otherGeom=e,this.geomFact=e.getFactory()}function br(){this.sortIndex=-1,this.comps=null;var t=arguments[0],e=arguments[1];this.sortIndex=t,this.comps=e}function Or(){this.inputPolys=null,this.geomFactory=null;var t=arguments[0];this.inputPolys=t,null===this.inputPolys&&(this.inputPolys=new I)}function _r(){var t,e;this.polygons=new I,this.lines=new I,this.points=new I,this.geomFact=null,1===arguments.length?R(arguments[0],m)?(t=arguments[0],this.extract(t)):arguments[0]instanceof B&&(e=arguments[0],this.extract(e)):2===arguments.length&&(t=arguments[0],e=arguments[1],this.geomFact=e,this.extract(t))}function Mr(){this.geometryFactory=new Yt,this.geomGraph=null,this.disconnectedRingcoord=null;var t=arguments[0];this.geomGraph=t}function Dr(){this.items=new I,this.subnode=[null,null]}function Ar(){var t,e;this.min=null,this.max=null,0===arguments.length?(this.min=0,this.max=0):1===arguments.length?(e=arguments[0],this.init(e.min,e.max)):2===arguments.length&&(t=arguments[0],e=arguments[1],this.init(t,e))}function Fr(){this.pt=0,this.level=0,this.interval=null;var t=arguments[0];this.computeKey(t)}function Gr(){Dr.apply(this),this.interval=null,this.centre=null,this.level=null;var t=arguments[0],e=arguments[1];this.interval=t,this.level=e,this.centre=(t.getMin()+t.getMax())/2}function qr(){Dr.apply(this)}function Br(){this.root=null,this.minExtent=1,this.root=new qr}function zr(){}function Vr(){this.ring=null,this.tree=null,this.crossings=0,this.interval=new Ar;var t=arguments[0];this.ring=t,this.buildIndex()}function kr(){qi.apply(this),this.mcp=null,this.p=null;var t=arguments[0],e=arguments[1];this.mcp=t,this.p=e}function Yr(){this.nodes=new rn(new vr)}function Ur(){this.li=new Wt,this.geomGraph=null,this.nodeGraph=new Yr,this.invalidPoint=null;var t=arguments[0];this.geomGraph=t}function Xr(){this.graph=null,this.rings=new I,this.totalEnv=new C,this.index=null,this.nestedPt=null;var t=arguments[0];this.graph=t}function Hr(){var t,e;this.errorType=null,this.pt=null,1===arguments.length?(e=arguments[0],Hr.call(this,e,null)):2===arguments.length&&(t=arguments[0],e=arguments[1],this.errorType=t,null!==e&&(this.pt=e.copy()))}function Wr(){this.parentGeometry=null,this.isSelfTouchingRingFormingHoleValid=!1,this.validErr=null;var t=arguments[0];this.parentGeometry=t}function jr(){Ot.CoordinateOperation.apply(this),this.targetPM=null,this.removeCollapsed=!0;var t=arguments[0],e=arguments[1];this.targetPM=t,this.removeCollapsed=e}function Kr(){this.targetPM=null,this.removeCollapsed=!0,this.changePrecisionModel=!1,this.isPointwise=!1;var t=arguments[0];this.targetPM=t}function Zr(){this.pts=null,this.usePt=null,this.distanceTolerance=null,this.seg=new Jt;var t=arguments[0];this.pts=t}function Jr(){this.inputGeom=null,this.distanceTolerance=null,this.isEnsureValidTopology=!0;var t=arguments[0];this.inputGeom=t}function Qr(){se.apply(this),this.isEnsureValidTopology=!0,this.distanceTolerance=null;var t=arguments[0],e=arguments[1];this.isEnsureValidTopology=t,this.distanceTolerance=e}function $r(){var t,e,n,i;this.parent=null,this.index=null,2===arguments.length?(n=arguments[0],i=arguments[1],$r.call(this,n,i,null,-1)):4===arguments.length&&(t=arguments[0],e=arguments[1],n=arguments[2],i=arguments[3],Jt.call(this,t,e),this.parent=n,this.index=i)}function ts(){var t,e;this.parentLine=null,this.segs=null,this.resultSegs=new I,this.minimumSize=null,1===arguments.length?(e=arguments[0],ts.call(this,e,2)):2===arguments.length&&(t=arguments[0],e=arguments[1],this.parentLine=t,this.minimumSize=e,this.init())}function es(){this.index=new gi}function ns(){this.querySeg=null,this.items=new I;var t=arguments[0];this.querySeg=t}function is(){this.li=new Wt,this.inputIndex=new es,this.outputIndex=new es,this.line=null,this.linePts=null;var t=arguments[this.distanceTolerance=0],e=arguments[1];this.inputIndex=t,this.outputIndex=e}function rs(){this.inputIndex=new es,this.outputIndex=new es,this.distanceTolerance=0}function ss(){this.inputGeom=null,this.lineSimplifier=new rs,this.linestringMap=null;var t=arguments[0];this.inputGeom=t}function os(){se.apply(this),this.linestringMap=null;var t=arguments[0];this.linestringMap=t}function as(){this.tps=null;var t=arguments[0];this.tps=t}function us(){this.seg=null,this.segLen=null,this.splitPt=null;var t=arguments[this.minimumLen=0];this.seg=t,this.segLen=t.getLength()}function ls(){}function hs(){}function cs(){}function fs(){var t,e,n;this.p=null,1===arguments.length?(t=arguments[0],this.p=new d(t)):2===arguments.length?(e=arguments[0],n=arguments[1],this.p=new d(e,n)):3===arguments.length&&(t=arguments[0],e=arguments[1],n=arguments[2],this.p=new d(t,e,n))}function gs(){this._isOnConstraint=null,this.constraint=null,fs.call(this,arguments[0])}function ds(){this._rot=null,this.vertex=null,this.next=null,this.data=null}function ps(){this.subdiv=null,this.isUsingTolerance=!1;var t=arguments[0];this.subdiv=t,this.isUsingTolerance=0<t.getTolerance()}function ms(){}function ys(){this.subdiv=null,this.lastEdge=null;var t=arguments[0];this.subdiv=t,this.init()}function vs(){var t,e;this.seg=null,1===arguments.length?"string"==typeof arguments[0]?p.call(this,arguments[0]):arguments[0]instanceof Jt&&(p.call(this,"Locate failed to converge (at edge: "+(e=arguments[0])+").  Possible causes include invalid Subdivision topology or very close sites"),this.seg=new Jt(e)):2===arguments.length&&(t=arguments[0],e=arguments[1],p.call(this,vs.msgWithSpatial(t,e)),this.seg=new Jt(e))}function xs(){}function Es(){this.visitedKey=0,this.quadEdges=new I,this.startingEdge=null,this.tolerance=null,this.edgeCoincidenceTolerance=null,this.frameVertex=new Array(3).fill(null),this.frameEnv=null,this.locator=null,this.seg=new Jt,this.triEdges=new Array(3).fill(null);var t=arguments[0],e=arguments[1];this.tolerance=e,this.edgeCoincidenceTolerance=e/Es.EDGE_COINCIDENCE_TOL_FACTOR,this.createFrame(t),this.startingEdge=this.initSubdiv(),this.locator=new ys(this)}function Is(){}function Ns(){this.triList=new I}function Cs(){this.triList=new I}function Ss(){this.coordList=new N,this.triCoords=new I}function ws(){var t,e,n,i,r,s,o,a,u;this.ls=null,this.data=null,2===arguments.length?(t=arguments[0],e=arguments[1],this.ls=new Jt(t,e)):3===arguments.length?(t=arguments[0],e=arguments[1],n=arguments[2],this.ls=new Jt(t,e),this.data=n):6===arguments.length?(i=arguments[0],r=arguments[1],s=arguments[2],o=arguments[3],a=arguments[4],u=arguments[5],ws.call(this,new d(i,r,s),new d(o,a,u))):7===arguments.length&&(n=arguments[0],i=arguments[1],r=arguments[2],s=arguments[3],o=arguments[4],a=arguments[5],u=arguments[6],ws.call(this,new d(n,i,r),new d(s,o,a),u))}function Ls(){}function Rs(){var t,e,n;this.p=null,this.data=null,this.left=null,this.right=null,this.count=null,2===arguments.length?(e=arguments[0],n=arguments[1],this.p=new d(e),this.left=null,this.right=null,this.count=1,this.data=n):3===arguments.length&&(t=arguments[0],e=arguments[1],n=arguments[2],this.p=new d(t,e),this.left=null,this.right=null,this.count=1,this.data=n)}function Ts(){var t;this.root=null,this.numberOfNodes=null,this.tolerance=null,0===arguments.length?Ts.call(this,0):1===arguments.length&&(t=arguments[0],this.tolerance=t)}function Ps(){this.tolerance=null,this.matchNode=null,this.matchDist=0,this.p=null;var t=arguments[0],e=arguments[1];this.p=t,this.tolerance=e}function bs(){this.initialVertices=null,this.segVertices=null,this.segments=new I,this.subdiv=null,this.incDel=null,this.convexHull=null,this.splitFinder=new hs,this.kdt=null,this.vertexFactory=null,this.computeAreaEnv=null,this.splitPt=null,this.tolerance=null;var t=arguments[0],e=arguments[1];this.initialVertices=new I(t),this.tolerance=e,this.kdt=new Ts(e)}function Os(){this.siteCoords=null,this.tolerance=0,this.subdiv=null}function _s(){this.siteCoords=null,this.constraintLines=null,this.tolerance=0,this.subdiv=null,this.constraintVertexMap=new rt}function Ms(){this.siteCoords=null,this.tolerance=0,this.subdiv=null,this.clipEnv=null,this.diagramEnv=null}function Ds(){}Array.prototype.fill||(Array.prototype.fill=function(t){for(var e=Object(this),n=parseInt(e.length,10),i=parseInt(arguments[1],10)||0,r=i<0?Math.max(n+i,0):Math.min(i,n),i=arguments[2],i=void 0===i?n:parseInt(i,10)||0,s=i<0?Math.max(n+i,0):Math.min(i,n);r<s;r++)e[r]=t;return e}),Number.isFinite=Number.isFinite||function(t){return"number"==typeof t&&isFinite(t)},Number.isInteger=Number.isInteger||function(t){return"number"==typeof t&&isFinite(t)&&Math.floor(t)===t},Number.parseFloat=Number.parseFloat||parseFloat,Number.isNaN=Number.isNaN||function(t){return t!=t},Math.trunc=Math.trunc||function(t){return t<0?Math.ceil(t):Math.floor(t)},e(n.prototype,{interfaces_:function(){return[]},getClass:function(){return n}}),n.equalsWithTolerance=function(t,e,n){return Math.abs(t-e)<=n},g.isNaN=function(t){return Number.isNaN(t)},g.doubleToLongBits=function(t){return t},g.longBitsToDouble=function(t){return t},g.isInfinite=function(t){return!Number.isFinite(t)},g.MAX_VALUE=Number.MAX_VALUE,a(u,p),e(u.prototype,{interfaces_:function(){return[]},getClass:function(){return u}}),e(l.prototype,{interfaces_:function(){return[]},getClass:function(){return l}}),l.shouldNeverReachHere=function(){if(0===arguments.length)l.shouldNeverReachHere(null);else if(1===arguments.length){var t=arguments[0];throw new u("Should never reach here"+(null!==t?": "+t:""))}},l.isTrue=function(){if(1===arguments.length)l.isTrue(arguments[0],null);else if(2===arguments.length){var t=arguments[1];if(!arguments[0])throw null===t?new u:new u(t)}},l.equals=function(){if(2===arguments.length)l.equals(arguments[0],arguments[1],null);else if(3===arguments.length){var t=arguments[0],e=arguments[1],n=arguments[2];if(!e.equals(t))throw new u("Expected "+t+" but encountered "+e+(null!==n?": "+n:""))}},e(d.prototype,{setOrdinate:function(t,e){switch(t){case d.X:this.x=e;break;case d.Y:this.y=e;break;case d.Z:this.z=e;break;default:throw new c}},equals2D:function(){if(1===arguments.length){var t=arguments[0];return this.x===t.x&&this.y===t.y}if(2===arguments.length){var e=arguments[0],t=arguments[1];return!!n.equalsWithTolerance(this.x,e.x,t)&&!!n.equalsWithTolerance(this.y,e.y,t)}},getOrdinate:function(t){switch(t){case d.X:return this.x;case d.Y:return this.y;case d.Z:return this.z}throw new c},equals3D:function(t){return this.x===t.x&&this.y===t.y&&(this.z===t.z||g.isNaN(this.z)&&g.isNaN(t.z))},equals:function(t){return t instanceof d&&this.equals2D(t)},equalInZ:function(t,e){return n.equalsWithTolerance(this.z,t.z,e)},compareTo:function(t){return this.x<t.x?-1:this.x>t.x?1:this.y<t.y?-1:this.y>t.y?1:0},clone:function(){try{return null}catch(t){if(t instanceof CloneNotSupportedException)return l.shouldNeverReachHere("this shouldn't happen because this class is Cloneable"),null;throw t}},copy:function(){return new d(this)},toString:function(){return"("+this.x+", "+this.y+", "+this.z+")"},distance3D:function(t){var e=this.x-t.x,n=this.y-t.y,t=this.z-t.z;return Math.sqrt(e*e+n*n+t*t)},distance:function(t){var e=this.x-t.x,t=this.y-t.y;return Math.sqrt(e*e+t*t)},hashCode:function(){return 37*(629+d.hashCode(this.x))+d.hashCode(this.y)},setCoordinate:function(t){this.x=t.x,this.y=t.y,this.z=t.z},interfaces_:function(){return[i,r,o]},getClass:function(){return d}}),d.hashCode=function(){if(1===arguments.length){var t=g.doubleToLongBits(arguments[0]);return Math.trunc(t^t>>>32)}},e(h.prototype,{compare:function(t,e){var n=t,t=e,e=h.compare(n.x,t.x);if(0!==e)return e;e=h.compare(n.y,t.y);return 0!==e?e:this.dimensionsToTest<=2?0:h.compare(n.z,t.z)},interfaces_:function(){return[s]},getClass:function(){return h}}),h.compare=function(t,e){return t<e?-1:e<t?1:g.isNaN(t)?g.isNaN(e)?0:-1:g.isNaN(e)?1:0},d.DimensionalComparator=h,d.serialVersionUID=0x5cbf2c235c7e5800,d.NULL_ORDINATE=g.NaN,d.X=0,d.Y=1,d.Z=2,f.prototype.hasNext=function(){},f.prototype.next=function(){},f.prototype.remove=function(){},m.prototype.add=function(){},m.prototype.addAll=function(){},m.prototype.isEmpty=function(){},m.prototype.iterator=function(){},m.prototype.size=function(){},m.prototype.toArray=function(){},m.prototype.remove=function(){},(y.prototype=new Error).name="IndexOutOfBoundsException",((v.prototype=Object.create(m.prototype)).constructor=v).prototype.get=function(){},v.prototype.set=function(){},v.prototype.isEmpty=function(){},(x.prototype=new Error).name="NoSuchElementException",(E.prototype=new Error).name="OperationNotSupported",((I.prototype=Object.create(v.prototype)).constructor=I).prototype.ensureCapacity=function(){},I.prototype.interfaces_=function(){return[v,m]},I.prototype.add=function(t){return this.array_.push(t),!0},I.prototype.clear=function(){this.array_=[]},I.prototype.addAll=function(t){for(var e=t.iterator();e.hasNext();)this.add(e.next());return!0},I.prototype.set=function(t,e){var n=this.array_[t];return this.array_[t]=e,n},I.prototype.iterator=function(){return new As(this)},I.prototype.get=function(t){if(t<0||t>=this.size())throw new y;return this.array_[t]},I.prototype.isEmpty=function(){return 0===this.array_.length},I.prototype.size=function(){return this.array_.length},I.prototype.toArray=function(){for(var t=[],e=0,n=this.array_.length;e<n;e++)t.push(this.array_[e]);return t},I.prototype.remove=function(t){for(var e=!1,n=0,i=this.array_.length;n<i;n++)if(this.array_[n]===t){this.array_.splice(n,1),e=!0;break}return e};var As=function(t){this.arrayList_=t,this.position_=0};As.prototype.next=function(){if(this.position_===this.arrayList_.size())throw new x;return this.arrayList_.get(this.position_++)},As.prototype.hasNext=function(){return this.position_<this.arrayList_.size()},As.prototype.set=function(t){return this.arrayList_.set(this.position_-1,t)},As.prototype.remove=function(){throw new E},a(N,I),e(N.prototype,{getCoordinate:function(t){return this.get(t)},addAll:function(){if(2!==arguments.length)return I.prototype.addAll.apply(this,arguments);for(var t=arguments[1],e=!1,n=arguments[0].iterator();n.hasNext();)this.add(n.next(),t),e=!0;return e},clone:function(){for(var t=I.prototype.clone.call(this),e=0;e<this.size();e++)t.add(e,this.get(e).copy());return t},toCoordinateArray:function(){return this.toArray(N.coordArrayType)},add:function(){if(1===arguments.length){var t=arguments[0];I.prototype.add.call(this,t)}else if(2===arguments.length){if(arguments[0]instanceof Array&&"boolean"==typeof arguments[1]){var t=arguments[0],e=arguments[1];return this.add(t,e,!0),!0}if(arguments[0]instanceof d&&"boolean"==typeof arguments[1]){e=arguments[0];if(!arguments[1]&&1<=this.size())if(this.get(this.size()-1).equals2D(e))return null;I.prototype.add.call(this,e)}else if(arguments[0]instanceof Object&&"boolean"==typeof arguments[1]){var n=arguments[0],i=arguments[1];return this.add(n,i),!0}}else if(3===arguments.length){if("boolean"==typeof arguments[2]&&arguments[0]instanceof Array&&"boolean"==typeof arguments[1]){var r=arguments[0],s=arguments[1];if(arguments[2])for(var o=0;o<r.length;o++)this.add(r[o],s);else for(o=r.length-1;0<=o;o--)this.add(r[o],s);return!0}if("boolean"==typeof arguments[2]&&Number.isInteger(arguments[0])&&arguments[1]instanceof d){var n=arguments[0],a=arguments[1];if(!arguments[2]){i=this.size();if(0<i){if(0<n)if(this.get(n-1).equals2D(a))return null;if(n<i)if(this.get(n).equals2D(a))return null}}I.prototype.add.call(this,n,a)}}else if(4===arguments.length){var u=arguments[0],l=arguments[1],a=arguments[2],h=arguments[3],c=1;h<a&&(c=-1);for(o=a;o!==h;o+=c)this.add(u[o],l);return!0}},closeRing:function(){0<this.size()&&this.add(new d(this.get(0)),!1)},interfaces_:function(){return[]},getClass:function(){return N}}),N.coordArrayType=new Array(0).fill(null),e(C.prototype,{getArea:function(){return this.getWidth()*this.getHeight()},equals:function(t){if(!(t instanceof C))return!1;return this.isNull()?t.isNull():this.maxx===t.getMaxX()&&this.maxy===t.getMaxY()&&this.minx===t.getMinX()&&this.miny===t.getMinY()},intersection:function(t){if(this.isNull()||t.isNull()||!this.intersects(t))return new C;var e=(this.minx>t.minx?this:t).minx,n=(this.miny>t.miny?this:t).miny;return new C(e,(this.maxx<t.maxx?this:t).maxx,n,(this.maxy<t.maxy?this:t).maxy)},isNull:function(){return this.maxx<this.minx},getMaxX:function(){return this.maxx},covers:function(){if(1===arguments.length){if(arguments[0]instanceof d){var t=arguments[0];return this.covers(t.x,t.y)}if(arguments[0]instanceof C){var e=arguments[0];return!this.isNull()&&!e.isNull()&&(e.getMinX()>=this.minx&&e.getMaxX()<=this.maxx&&e.getMinY()>=this.miny&&e.getMaxY()<=this.maxy)}}else if(2===arguments.length){t=arguments[0],e=arguments[1];return!this.isNull()&&(t>=this.minx&&t<=this.maxx&&e>=this.miny&&e<=this.maxy)}},intersects:function(){if(1===arguments.length){if(arguments[0]instanceof C){var t=arguments[0];return!this.isNull()&&!t.isNull()&&!(t.minx>this.maxx||t.maxx<this.minx||t.miny>this.maxy||t.maxy<this.miny)}if(arguments[0]instanceof d){var e=arguments[0];return this.intersects(e.x,e.y)}}else if(2===arguments.length){t=arguments[0],e=arguments[1];return!this.isNull()&&!(t>this.maxx||t<this.minx||e>this.maxy||e<this.miny)}},getMinY:function(){return this.miny},getMinX:function(){return this.minx},expandToInclude:function(){if(1===arguments.length){if(arguments[0]instanceof d){var t=arguments[0];this.expandToInclude(t.x,t.y)}else if(arguments[0]instanceof C){var e=arguments[0];if(e.isNull())return null;this.isNull()?(this.minx=e.getMinX(),this.maxx=e.getMaxX(),this.miny=e.getMinY(),this.maxy=e.getMaxY()):(e.minx<this.minx&&(this.minx=e.minx),e.maxx>this.maxx&&(this.maxx=e.maxx),e.miny<this.miny&&(this.miny=e.miny),e.maxy>this.maxy&&(this.maxy=e.maxy))}}else 2===arguments.length&&(t=arguments[0],e=arguments[1],this.isNull()?(this.minx=t,this.maxx=t,this.miny=e,this.maxy=e):(t<this.minx&&(this.minx=t),t>this.maxx&&(this.maxx=t),e<this.miny&&(this.miny=e),e>this.maxy&&(this.maxy=e)))},minExtent:function(){if(this.isNull())return 0;var t=this.getWidth(),e=this.getHeight();return t<e?t:e},getWidth:function(){return this.isNull()?0:this.maxx-this.minx},compareTo:function(t){return this.isNull()?t.isNull()?0:-1:t.isNull()?1:this.minx<t.minx?-1:this.minx>t.minx?1:this.miny<t.miny?-1:this.miny>t.miny?1:this.maxx<t.maxx?-1:this.maxx>t.maxx?1:this.maxy<t.maxy?-1:this.maxy>t.maxy?1:0},translate:function(t,e){return this.isNull()?null:void this.init(this.getMinX()+t,this.getMaxX()+t,this.getMinY()+e,this.getMaxY()+e)},toString:function(){return"Env["+this.minx+" : "+this.maxx+", "+this.miny+" : "+this.maxy+"]"},setToNull:function(){this.minx=0,this.maxx=-1,this.miny=0,this.maxy=-1},getHeight:function(){return this.isNull()?0:this.maxy-this.miny},maxExtent:function(){if(this.isNull())return 0;var t=this.getWidth(),e=this.getHeight();return e<t?t:e},expandBy:function(){if(1===arguments.length){var t=arguments[0];this.expandBy(t,t)}else if(2===arguments.length){var e=arguments[0],t=arguments[1];if(this.isNull())return null;this.minx-=e,this.maxx+=e,this.miny-=t,this.maxy+=t,(this.minx>this.maxx||this.miny>this.maxy)&&this.setToNull()}},contains:function(){if(1===arguments.length){if(arguments[0]instanceof C){var t=arguments[0];return this.covers(t)}if(arguments[0]instanceof d){var e=arguments[0];return this.covers(e)}}else if(2===arguments.length){t=arguments[0],e=arguments[1];return this.covers(t,e)}},centre:function(){return this.isNull()?null:new d((this.getMinX()+this.getMaxX())/2,(this.getMinY()+this.getMaxY())/2)},init:function(){var t,e,n,i;0===arguments.length?this.setToNull():1===arguments.length?arguments[0]instanceof d?(n=arguments[0],this.init(n.x,n.x,n.y,n.y)):arguments[0]instanceof C&&(i=arguments[0],this.minx=i.minx,this.maxx=i.maxx,this.miny=i.miny,this.maxy=i.maxy):2===arguments.length?(t=arguments[0],e=arguments[1],this.init(t.x,e.x,t.y,e.y)):4===arguments.length&&(n=arguments[2],i=arguments[3],(t=arguments[0])<(e=arguments[1])?(this.minx=t,this.maxx=e):(this.minx=e,this.maxx=t),n<i?(this.miny=n,this.maxy=i):(this.miny=i,this.maxy=n))},getMaxY:function(){return this.maxy},distance:function(t){if(this.intersects(t))return 0;var e=0;this.maxx<t.minx?e=t.minx-this.maxx:this.minx>t.maxx&&(e=this.minx-t.maxx);var n=0;return this.maxy<t.miny?n=t.miny-this.maxy:this.miny>t.maxy&&(n=this.miny-t.maxy),0===e?n:0===n?e:Math.sqrt(e*e+n*n)},hashCode:function(){return 37*(37*(37*(629+d.hashCode(this.minx))+d.hashCode(this.maxx))+d.hashCode(this.miny))+d.hashCode(this.maxy)},interfaces_:function(){return[i,o]},getClass:function(){return C}}),C.intersects=function(){if(3===arguments.length){var t=arguments[0],e=arguments[1],n=arguments[2];return n.x>=(t.x<e.x?t:e).x&&n.x<=(t.x>e.x?t:e).x&&n.y>=(t.y<e.y?t:e).y&&n.y<=(t.y>e.y?t:e).y}if(4===arguments.length){var i=arguments[0],r=arguments[1],s=arguments[2],o=arguments[3],a=Math.min(s.x,o.x),n=Math.max(s.x,o.x),t=Math.min(i.x,r.x),e=Math.max(i.x,r.x);return!(n<t)&&(!(e<a)&&(a=Math.min(s.y,o.y),n=Math.max(s.y,o.y),t=Math.min(i.y,r.y),e=Math.max(i.y,r.y),!(n<t)&&!(e<a)))}},C.serialVersionUID=0x51845cd552189800,a(w,S),e(w.prototype,{interfaces_:function(){return[]},getClass:function(){return w}}),e(L.prototype,{interfaces_:function(){return[]},getClass:function(){return L}}),L.toLocationSymbol=function(t){switch(t){case L.EXTERIOR:return"e";case L.BOUNDARY:return"b";case L.INTERIOR:return"i";case L.NONE:return"-"}throw new c},L.INTERIOR=0,L.BOUNDARY=1,L.EXTERIOR=2,L.NONE=-1,e(T.prototype,{interfaces_:function(){return[]},getClass:function(){return T}}),T.log10=function(t){t=Math.log(t);return g.isInfinite(t)||g.isNaN(t)?t:t/T.LOG_10},T.min=function(t,e,n,i){return e<t&&(t=e),n<t&&(t=n),i<t&&(t=i),t},T.clamp=function(){if("number"==typeof arguments[2]&&"number"==typeof arguments[0]&&"number"==typeof arguments[1]){var t=arguments[0],e=arguments[1],n=arguments[2];return t<e?e:n<t?n:t}if(Number.isInteger(arguments[2])&&Number.isInteger(arguments[0])&&Number.isInteger(arguments[1])){e=arguments[0],n=arguments[1],t=arguments[2];return e<n?n:t<e?t:e}},T.wrap=function(t,e){return t<0?e- -t%e:t%e},T.max=function(){if(3===arguments.length){var t=arguments[1],e=arguments[2];return(n=arguments[0])<t&&(n=t),n<e&&(n=e),n}if(4===arguments.length){var n,i=arguments[1],t=arguments[2],e=arguments[3];return(n=arguments[0])<i&&(n=i),n<t&&(n=t),n<e&&(n=e),n}},T.average=function(t,e){return(t+e)/2},T.LOG_10=Math.log(10),P.prototype.append=function(t){this.str+=t},P.prototype.setCharAt=function(t,e){return this.str.substr(0,t)+e+this.str.substr(t+1)},P.prototype.toString=function(t){return this.str},b.prototype.intValue=function(){return this.value},b.prototype.compareTo=function(t){return this.value<t?-1:this.value>t?1:0},b.isNaN=function(t){return Number.isNaN(t)},O.isWhitespace=function(t){return t<=32&&0<=t||127==t},O.toUpperCase=function(t){return t.toUpperCase()},e(_.prototype,{le:function(t){return this.hi<t.hi||this.hi===t.hi&&this.lo<=t.lo},extractSignificantDigits:function(t,e){var n=this.abs(),i=_.magnitude(n.hi),r=_.TEN.pow(i);(n=n.divide(r)).gt(_.TEN)?(n=n.divide(_.TEN),i+=1):n.lt(_.ONE)&&(n=n.multiply(_.TEN),--i);for(var s=i+1,o=new P,a=_.MAX_PRINT_DIGITS-1,u=0;u<=a;u++){t&&u===s&&o.append(".");var l=Math.trunc(n.hi);if(l<0)break;var h=!1,c=0,c=9<l?(h=!0,"9"):"0"+l;o.append(c),n=n.subtract(_.valueOf(l)).multiply(_.TEN),h&&n.selfAdd(_.TEN);l=!0,h=_.magnitude(n.hi);if(h<0&&Math.abs(h)>=a-u&&(l=!1),!l)break}return e[0]=i,o.toString()},sqr:function(){return this.multiply(this)},doubleValue:function(){return this.hi+this.lo},subtract:function(){if(arguments[0]instanceof _){var t=arguments[0];return this.add(t.negate())}if("number"==typeof arguments[0]){t=arguments[0];return this.add(-t)}},equals:function(){if(1===arguments.length){var t=arguments[0];return this.hi===t.hi&&this.lo===t.lo}},isZero:function(){return 0===this.hi&&0===this.lo},selfSubtract:function(){if(arguments[0]instanceof _){var t=arguments[0];return this.isNaN()?this:this.selfAdd(-t.hi,-t.lo)}if("number"==typeof arguments[0]){t=arguments[0];return this.isNaN()?this:this.selfAdd(-t,0)}},getSpecialNumberString:function(){return this.isZero()?"0.0":this.isNaN()?"NaN ":null},min:function(t){return this.le(t)?this:t},selfDivide:function(){if(1===arguments.length){if(arguments[0]instanceof _){var t=arguments[0];return this.selfDivide(t.hi,t.lo)}if("number"==typeof arguments[0]){var e=arguments[0];return this.selfDivide(e,0)}}else if(2===arguments.length){var n,i,r,s=arguments[0],o=arguments[1],a=null,u=null,e=null,l=this.hi/s;return e=(a=(u=_.SPLIT*l)-(a=u-l))*(i=(e=_.SPLIT*s)-(e-s))-(t=l*s)+a*(r=s-i)+(n=l-a)*i+n*r,e=l+(u=(this.hi-t-e+this.lo-l*o)/s),this.hi=e,this.lo=l-e+u,this}},dump:function(){return"DD<"+this.hi+", "+this.lo+">"},divide:function(){if(arguments[0]instanceof _){var t,e,n,i=arguments[0],r=null,s=null,o=null,a=null,u=(s=this.hi/i.hi)-(r=(o=_.SPLIT*s)-(r=o-s));return a=r*(t=(a=_.SPLIT*i.hi)-(a-i.hi))-(n=s*i.hi)+r*(e=i.hi-t)+u*t+u*e,new _(a=s+(o=(this.hi-n-a+this.lo-s*i.lo)/i.hi),s-a+o)}if("number"==typeof arguments[0]){o=arguments[0];return g.isNaN(o)?_.createNaN():_.copy(this).selfDivide(o,0)}},ge:function(t){return this.hi>t.hi||this.hi===t.hi&&this.lo>=t.lo},pow:function(t){if(0===t)return _.valueOf(1);var e=new _(this),n=_.valueOf(1),i=Math.abs(t);if(1<i)for(;0<i;)i%2==1&&n.selfMultiply(e),0<(i/=2)&&(e=e.sqr());else n=e;return t<0?n.reciprocal():n},ceil:function(){if(this.isNaN())return _.NaN;var t=Math.ceil(this.hi),e=0;return t===this.hi&&(e=Math.ceil(this.lo)),new _(t,e)},compareTo:function(t){return this.hi<t.hi?-1:this.hi>t.hi?1:this.lo<t.lo?-1:this.lo>t.lo?1:0},rint:function(){return this.isNaN()?this:this.add(.5).floor()},setValue:function(){if(arguments[0]instanceof _){var t=arguments[0];return this.init(t),this}if("number"==typeof arguments[0]){t=arguments[0];return this.init(t),this}},max:function(t){return this.ge(t)?this:t},sqrt:function(){if(this.isZero())return _.valueOf(0);if(this.isNegative())return _.NaN;var t=1/Math.sqrt(this.hi),e=this.hi*t,e=_.valueOf(e),t=this.subtract(e.sqr()).hi*(.5*t);return e.add(t)},selfAdd:function(){if(1===arguments.length){if(arguments[0]instanceof _){var t=arguments[0];return this.selfAdd(t.hi,t.lo)}if("number"==typeof arguments[0]){var e=arguments[0],n=null,i=null,r=null,s=null,o=null,a=null;return s=(r=this.hi+e)-(o=r-this.hi),i=(a=(s=e-o+(this.hi-s))+this.lo)+(r-(n=r+a)),this.hi=n+i,this.lo=i+(n-this.hi),this}}else if(2===arguments.length){var u=arguments[0],l=arguments[1],n=null,i=null,r=null,s=null,o=null,a=null;r=this.hi+u,t=this.lo+l,s=r-(o=r-this.hi),e=t-(a=t-this.lo);i=(n=r+(o=(s=u-o+(this.hi-s))+t))+(o=l-a+(this.lo-e)+(i=o+(r-n))),n=o+(n-i);return this.hi=i,this.lo=n,this}},selfMultiply:function(){if(1===arguments.length){if(arguments[0]instanceof _){var t=arguments[0];return this.selfMultiply(t.hi,t.lo)}if("number"==typeof arguments[0]){var e=arguments[0];return this.selfMultiply(e,0)}}else if(2===arguments.length){var n,i,r,s=arguments[0],o=arguments[1],t=null,a=(t=_.SPLIT*this.hi)-this.hi,e=_.SPLIT*s;a=t-a,n=this.hi-a,i=e-s;s=(t=this.hi*s)+(e=a*(i=e-i)-t+a*(r=s-i)+n*i+n*r+(this.hi*o+this.lo*s)),a=e+(t-s);return this.hi=s,this.lo=a,this}},selfSqr:function(){return this.selfMultiply(this)},floor:function(){if(this.isNaN())return _.NaN;var t=Math.floor(this.hi),e=0;return t===this.hi&&(e=Math.floor(this.lo)),new _(t,e)},negate:function(){return this.isNaN()?this:new _(-this.hi,-this.lo)},clone:function(){try{return null}catch(t){if(t instanceof CloneNotSupportedException)return null;throw t}},multiply:function(){if(arguments[0]instanceof _){var t=arguments[0];return t.isNaN()?_.createNaN():_.copy(this).selfMultiply(t)}if("number"==typeof arguments[0]){t=arguments[0];return g.isNaN(t)?_.createNaN():_.copy(this).selfMultiply(t,0)}},isNaN:function(){return g.isNaN(this.hi)},intValue:function(){return Math.trunc(this.hi)},toString:function(){var t=_.magnitude(this.hi);return-3<=t&&t<=20?this.toStandardNotation():this.toSciNotation()},toStandardNotation:function(){var t=this.getSpecialNumberString();if(null!==t)return t;var e=new Array(1).fill(null),n=this.extractSignificantDigits(!0,e),t=e[0]+1,e=n;return"."===n.charAt(0)?e="0"+n:t<0?e="0."+_.stringOfChar("0",-t)+n:-1===n.indexOf(".")&&(t=t-n.length,e=n+_.stringOfChar("0",t)+".0"),this.isNegative()?"-"+e:e},reciprocal:function(){var t,e,n=null,i=null,r=null,s=null,o=(i=1/this.hi)-(n=(r=_.SPLIT*i)-(n=r-i)),a=(s=_.SPLIT*this.hi)-this.hi,s=i+(r=(1-(e=i*this.hi)-(s=n*(a=s-a)-e+n*(t=this.hi-a)+o*a+o*t)-i*this.lo)/this.hi);return new _(s,i-s+r)},toSciNotation:function(){if(this.isZero())return _.SCI_NOT_ZERO;var t=this.getSpecialNumberString();if(null!==t)return t;var e=new Array(1).fill(null),n=this.extractSignificantDigits(!1,e),t=_.SCI_NOT_EXPONENT_CHAR+e[0];if("0"===n.charAt(0))throw new IllegalStateException("Found leading zero: "+n);e="";1<n.length&&(e=n.substring(1));e=n.charAt(0)+"."+e;return this.isNegative()?"-"+e+t:e+t},abs:function(){return this.isNaN()?_.NaN:this.isNegative()?this.negate():new _(this)},isPositive:function(){return 0<this.hi||0===this.hi&&0<this.lo},lt:function(t){return this.hi<t.hi||this.hi===t.hi&&this.lo<t.lo},add:function(){if(arguments[0]instanceof _){var t=arguments[0];return _.copy(this).selfAdd(t)}if("number"==typeof arguments[0]){t=arguments[0];return _.copy(this).selfAdd(t)}},init:function(){var t,e;1===arguments.length?"number"==typeof arguments[0]?(t=arguments[0],this.hi=t,this.lo=0):arguments[0]instanceof _&&(e=arguments[0],this.hi=e.hi,this.lo=e.lo):2===arguments.length&&(t=arguments[0],e=arguments[1],this.hi=t,this.lo=e)},gt:function(t){return this.hi>t.hi||this.hi===t.hi&&this.lo>t.lo},isNegative:function(){return this.hi<0||0===this.hi&&this.lo<0},trunc:function(){return this.isNaN()?_.NaN:this.isPositive()?this.floor():this.ceil()},signum:function(){return 0<this.hi?1:this.hi<0?-1:0<this.lo?1:this.lo<0?-1:0},interfaces_:function(){return[o,i,r]},getClass:function(){return _}}),_.sqr=function(t){return _.valueOf(t).selfMultiply(t)},_.valueOf=function(){if("string"==typeof arguments[0]){var t=arguments[0];return _.parse(t)}if("number"==typeof arguments[0])return new _(arguments[0])},_.sqrt=function(t){return _.valueOf(t).sqrt()},_.parse=function(t){for(var e=0,n=t.length;O.isWhitespace(t.charAt(e));)e++;var i=!1;e<n&&("-"!==(g=t.charAt(e))&&"+"!==g||(e++,"-"===g&&(i=!0)));for(var r=new _,s=0,o=0,a=0;!(n<=e);){var u=t.charAt(e);if(e++,O.isDigit(u)){var l=u-"0";r.selfMultiply(_.TEN),r.selfAdd(l),s++}else{if("."!==u){if("e"!==u&&"E"!==u)throw new NumberFormatException("Unexpected character '"+u+"' at position "+e+" in string "+t);var h=t.substring(e);try{a=b.parseInt(h)}catch(e){throw e instanceof NumberFormatException?new NumberFormatException("Invalid exponent "+h+" in string "+t):e}break}o=s}}var c,f=r,g=s-o-a;return 0==g?f=r:0<g?(c=_.TEN.pow(g),f=r.divide(c)):g<0&&(c=_.TEN.pow(-g),f=r.multiply(c)),i?f.negate():f},_.createNaN=function(){return new _(g.NaN,g.NaN)},_.copy=function(t){return new _(t)},_.magnitude=function(t){var e=Math.abs(t),t=Math.log(e)/Math.log(10),t=Math.trunc(Math.floor(t));return 10*Math.pow(10,t)<=e&&(t+=1),t},_.stringOfChar=function(t,e){for(var n=new P,i=0;i<e;i++)n.append(t);return n.toString()},_.PI=new _(3.141592653589793,12246467991473532e-32),_.TWO_PI=new _(6.283185307179586,24492935982947064e-32),_.PI_2=new _(1.5707963267948966,6123233995736766e-32),_.E=new _(2.718281828459045,14456468917292502e-32),_.NaN=new _(g.NaN,g.NaN),_.EPS=123259516440783e-46,_.SPLIT=134217729,_.MAX_PRINT_DIGITS=32,_.TEN=_.valueOf(10),_.ONE=_.valueOf(1),_.SCI_NOT_EXPONENT_CHAR="E",_.SCI_NOT_ZERO="0.0E0",e(M.prototype,{interfaces_:function(){return[]},getClass:function(){return M}}),M.orientationIndex=function(t,e,n){var i=M.orientationIndexFilter(t,e,n);if(i<=1)return i;var r=_.valueOf(e.x).selfAdd(-t.x),i=_.valueOf(e.y).selfAdd(-t.y),t=_.valueOf(n.x).selfAdd(-e.x),e=_.valueOf(n.y).selfAdd(-e.y);return r.selfMultiply(e).selfSubtract(i.selfMultiply(t)).signum()},M.signOfDet2x2=function(t,e,n,i){return t.multiply(i).selfSubtract(e.multiply(n)).signum()},M.intersection=function(t,e,n,i){var r=_.valueOf(i.y).selfSubtract(n.y).selfMultiply(_.valueOf(e.x).selfSubtract(t.x)),s=_.valueOf(i.x).selfSubtract(n.x).selfMultiply(_.valueOf(e.y).selfSubtract(t.y)),o=r.subtract(s),r=_.valueOf(i.x).selfSubtract(n.x).selfMultiply(_.valueOf(t.y).selfSubtract(n.y)),s=_.valueOf(i.y).selfSubtract(n.y).selfMultiply(_.valueOf(t.x).selfSubtract(n.x)),r=r.subtract(s).selfDivide(o).doubleValue(),s=_.valueOf(t.x).selfAdd(_.valueOf(e.x).selfSubtract(t.x).selfMultiply(r)).doubleValue(),r=_.valueOf(e.x).selfSubtract(t.x).selfMultiply(_.valueOf(t.y).selfSubtract(n.y)),t=_.valueOf(e.y).selfSubtract(t.y).selfMultiply(_.valueOf(t.x).selfSubtract(n.x)),o=r.subtract(t).selfDivide(o).doubleValue();return new d(s,_.valueOf(n.y).selfAdd(_.valueOf(i.y).selfSubtract(n.y).selfMultiply(o)).doubleValue())},M.orientationIndexFilter=function(t,e,n){var i=null,r=(t.x-n.x)*(e.y-n.y),e=(t.y-n.y)*(e.x-n.x),n=r-e;if(0<r){if(e<=0)return M.signum(n);i=r+e}else{if(!(r<0))return M.signum(n);if(0<=e)return M.signum(n);i=-r-e}i*=M.DP_SAFE_EPSILON;return i<=n||i<=-n?M.signum(n):2},M.signum=function(t){return 0<t?1:t<0?-1:0},M.DP_SAFE_EPSILON=1e-15,e(D.prototype,{setOrdinate:function(t,e,n){},size:function(){},getOrdinate:function(t,e){},getCoordinate:function(){},getCoordinateCopy:function(t){},getDimension:function(){},getX:function(t){},clone:function(){},expandEnvelope:function(t){},copy:function(){},getY:function(t){},toCoordinateArray:function(){},interfaces_:function(){return[r]},getClass:function(){return D}}),D.X=0,D.Y=1,D.Z=2,D.M=3,A.arraycopy=function(t,e,n,i,r){for(var s=0,o=e;o<e+r;o++)n[i+s]=t[o],s++},A.getProperty=function(t){return{"line.separator":"\n"}[t]},e(F.prototype,{getY:function(){var t=this.y/this.w;if(g.isNaN(t)||g.isInfinite(t))throw new w;return t},getX:function(){var t=this.x/this.w;if(g.isNaN(t)||g.isInfinite(t))throw new w;return t},getCoordinate:function(){var t=new d;return t.x=this.getX(),t.y=this.getY(),t},interfaces_:function(){return[]},getClass:function(){return F}}),F.intersection=function(t,e,n,i){var r=t.y-e.y,s=e.x-t.x,o=t.x*e.y-e.x*t.y,e=n.y-i.y,t=i.x-n.x,i=n.x*i.y-i.x*n.y,n=r*t-e*s,t=(s*i-t*o)/n,n=(e*o-r*i)/n;if(g.isNaN(t)||g.isInfinite(t)||g.isNaN(n)||g.isInfinite(n))throw new w;return new d(t,n)},e(G.prototype,{create:function(){1===arguments.length&&(arguments[0]instanceof Array||R(arguments[0],D))},interfaces_:function(){return[]},getClass:function(){return G}}),e(q.prototype,{filter:function(t){},interfaces_:function(){return[]},getClass:function(){return q}}),e(B.prototype,{isGeometryCollection:function(){return this.getSortIndex()===B.SORTINDEX_GEOMETRYCOLLECTION},getFactory:function(){return this.factory},getGeometryN:function(t){return this},getArea:function(){return 0},isRectangle:function(){return!1},equals:function(){if(1===arguments.length){if(arguments[0]instanceof B){var t=arguments[0];return null!==t&&this.equalsTopo(t)}if(arguments[0]instanceof Object){t=arguments[0];if(!(t instanceof B))return!1;return this.equalsExact(t)}}},equalsExact:function(t){return this===t||this.equalsExact(t,0)},geometryChanged:function(){this.apply(B.geometryChangedFilter)},geometryChangedAction:function(){this.envelope=null},equalsNorm:function(t){return null!==t&&this.norm().equalsExact(t.norm())},getLength:function(){return 0},getNumGeometries:function(){return 1},compareTo:function(){if(1===arguments.length){var t=arguments[0],e=t;return this.getSortIndex()!==e.getSortIndex()?this.getSortIndex()-e.getSortIndex():this.isEmpty()&&e.isEmpty()?0:this.isEmpty()?-1:e.isEmpty()?1:this.compareToSameClass(t)}if(2===arguments.length){var n=arguments[0],t=arguments[1],e=n;return this.getSortIndex()!==e.getSortIndex()?this.getSortIndex()-e.getSortIndex():this.isEmpty()&&e.isEmpty()?0:this.isEmpty()?-1:e.isEmpty()?1:this.compareToSameClass(n,t)}},getUserData:function(){return this.userData},getSRID:function(){return this.SRID},getEnvelope:function(){return this.getFactory().toGeometry(this.getEnvelopeInternal())},checkNotGeometryCollection:function(t){if(t.getSortIndex()===B.SORTINDEX_GEOMETRYCOLLECTION)throw new c},equal:function(t,e,n){return 0===n?t.equals(e):t.distance(e)<=n},norm:function(){var t=this.copy();return t.normalize(),t},getPrecisionModel:function(){return this.factory.getPrecisionModel()},getEnvelopeInternal:function(){return null===this.envelope&&(this.envelope=this.computeEnvelopeInternal()),new C(this.envelope)},setSRID:function(t){this.SRID=t},setUserData:function(t){this.userData=t},compare:function(t,e){for(var n=t.iterator(),i=e.iterator();n.hasNext()&&i.hasNext();){var r=n.next(),s=i.next(),s=r.compareTo(s);if(0!==s)return s}return n.hasNext()?1:i.hasNext()?-1:0},hashCode:function(){return this.getEnvelopeInternal().hashCode()},isGeometryCollectionOrDerived:function(){return this.getSortIndex()===B.SORTINDEX_GEOMETRYCOLLECTION||this.getSortIndex()===B.SORTINDEX_MULTIPOINT||this.getSortIndex()===B.SORTINDEX_MULTILINESTRING||this.getSortIndex()===B.SORTINDEX_MULTIPOLYGON},interfaces_:function(){return[r,i,o]},getClass:function(){return B}}),B.hasNonEmptyElements=function(t){for(var e=0;e<t.length;e++)if(!t[e].isEmpty())return!0;return!1},B.hasNullElements=function(t){for(var e=0;e<t.length;e++)if(null===t[e])return!0;return!1},B.serialVersionUID=0x799ea46522854c00,B.SORTINDEX_POINT=0,B.SORTINDEX_MULTIPOINT=1,B.SORTINDEX_LINESTRING=2,B.SORTINDEX_LINEARRING=3,B.SORTINDEX_MULTILINESTRING=4,B.SORTINDEX_POLYGON=5,B.SORTINDEX_MULTIPOLYGON=6,B.SORTINDEX_GEOMETRYCOLLECTION=7,B.geometryChangedFilter={interfaces_:function(){return[q]},filter:function(t){t.geometryChangedAction()}},e(z.prototype,{filter:function(t){},interfaces_:function(){return[]},getClass:function(){return z}}),e(V.prototype,{isInBoundary:function(t){},interfaces_:function(){return[]},getClass:function(){return V}}),e(k.prototype,{isInBoundary:function(t){return t%2==1},interfaces_:function(){return[V]},getClass:function(){return k}}),e(Y.prototype,{isInBoundary:function(t){return 0<t},interfaces_:function(){return[V]},getClass:function(){return Y}}),e(U.prototype,{isInBoundary:function(t){return 1<t},interfaces_:function(){return[V]},getClass:function(){return U}}),e(X.prototype,{isInBoundary:function(t){return 1===t},interfaces_:function(){return[V]},getClass:function(){return X}}),V.Mod2BoundaryNodeRule=k,V.EndPointBoundaryNodeRule=Y,V.MultiValentEndPointBoundaryNodeRule=U,V.MonoValentEndPointBoundaryNodeRule=X,V.MOD2_BOUNDARY_RULE=new k,V.ENDPOINT_BOUNDARY_RULE=new Y,V.MULTIVALENT_ENDPOINT_BOUNDARY_RULE=new U,V.MONOVALENT_ENDPOINT_BOUNDARY_RULE=new X,V.OGC_SFS_BOUNDARY_RULE=V.MOD2_BOUNDARY_RULE,e(H.prototype,{interfaces_:function(){return[]},getClass:function(){return H}}),H.isRing=function(t){return!(t.length<4)&&!!t[0].equals2D(t[t.length-1])},H.ptNotInList=function(t,e){for(var n=0;n<t.length;n++){var i=t[n];if(H.indexOf(i,e)<0)return i}return null},H.scroll=function(t,e){var n=H.indexOf(e,t);if(n<0)return null;e=new Array(t.length).fill(null);A.arraycopy(t,n,e,0,t.length-n),A.arraycopy(t,0,e,t.length-n,n),A.arraycopy(e,0,t,0,t.length)},H.equals=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];if(t===e)return!0;if(null===t||null===e)return!1;if(t.length!==e.length)return!1;for(var n=0;n<t.length;n++)if(!t[n].equals(e[n]))return!1;return!0}if(3===arguments.length){var i=arguments[0],r=arguments[1],s=arguments[2];if(i===r)return!0;if(null===i||null===r)return!1;if(i.length!==r.length)return!1;for(n=0;n<i.length;n++)if(0!==s.compare(i[n],r[n]))return!1;return!0}},H.intersection=function(t,e){for(var n=new N,i=0;i<t.length;i++)e.intersects(t[i])&&n.add(t[i],!0);return n.toCoordinateArray()},H.hasRepeatedPoints=function(t){for(var e=1;e<t.length;e++)if(t[e-1].equals(t[e]))return!0;return!1},H.removeRepeatedPoints=function(t){return H.hasRepeatedPoints(t)?new N(t,!1).toCoordinateArray():t},H.reverse=function(t){for(var e=t.length-1,n=Math.trunc(e/2),i=0;i<=n;i++){var r=t[i];t[i]=t[e-i],t[e-i]=r}},H.removeNull=function(t){for(var e=0,n=0;n<t.length;n++)null!==t[n]&&e++;var i=new Array(e).fill(null);if(0===e)return i;for(var r=0,n=0;n<t.length;n++)null!==t[n]&&(i[r++]=t[n]);return i},H.copyDeep=function(){if(1===arguments.length){for(var t=arguments[0],e=new Array(t.length).fill(null),n=0;n<t.length;n++)e[n]=new d(t[n]);return e}if(5===arguments.length)for(var i=arguments[0],r=arguments[1],s=arguments[2],o=arguments[3],a=arguments[4],n=0;n<a;n++)s[o+n]=new d(i[r+n])},H.isEqualReversed=function(t,e){for(var n=0;n<t.length;n++){var i=t[n],r=e[t.length-n-1];if(0!==i.compareTo(r))return!1}return!0},H.envelope=function(t){for(var e=new C,n=0;n<t.length;n++)e.expandToInclude(t[n]);return e},H.toCoordinateArray=function(t){return t.toArray(H.coordArrayType)},H.atLeastNCoordinatesOrNothing=function(t,e){return e.length>=t?e:[]},H.indexOf=function(t,e){for(var n=0;n<e.length;n++)if(t.equals(e[n]))return n;return-1},H.increasingDirection=function(t){for(var e=0;e<Math.trunc(t.length/2);e++){var n=t.length-1-e,n=t[e].compareTo(t[n]);if(0!==n)return n}return 1},H.compare=function(t,e){for(var n=0;n<t.length&&n<e.length;){var i=t[n].compareTo(e[n]);if(0!==i)return i;n++}return n<e.length?-1:n<t.length?1:0},H.minCoordinate=function(t){for(var e=null,n=0;n<t.length;n++)(null===e||0<e.compareTo(t[n]))&&(e=t[n]);return e},H.extract=function(t,e,n){e=T.clamp(e,0,t.length);var i=(n=T.clamp(n,-1,t.length))<0?0:n-e+1;e>=t.length&&(i=0),n<e&&(i=0);var r=new Array(i).fill(null);if(0===i)return r;for(var s=0,o=e;o<=n;o++)r[s++]=t[o];return r},e(W.prototype,{compare:function(t,e){return H.compare(t,e)},interfaces_:function(){return[s]},getClass:function(){return W}}),e(j.prototype,{compare:function(t,e){var n=t,t=e;if(n.length<t.length)return-1;if(n.length>t.length)return 1;if(0===n.length)return 0;e=H.compare(n,t);return H.isEqualReversed(n,t)?0:e},OLDcompare:function(t,e){var n=t,i=e;if(n.length<i.length)return-1;if(n.length>i.length)return 1;if(0===n.length)return 0;for(var r=H.increasingDirection(n),s=H.increasingDirection(i),o=0<r?0:n.length-1,a=0<s?0:n.length-1,u=0;u<n.length;u++){var l=n[o].compareTo(i[a]);if(0!==l)return l;o+=r,a+=s}return 0},interfaces_:function(){return[s]},getClass:function(){return j}}),H.ForwardComparator=W,H.BidirectionalComparator=j,H.coordArrayType=new Array(0).fill(null),K.prototype.get=function(){},K.prototype.put=function(){},K.prototype.size=function(){},K.prototype.values=function(){},K.prototype.entrySet=function(){},Z.prototype=new K,(J.prototype=new m).contains=function(){},(Q.prototype=new J).contains=function(t){for(var e=0,n=this.array_.length;e<n;e++){if(this.array_[e]===t)return!0}return!1},Q.prototype.add=function(t){return!this.contains(t)&&(this.array_.push(t),!0)},Q.prototype.addAll=function(t){for(var e=t.iterator();e.hasNext();)this.add(e.next());return!0},Q.prototype.remove=function(t){throw new javascript.util.OperationNotSupported},Q.prototype.size=function(){return this.array_.length},Q.prototype.isEmpty=function(){return 0===this.array_.length},Q.prototype.toArray=function(){for(var t=[],e=0,n=this.array_.length;e<n;e++)t.push(this.array_[e]);return t},Q.prototype.iterator=function(){return new Fs(this)};var Fs=function(t){this.hashSet_=t,this.position_=0};Fs.prototype.next=function(){if(this.position_===this.hashSet_.size())throw new x;return this.hashSet_.array_[this.position_++]},Fs.prototype.hasNext=function(){return this.position_<this.hashSet_.size()},Fs.prototype.remove=function(){throw new E};var Gs=0;(rt.prototype=new Z).get=function(t){for(var e=this.root_;null!==e;){var n=t.compareTo(e.key);if(n<0)e=e.left;else{if(!(0<n))return e.value;e=e.right}}return null},rt.prototype.put=function(t,e){if(null===this.root_)return this.root_={key:t,value:e,left:null,right:null,parent:null,color:Gs,getValue:function(){return this.value},getKey:function(){return this.key}},this.size_=1,null;var n,i,r=this.root_;do{if(n=r,(i=t.compareTo(r.key))<0)r=r.left;else{if(!(0<i)){var s=r.value;return r.value=e,s}r=r.right}}while(null!==r);var o={key:t,left:null,right:null,value:e,parent:n,color:Gs,getValue:function(){return this.value},getKey:function(){return this.key}};return i<0?n.left=o:n.right=o,this.fixAfterInsertion(o),this.size_++,null},rt.prototype.fixAfterInsertion=function(t){for(t.color=1;null!=t&&t!=this.root_&&1==t.parent.color;){var e;tt(t)==nt(tt(tt(t)))?1==$(e=it(tt(tt(t))))?(et(tt(t),Gs),et(e,Gs),et(tt(tt(t)),1),t=tt(tt(t))):(t==it(tt(t))&&(t=tt(t),this.rotateLeft(t)),et(tt(t),Gs),et(tt(tt(t)),1),this.rotateRight(tt(tt(t)))):1==$(e=nt(tt(tt(t))))?(et(tt(t),Gs),et(e,Gs),et(tt(tt(t)),1),t=tt(tt(t))):(t==nt(tt(t))&&(t=tt(t),this.rotateRight(t)),et(tt(t),Gs),et(tt(tt(t)),1),this.rotateLeft(tt(tt(t))))}this.root_.color=Gs},rt.prototype.values=function(){var t=new I,e=this.getFirstEntry();if(null!==e)for(t.add(e.value);null!==(e=rt.successor(e));)t.add(e.value);return t},rt.prototype.entrySet=function(){var t=new Q,e=this.getFirstEntry();if(null!==e)for(t.add(e);null!==(e=rt.successor(e));)t.add(e);return t},rt.prototype.rotateLeft=function(t){var e;null!=t&&(e=t.right,t.right=e.left,null!=e.left&&(e.left.parent=t),e.parent=t.parent,null==t.parent?this.root_=e:t.parent.left==t?t.parent.left=e:t.parent.right=e,(e.left=t).parent=e)},rt.prototype.rotateRight=function(t){var e;null!=t&&(e=t.left,t.left=e.right,null!=e.right&&(e.right.parent=t),e.parent=t.parent,null==t.parent?this.root_=e:t.parent.right==t?t.parent.right=e:t.parent.left=e,(e.right=t).parent=e)},rt.prototype.getFirstEntry=function(){var t=this.root_;if(null!=t)for(;null!=t.left;)t=t.left;return t},rt.successor=function(t){if(null===t)return null;if(null!==t.right){for(var e=t.right;null!==e.left;)e=e.left;return e}for(var e=t.parent,n=t;null!==e&&n===e.right;)e=(n=e).parent;return e},rt.prototype.size=function(){return this.size_},e(st.prototype,{interfaces_:function(){return[]},getClass:function(){return st}}),ot.prototype=new J,(at.prototype=new ot).contains=function(t){for(var e=0,n=this.array_.length;e<n;e++){if(0===this.array_[e].compareTo(t))return!0}return!1},at.prototype.add=function(t){if(this.contains(t))return!1;for(var e=0,n=this.array_.length;e<n;e++){if(1===this.array_[e].compareTo(t))return this.array_.splice(e,0,t),!0}return this.array_.push(t),!0},at.prototype.addAll=function(t){for(var e=t.iterator();e.hasNext();)this.add(e.next());return!0},at.prototype.remove=function(t){throw new E},at.prototype.size=function(){return this.array_.length},at.prototype.isEmpty=function(){return 0===this.array_.length},at.prototype.toArray=function(){for(var t=[],e=0,n=this.array_.length;e<n;e++)t.push(this.array_[e]);return t},at.prototype.iterator=function(){return new qs(this)};var qs=function(t){this.treeSet_=t,this.position_=0};qs.prototype.next=function(){if(this.position_===this.treeSet_.size())throw new x;return this.treeSet_.array_[this.position_++]},qs.prototype.hasNext=function(){return this.position_<this.treeSet_.size()},qs.prototype.remove=function(){throw new E},ut.sort=function(){var t,e,n,i,r=arguments[0];if(1===arguments.length)return i=function(t,e){return t.compareTo(e)},void r.sort(i);if(2===arguments.length)n=arguments[1],i=function(t,e){return n.compare(t,e)},r.sort(i);else if(3!==arguments.length){if(4===arguments.length)for(e=r.slice(arguments[1],arguments[2]),n=arguments[3],i=function(t,e){return n.compare(t,e)},e.sort(i),s=r.slice(0,arguments[1]).concat(e,r.slice(arguments[2],r.length)),r.splice(0,r.length),t=0;t<s.length;t++)r.push(s[t])}else{(e=r.slice(arguments[1],arguments[2])).sort();var s=r.slice(0,arguments[1]).concat(e,r.slice(arguments[2],r.length));for(r.splice(0,r.length),t=0;t<s.length;t++)r.push(s[t])}},ut.asList=function(t){for(var e=new I,n=0,i=t.length;n<i;n++)e.add(t[n]);return e},e(lt.prototype,{interfaces_:function(){return[]},getClass:function(){return lt}}),lt.toDimensionSymbol=function(t){switch(t){case lt.FALSE:return lt.SYM_FALSE;case lt.TRUE:return lt.SYM_TRUE;case lt.DONTCARE:return lt.SYM_DONTCARE;case lt.P:return lt.SYM_P;case lt.L:return lt.SYM_L;case lt.A:return lt.SYM_A}throw new c},lt.toDimensionValue=function(t){switch(O.toUpperCase(t)){case lt.SYM_FALSE:return lt.FALSE;case lt.SYM_TRUE:return lt.TRUE;case lt.SYM_DONTCARE:return lt.DONTCARE;case lt.SYM_P:return lt.P;case lt.SYM_L:return lt.L;case lt.SYM_A:return lt.A}throw new c},lt.P=0,lt.L=1,lt.A=2,lt.FALSE=-1,lt.TRUE=-2,lt.DONTCARE=-3,lt.SYM_FALSE="F",lt.SYM_TRUE="T",lt.SYM_DONTCARE="*",lt.SYM_P="0",lt.SYM_L="1",lt.SYM_A="2",e(ht.prototype,{filter:function(t){},interfaces_:function(){return[]},getClass:function(){return ht}}),e(ct.prototype,{filter:function(t,e){},isDone:function(){},isGeometryChanged:function(){},interfaces_:function(){return[]},getClass:function(){return ct}}),a(ft,B),e(ft.prototype,{computeEnvelopeInternal:function(){for(var t=new C,e=0;e<this.geometries.length;e++)t.expandToInclude(this.geometries[e].getEnvelopeInternal());return t},getGeometryN:function(t){return this.geometries[t]},getSortIndex:function(){return B.SORTINDEX_GEOMETRYCOLLECTION},getCoordinates:function(){for(var t=new Array(this.getNumPoints()).fill(null),e=-1,n=0;n<this.geometries.length;n++)for(var i=this.geometries[n].getCoordinates(),r=0;r<i.length;r++)t[++e]=i[r];return t},getArea:function(){for(var t=0,e=0;e<this.geometries.length;e++)t+=this.geometries[e].getArea();return t},equalsExact:function(){if(2!==arguments.length)return B.prototype.equalsExact.apply(this,arguments);var t=arguments[0],e=arguments[1];if(!this.isEquivalentClass(t))return!1;var n=t;if(this.geometries.length!==n.geometries.length)return!1;for(var i=0;i<this.geometries.length;i++)if(!this.geometries[i].equalsExact(n.geometries[i],e))return!1;return!0},normalize:function(){for(var t=0;t<this.geometries.length;t++)this.geometries[t].normalize();ut.sort(this.geometries)},getCoordinate:function(){return this.isEmpty()?null:this.geometries[0].getCoordinate()},getBoundaryDimension:function(){for(var t=lt.FALSE,e=0;e<this.geometries.length;e++)t=Math.max(t,this.geometries[e].getBoundaryDimension());return t},getDimension:function(){for(var t=lt.FALSE,e=0;e<this.geometries.length;e++)t=Math.max(t,this.geometries[e].getDimension());return t},getLength:function(){for(var t=0,e=0;e<this.geometries.length;e++)t+=this.geometries[e].getLength();return t},getNumPoints:function(){for(var t=0,e=0;e<this.geometries.length;e++)t+=this.geometries[e].getNumPoints();return t},getNumGeometries:function(){return this.geometries.length},reverse:function(){for(var t=this.geometries.length,e=new Array(t).fill(null),n=0;n<this.geometries.length;n++)e[n]=this.geometries[n].reverse();return this.getFactory().createGeometryCollection(e)},compareToSameClass:function(){if(1===arguments.length){var t=arguments[0],e=new at(ut.asList(this.geometries)),t=new at(ut.asList(t.geometries));return this.compare(e,t)}if(2===arguments.length){for(var n=arguments[1],i=arguments[0],r=this.getNumGeometries(),s=i.getNumGeometries(),o=0;o<r&&o<s;){var a=this.getGeometryN(o),u=i.getGeometryN(o),u=a.compareToSameClass(u,n);if(0!==u)return u;o++}return o<r?1:o<s?-1:0}},apply:function(){if(R(arguments[0],z))for(var t=arguments[0],e=0;e<this.geometries.length;e++)this.geometries[e].apply(t);else if(R(arguments[0],ct)){var n=arguments[0];if(0===this.geometries.length)return null;for(e=0;e<this.geometries.length&&(this.geometries[e].apply(n),!n.isDone());e++);n.isGeometryChanged()&&this.geometryChanged()}else if(R(arguments[0],ht)){var i=arguments[0];i.filter(this);for(e=0;e<this.geometries.length;e++)this.geometries[e].apply(i)}else if(R(arguments[0],q)){var r=arguments[0];r.filter(this);for(e=0;e<this.geometries.length;e++)this.geometries[e].apply(r)}},getBoundary:function(){return this.checkNotGeometryCollection(this),l.shouldNeverReachHere(),null},clone:function(){var t=B.prototype.clone.call(this);t.geometries=new Array(this.geometries.length).fill(null);for(var e=0;e<this.geometries.length;e++)t.geometries[e]=this.geometries[e].clone();return t},getGeometryType:function(){return"GeometryCollection"},copy:function(){for(var t=new Array(this.geometries.length).fill(null),e=0;e<t.length;e++)t[e]=this.geometries[e].copy();return new ft(t,this.factory)},isEmpty:function(){for(var t=0;t<this.geometries.length;t++)if(!this.geometries[t].isEmpty())return!1;return!0},interfaces_:function(){return[]},getClass:function(){return ft}}),ft.serialVersionUID=-0x4f07bcb1f857d800,a(gt,ft),e(gt.prototype,{getSortIndex:function(){return B.SORTINDEX_MULTILINESTRING},equalsExact:function(){if(2!==arguments.length)return ft.prototype.equalsExact.apply(this,arguments);var t=arguments[0],e=arguments[1];return!!this.isEquivalentClass(t)&&ft.prototype.equalsExact.call(this,t,e)},getBoundaryDimension:function(){return this.isClosed()?lt.FALSE:0},isClosed:function(){if(this.isEmpty())return!1;for(var t=0;t<this.geometries.length;t++)if(!this.geometries[t].isClosed())return!1;return!0},getDimension:function(){return 1},reverse:function(){for(var t=this.geometries.length,e=new Array(t).fill(null),n=0;n<this.geometries.length;n++)e[t-1-n]=this.geometries[n].reverse();return this.getFactory().createMultiLineString(e)},getBoundary:function(){return new dt(this).getBoundary()},getGeometryType:function(){return"MultiLineString"},copy:function(){for(var t=new Array(this.geometries.length).fill(null),e=0;e<t.length;e++)t[e]=this.geometries[e].copy();return new gt(t,this.factory)},interfaces_:function(){return[st]},getClass:function(){return gt}}),gt.serialVersionUID=0x7155d2ab4afa8000,e(dt.prototype,{boundaryMultiLineString:function(t){if(this.geom.isEmpty())return this.getEmptyMultiPoint();t=this.computeBoundaryCoordinates(t);return 1===t.length?this.geomFact.createPoint(t[0]):this.geomFact.createMultiPointFromCoords(t)},getBoundary:function(){return this.geom instanceof Ct?this.boundaryLineString(this.geom):this.geom instanceof gt?this.boundaryMultiLineString(this.geom):this.geom.getBoundary()},boundaryLineString:function(t){return this.geom.isEmpty()?this.getEmptyMultiPoint():t.isClosed()?this.bnRule.isInBoundary(2)?t.getStartPoint():this.geomFact.createMultiPoint():this.geomFact.createMultiPoint([t.getStartPoint(),t.getEndPoint()])},getEmptyMultiPoint:function(){return this.geomFact.createMultiPoint()},computeBoundaryCoordinates:function(t){var e=new I;this.endpointMap=new rt;for(var n=0;n<t.getNumGeometries();n++){var i=t.getGeometryN(n);0!==i.getNumPoints()&&(this.addEndpoint(i.getCoordinateN(0)),this.addEndpoint(i.getCoordinateN(i.getNumPoints()-1)))}for(var r=this.endpointMap.entrySet().iterator();r.hasNext();){var s=r.next(),o=s.getValue().count;this.bnRule.isInBoundary(o)&&e.add(s.getKey())}return H.toCoordinateArray(e)},addEndpoint:function(t){var e=this.endpointMap.get(t);null===e&&(e=new pt,this.endpointMap.put(t,e)),e.count++},interfaces_:function(){return[]},getClass:function(){return dt}}),dt.getBoundary=function(){return 1===arguments.length?new dt(arguments[0]).getBoundary():2===arguments.length?new dt(arguments[0],arguments[1]).getBoundary():void 0},e(pt.prototype,{interfaces_:function(){return[]},getClass:function(){return pt}}),e(It.prototype,{interfaces_:function(){return[]},getClass:function(){return It}}),It.chars=function(t,e){for(var n=new Array(e).fill(null),i=0;i<e;i++)n[i]=t;return new String(n)},It.getStackTrace=function(){if(1===arguments.length){var t=new vt,e=new mt;return arguments[0].printStackTrace(e),t.toString()}if(2===arguments.length){for(var n=arguments[1],i="",r=new Et(It.getStackTrace(arguments[0])),s=0;s<n;s++)try{i+=r.readLine()+It.NEWLINE}catch(t){if(!(t instanceof xt))throw t;l.shouldNeverReachHere()}return i}},It.split=function(t,e){for(var n=e.length,i=new I,r=""+t,s=r.indexOf(e);0<=s;){var o=r.substring(0,s);i.add(o),s=(r=r.substring(s+n)).indexOf(e)}0<r.length&&i.add(r);for(var a=new Array(i.size()).fill(null),u=0;u<a.length;u++)a[u]=i.get(u);return a},It.toString=function(){if(1===arguments.length){var t=arguments[0];return It.SIMPLE_ORDINATE_FORMAT.format(t)}},It.spaces=function(t){return It.chars(" ",t)},It.NEWLINE=A.getProperty("line.separator"),It.SIMPLE_ORDINATE_FORMAT=new function(){},e(Nt.prototype,{interfaces_:function(){return[]},getClass:function(){return Nt}}),Nt.copyCoord=function(t,e,n,i){for(var r=Math.min(t.getDimension(),n.getDimension()),s=0;s<r;s++)n.setOrdinate(i,s,t.getOrdinate(e,s))},Nt.isRing=function(t){var e=t.size();return 0===e||!(e<=3)&&(t.getOrdinate(0,D.X)===t.getOrdinate(e-1,D.X)&&t.getOrdinate(0,D.Y)===t.getOrdinate(e-1,D.Y))},Nt.isEqual=function(t,e){var n=t.size();if(n!==e.size())return!1;for(var i=Math.min(t.getDimension(),e.getDimension()),r=0;r<n;r++)for(var s=0;s<i;s++){var o=t.getOrdinate(r,s),a=e.getOrdinate(r,s);if(!(t.getOrdinate(r,s)===e.getOrdinate(r,s)||g.isNaN(o)&&g.isNaN(a)))return!1}return!0},Nt.extend=function(t,e,n){var i=t.create(n,e.getDimension()),r=e.size();if(Nt.copy(e,0,i,0,r),0<r)for(var s=r;s<n;s++)Nt.copy(e,r-1,i,s,1);return i},Nt.reverse=function(t){for(var e=t.size()-1,n=Math.trunc(e/2),i=0;i<=n;i++)Nt.swap(t,i,e-i)},Nt.swap=function(t,e,n){if(e===n)return null;for(var i=0;i<t.getDimension();i++){var r=t.getOrdinate(e,i);t.setOrdinate(e,i,t.getOrdinate(n,i)),t.setOrdinate(n,i,r)}},Nt.copy=function(t,e,n,i,r){for(var s=0;s<r;s++)Nt.copyCoord(t,e+s,n,i+s)},Nt.toString=function(){if(1===arguments.length){var t=arguments[0],e=t.size();if(0===e)return"()";var n=t.getDimension(),i=new P;i.append("(");for(var r=0;r<e;r++){0<r&&i.append(" ");for(var s=0;s<n;s++)0<s&&i.append(","),i.append(It.toString(t.getOrdinate(r,s)))}return i.append(")"),i.toString()}},Nt.ensureValidRing=function(t,e){var n=e.size();return 0===n?e:n<=3?Nt.createClosedRing(t,e,4):e.getOrdinate(0,D.X)===e.getOrdinate(n-1,D.X)&&e.getOrdinate(0,D.Y)===e.getOrdinate(n-1,D.Y)?e:Nt.createClosedRing(t,e,n+1)},Nt.createClosedRing=function(t,e,n){var i=t.create(n,e.getDimension()),t=e.size();Nt.copy(e,0,i,0,t);for(var r=t;r<n;r++)Nt.copy(e,0,i,r,1);return i},a(Ct,B),e(Ct.prototype,{computeEnvelopeInternal:function(){return this.isEmpty()?new C:this.points.expandEnvelope(new C)},isRing:function(){return this.isClosed()&&this.isSimple()},getSortIndex:function(){return B.SORTINDEX_LINESTRING},getCoordinates:function(){return this.points.toCoordinateArray()},equalsExact:function(){if(2!==arguments.length)return B.prototype.equalsExact.apply(this,arguments);var t=arguments[0],e=arguments[1];if(!this.isEquivalentClass(t))return!1;var n=t;if(this.points.size()!==n.points.size())return!1;for(var i=0;i<this.points.size();i++)if(!this.equal(this.points.getCoordinate(i),n.points.getCoordinate(i),e))return!1;return!0},normalize:function(){for(var t=0;t<Math.trunc(this.points.size()/2);t++){var e=this.points.size()-1-t;if(!this.points.getCoordinate(t).equals(this.points.getCoordinate(e)))return 0<this.points.getCoordinate(t).compareTo(this.points.getCoordinate(e))&&Nt.reverse(this.points),null}},getCoordinate:function(){return this.isEmpty()?null:this.points.getCoordinate(0)},getBoundaryDimension:function(){return this.isClosed()?lt.FALSE:0},isClosed:function(){return!this.isEmpty()&&this.getCoordinateN(0).equals2D(this.getCoordinateN(this.getNumPoints()-1))},getEndPoint:function(){return this.isEmpty()?null:this.getPointN(this.getNumPoints()-1)},getDimension:function(){return 1},getLength:function(){return Zt.computeLength(this.points)},getNumPoints:function(){return this.points.size()},reverse:function(){var t=this.points.copy();return Nt.reverse(t),this.getFactory().createLineString(t)},compareToSameClass:function(){if(1===arguments.length){for(var t=arguments[0],e=0,n=0;e<this.points.size()&&n<t.points.size();){var i=this.points.getCoordinate(e).compareTo(t.points.getCoordinate(n));if(0!==i)return i;e++,n++}return e<this.points.size()?1:n<t.points.size()?-1:0}if(2===arguments.length){t=arguments[0];return arguments[1].compare(this.points,t.points)}},apply:function(){if(R(arguments[0],z))for(var t=arguments[0],e=0;e<this.points.size();e++)t.filter(this.points.getCoordinate(e));else if(R(arguments[0],ct)){var n=arguments[0];if(0===this.points.size())return null;for(e=0;e<this.points.size()&&(n.filter(this.points,e),!n.isDone());e++);n.isGeometryChanged()&&this.geometryChanged()}else{(R(arguments[0],ht)||R(arguments[0],q))&&arguments[0].filter(this)}},getBoundary:function(){return new dt(this).getBoundary()},isEquivalentClass:function(t){return t instanceof Ct},clone:function(){var t=B.prototype.clone.call(this);return t.points=this.points.clone(),t},getCoordinateN:function(t){return this.points.getCoordinate(t)},getGeometryType:function(){return"LineString"},copy:function(){return new Ct(this.points.copy(),this.factory)},getCoordinateSequence:function(){return this.points},isEmpty:function(){return 0===this.points.size()},init:function(t){if(null===t&&(t=this.getFactory().getCoordinateSequenceFactory().create([])),1===t.size())throw new c(t.size());this.points=t},isCoordinate:function(t){for(var e=0;e<this.points.size();e++)if(this.points.getCoordinate(e).equals(t))return!0;return!1},getStartPoint:function(){return this.isEmpty()?null:this.getPointN(0)},getPointN:function(t){return this.getFactory().createPoint(this.points.getCoordinate(t))},interfaces_:function(){return[st]},getClass:function(){return Ct}}),Ct.serialVersionUID=0x2b2b51ba435c8e00,e(St.prototype,{interfaces_:function(){return[]},getClass:function(){return St}}),a(wt,B),e(wt.prototype,{computeEnvelopeInternal:function(){if(this.isEmpty())return new C;var t=new C;return t.expandToInclude(this.coordinates.getX(0),this.coordinates.getY(0)),t},getSortIndex:function(){return B.SORTINDEX_POINT},getCoordinates:function(){return this.isEmpty()?[]:[this.getCoordinate()]},equalsExact:function(){if(2!==arguments.length)return B.prototype.equalsExact.apply(this,arguments);var t=arguments[0],e=arguments[1];return!!this.isEquivalentClass(t)&&(!(!this.isEmpty()||!t.isEmpty())||this.isEmpty()===t.isEmpty()&&this.equal(t.getCoordinate(),this.getCoordinate(),e))},normalize:function(){},getCoordinate:function(){return 0!==this.coordinates.size()?this.coordinates.getCoordinate(0):null},getBoundaryDimension:function(){return lt.FALSE},getDimension:function(){return 0},getNumPoints:function(){return this.isEmpty()?0:1},reverse:function(){return this.copy()},getX:function(){if(null===this.getCoordinate())throw new IllegalStateException("getX called on empty Point");return this.getCoordinate().x},compareToSameClass:function(){if(1===arguments.length){var t=arguments[0];return this.getCoordinate().compareTo(t.getCoordinate())}if(2===arguments.length){t=arguments[0];return arguments[1].compare(this.coordinates,t.coordinates)}},apply:function(){if(R(arguments[0],z)){var t=arguments[0];if(this.isEmpty())return null;t.filter(this.getCoordinate())}else if(R(arguments[0],ct)){t=arguments[0];if(this.isEmpty())return null;t.filter(this.coordinates,0),t.isGeometryChanged()&&this.geometryChanged()}else{(R(arguments[0],ht)||R(arguments[0],q))&&arguments[0].filter(this)}},getBoundary:function(){return this.getFactory().createGeometryCollection(null)},clone:function(){var t=B.prototype.clone.call(this);return t.coordinates=this.coordinates.clone(),t},getGeometryType:function(){return"Point"},copy:function(){return new wt(this.coordinates.copy(),this.factory)},getCoordinateSequence:function(){return this.coordinates},getY:function(){if(null===this.getCoordinate())throw new IllegalStateException("getY called on empty Point");return this.getCoordinate().y},isEmpty:function(){return 0===this.coordinates.size()},init:function(t){null===t&&(t=this.getFactory().getCoordinateSequenceFactory().create([])),l.isTrue(t.size()<=1),this.coordinates=t},isSimple:function(){return!0},interfaces_:function(){return[St]},getClass:function(){return wt}}),wt.serialVersionUID=0x44077bad161cbc00,e(Lt.prototype,{interfaces_:function(){return[]},getClass:function(){return Lt}}),a(Rt,B),e(Rt.prototype,{computeEnvelopeInternal:function(){return this.shell.getEnvelopeInternal()},getSortIndex:function(){return B.SORTINDEX_POLYGON},getCoordinates:function(){if(this.isEmpty())return[];for(var t=new Array(this.getNumPoints()).fill(null),e=-1,n=this.shell.getCoordinates(),i=0;i<n.length;i++)t[++e]=n[i];for(var r=0;r<this.holes.length;r++)for(var s=this.holes[r].getCoordinates(),o=0;o<s.length;o++)t[++e]=s[o];return t},getArea:function(){var t=0;t+=Math.abs(Zt.signedArea(this.shell.getCoordinateSequence()));for(var e=0;e<this.holes.length;e++)t-=Math.abs(Zt.signedArea(this.holes[e].getCoordinateSequence()));return t},isRectangle:function(){if(0!==this.getNumInteriorRing())return!1;if(null===this.shell)return!1;if(5!==this.shell.getNumPoints())return!1;for(var t=this.shell.getCoordinateSequence(),e=this.getEnvelopeInternal(),n=0;n<5;n++){if((i=t.getX(n))!==e.getMinX()&&i!==e.getMaxX())return!1;if((r=t.getY(n))!==e.getMinY()&&r!==e.getMaxY())return!1}for(var i,r,s=t.getX(0),o=t.getY(0),n=1;n<=4;n++){if((i=t.getX(n))!==s==((r=t.getY(n))!==o))return!1;s=i,o=r}return!0},equalsExact:function(){if(2!==arguments.length)return B.prototype.equalsExact.apply(this,arguments);var t=arguments[0],e=arguments[1];if(!this.isEquivalentClass(t))return!1;var n=t,i=this.shell,t=n.shell;if(!i.equalsExact(t,e))return!1;if(this.holes.length!==n.holes.length)return!1;for(var r=0;r<this.holes.length;r++)if(!this.holes[r].equalsExact(n.holes[r],e))return!1;return!0},normalize:function(){if(0===arguments.length){this.normalize(this.shell,!0);for(var t=0;t<this.holes.length;t++)this.normalize(this.holes[t],!1);ut.sort(this.holes)}else if(2===arguments.length){var e=arguments[0],n=arguments[1];if(e.isEmpty())return null;var i=new Array(e.getCoordinates().length-1).fill(null);A.arraycopy(e.getCoordinates(),0,i,0,i.length);var r=H.minCoordinate(e.getCoordinates());H.scroll(i,r),A.arraycopy(i,0,e.getCoordinates(),0,i.length),e.getCoordinates()[i.length]=i[0],Zt.isCCW(e.getCoordinates())===n&&H.reverse(e.getCoordinates())}},getCoordinate:function(){return this.shell.getCoordinate()},getNumInteriorRing:function(){return this.holes.length},getBoundaryDimension:function(){return 1},getDimension:function(){return 2},getLength:function(){var t=0;t+=this.shell.getLength();for(var e=0;e<this.holes.length;e++)t+=this.holes[e].getLength();return t},getNumPoints:function(){for(var t=this.shell.getNumPoints(),e=0;e<this.holes.length;e++)t+=this.holes[e].getNumPoints();return t},reverse:function(){var t=this.copy();t.shell=this.shell.copy().reverse(),t.holes=new Array(this.holes.length).fill(null);for(var e=0;e<this.holes.length;e++)t.holes[e]=this.holes[e].copy().reverse();return t},convexHull:function(){return this.getExteriorRing().convexHull()},compareToSameClass:function(){if(1===arguments.length){var t=arguments[0],e=this.shell,t=t.shell;return e.compareToSameClass(t)}if(2===arguments.length){var n=arguments[1],i=arguments[0],e=this.shell,t=i.shell,t=e.compareToSameClass(t,n);if(0!==t)return t;for(var r=this.getNumInteriorRing(),s=i.getNumInteriorRing(),o=0;o<r&&o<s;){var a=this.getInteriorRingN(o),u=i.getInteriorRingN(o),u=a.compareToSameClass(u,n);if(0!==u)return u;o++}return o<r?1:o<s?-1:0}},apply:function(){if(R(arguments[0],z)){var t=arguments[0];this.shell.apply(t);for(var e=0;e<this.holes.length;e++)this.holes[e].apply(t)}else if(R(arguments[0],ct)){var n=arguments[0];if(this.shell.apply(n),!n.isDone())for(e=0;e<this.holes.length&&(this.holes[e].apply(n),!n.isDone());e++);n.isGeometryChanged()&&this.geometryChanged()}else if(R(arguments[0],ht)){arguments[0].filter(this)}else if(R(arguments[0],q)){var i=arguments[0];i.filter(this),this.shell.apply(i);for(e=0;e<this.holes.length;e++)this.holes[e].apply(i)}},getBoundary:function(){if(this.isEmpty())return this.getFactory().createMultiLineString();var t=new Array(this.holes.length+1).fill(null);t[0]=this.shell;for(var e=0;e<this.holes.length;e++)t[e+1]=this.holes[e];return t.length<=1?this.getFactory().createLinearRing(t[0].getCoordinateSequence()):this.getFactory().createMultiLineString(t)},clone:function(){var t=B.prototype.clone.call(this);t.shell=this.shell.clone(),t.holes=new Array(this.holes.length).fill(null);for(var e=0;e<this.holes.length;e++)t.holes[e]=this.holes[e].clone();return t},getGeometryType:function(){return"Polygon"},copy:function(){for(var t=this.shell.copy(),e=new Array(this.holes.length).fill(null),n=0;n<e.length;n++)e[n]=this.holes[n].copy();return new Rt(t,e,this.factory)},getExteriorRing:function(){return this.shell},isEmpty:function(){return this.shell.isEmpty()},getInteriorRingN:function(t){return this.holes[t]},interfaces_:function(){return[Lt]},getClass:function(){return Rt}}),Rt.serialVersionUID=-0x307ffefd8dc97200,a(Tt,ft),e(Tt.prototype,{getSortIndex:function(){return B.SORTINDEX_MULTIPOINT},isValid:function(){return!0},equalsExact:function(){if(2!==arguments.length)return ft.prototype.equalsExact.apply(this,arguments);var t=arguments[0],e=arguments[1];return!!this.isEquivalentClass(t)&&ft.prototype.equalsExact.call(this,t,e)},getCoordinate:function(){if(1!==arguments.length)return ft.prototype.getCoordinate.apply(this,arguments);var t=arguments[0];return this.geometries[t].getCoordinate()},getBoundaryDimension:function(){return lt.FALSE},getDimension:function(){return 0},getBoundary:function(){return this.getFactory().createGeometryCollection(null)},getGeometryType:function(){return"MultiPoint"},copy:function(){for(var t=new Array(this.geometries.length).fill(null),e=0;e<t.length;e++)t[e]=this.geometries[e].copy();return new Tt(t,this.factory)},interfaces_:function(){return[St]},getClass:function(){return Tt}}),Tt.serialVersionUID=-0x6fb1ed4162e0fc00,a(Pt,Ct),e(Pt.prototype,{getSortIndex:function(){return B.SORTINDEX_LINEARRING},getBoundaryDimension:function(){return lt.FALSE},isClosed:function(){return!!this.isEmpty()||Ct.prototype.isClosed.call(this)},reverse:function(){var t=this.points.copy();return Nt.reverse(t),this.getFactory().createLinearRing(t)},validateConstruction:function(){if(!this.isEmpty()&&!Ct.prototype.isClosed.call(this))throw new c;if(1<=this.getCoordinateSequence().size()&&this.getCoordinateSequence().size()<Pt.MINIMUM_VALID_SIZE)throw new c(this.getCoordinateSequence().size())},getGeometryType:function(){return"LinearRing"},copy:function(){return new Pt(this.points.copy(),this.factory)},interfaces_:function(){return[]},getClass:function(){return Pt}}),Pt.MINIMUM_VALID_SIZE=4,Pt.serialVersionUID=-0x3b229e262367a600,a(bt,ft),e(bt.prototype,{getSortIndex:function(){return B.SORTINDEX_MULTIPOLYGON},equalsExact:function(){if(2!==arguments.length)return ft.prototype.equalsExact.apply(this,arguments);var t=arguments[0],e=arguments[1];return!!this.isEquivalentClass(t)&&ft.prototype.equalsExact.call(this,t,e)},getBoundaryDimension:function(){return 1},getDimension:function(){return 2},reverse:function(){for(var t=this.geometries.length,e=new Array(t).fill(null),n=0;n<this.geometries.length;n++)e[n]=this.geometries[n].reverse();return this.getFactory().createMultiPolygon(e)},getBoundary:function(){if(this.isEmpty())return this.getFactory().createMultiLineString();for(var t=new I,e=0;e<this.geometries.length;e++)for(var n=this.geometries[e].getBoundary(),i=0;i<n.getNumGeometries();i++)t.add(n.getGeometryN(i));var r=new Array(t.size()).fill(null);return this.getFactory().createMultiLineString(t.toArray(r))},getGeometryType:function(){return"MultiPolygon"},copy:function(){for(var t=new Array(this.geometries.length).fill(null),e=0;e<t.length;e++)t[e]=this.geometries[e].copy();return new bt(t,this.factory)},interfaces_:function(){return[Lt]},getClass:function(){return bt}}),bt.serialVersionUID=-0x7a5aa1369171980,e(Ot.prototype,{setCopyUserData:function(t){this.isUserDataCopied=t},edit:function(t,e){if(null===t)return null;e=this.editInternal(t,e);return this.isUserDataCopied&&e.setUserData(t.getUserData()),e},editInternal:function(t,e){return null===this.factory&&(this.factory=t.getFactory()),t instanceof ft?this.editGeometryCollection(t,e):t instanceof Rt?this.editPolygon(t,e):t instanceof wt||t instanceof Ct?e.edit(t,this.factory):(l.shouldNeverReachHere("Unsupported Geometry class: "+t.getClass().getName()),null)},editGeometryCollection:function(t,e){for(var n=e.edit(t,this.factory),i=new I,r=0;r<n.getNumGeometries();r++){var s=this.edit(n.getGeometryN(r),e);null===s||s.isEmpty()||i.add(s)}return n.getClass()===Tt?this.factory.createMultiPoint(i.toArray([])):n.getClass()===gt?this.factory.createMultiLineString(i.toArray([])):n.getClass()===bt?this.factory.createMultiPolygon(i.toArray([])):this.factory.createGeometryCollection(i.toArray([]))},editPolygon:function(t,e){var n=e.edit(t,this.factory);if(null===n&&(n=this.factory.createPolygon(null)),n.isEmpty())return n;t=this.edit(n.getExteriorRing(),e);if(null===t||t.isEmpty())return this.factory.createPolygon();for(var i=new I,r=0;r<n.getNumInteriorRing();r++){var s=this.edit(n.getInteriorRingN(r),e);null===s||s.isEmpty()||i.add(s)}return this.factory.createPolygon(t,i.toArray([]))},interfaces_:function(){return[]},getClass:function(){return Ot}}),Ot.GeometryEditorOperation=_t,e(Mt.prototype,{edit:function(t,e){return t},interfaces_:function(){return[_t]},getClass:function(){return Mt}}),e(Dt.prototype,{edit:function(t,e){if(t instanceof Pt)return e.createLinearRing(this.editCoordinates(t.getCoordinates(),t));if(t instanceof Ct)return e.createLineString(this.editCoordinates(t.getCoordinates(),t));if(t instanceof wt){var n=this.editCoordinates(t.getCoordinates(),t);return 0<n.length?e.createPoint(n[0]):e.createPoint()}return t},interfaces_:function(){return[_t]},getClass:function(){return Dt}}),e(At.prototype,{edit:function(t,e){return t instanceof Pt?e.createLinearRing(this.edit(t.getCoordinateSequence(),t)):t instanceof Ct?e.createLineString(this.edit(t.getCoordinateSequence(),t)):t instanceof wt?e.createPoint(this.edit(t.getCoordinateSequence(),t)):t},interfaces_:function(){return[_t]},getClass:function(){return At}}),Ot.NoOpGeometryOperation=Mt,Ot.CoordinateOperation=Dt,Ot.CoordinateSequenceOperation=At,e(Ft.prototype,{setOrdinate:function(t,e,n){switch(e){case D.X:this.coordinates[t].x=n;break;case D.Y:this.coordinates[t].y=n;break;case D.Z:this.coordinates[t].z=n;break;default:throw new c}},size:function(){return this.coordinates.length},getOrdinate:function(t,e){switch(e){case D.X:return this.coordinates[t].x;case D.Y:return this.coordinates[t].y;case D.Z:return this.coordinates[t].z}return g.NaN},getCoordinate:function(){if(1===arguments.length){var t=arguments[0];return this.coordinates[t]}var e;2===arguments.length&&(e=arguments[0],(t=arguments[1]).x=this.coordinates[e].x,t.y=this.coordinates[e].y,t.z=this.coordinates[e].z)},getCoordinateCopy:function(t){return new d(this.coordinates[t])},getDimension:function(){return this.dimension},getX:function(t){return this.coordinates[t].x},clone:function(){for(var t=new Array(this.size()).fill(null),e=0;e<this.coordinates.length;e++)t[e]=this.coordinates[e].clone();return new Ft(t,this.dimension)},expandEnvelope:function(t){for(var e=0;e<this.coordinates.length;e++)t.expandToInclude(this.coordinates[e]);return t},copy:function(){for(var t=new Array(this.size()).fill(null),e=0;e<this.coordinates.length;e++)t[e]=this.coordinates[e].copy();return new Ft(t,this.dimension)},toString:function(){if(0<this.coordinates.length){var t=new P(17*this.coordinates.length);t.append("("),t.append(this.coordinates[0]);for(var e=1;e<this.coordinates.length;e++)t.append(", "),t.append(this.coordinates[e]);return t.append(")"),t.toString()}return"()"},getY:function(t){return this.coordinates[t].y},toCoordinateArray:function(){return this.coordinates},interfaces_:function(){return[D,o]},getClass:function(){return Ft}}),Ft.serialVersionUID=-0xcb44a778db18e00,e(Gt.prototype,{readResolve:function(){return Gt.instance()},create:function(){if(1===arguments.length)return arguments[0]instanceof Array||R(arguments[0],D)?new Ft(arguments[0]):void 0;if(2===arguments.length){var t=arguments[0],e=arguments[1];return 3<e&&(e=3),e<2?new Ft(t):new Ft(t,e)}},interfaces_:function(){return[G,o]},getClass:function(){return Gt}}),Gt.instance=function(){return Gt.instanceObject},Gt.serialVersionUID=-0x38e49fa6cf6f2e00,Gt.instanceObject=new Gt;var Bs,zs,Vs,ks=Object.defineProperty,Ys=(zs={delete:function(t){return this.has(t)&&(this._keys.splice(Bs,1),this._values.splice(Bs,1),this._itp.forEach(function(t){Bs<t[0]&&t[0]--})),-1<Bs},has:function(t){return function(t,e){if(this.objectOnly&&e!==Object(e))throw new TypeError("Invalid value used as weak collection key");if(e!=e||0===e)for(Bs=t.length;Bs--&&((n=t[Bs])!==(i=e)&&(n==n||i==i)););else Bs=t.indexOf(e);var n,i;return-1<Bs}.call(this,this._keys,t)},get:function(t){return this.has(t)?this._values[Bs]:void 0},set:function(t,e){return this.has(t)?this._values[Bs]=e:this._values[this._keys.push(t)-1]=e,this},keys:function(){return qt(this._itp,this._keys)},values:function(){return qt(this._itp,this._values)},entries:function(){return qt(this._itp,this._keys,this._values)},forEach:function(t,e){for(var n=this.entries();;){var i=n.next();if(i.done)break;t.call(e,i.value[1],i.value[0],this)}},clear:function(){(this._keys||0).length=this._values.length=0}},Vs||ks(zs,"size",{get:Bt}),(zs.constructor=Xs).prototype=zs,Xs),Us="undefined"!=typeof Map&&Map.prototype.values?Map:Ys;function Xs(t){return this&&this.constructor===Xs?(this._keys=[],this._values=[],this._itp=[],this.objectOnly=Vs,void(t&&function(t){this.add?t.forEach(this.add,this):t.forEach(function(t){this.set(t[0],t[1])},this)}.call(this,t))):new Xs(t)}(zt.prototype=new K).get=function(t){return this.map_.get(t)||null},zt.prototype.put=function(t,e){return this.map_.set(t,e),e},zt.prototype.values=function(){for(var t=new I,e=this.map_.values(),n=e.next();!n.done;)t.add(n.value),n=e.next();return t},zt.prototype.entrySet=function(){var e=new Q;return this.map_.entries().forEach(function(t){return e.add(t)}),e},zt.prototype.size=function(){return this.map_.size()},e(Vt.prototype,{equals:function(t){if(!(t instanceof Vt))return!1;return this.modelType===t.modelType&&this.scale===t.scale},compareTo:function(t){var e=t,t=this.getMaximumSignificantDigits(),e=e.getMaximumSignificantDigits();return new b(t).compareTo(new b(e))},getScale:function(){return this.scale},isFloating:function(){return this.modelType===Vt.FLOATING||this.modelType===Vt.FLOATING_SINGLE},getType:function(){return this.modelType},toString:function(){var t="UNKNOWN";return this.modelType===Vt.FLOATING?t="Floating":this.modelType===Vt.FLOATING_SINGLE?t="Floating-Single":this.modelType===Vt.FIXED&&(t="Fixed (Scale="+this.getScale()+")"),t},makePrecise:function(){if("number"==typeof arguments[0]){var t=arguments[0];return g.isNaN(t)?t:this.modelType!==Vt.FLOATING_SINGLE&&this.modelType===Vt.FIXED?Math.round(t*this.scale)/this.scale:t}if(arguments[0]instanceof d){t=arguments[0];if(this.modelType===Vt.FLOATING)return null;t.x=this.makePrecise(t.x),t.y=this.makePrecise(t.y)}},getMaximumSignificantDigits:function(){var t=16;return this.modelType===Vt.FLOATING?t=16:this.modelType===Vt.FLOATING_SINGLE?t=6:this.modelType===Vt.FIXED&&(t=1+Math.trunc(Math.ceil(Math.log(this.getScale())/Math.log(10)))),t},setScale:function(t){this.scale=Math.abs(t)},interfaces_:function(){return[o,i]},getClass:function(){return Vt}}),Vt.mostPrecise=function(t,e){return 0<=t.compareTo(e)?t:e},e(kt.prototype,{readResolve:function(){return kt.nameToTypeMap.get(this.name)},toString:function(){return this.name},interfaces_:function(){return[o]},getClass:function(){return kt}}),kt.serialVersionUID=-552860263173159e4,kt.nameToTypeMap=new zt,Vt.Type=kt,Vt.serialVersionUID=0x6bee6404e9a25c00,Vt.FIXED=new kt("FIXED"),Vt.FLOATING=new kt("FLOATING"),Vt.FLOATING_SINGLE=new kt("FLOATING SINGLE"),Vt.maximumPreciseValue=9007199254740992,e(Yt.prototype,{toGeometry:function(t){return t.isNull()?this.createPoint(null):t.getMinX()===t.getMaxX()&&t.getMinY()===t.getMaxY()?this.createPoint(new d(t.getMinX(),t.getMinY())):t.getMinX()===t.getMaxX()||t.getMinY()===t.getMaxY()?this.createLineString([new d(t.getMinX(),t.getMinY()),new d(t.getMaxX(),t.getMaxY())]):this.createPolygon(this.createLinearRing([new d(t.getMinX(),t.getMinY()),new d(t.getMinX(),t.getMaxY()),new d(t.getMaxX(),t.getMaxY()),new d(t.getMaxX(),t.getMinY()),new d(t.getMinX(),t.getMinY())]),null)},createLineString:function(){if(0===arguments.length)return this.createLineString(this.getCoordinateSequenceFactory().create([]));if(1===arguments.length){if(arguments[0]instanceof Array){var t=arguments[0];return this.createLineString(null!==t?this.getCoordinateSequenceFactory().create(t):null)}if(R(arguments[0],D))return new Ct(arguments[0],this)}},createMultiLineString:function(){return 0===arguments.length?new gt(null,this):1===arguments.length?new gt(arguments[0],this):void 0},buildGeometry:function(t){for(var e=null,n=!1,i=!1,r=t.iterator();r.hasNext();){var s=r.next(),o=s.getClass();null===e&&(e=o),o!==e&&(n=!0),s.isGeometryCollectionOrDerived()&&(i=!0)}if(null===e)return this.createGeometryCollection();if(n||i)return this.createGeometryCollection(Yt.toGeometryArray(t));var a=t.iterator().next();if(1<t.size()){if(a instanceof Rt)return this.createMultiPolygon(Yt.toPolygonArray(t));if(a instanceof Ct)return this.createMultiLineString(Yt.toLineStringArray(t));if(a instanceof wt)return this.createMultiPoint(Yt.toPointArray(t));l.shouldNeverReachHere("Unhandled class: "+a.getClass().getName())}return a},createMultiPointFromCoords:function(t){return this.createMultiPoint(null!==t?this.getCoordinateSequenceFactory().create(t):null)},createPoint:function(){if(0===arguments.length)return this.createPoint(this.getCoordinateSequenceFactory().create([]));if(1===arguments.length){if(arguments[0]instanceof d){var t=arguments[0];return this.createPoint(null!==t?this.getCoordinateSequenceFactory().create([t]):null)}if(R(arguments[0],D))return new wt(arguments[0],this)}},getCoordinateSequenceFactory:function(){return this.coordinateSequenceFactory},createPolygon:function(){if(0===arguments.length)return new Rt(null,null,this);if(1===arguments.length){if(R(arguments[0],D)){var t=arguments[0];return this.createPolygon(this.createLinearRing(t))}if(arguments[0]instanceof Array){var e=arguments[0];return this.createPolygon(this.createLinearRing(e))}if(arguments[0]instanceof Pt){e=arguments[0];return this.createPolygon(e,null)}}else if(2===arguments.length){return new Rt(arguments[0],arguments[1],this)}},getSRID:function(){return this.SRID},createGeometryCollection:function(){return 0===arguments.length?new ft(null,this):1===arguments.length?new ft(arguments[0],this):void 0},createGeometry:function(t){return new Ot(this).edit(t,{edit:function(){if(2===arguments.length){var t=arguments[0];return this.coordinateSequenceFactory.create(t)}}})},getPrecisionModel:function(){return this.precisionModel},createLinearRing:function(){if(0===arguments.length)return this.createLinearRing(this.getCoordinateSequenceFactory().create([]));if(1===arguments.length){if(arguments[0]instanceof Array){var t=arguments[0];return this.createLinearRing(null!==t?this.getCoordinateSequenceFactory().create(t):null)}if(R(arguments[0],D))return new Pt(arguments[0],this)}},createMultiPolygon:function(){return 0===arguments.length?new bt(null,this):1===arguments.length?new bt(arguments[0],this):void 0},createMultiPoint:function(){if(0===arguments.length)return new Tt(null,this);if(1===arguments.length){if(arguments[0]instanceof Array)return new Tt(arguments[0],this);if(arguments[0]instanceof Array){var t=arguments[0];return this.createMultiPoint(null!==t?this.getCoordinateSequenceFactory().create(t):null)}if(R(arguments[0],D)){var e=arguments[0];if(null===e)return this.createMultiPoint(new Array(0).fill(null));for(var n=new Array(e.size()).fill(null),i=0;i<e.size();i++){var r=this.getCoordinateSequenceFactory().create(1,e.getDimension());Nt.copy(e,i,r,0,1),n[i]=this.createPoint(r)}return this.createMultiPoint(n)}}},interfaces_:function(){return[o]},getClass:function(){return Yt}}),Yt.toMultiPolygonArray=function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)},Yt.toGeometryArray=function(t){if(null===t)return null;var e=new Array(t.size()).fill(null);return t.toArray(e)},Yt.getDefaultCoordinateSequenceFactory=function(){return Gt.instance()},Yt.toMultiLineStringArray=function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)},Yt.toLineStringArray=function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)},Yt.toMultiPointArray=function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)},Yt.toLinearRingArray=function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)},Yt.toPointArray=function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)},Yt.toPolygonArray=function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)},Yt.createPointFromInternalCoord=function(t,e){return e.getPrecisionModel().makePrecise(t),e.getFactory().createPoint(t)},Yt.serialVersionUID=-0x5ea75f2051eeb400;var Hs={typeStr:/^\s*(\w+)\s*\(\s*(.*)\s*\)\s*$/,emptyTypeStr:/^\s*(\w+)\s*EMPTY\s*$/,spaces:/\s+/,parenComma:/\)\s*,\s*\(/,doubleParenComma:/\)\s*\)\s*,\s*\(\s*\(/,trimParens:/^\s*\(?(.*?)\)?\s*$/};e(Ut.prototype,{read:function(t){var e,n;t=t.replace(/[\n\r]/g," ");var i=Hs.typeStr.exec(t);if(-1!==t.search("EMPTY")&&((i=Hs.emptyTypeStr.exec(t))[2]=void 0),i&&(n=i[1].toLowerCase(),i=i[2],js[n]&&(e=js[n].apply(this,[i]))),void 0===e)throw new Error("Could not parse WKT "+t);return e},write:function(t){return this.extractGeometry(t)},extractGeometry:function(t){var e=t.getGeometryType().toLowerCase();if(!Ws[e])return null;var n=e.toUpperCase();return t.isEmpty()?n+" EMPTY":n+"("+Ws[e].apply(this,[t])+")"}});var Ws={coordinate:function(t){return t.x+" "+t.y},point:function(t){return Ws.coordinate.call(this,t.coordinates.coordinates[0])},multipoint:function(t){for(var e=[],n=0,i=t.geometries.length;n<i;++n)e.push("("+Ws.point.apply(this,[t.geometries[n]])+")");return e.join(",")},linestring:function(t){for(var e=[],n=0,i=t.points.coordinates.length;n<i;++n)e.push(Ws.coordinate.apply(this,[t.points.coordinates[n]]));return e.join(",")},linearring:function(t){for(var e=[],n=0,i=t.points.coordinates.length;n<i;++n)e.push(Ws.coordinate.apply(this,[t.points.coordinates[n]]));return e.join(",")},multilinestring:function(t){for(var e=[],n=0,i=t.geometries.length;n<i;++n)e.push("("+Ws.linestring.apply(this,[t.geometries[n]])+")");return e.join(",")},polygon:function(t){var e=[];e.push("("+Ws.linestring.apply(this,[t.shell])+")");for(var n=0,i=t.holes.length;n<i;++n)e.push("("+Ws.linestring.apply(this,[t.holes[n]])+")");return e.join(",")},multipolygon:function(t){for(var e=[],n=0,i=t.geometries.length;n<i;++n)e.push("("+Ws.polygon.apply(this,[t.geometries[n]])+")");return e.join(",")},geometrycollection:function(t){for(var e=[],n=0,i=t.geometries.length;n<i;++n)e.push(this.extractGeometry(t.geometries[n]));return e.join(",")}},js={point:function(t){if(void 0===t)return this.geometryFactory.createPoint();t=t.trim().split(Hs.spaces);return this.geometryFactory.createPoint(new d(Number.parseFloat(t[0]),Number.parseFloat(t[1])))},multipoint:function(t){if(void 0===t)return this.geometryFactory.createMultiPoint();for(var e,n=t.trim().split(","),i=[],r=0,s=n.length;r<s;++r)e=n[r].replace(Hs.trimParens,"$1"),i.push(js.point.apply(this,[e]));return this.geometryFactory.createMultiPoint(i)},linestring:function(t){if(void 0===t)return this.geometryFactory.createLineString();for(var e,n=t.trim().split(","),i=[],r=0,s=n.length;r<s;++r)e=n[r].trim().split(Hs.spaces),i.push(new d(Number.parseFloat(e[0]),Number.parseFloat(e[1])));return this.geometryFactory.createLineString(i)},linearring:function(t){if(void 0===t)return this.geometryFactory.createLinearRing();for(var e,n=t.trim().split(","),i=[],r=0,s=n.length;r<s;++r)e=n[r].trim().split(Hs.spaces),i.push(new d(Number.parseFloat(e[0]),Number.parseFloat(e[1])));return this.geometryFactory.createLinearRing(i)},multilinestring:function(t){if(void 0===t)return this.geometryFactory.createMultiLineString();for(var e,n=t.trim().split(Hs.parenComma),i=[],r=0,s=n.length;r<s;++r)e=n[r].replace(Hs.trimParens,"$1"),i.push(js.linestring.apply(this,[e]));return this.geometryFactory.createMultiLineString(i)},polygon:function(t){if(void 0===t)return this.geometryFactory.createPolygon();for(var e,n,i=t.trim().split(Hs.parenComma),r=[],s=0,o=i.length;s<o;++s)e=i[s].replace(Hs.trimParens,"$1"),e=js.linestring.apply(this,[e]),e=this.geometryFactory.createLinearRing(e.points),0===s?n=e:r.push(e);return this.geometryFactory.createPolygon(n,r)},multipolygon:function(t){if(void 0===t)return this.geometryFactory.createMultiPolygon();for(var e,n=t.trim().split(Hs.doubleParenComma),i=[],r=0,s=n.length;r<s;++r)e=n[r].replace(Hs.trimParens,"$1"),i.push(js.polygon.apply(this,[e]));return this.geometryFactory.createMultiPolygon(i)},geometrycollection:function(t){if(void 0===t)return this.geometryFactory.createGeometryCollection();for(var e=(t=t.replace(/,\s*([A-Za-z])/g,"|$1")).trim().split("|"),n=[],i=0,r=e.length;i<r;++i)n.push(this.read(e[i]));return this.geometryFactory.createGeometryCollection(n)}};e(Xt.prototype,{write:function(t){return this.parser.write(t)}}),e(Xt,{toLineString:function(t,e){if(2!==arguments.length)throw new Error("Not implemented");return"LINESTRING ( "+t.x+" "+t.y+", "+e.x+" "+e.y+" )"}}),e(Ht.prototype,{getIndexAlongSegment:function(t,e){return this.computeIntLineIndex(),this.intLineIndex[t][e]},getTopologySummary:function(){var t=new P;return this.isEndPoint()&&t.append(" endpoint"),this._isProper&&t.append(" proper"),this.isCollinear()&&t.append(" collinear"),t.toString()},computeIntersection:function(t,e,n,i){this.inputLines[0][0]=t,this.inputLines[0][1]=e,this.inputLines[1][0]=n,this.inputLines[1][1]=i,this.result=this.computeIntersect(t,e,n,i)},getIntersectionNum:function(){return this.result},computeIntLineIndex:function(){var t,e;0===arguments.length?null===this.intLineIndex&&(this.intLineIndex=Array(2).fill().map(function(){return Array(2)}),this.computeIntLineIndex(0),this.computeIntLineIndex(1)):1===arguments.length&&(t=arguments[0],e=this.getEdgeDistance(t,0),this.getEdgeDistance(t,1)<e?(this.intLineIndex[t][0]=0,this.intLineIndex[t][1]=1):(this.intLineIndex[t][0]=1,this.intLineIndex[t][1]=0))},isProper:function(){return this.hasIntersection()&&this._isProper},setPrecisionModel:function(t){this.precisionModel=t},isInteriorIntersection:function(){if(0===arguments.length)return!!this.isInteriorIntersection(0)||!!this.isInteriorIntersection(1);if(1===arguments.length){for(var t=arguments[0],e=0;e<this.result;e++)if(!this.intPt[e].equals2D(this.inputLines[t][0])&&!this.intPt[e].equals2D(this.inputLines[t][1]))return!0;return!1}},getIntersection:function(t){return this.intPt[t]},isEndPoint:function(){return this.hasIntersection()&&!this._isProper},hasIntersection:function(){return this.result!==Ht.NO_INTERSECTION},getEdgeDistance:function(t,e){return Ht.computeEdgeDistance(this.intPt[e],this.inputLines[t][0],this.inputLines[t][1])},isCollinear:function(){return this.result===Ht.COLLINEAR_INTERSECTION},toString:function(){return Xt.toLineString(this.inputLines[0][0],this.inputLines[0][1])+" - "+Xt.toLineString(this.inputLines[1][0],this.inputLines[1][1])+this.getTopologySummary()},getEndpoint:function(t,e){return this.inputLines[t][e]},isIntersection:function(t){for(var e=0;e<this.result;e++)if(this.intPt[e].equals2D(t))return!0;return!1},getIntersectionAlongSegment:function(t,e){return this.computeIntLineIndex(),this.intPt[this.intLineIndex[t][e]]},interfaces_:function(){return[]},getClass:function(){return Ht}}),Ht.computeEdgeDistance=function(t,e,n){var i,r=Math.abs(n.x-e.x),s=Math.abs(n.y-e.y),o=-1;return t.equals(e)?o=0:t.equals(n)?o=s<r?r:s:(i=Math.abs(t.x-e.x),n=Math.abs(t.y-e.y),0!==(o=s<r?i:n)||t.equals(e)||(o=Math.max(i,n))),l.isTrue(!(0===o&&!t.equals(e)),"Bad distance calculation"),o},Ht.nonRobustComputeEdgeDistance=function(t,e,n){var i=t.x-e.x,r=t.y-e.y,r=Math.sqrt(i*i+r*r);return l.isTrue(!(0===r&&!t.equals(e)),"Invalid distance calculation"),r},Ht.DONT_INTERSECT=0,Ht.DO_INTERSECT=1,Ht.COLLINEAR=2,Ht.NO_INTERSECTION=0,Ht.POINT_INTERSECTION=1,Ht.COLLINEAR_INTERSECTION=2,a(Wt,Ht),e(Wt.prototype,{isInSegmentEnvelopes:function(t){var e=new C(this.inputLines[0][0],this.inputLines[0][1]),n=new C(this.inputLines[1][0],this.inputLines[1][1]);return e.contains(t)&&n.contains(t)},computeIntersection:function(){if(3!==arguments.length)return Ht.prototype.computeIntersection.apply(this,arguments);var t=arguments[0],e=arguments[1],n=arguments[2];return this._isProper=!1,C.intersects(e,n,t)&&0===Zt.orientationIndex(e,n,t)&&0===Zt.orientationIndex(n,e,t)?(this._isProper=!0,(t.equals(e)||t.equals(n))&&(this._isProper=!1),this.result=Ht.POINT_INTERSECTION,null):void(this.result=Ht.NO_INTERSECTION)},normalizeToMinimum:function(t,e,n,i,r){r.x=this.smallestInAbsValue(t.x,e.x,n.x,i.x),r.y=this.smallestInAbsValue(t.y,e.y,n.y,i.y),t.x-=r.x,t.y-=r.y,e.x-=r.x,e.y-=r.y,n.x-=r.x,n.y-=r.y,i.x-=r.x,i.y-=r.y},safeHCoordinateIntersection:function(e,n,i,r){var s=null;try{s=F.intersection(e,n,i,r)}catch(t){if(!(t instanceof w))throw t;s=Wt.nearestEndpoint(e,n,i,r)}return s},intersection:function(t,e,n,i){var r=this.intersectionWithNormalization(t,e,n,i);return this.isInSegmentEnvelopes(r)||(r=new d(Wt.nearestEndpoint(t,e,n,i))),null!==this.precisionModel&&this.precisionModel.makePrecise(r),r},smallestInAbsValue:function(t,e,n,i){var r=t,t=Math.abs(r);return Math.abs(e)<t&&(r=e,t=Math.abs(e)),Math.abs(n)<t&&(r=n,t=Math.abs(n)),Math.abs(i)<t&&(r=i),r},checkDD:function(t,e,n,i,r){n=M.intersection(t,e,n,i),i=this.isInSegmentEnvelopes(n);A.out.println("DD in env = "+i+"  --------------------- "+n),1e-4<r.distance(n)&&A.out.println("Distance = "+r.distance(n))},intersectionWithNormalization:function(t,e,n,i){var r=new d(t),t=new d(e),e=new d(n),n=new d(i),i=new d;this.normalizeToEnvCentre(r,t,e,n,i);n=this.safeHCoordinateIntersection(r,t,e,n);return n.x+=i.x,n.y+=i.y,n},computeCollinearIntersection:function(t,e,n,i){var r=C.intersects(t,e,n),s=C.intersects(t,e,i),o=C.intersects(n,i,t),a=C.intersects(n,i,e);return r&&s?(this.intPt[0]=n,this.intPt[1]=i,Ht.COLLINEAR_INTERSECTION):o&&a?(this.intPt[0]=t,this.intPt[1]=e,Ht.COLLINEAR_INTERSECTION):r&&o?(this.intPt[0]=n,this.intPt[1]=t,!n.equals(t)||s||a?Ht.COLLINEAR_INTERSECTION:Ht.POINT_INTERSECTION):r&&a?(this.intPt[0]=n,this.intPt[1]=e,!n.equals(e)||s||o?Ht.COLLINEAR_INTERSECTION:Ht.POINT_INTERSECTION):s&&o?(this.intPt[0]=i,this.intPt[1]=t,!i.equals(t)||r||a?Ht.COLLINEAR_INTERSECTION:Ht.POINT_INTERSECTION):s&&a?(this.intPt[0]=i,this.intPt[1]=e,!i.equals(e)||r||o?Ht.COLLINEAR_INTERSECTION:Ht.POINT_INTERSECTION):Ht.NO_INTERSECTION},normalizeToEnvCentre:function(t,e,n,i,r){var s=(t.x<e.x?t:e).x,o=(t.y<e.y?t:e).y,a=(t.x>e.x?t:e).x,u=(t.y>e.y?t:e).y,l=(n.x<i.x?n:i).x,h=(n.y<i.y?n:i).y,c=(n.x>i.x?n:i).x,f=(n.y>i.y?n:i).y,c=((l<s?s:l)+(a<c?a:c))/2,f=((h<o?o:h)+(u<f?u:f))/2;r.x=c,r.y=f,t.x-=r.x,t.y-=r.y,e.x-=r.x,e.y-=r.y,n.x-=r.x,n.y-=r.y,i.x-=r.x,i.y-=r.y},computeIntersect:function(t,e,n,i){if(this._isProper=!1,!C.intersects(t,e,n,i))return Ht.NO_INTERSECTION;var r=Zt.orientationIndex(t,e,n),s=Zt.orientationIndex(t,e,i);if(0<r&&0<s||r<0&&s<0)return Ht.NO_INTERSECTION;var o=Zt.orientationIndex(n,i,t),a=Zt.orientationIndex(n,i,e);return 0<o&&0<a||o<0&&a<0?Ht.NO_INTERSECTION:0===r&&0===s&&0===o&&0===a?this.computeCollinearIntersection(t,e,n,i):(0===r||0===s||0===o||0===a?(this._isProper=!1,t.equals2D(n)||t.equals2D(i)?this.intPt[0]=t:e.equals2D(n)||e.equals2D(i)?this.intPt[0]=e:0===r?this.intPt[0]=new d(n):0===s?this.intPt[0]=new d(i):0===o?this.intPt[0]=new d(t):0===a&&(this.intPt[0]=new d(e))):(this._isProper=!0,this.intPt[0]=this.intersection(t,e,n,i)),Ht.POINT_INTERSECTION)},interfaces_:function(){return[]},getClass:function(){return Wt}}),Wt.nearestEndpoint=function(t,e,n,i){var r=t,s=Zt.distancePointLine(t,n,i),o=Zt.distancePointLine(e,n,i);return o<s&&(s=o,r=e),(o=Zt.distancePointLine(n,t,e))<s&&(s=o,r=n),(o=Zt.distancePointLine(i,t,e))<s&&(s=o,r=i),r},e(jt.prototype,{interfaces_:function(){return[]},getClass:function(){return jt}}),jt.orientationIndex=function(t,e,n){var i=e.x-t.x,r=e.y-t.y,t=n.x-e.x,e=n.y-e.y;return jt.signOfDet2x2(i,r,t,e)},jt.signOfDet2x2=function(t,e,n,i){var r,s=null,o=null,s=1;if(0===t||0===i)return 0===e||0===n?0:0<e?0<n?-s:s:0<n?s:-s;if(0===e||0===n)return 0<i?0<t?s:-s:0<t?-s:s;if(0<e?0<i?e<=i||(s=-s,o=t,t=n,n=o,o=e,e=i,i=o):i=e<=-i?(s=-s,n=-n,-i):(o=t,t=-n,n=o,o=e,e=-i,o):0<i?-e<=i?(s=-s,t=-t,e=-e):(o=-t,t=n,n=o,o=-e,e=i,i=o):i=i<=e?(t=-t,e=-e,n=-n,-i):(s=-s,o=-t,t=-n,n=o,o=-e,e=-i,o),0<t){if(!(0<n))return s;if(!(t<=n))return s}else{if(0<n)return-s;if(!(n<=t))return-s;s=-s,t=-t,n=-n}for(;;){if((i-=(r=Math.floor(n/t))*e)<0)return-s;if(e<i)return s;if((n-=r*t)+n<t){if(e<i+i)return s}else{if(i+i<e)return-s;n=t-n,i=e-i,s=-s}if(0===i)return 0===n?0:-s;if(0===n)return s;if((e-=(r=Math.floor(t/n))*i)<0)return s;if(i<e)return-s;if((t-=r*n)+t<n){if(i<e+e)return-s}else{if(e+e<i)return s;t=n-t,e=i-e,s=-s}if(0===e)return 0===t?0:s;if(0===t)return-s}},e(Kt.prototype,{countSegment:function(t,e){if(t.x<this.p.x&&e.x<this.p.x)return null;if(this.p.x===e.x&&this.p.y===e.y)return this.isPointOnSegment=!0,null;if(t.y===this.p.y&&e.y===this.p.y){var n=t.x,i=e.x;return i<n&&(n=e.x,i=t.x),this.p.x>=n&&this.p.x<=i&&(this.isPointOnSegment=!0),null}if(t.y>this.p.y&&e.y<=this.p.y||e.y>this.p.y&&t.y<=this.p.y){n=t.x-this.p.x,i=t.y-this.p.y,t=e.x-this.p.x,e=e.y-this.p.y,t=jt.signOfDet2x2(n,i,t,e);if(0===t)return this.isPointOnSegment=!0,null;e<i&&(t=-t),0<t&&this.crossingCount++}},isPointInPolygon:function(){return this.getLocation()!==L.EXTERIOR},getLocation:function(){return this.isPointOnSegment?L.BOUNDARY:this.crossingCount%2==1?L.INTERIOR:L.EXTERIOR},isOnSegment:function(){return this.isPointOnSegment},interfaces_:function(){return[]},getClass:function(){return Kt}}),Kt.locatePointInRing=function(){if(arguments[0]instanceof d&&R(arguments[1],D)){for(var t=arguments[1],e=new Kt(arguments[0]),n=new d,i=new d,r=1;r<t.size();r++)if(t.getCoordinate(r,n),t.getCoordinate(r-1,i),e.countSegment(n,i),e.isOnSegment())return e.getLocation();return e.getLocation()}if(arguments[0]instanceof d&&arguments[1]instanceof Array){for(var s=arguments[1],e=new Kt(arguments[0]),r=1;r<s.length;r++){n=s[r],i=s[r-1];if(e.countSegment(n,i),e.isOnSegment())return e.getLocation()}return e.getLocation()}},e(Zt.prototype,{interfaces_:function(){return[]},getClass:function(){return Zt}}),Zt.orientationIndex=function(t,e,n){return M.orientationIndex(t,e,n)},Zt.signedArea=function(){if(arguments[0]instanceof Array){var t=arguments[0];if(t.length<3)return 0;for(var e=0,n=t[0].x,i=1;i<t.length-1;i++){var r=t[i].x-n,s=t[i+1].y;e+=r*(t[i-1].y-s)}return e/2}if(R(arguments[0],D)){var o=arguments[0],a=o.size();if(a<3)return 0;var u=new d,l=new d,h=new d;o.getCoordinate(0,l),o.getCoordinate(1,h);n=l.x;h.x-=n;for(e=0,i=1;i<a-1;i++)u.y=l.y,l.x=h.x,l.y=h.y,o.getCoordinate(i+1,h),h.x-=n,e+=l.x*(u.y-h.y);return e/2}},Zt.distanceLineLine=function(t,e,n,i){if(t.equals(e))return Zt.distancePointLine(t,n,i);if(n.equals(i))return Zt.distancePointLine(i,t,e);var r,s,o,a=!1;return!C.intersects(t,e,n,i)||0==(o=(e.x-t.x)*(i.y-n.y)-(e.y-t.y)*(i.x-n.x))?a=!0:(r=(t.y-n.y)*(i.x-n.x)-(t.x-n.x)*(i.y-n.y),s=((t.y-n.y)*(e.x-t.x)-(t.x-n.x)*(e.y-t.y))/o,((o=r/o)<0||1<o||s<0||1<s)&&(a=!0)),a?T.min(Zt.distancePointLine(t,n,i),Zt.distancePointLine(e,n,i),Zt.distancePointLine(n,t,e),Zt.distancePointLine(i,t,e)):0},Zt.isPointInRing=function(t,e){return Zt.locatePointInRing(t,e)!==L.EXTERIOR},Zt.computeLength=function(t){var e=t.size();if(e<=1)return 0;var n=0,i=new d;t.getCoordinate(0,i);for(var r=i.x,s=i.y,o=1;o<e;o++){t.getCoordinate(o,i);var a=i.x,u=i.y,l=a-r,h=u-s;n+=Math.sqrt(l*l+h*h),r=a,s=u}return n},Zt.isCCW=function(t){var e=t.length-1;if(e<3)throw new c;for(var n=t[0],i=0,r=1;r<=e;r++){var s=t[r];s.y>n.y&&(n=s,i=r)}for(var o=i;--o<0&&(o=e),t[o].equals2D(n)&&o!==i;);for(var a=i;t[a=(a+1)%e].equals2D(n)&&a!==i;);var u=t[o],l=t[a];if(u.equals2D(n)||l.equals2D(n)||u.equals2D(l))return!1;var h=Zt.computeOrientation(u,n,l);return 0===h?u.x>l.x:0<h},Zt.locatePointInRing=function(t,e){return Kt.locatePointInRing(t,e)},Zt.distancePointLinePerpendicular=function(t,e,n){var i=(n.x-e.x)*(n.x-e.x)+(n.y-e.y)*(n.y-e.y),e=((e.y-t.y)*(n.x-e.x)-(e.x-t.x)*(n.y-e.y))/i;return Math.abs(e)*Math.sqrt(i)},Zt.computeOrientation=function(t,e,n){return Zt.orientationIndex(t,e,n)},Zt.distancePointLine=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];if(0===e.length)throw new c;for(var n=t.distance(e[0]),i=0;i<e.length-1;i++){var r=Zt.distancePointLine(t,e[i],e[i+1]);r<n&&(n=r)}return n}if(3===arguments.length){var s=arguments[0],o=arguments[1],a=arguments[2];if(o.x===a.x&&o.y===a.y)return s.distance(o);var u=(a.x-o.x)*(a.x-o.x)+(a.y-o.y)*(a.y-o.y),l=((s.x-o.x)*(a.x-o.x)+(s.y-o.y)*(a.y-o.y))/u;if(l<=0)return s.distance(o);if(1<=l)return s.distance(a);o=((o.y-s.y)*(a.x-o.x)-(o.x-s.x)*(a.y-o.y))/u;return Math.abs(o)*Math.sqrt(u)}},Zt.isOnLine=function(t,e){for(var n=new Wt,i=1;i<e.length;i++){var r=e[i-1],s=e[i];if(n.computeIntersection(t,r,s),n.hasIntersection())return!0}return!1},Zt.RIGHT=Zt.CLOCKWISE=-1,Zt.LEFT=Zt.COUNTERCLOCKWISE=1,Zt.STRAIGHT=Zt.COLLINEAR=0,e(Jt.prototype,{minX:function(){return Math.min(this.p0.x,this.p1.x)},orientationIndex:function(){if(arguments[0]instanceof Jt){var t=arguments[0],e=Zt.orientationIndex(this.p0,this.p1,t.p0),t=Zt.orientationIndex(this.p0,this.p1,t.p1);return 0<=e&&0<=t||e<=0&&t<=0?Math.max(e,t):0}if(arguments[0]instanceof d){t=arguments[0];return Zt.orientationIndex(this.p0,this.p1,t)}},toGeometry:function(t){return t.createLineString([this.p0,this.p1])},isVertical:function(){return this.p0.x===this.p1.x},equals:function(t){if(!(t instanceof Jt))return!1;return this.p0.equals(t.p0)&&this.p1.equals(t.p1)},intersection:function(t){var e=new Wt;return e.computeIntersection(this.p0,this.p1,t.p0,t.p1),e.hasIntersection()?e.getIntersection(0):null},project:function(){if(arguments[0]instanceof d){var t=arguments[0];if(t.equals(this.p0)||t.equals(this.p1))return new d(t);var e=this.projectionFactor(t),n=new d;return n.x=this.p0.x+e*(this.p1.x-this.p0.x),n.y=this.p0.y+e*(this.p1.y-this.p0.y),n}if(arguments[0]instanceof Jt){var i=arguments[0],t=this.projectionFactor(i.p0),e=this.projectionFactor(i.p1);if(1<=t&&1<=e)return null;if(t<=0&&e<=0)return null;n=this.project(i.p0);t<0&&(n=this.p0),1<t&&(n=this.p1);i=this.project(i.p1);return e<0&&(i=this.p0),1<e&&(i=this.p1),new Jt(n,i)}},normalize:function(){this.p1.compareTo(this.p0)<0&&this.reverse()},angle:function(){return Math.atan2(this.p1.y-this.p0.y,this.p1.x-this.p0.x)},getCoordinate:function(t){return 0===t?this.p0:this.p1},distancePerpendicular:function(t){return Zt.distancePointLinePerpendicular(t,this.p0,this.p1)},minY:function(){return Math.min(this.p0.y,this.p1.y)},midPoint:function(){return Jt.midPoint(this.p0,this.p1)},projectionFactor:function(t){if(t.equals(this.p0))return 0;if(t.equals(this.p1))return 1;var e=this.p1.x-this.p0.x,n=this.p1.y-this.p0.y,i=e*e+n*n;return i<=0?g.NaN:((t.x-this.p0.x)*e+(t.y-this.p0.y)*n)/i},closestPoints:function(t){var e=this.intersection(t);if(null!==e)return[e,e];var n=new Array(2).fill(null),i=g.MAX_VALUE,r=null,e=this.closestPoint(t.p0),i=e.distance(t.p0);n[0]=e,n[1]=t.p0;e=this.closestPoint(t.p1);(r=e.distance(t.p1))<i&&(i=r,n[0]=e,n[1]=t.p1);e=t.closestPoint(this.p0);(r=e.distance(this.p0))<i&&(i=r,n[0]=this.p0,n[1]=e);t=t.closestPoint(this.p1);return(r=t.distance(this.p1))<i&&(i=r,n[0]=this.p1,n[1]=t),n},closestPoint:function(t){var e=this.projectionFactor(t);return 0<e&&e<1?this.project(t):this.p0.distance(t)<this.p1.distance(t)?this.p0:this.p1},maxX:function(){return Math.max(this.p0.x,this.p1.x)},getLength:function(){return this.p0.distance(this.p1)},compareTo:function(t){var e=t,t=this.p0.compareTo(e.p0);return 0!==t?t:this.p1.compareTo(e.p1)},reverse:function(){var t=this.p0;this.p0=this.p1,this.p1=t},equalsTopo:function(t){return this.p0.equals(t.p0)&&this.p1.equals(t.p1)||this.p0.equals(t.p1)&&this.p1.equals(t.p0)},lineIntersection:function(t){try{return F.intersection(this.p0,this.p1,t.p0,t.p1)}catch(t){if(!(t instanceof w))throw t}return null},maxY:function(){return Math.max(this.p0.y,this.p1.y)},pointAlongOffset:function(t,e){var n=this.p0.x+t*(this.p1.x-this.p0.x),i=this.p0.y+t*(this.p1.y-this.p0.y),r=this.p1.x-this.p0.x,s=this.p1.y-this.p0.y,o=Math.sqrt(r*r+s*s),a=0,t=0;if(0!==e){if(o<=0)throw new IllegalStateException("Cannot compute offset from zero-length line segment");a=e*r/o,t=e*s/o}return new d(n-t,i+a)},setCoordinates:function(){var t,e;1===arguments.length?(e=arguments[0],this.setCoordinates(e.p0,e.p1)):2===arguments.length&&(t=arguments[0],e=arguments[1],this.p0.x=t.x,this.p0.y=t.y,this.p1.x=e.x,this.p1.y=e.y)},segmentFraction:function(t){t=this.projectionFactor(t);return t<0?t=0:(1<t||g.isNaN(t))&&(t=1),t},toString:function(){return"LINESTRING( "+this.p0.x+" "+this.p0.y+", "+this.p1.x+" "+this.p1.y+")"},isHorizontal:function(){return this.p0.y===this.p1.y},distance:function(){if(arguments[0]instanceof Jt){var t=arguments[0];return Zt.distanceLineLine(this.p0,this.p1,t.p0,t.p1)}if(arguments[0]instanceof d)return Zt.distancePointLine(arguments[0],this.p0,this.p1)},pointAlong:function(t){var e=new d;return e.x=this.p0.x+t*(this.p1.x-this.p0.x),e.y=this.p0.y+t*(this.p1.y-this.p0.y),e},hashCode:function(){var t=java.lang.Double.doubleToLongBits(this.p0.x);t^=31*java.lang.Double.doubleToLongBits(this.p0.y);var e=Math.trunc(t)^Math.trunc(t>>32),t=java.lang.Double.doubleToLongBits(this.p1.x);return t^=31*java.lang.Double.doubleToLongBits(this.p1.y),e^(Math.trunc(t)^Math.trunc(t>>32))},interfaces_:function(){return[i,o]},getClass:function(){return Jt}}),Jt.midPoint=function(t,e){return new d((t.x+e.x)/2,(t.y+e.y)/2)},Jt.serialVersionUID=0x2d2172135f411c00,e(Qt.prototype,{isIntersects:function(){return!this.isDisjoint()},isCovers:function(){return(Qt.isTrue(this.matrix[L.INTERIOR][L.INTERIOR])||Qt.isTrue(this.matrix[L.INTERIOR][L.BOUNDARY])||Qt.isTrue(this.matrix[L.BOUNDARY][L.INTERIOR])||Qt.isTrue(this.matrix[L.BOUNDARY][L.BOUNDARY]))&&this.matrix[L.EXTERIOR][L.INTERIOR]===lt.FALSE&&this.matrix[L.EXTERIOR][L.BOUNDARY]===lt.FALSE},isCoveredBy:function(){return(Qt.isTrue(this.matrix[L.INTERIOR][L.INTERIOR])||Qt.isTrue(this.matrix[L.INTERIOR][L.BOUNDARY])||Qt.isTrue(this.matrix[L.BOUNDARY][L.INTERIOR])||Qt.isTrue(this.matrix[L.BOUNDARY][L.BOUNDARY]))&&this.matrix[L.INTERIOR][L.EXTERIOR]===lt.FALSE&&this.matrix[L.BOUNDARY][L.EXTERIOR]===lt.FALSE},set:function(){var t,e,n;if(1===arguments.length)for(var i=arguments[0],r=0;r<i.length;r++){var s=Math.trunc(r/3),o=r%3;this.matrix[s][o]=lt.toDimensionValue(i.charAt(r))}else 3===arguments.length&&(t=arguments[0],e=arguments[1],n=arguments[2],this.matrix[t][e]=n)},isContains:function(){return Qt.isTrue(this.matrix[L.INTERIOR][L.INTERIOR])&&this.matrix[L.EXTERIOR][L.INTERIOR]===lt.FALSE&&this.matrix[L.EXTERIOR][L.BOUNDARY]===lt.FALSE},setAtLeast:function(){var t,e,n;if(1===arguments.length)for(var i=arguments[0],r=0;r<i.length;r++){var s=Math.trunc(r/3),o=r%3;this.setAtLeast(s,o,lt.toDimensionValue(i.charAt(r)))}else 3===arguments.length&&(t=arguments[0],e=arguments[1],n=arguments[2],this.matrix[t][e]<n&&(this.matrix[t][e]=n))},setAtLeastIfValid:function(t,e,n){0<=t&&0<=e&&this.setAtLeast(t,e,n)},isWithin:function(){return Qt.isTrue(this.matrix[L.INTERIOR][L.INTERIOR])&&this.matrix[L.INTERIOR][L.EXTERIOR]===lt.FALSE&&this.matrix[L.BOUNDARY][L.EXTERIOR]===lt.FALSE},isTouches:function(t,e){return e<t?this.isTouches(e,t):(t===lt.A&&e===lt.A||t===lt.L&&e===lt.L||t===lt.L&&e===lt.A||t===lt.P&&e===lt.A||t===lt.P&&e===lt.L)&&(this.matrix[L.INTERIOR][L.INTERIOR]===lt.FALSE&&(Qt.isTrue(this.matrix[L.INTERIOR][L.BOUNDARY])||Qt.isTrue(this.matrix[L.BOUNDARY][L.INTERIOR])||Qt.isTrue(this.matrix[L.BOUNDARY][L.BOUNDARY])))},isOverlaps:function(t,e){return t===lt.P&&e===lt.P||t===lt.A&&e===lt.A?Qt.isTrue(this.matrix[L.INTERIOR][L.INTERIOR])&&Qt.isTrue(this.matrix[L.INTERIOR][L.EXTERIOR])&&Qt.isTrue(this.matrix[L.EXTERIOR][L.INTERIOR]):t===lt.L&&e===lt.L&&(1===this.matrix[L.INTERIOR][L.INTERIOR]&&Qt.isTrue(this.matrix[L.INTERIOR][L.EXTERIOR])&&Qt.isTrue(this.matrix[L.EXTERIOR][L.INTERIOR]))},isEquals:function(t,e){return t===e&&(Qt.isTrue(this.matrix[L.INTERIOR][L.INTERIOR])&&this.matrix[L.INTERIOR][L.EXTERIOR]===lt.FALSE&&this.matrix[L.BOUNDARY][L.EXTERIOR]===lt.FALSE&&this.matrix[L.EXTERIOR][L.INTERIOR]===lt.FALSE&&this.matrix[L.EXTERIOR][L.BOUNDARY]===lt.FALSE)},toString:function(){for(var t=new P("123456789"),e=0;e<3;e++)for(var n=0;n<3;n++)t.setCharAt(3*e+n,lt.toDimensionSymbol(this.matrix[e][n]));return t.toString()},setAll:function(t){for(var e=0;e<3;e++)for(var n=0;n<3;n++)this.matrix[e][n]=t},get:function(t,e){return this.matrix[t][e]},transpose:function(){var t=this.matrix[1][0];return this.matrix[1][0]=this.matrix[0][1],this.matrix[0][1]=t,t=this.matrix[2][0],this.matrix[2][0]=this.matrix[0][2],this.matrix[0][2]=t,t=this.matrix[2][1],this.matrix[2][1]=this.matrix[1][2],this.matrix[1][2]=t,this},matches:function(t){if(9!==t.length)throw new c;for(var e=0;e<3;e++)for(var n=0;n<3;n++)if(!Qt.matches(this.matrix[e][n],t.charAt(3*e+n)))return!1;return!0},add:function(t){for(var e=0;e<3;e++)for(var n=0;n<3;n++)this.setAtLeast(e,n,t.get(e,n))},isDisjoint:function(){return this.matrix[L.INTERIOR][L.INTERIOR]===lt.FALSE&&this.matrix[L.INTERIOR][L.BOUNDARY]===lt.FALSE&&this.matrix[L.BOUNDARY][L.INTERIOR]===lt.FALSE&&this.matrix[L.BOUNDARY][L.BOUNDARY]===lt.FALSE},isCrosses:function(t,e){return t===lt.P&&e===lt.L||t===lt.P&&e===lt.A||t===lt.L&&e===lt.A?Qt.isTrue(this.matrix[L.INTERIOR][L.INTERIOR])&&Qt.isTrue(this.matrix[L.INTERIOR][L.EXTERIOR]):t===lt.L&&e===lt.P||t===lt.A&&e===lt.P||t===lt.A&&e===lt.L?Qt.isTrue(this.matrix[L.INTERIOR][L.INTERIOR])&&Qt.isTrue(this.matrix[L.EXTERIOR][L.INTERIOR]):t===lt.L&&e===lt.L&&0===this.matrix[L.INTERIOR][L.INTERIOR]},interfaces_:function(){return[r]},getClass:function(){return Qt}}),Qt.matches=function(){if(Number.isInteger(arguments[0])&&"string"==typeof arguments[1]){var t=arguments[0],e=arguments[1];return e===lt.SYM_DONTCARE||(e===lt.SYM_TRUE&&(0<=t||t===lt.TRUE)||(e===lt.SYM_FALSE&&t===lt.FALSE||(e===lt.SYM_P&&t===lt.P||(e===lt.SYM_L&&t===lt.L||e===lt.SYM_A&&t===lt.A))))}if("string"==typeof arguments[0]&&"string"==typeof arguments[1]){t=arguments[1];return new Qt(arguments[0]).matches(t)}},Qt.isTrue=function(t){return 0<=t||t===lt.TRUE};var Ks=Object.freeze({Coordinate:d,CoordinateList:N,Envelope:C,LineSegment:Jt,GeometryFactory:Yt,Geometry:B,Point:wt,LineString:Ct,LinearRing:Pt,Polygon:Rt,GeometryCollection:ft,MultiPoint:Tt,MultiLineString:gt,MultiPolygon:bt,Dimension:lt,IntersectionMatrix:Qt});e($t.prototype,{addPoint:function(t){this.ptCount+=1,this.ptCentSum.x+=t.x,this.ptCentSum.y+=t.y},setBasePoint:function(t){null===this.areaBasePt&&(this.areaBasePt=t)},addLineSegments:function(t){for(var e=0,n=0;n<t.length-1;n++){var i,r=t[n].distance(t[n+1]);0!==r&&(e+=r,i=(t[n].x+t[n+1].x)/2,this.lineCentSum.x+=r*i,i=(t[n].y+t[n+1].y)/2,this.lineCentSum.y+=r*i)}this.totalLength+=e,0===e&&0<t.length&&this.addPoint(t[0])},addHole:function(t){for(var e=Zt.isCCW(t),n=0;n<t.length-1;n++)this.addTriangle(this.areaBasePt,t[n],t[n+1],e);this.addLineSegments(t)},getCentroid:function(){var t=new d;if(0<Math.abs(this.areasum2))t.x=this.cg3.x/3/this.areasum2,t.y=this.cg3.y/3/this.areasum2;else if(0<this.totalLength)t.x=this.lineCentSum.x/this.totalLength,t.y=this.lineCentSum.y/this.totalLength;else{if(!(0<this.ptCount))return null;t.x=this.ptCentSum.x/this.ptCount,t.y=this.ptCentSum.y/this.ptCount}return t},addShell:function(t){0<t.length&&this.setBasePoint(t[0]);for(var e=!Zt.isCCW(t),n=0;n<t.length-1;n++)this.addTriangle(this.areaBasePt,t[n],t[n+1],e);this.addLineSegments(t)},addTriangle:function(t,e,n,i){i=i?1:-1;$t.centroid3(t,e,n,this.triangleCent3);n=$t.area2(t,e,n);this.cg3.x+=i*n*this.triangleCent3.x,this.cg3.y+=i*n*this.triangleCent3.y,this.areasum2+=i*n},add:function(){if(arguments[0]instanceof Rt){var t=arguments[0];this.addShell(t.getExteriorRing().getCoordinates());for(var e=0;e<t.getNumInteriorRing();e++)this.addHole(t.getInteriorRingN(e).getCoordinates())}else if(arguments[0]instanceof B){var n=arguments[0];if(n.isEmpty())return null;if(n instanceof wt)this.addPoint(n.getCoordinate());else if(n instanceof Ct)this.addLineSegments(n.getCoordinates());else if(n instanceof Rt){this.add(n)}else if(n instanceof ft)for(var i=n,e=0;e<i.getNumGeometries();e++)this.add(i.getGeometryN(e))}},interfaces_:function(){return[]},getClass:function(){return $t}}),$t.area2=function(t,e,n){return(e.x-t.x)*(n.y-t.y)-(n.x-t.x)*(e.y-t.y)},$t.centroid3=function(t,e,n,i){return i.x=t.x+e.x+n.x,i.y=t.y+e.y+n.y,null},$t.getCentroid=function(t){return new $t(t).getCentroid()},(te.prototype=new Error).name="EmptyStackException",(ee.prototype=new v).add=function(t){return this.array_.push(t),!0},ee.prototype.get=function(t){if(t<0||t>=this.size())throw new IndexOutOfBoundsException;return this.array_[t]},ee.prototype.push=function(t){return this.array_.push(t),t},ee.prototype.pop=function(t){if(0===this.array_.length)throw new te;return this.array_.pop()},ee.prototype.peek=function(){if(0===this.array_.length)throw new te;return this.array_[this.array_.length-1]},ee.prototype.empty=function(){return 0===this.array_.length},ee.prototype.isEmpty=function(){return this.empty()},ee.prototype.search=function(t){return this.array_.indexOf(t)},ee.prototype.size=function(){return this.array_.length},ee.prototype.toArray=function(){for(var t=[],e=0,n=this.array_.length;e<n;e++)t.push(this.array_[e]);return t},e(ne.prototype,{filter:function(t){this.treeSet.contains(t)||(this.list.add(t),this.treeSet.add(t))},getCoordinates:function(){var t=new Array(this.list.size()).fill(null);return this.list.toArray(t)},interfaces_:function(){return[z]},getClass:function(){return ne}}),ne.filterCoordinates=function(t){for(var e=new ne,n=0;n<t.length;n++)e.filter(t[n]);return e.getCoordinates()},e(ie.prototype,{preSort:function(t){for(var e,n=1;n<t.length;n++)(t[n].y<t[0].y||t[n].y===t[0].y&&t[n].x<t[0].x)&&(e=t[0],t[0]=t[n],t[n]=e);return ut.sort(t,1,t.length,new re(t[0])),t},computeOctRing:function(t){var e=this.computeOctPts(t),t=new N;return t.add(e,!1),t.size()<3?null:(t.closeRing(),t.toCoordinateArray())},lineOrPolygon:function(t){if(3===(t=this.cleanRing(t)).length)return this.geomFactory.createLineString([t[0],t[1]]);t=this.geomFactory.createLinearRing(t);return this.geomFactory.createPolygon(t,null)},cleanRing:function(t){l.equals(t[0],t[t.length-1]);for(var e=new I,n=null,i=0;i<=t.length-2;i++){var r=t[i],s=t[i+1];r.equals(s)||null!==n&&this.isBetween(n,r,s)||(e.add(r),n=r)}e.add(t[t.length-1]);var o=new Array(e.size()).fill(null);return e.toArray(o)},isBetween:function(t,e,n){if(0!==Zt.computeOrientation(t,e,n))return!1;if(t.x!==n.x){if(t.x<=e.x&&e.x<=n.x)return!0;if(n.x<=e.x&&e.x<=t.x)return!0}if(t.y!==n.y){if(t.y<=e.y&&e.y<=n.y)return!0;if(n.y<=e.y&&e.y<=t.y)return!0}return!1},reduce:function(t){var e=this.computeOctRing(t);if(null===e)return t;for(var n=new at,i=0;i<e.length;i++)n.add(e[i]);for(i=0;i<t.length;i++)Zt.isPointInRing(t[i],e)||n.add(t[i]);var r=H.toCoordinateArray(n);return r.length<3?this.padArray3(r):r},getConvexHull:function(){if(0===this.inputPts.length)return this.geomFactory.createGeometryCollection(null);if(1===this.inputPts.length)return this.geomFactory.createPoint(this.inputPts[0]);if(2===this.inputPts.length)return this.geomFactory.createLineString(this.inputPts);var t=this.inputPts;50<this.inputPts.length&&(t=this.reduce(this.inputPts));t=this.preSort(t),t=this.grahamScan(t),t=this.toCoordinateArray(t);return this.lineOrPolygon(t)},padArray3:function(t){for(var e=new Array(3).fill(null),n=0;n<e.length;n++)n<t.length?e[n]=t[n]:e[n]=t[0];return e},computeOctPts:function(t){for(var e=new Array(8).fill(null),n=0;n<e.length;n++)e[n]=t[0];for(var i=1;i<t.length;i++)t[i].x<e[0].x&&(e[0]=t[i]),t[i].x-t[i].y<e[1].x-e[1].y&&(e[1]=t[i]),t[i].y>e[2].y&&(e[2]=t[i]),t[i].x+t[i].y>e[3].x+e[3].y&&(e[3]=t[i]),t[i].x>e[4].x&&(e[4]=t[i]),t[i].x-t[i].y>e[5].x-e[5].y&&(e[5]=t[i]),t[i].y<e[6].y&&(e[6]=t[i]),t[i].x+t[i].y<e[7].x+e[7].y&&(e[7]=t[i]);return e},toCoordinateArray:function(t){for(var e=new Array(t.size()).fill(null),n=0;n<t.size();n++){var i=t.get(n);e[n]=i}return e},grahamScan:function(t){var e=null,n=new ee,e=n.push(t[0]);e=n.push(t[1]),e=n.push(t[2]);for(var i=3;i<t.length;i++){for(e=n.pop();!n.empty()&&0<Zt.computeOrientation(n.peek(),e,t[i]);)e=n.pop();e=n.push(e),e=n.push(t[i])}return e=n.push(t[0]),n},interfaces_:function(){return[]},getClass:function(){return ie}}),ie.extractCoordinates=function(t){var e=new ne;return t.apply(e),e.getCoordinates()},e(re.prototype,{compare:function(t,e){return re.polarCompare(this.origin,t,e)},interfaces_:function(){return[s]},getClass:function(){return re}}),re.polarCompare=function(t,e,n){var i=e.x-t.x,r=e.y-t.y,s=n.x-t.x,o=n.y-t.y,n=Zt.computeOrientation(t,e,n);if(n===Zt.COUNTERCLOCKWISE)return 1;if(n===Zt.CLOCKWISE)return-1;r=i*i+r*r,o=s*s+o*o;return r<o?-1:o<r?1:0},ie.RadialComparator=re,e(se.prototype,{transformPoint:function(t,e){return this.factory.createPoint(this.transformCoordinates(t.getCoordinateSequence(),t))},transformPolygon:function(t,e){var n=!0,i=this.transformLinearRing(t.getExteriorRing(),t);null!==i&&i instanceof Pt&&!i.isEmpty()||(n=!1);for(var r=new I,s=0;s<t.getNumInteriorRing();s++){var o=this.transformLinearRing(t.getInteriorRingN(s),t);null===o||o.isEmpty()||(o instanceof Pt||(n=!1),r.add(o))}if(n)return this.factory.createPolygon(i,r.toArray([]));var a=new I;return null!==i&&a.add(i),a.addAll(r),this.factory.buildGeometry(a)},createCoordinateSequence:function(t){return this.factory.getCoordinateSequenceFactory().create(t)},getInputGeometry:function(){return this.inputGeom},transformMultiLineString:function(t,e){for(var n=new I,i=0;i<t.getNumGeometries();i++){var r=this.transformLineString(t.getGeometryN(i),t);null!==r&&(r.isEmpty()||n.add(r))}return this.factory.buildGeometry(n)},transformCoordinates:function(t,e){return this.copy(t)},transformLineString:function(t,e){return this.factory.createLineString(this.transformCoordinates(t.getCoordinateSequence(),t))},transformMultiPoint:function(t,e){for(var n=new I,i=0;i<t.getNumGeometries();i++){var r=this.transformPoint(t.getGeometryN(i),t);null!==r&&(r.isEmpty()||n.add(r))}return this.factory.buildGeometry(n)},transformMultiPolygon:function(t,e){for(var n=new I,i=0;i<t.getNumGeometries();i++){var r=this.transformPolygon(t.getGeometryN(i),t);null!==r&&(r.isEmpty()||n.add(r))}return this.factory.buildGeometry(n)},copy:function(t){return t.copy()},transformGeometryCollection:function(t,e){for(var n=new I,i=0;i<t.getNumGeometries();i++){var r=this.transform(t.getGeometryN(i));null!==r&&(this.pruneEmptyGeometry&&r.isEmpty()||n.add(r))}return this.preserveGeometryCollectionType?this.factory.createGeometryCollection(Yt.toGeometryArray(n)):this.factory.buildGeometry(n)},transform:function(t){if(this.inputGeom=t,this.factory=t.getFactory(),t instanceof wt)return this.transformPoint(t,null);if(t instanceof Tt)return this.transformMultiPoint(t,null);if(t instanceof Pt)return this.transformLinearRing(t,null);if(t instanceof Ct)return this.transformLineString(t,null);if(t instanceof gt)return this.transformMultiLineString(t,null);if(t instanceof Rt)return this.transformPolygon(t,null);if(t instanceof bt)return this.transformMultiPolygon(t,null);if(t instanceof ft)return this.transformGeometryCollection(t,null);throw new c(t.getClass().getName())},transformLinearRing:function(t,e){var n=this.transformCoordinates(t.getCoordinateSequence(),t);if(null===n)return this.factory.createLinearRing(null);t=n.size();return 0<t&&t<4&&!this.preserveType?this.factory.createLineString(n):this.factory.createLinearRing(n)},interfaces_:function(){return[]},getClass:function(){return se}}),e(oe.prototype,{snapVertices:function(t,e){for(var n=this._isClosed?t.size()-1:t.size(),i=0;i<n;i++){var r=t.get(i),r=this.findSnapForVertex(r,e);null!==r&&(t.set(i,new d(r)),0===i&&this._isClosed&&t.set(t.size()-1,new d(r)))}},findSnapForVertex:function(t,e){for(var n=0;n<e.length;n++){if(t.equals2D(e[n]))return null;if(t.distance(e[n])<this.snapTolerance)return e[n]}return null},snapTo:function(t){var e=new N(this.srcPts);return this.snapVertices(e,t),this.snapSegments(e,t),e.toCoordinateArray()},snapSegments:function(t,e){if(0===e.length)return null;var n=e.length;e[0].equals2D(e[e.length-1])&&(n=e.length-1);for(var i=0;i<n;i++){var r=e[i],s=this.findSegmentIndexToSnap(r,t);0<=s&&t.add(s+1,new d(r),!1)}},findSegmentIndexToSnap:function(t,e){for(var n=g.MAX_VALUE,i=-1,r=0;r<e.size()-1;r++){if(this.seg.p0=e.get(r),this.seg.p1=e.get(r+1),this.seg.p0.equals2D(t)||this.seg.p1.equals2D(t)){if(this.allowSnappingToSourceVertices)continue;return-1}var s=this.seg.distance(t);s<this.snapTolerance&&s<n&&(n=s,i=r)}return i},setAllowSnappingToSourceVertices:function(t){this.allowSnappingToSourceVertices=t},interfaces_:function(){return[]},getClass:function(){return oe}}),oe.isClosed=function(t){return!(t.length<=1)&&t[0].equals2D(t[t.length-1])},e(ae.prototype,{snapTo:function(t,e){return new ue(e,this.extractTargetCoordinates(t)).transform(this.srcGeom)},snapToSelf:function(t,e){var n=new ue(t,this.extractTargetCoordinates(this.srcGeom),!0).transform(this.srcGeom),t=n;return e&&R(t,Lt)&&(t=n.buffer(0)),t},computeSnapTolerance:function(t){return this.computeMinimumSegmentLength(t)/10},extractTargetCoordinates:function(t){for(var e=new at,n=t.getCoordinates(),i=0;i<n.length;i++)e.add(n[i]);return e.toArray(new Array(0).fill(null))},computeMinimumSegmentLength:function(t){for(var e=g.MAX_VALUE,n=0;n<t.length-1;n++){var i=t[n].distance(t[n+1]);i<e&&(e=i)}return e},interfaces_:function(){return[]},getClass:function(){return ae}}),ae.snap=function(t,e,n){var i=new Array(2).fill(null),t=new ae(t);i[0]=t.snapTo(e,n);e=new ae(e);return i[1]=e.snapTo(i[0],n),i},ae.computeOverlaySnapTolerance=function(){if(1===arguments.length){var t=arguments[0],e=ae.computeSizeBasedSnapTolerance(t),t=t.getPrecisionModel();return t.getType()!==Vt.FIXED||e<(n=1/t.getScale()*2/1.415)&&(e=n),e}if(2===arguments.length){var n=arguments[0],e=arguments[1];return Math.min(ae.computeOverlaySnapTolerance(n),ae.computeOverlaySnapTolerance(e))}},ae.computeSizeBasedSnapTolerance=function(t){t=t.getEnvelopeInternal();return Math.min(t.getHeight(),t.getWidth())*ae.SNAP_PRECISION_FACTOR},ae.snapToSelf=function(t,e,n){return new ae(t).snapToSelf(e,n)},ae.SNAP_PRECISION_FACTOR=1e-9,a(ue,se),e(ue.prototype,{snapLine:function(t,e){t=new oe(t,this.snapTolerance);return t.setAllowSnappingToSourceVertices(this.isSelfSnap),t.snapTo(e)},transformCoordinates:function(t,e){t=t.toCoordinateArray(),t=this.snapLine(t,this.snapPts);return this.factory.getCoordinateSequenceFactory().create(t)},interfaces_:function(){return[]},getClass:function(){return ue}}),e(le.prototype,{getCommon:function(){return g.longBitsToDouble(this.commonBits)},add:function(t){t=g.doubleToLongBits(t);return this.isFirst?(this.commonBits=t,this.commonSignExp=le.signExpBits(this.commonBits),this.isFirst=!1,null):le.signExpBits(t)!==this.commonSignExp?(this.commonBits=0,null):(this.commonMantissaBitsCount=le.numCommonMostSigMantissaBits(this.commonBits,t),void(this.commonBits=le.zeroLowerBits(this.commonBits,64-(12+this.commonMantissaBitsCount))))},toString:function(){if(1===arguments.length){var t=arguments[0],e=g.longBitsToDouble(t),t="0000000000000000000000000000000000000000000000000000000000000000"+Long.toBinaryString(t),t=t.substring(t.length-64);return t.substring(0,1)+"  "+t.substring(1,12)+"(exp) "+t.substring(12)+" [ "+e+" ]"}},interfaces_:function(){return[]},getClass:function(){return le}}),le.getBit=function(t,e){return 0!=(t&1<<e)?1:0},le.signExpBits=function(t){return t>>52},le.zeroLowerBits=function(t,e){return t&~((1<<e)-1)},le.numCommonMostSigMantissaBits=function(t,e){for(var n=0,i=52;0<=i;i--){if(le.getBit(t,i)!==le.getBit(e,i))return n;n++}return 52},e(he.prototype,{addCommonBits:function(t){var e=new fe(this.commonCoord);t.apply(e),t.geometryChanged()},removeCommonBits:function(t){if(0===this.commonCoord.x&&0===this.commonCoord.y)return t;var e=new d(this.commonCoord);e.x=-e.x,e.y=-e.y;e=new fe(e);return t.apply(e),t.geometryChanged(),t},getCommonCoordinate:function(){return this.commonCoord},add:function(t){t.apply(this.ccFilter),this.commonCoord=this.ccFilter.getCommonCoordinate()},interfaces_:function(){return[]},getClass:function(){return he}}),e(ce.prototype,{filter:function(t){this.commonBitsX.add(t.x),this.commonBitsY.add(t.y)},getCommonCoordinate:function(){return new d(this.commonBitsX.getCommon(),this.commonBitsY.getCommon())},interfaces_:function(){return[z]},getClass:function(){return ce}}),e(fe.prototype,{filter:function(t,e){var n=t.getOrdinate(e,0)+this.trans.x,i=t.getOrdinate(e,1)+this.trans.y;t.setOrdinate(e,0,n),t.setOrdinate(e,1,i)},isDone:function(){return!1},isGeometryChanged:function(){return!0},interfaces_:function(){return[ct]},getClass:function(){return fe}}),he.CommonCoordinateFilter=ce,he.Translater=fe,e(ge.prototype,{next:function(){if(this.atStart)return this.atStart=!1,ge.isAtomic(this.parent)&&this.index++,this.parent;if(null!==this.subcollectionIterator){if(this.subcollectionIterator.hasNext())return this.subcollectionIterator.next();this.subcollectionIterator=null}if(this.index>=this.max)throw new x;var t=this.parent.getGeometryN(this.index++);return t instanceof ft?(this.subcollectionIterator=new ge(t),this.subcollectionIterator.next()):t},remove:function(){throw new UnsupportedOperationException(this.getClass().getName())},hasNext:function(){if(this.atStart)return!0;if(null!==this.subcollectionIterator){if(this.subcollectionIterator.hasNext())return!0;this.subcollectionIterator=null}return!(this.index>=this.max)},interfaces_:function(){return[f]},getClass:function(){return ge}}),ge.isAtomic=function(t){return!(t instanceof ft)},e(de.prototype,{locateInternal:function(){if(arguments[0]instanceof d&&arguments[1]instanceof Rt){var t=arguments[0],e=arguments[1];if(e.isEmpty())return L.EXTERIOR;var n=e.getExteriorRing(),i=this.locateInPolygonRing(t,n);if(i===L.EXTERIOR)return L.EXTERIOR;if(i===L.BOUNDARY)return L.BOUNDARY;for(var r=0;r<e.getNumInteriorRing();r++){var s=e.getInteriorRingN(r),s=this.locateInPolygonRing(t,s);if(s===L.INTERIOR)return L.EXTERIOR;if(s===L.BOUNDARY)return L.BOUNDARY}return L.INTERIOR}if(arguments[0]instanceof d&&arguments[1]instanceof Ct){n=arguments[0],i=arguments[1];if(!i.getEnvelopeInternal().intersects(n))return L.EXTERIOR;var o=i.getCoordinates();return i.isClosed()||!n.equals(o[0])&&!n.equals(o[o.length-1])?Zt.isOnLine(n,o)?L.INTERIOR:L.EXTERIOR:L.BOUNDARY}if(arguments[0]instanceof d&&arguments[1]instanceof wt){o=arguments[0];return arguments[1].getCoordinate().equals2D(o)?L.INTERIOR:L.EXTERIOR}},locateInPolygonRing:function(t,e){return e.getEnvelopeInternal().intersects(t)?Zt.locatePointInRing(t,e.getCoordinates()):L.EXTERIOR},intersects:function(t,e){return this.locate(t,e)!==L.EXTERIOR},updateLocationInfo:function(t){t===L.INTERIOR&&(this.isIn=!0),t===L.BOUNDARY&&this.numBoundaries++},computeLocation:function(t,e){if(e instanceof wt&&this.updateLocationInfo(this.locateInternal(t,e)),e instanceof Ct)this.updateLocationInfo(this.locateInternal(t,e));else if(e instanceof Rt)this.updateLocationInfo(this.locateInternal(t,e));else if(e instanceof gt)for(var n=e,i=0;i<n.getNumGeometries();i++){var r=n.getGeometryN(i);this.updateLocationInfo(this.locateInternal(t,r))}else if(e instanceof bt)for(var s=e,i=0;i<s.getNumGeometries();i++){var o=s.getGeometryN(i);this.updateLocationInfo(this.locateInternal(t,o))}else if(e instanceof ft)for(var a=new ge(e);a.hasNext();){var u=a.next();u!==e&&this.computeLocation(t,u)}},locate:function(t,e){return e.isEmpty()?L.EXTERIOR:e instanceof Ct||e instanceof Rt?this.locateInternal(t,e):(this.isIn=!1,this.numBoundaries=0,this.computeLocation(t,e),this.boundaryRule.isInBoundary(this.numBoundaries)?L.BOUNDARY:0<this.numBoundaries||this.isIn?L.INTERIOR:L.EXTERIOR)},interfaces_:function(){return[]},getClass:function(){return de}}),e(pe.prototype,{interfaces_:function(){return[]},getClass:function(){return pe}}),pe.octant=function(){if("number"==typeof arguments[0]&&"number"==typeof arguments[1]){var t=arguments[0],e=arguments[1];if(0===t&&0===e)throw new c;var n=Math.abs(t),i=Math.abs(e);return 0<=t?0<=e?i<=n?0:1:i<=n?7:6:0<=e?i<=n?3:2:i<=n?4:5}if(arguments[0]instanceof d&&arguments[1]instanceof d){e=arguments[0],i=arguments[1],n=i.x-e.x,i=i.y-e.y;if(0==n&&0==i)throw new c;return pe.octant(n,i)}},e(me.prototype,{getCoordinates:function(){},size:function(){},getCoordinate:function(t){},isClosed:function(){},setData:function(t){},getData:function(){},interfaces_:function(){return[]},getClass:function(){return me}}),e(ye.prototype,{getCoordinates:function(){return this.pts},size:function(){return this.pts.length},getCoordinate:function(t){return this.pts[t]},isClosed:function(){return this.pts[0].equals(this.pts[this.pts.length-1])},getSegmentOctant:function(t){return t===this.pts.length-1?-1:pe.octant(this.getCoordinate(t),this.getCoordinate(t+1))},setData:function(t){this.data=t},getData:function(){return this.data},toString:function(){return Xt.toLineString(new Ft(this.pts))},interfaces_:function(){return[me]},getClass:function(){return ye}}),e(ve.prototype,{getBounds:function(){},interfaces_:function(){return[]},getClass:function(){return ve}}),e(xe.prototype,{getItem:function(){return this.item},getBounds:function(){return this.bounds},interfaces_:function(){return[ve,o]},getClass:function(){return xe}}),e(Ee.prototype,{poll:function(){if(this.isEmpty())return null;var t=this.items.get(1);return this.items.set(1,this.items.get(this._size)),--this._size,this.reorder(1),t},size:function(){return this._size},reorder:function(t){for(var e=null,n=this.items.get(t);2*t<=this._size&&((e=2*t)!==this._size&&this.items.get(e+1).compareTo(this.items.get(e))<0&&e++,this.items.get(e).compareTo(n)<0);t=e)this.items.set(t,this.items.get(e));this.items.set(t,n)},clear:function(){this._size=0,this.items.clear()},isEmpty:function(){return 0===this._size},add:function(t){this.items.add(null),this._size+=1;var e=this._size;for(this.items.set(0,t);t.compareTo(this.items.get(Math.trunc(e/2)))<0;e/=2)this.items.set(e,this.items.get(Math.trunc(e/2)));this.items.set(e,t)},interfaces_:function(){return[]},getClass:function(){return Ee}}),e(Ie.prototype,{visitItem:function(t){},interfaces_:function(){return[]},getClass:function(){return Ie}}),e(Ne.prototype,{insert:function(t,e){},remove:function(t,e){},query:function(){},interfaces_:function(){return[]},getClass:function(){return Ne}}),e(Ce.prototype,{getLevel:function(){return this.level},size:function(){return this.childBoundables.size()},getChildBoundables:function(){return this.childBoundables},addChildBoundable:function(t){l.isTrue(null===this.bounds),this.childBoundables.add(t)},isEmpty:function(){return this.childBoundables.isEmpty()},getBounds:function(){return null===this.bounds&&(this.bounds=this.computeBounds()),this.bounds},interfaces_:function(){return[ve,o]},getClass:function(){return Ce}}),Ce.serialVersionUID=0x5a1e55ec41369800;var Zs={reverseOrder:function(){return{compare:function(t,e){return e.compareTo(t)}}},min:function(t){return Zs.sort(t),t.get(0)},sort:function(t,e){var n=t.toArray();e?ut.sort(n,e):ut.sort(n);for(var i=t.iterator(),r=0,s=n.length;r<s;r++)i.next(),i.set(n[r])},singletonList:function(t){var e=new I;return e.add(t),e}};e(Se.prototype,{expandToQueue:function(t,e){var n=Se.isComposite(this.boundable1),i=Se.isComposite(this.boundable2);if(n&&i)return Se.area(this.boundable1)>Se.area(this.boundable2)?this.expand(this.boundable1,this.boundable2,t,e):this.expand(this.boundable2,this.boundable1,t,e),null;if(n)return this.expand(this.boundable1,this.boundable2,t,e),null;if(i)return this.expand(this.boundable2,this.boundable1,t,e),null;throw new c},isLeaves:function(){return!(Se.isComposite(this.boundable1)||Se.isComposite(this.boundable2))},compareTo:function(t){return this._distance<t._distance?-1:this._distance>t._distance?1:0},expand:function(t,e,n,i){for(var r=t.getChildBoundables().iterator();r.hasNext();){var s=new Se(r.next(),e,this.itemDistance);s.getDistance()<i&&n.add(s)}},getBoundable:function(t){return 0===t?this.boundable1:this.boundable2},getDistance:function(){return this._distance},distance:function(){return this.isLeaves()?this.itemDistance.distance(this.boundable1,this.boundable2):this.boundable1.getBounds().distance(this.boundable2.getBounds())},interfaces_:function(){return[i]},getClass:function(){return Se}}),Se.area=function(t){return t.getBounds().getArea()},Se.isComposite=function(t){return t instanceof Ce},e(we.prototype,{getNodeCapacity:function(){return this.nodeCapacity},lastNode:function(t){return t.get(t.size()-1)},size:function(){if(0===arguments.length)return this.isEmpty()?0:(this.build(),this.size(this.root));if(1===arguments.length){for(var t=0,e=arguments[0].getChildBoundables().iterator();e.hasNext();){var n=e.next();n instanceof Ce?t+=this.size(n):n instanceof xe&&(t+=1)}return t}},removeItem:function(t,e){for(var n=null,i=t.getChildBoundables().iterator();i.hasNext();){var r=i.next();r instanceof xe&&r.getItem()===e&&(n=r)}return null!==n&&(t.getChildBoundables().remove(n),!0)},itemsTree:function(){if(0===arguments.length){this.build();var t=this.itemsTree(this.root);return null===t?new I:t}if(1===arguments.length){for(var t=arguments[0],e=new I,n=t.getChildBoundables().iterator();n.hasNext();){var i,r=n.next();r instanceof Ce?null!==(i=this.itemsTree(r))&&e.add(i):r instanceof xe?e.add(r.getItem()):l.shouldNeverReachHere()}return e.size()<=0?null:e}},insert:function(t,e){l.isTrue(!this.built,"Cannot insert items into an STR packed R-tree after it has been built."),this.itemBoundables.add(new xe(t,e))},boundablesAtLevel:function(){if(1===arguments.length){var t=arguments[0],e=new I;return this.boundablesAtLevel(t,this.root,e),e}if(3===arguments.length){var n=arguments[0],e=arguments[1],i=arguments[2];if(l.isTrue(-2<n),e.getLevel()===n)return i.add(e),null;for(var r=e.getChildBoundables().iterator();r.hasNext();){var s=r.next();s instanceof Ce?this.boundablesAtLevel(n,s,i):(l.isTrue(s instanceof xe),-1===n&&i.add(s))}return null}},query:function(){if(1===arguments.length){var t=arguments[0];this.build();var e=new I;return this.isEmpty()||this.getIntersectsOp().intersects(this.root.getBounds(),t)&&this.query(t,this.root,e),e}if(2===arguments.length){t=arguments[0],e=arguments[1];if(this.build(),this.isEmpty())return null;this.getIntersectsOp().intersects(this.root.getBounds(),t)&&this.query(t,this.root,e)}else if(3===arguments.length)if(R(arguments[2],Ie)&&arguments[0]instanceof Object&&arguments[1]instanceof Ce)for(var n=arguments[0],i=arguments[2],r=arguments[1].getChildBoundables(),s=0;s<r.size();s++){var o=r.get(s);this.getIntersectsOp().intersects(o.getBounds(),n)&&(o instanceof Ce?this.query(n,o,i):o instanceof xe?i.visitItem(o.getItem()):l.shouldNeverReachHere())}else if(R(arguments[2],v)&&arguments[0]instanceof Object&&arguments[1]instanceof Ce)for(var a=arguments[0],u=arguments[2],r=arguments[1].getChildBoundables(),s=0;s<r.size();s++){o=r.get(s);this.getIntersectsOp().intersects(o.getBounds(),a)&&(o instanceof Ce?this.query(a,o,u):o instanceof xe?u.add(o.getItem()):l.shouldNeverReachHere())}},build:function(){return this.built?null:(this.root=this.itemBoundables.isEmpty()?this.createNode(0):this.createHigherLevels(this.itemBoundables,-1),this.itemBoundables=null,void(this.built=!0))},getRoot:function(){return this.build(),this.root},remove:function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];return this.build(),!!this.getIntersectsOp().intersects(this.root.getBounds(),t)&&this.remove(t,this.root,e)}if(3===arguments.length){var n=arguments[0],e=arguments[1],i=arguments[2],r=this.removeItem(e,i);if(r)return!0;for(var s=null,o=e.getChildBoundables().iterator();o.hasNext();){var a=o.next();if(this.getIntersectsOp().intersects(a.getBounds(),n)&&a instanceof Ce&&(r=this.remove(n,a,i))){s=a;break}}return null!==s&&s.getChildBoundables().isEmpty()&&e.getChildBoundables().remove(s),r}},createHigherLevels:function(t,e){l.isTrue(!t.isEmpty());t=this.createParentBoundables(t,e+1);return 1===t.size()?t.get(0):this.createHigherLevels(t,e+1)},depth:function(){if(0===arguments.length)return this.isEmpty()?0:(this.build(),this.depth(this.root));if(1===arguments.length){for(var t=0,e=arguments[0].getChildBoundables().iterator();e.hasNext();){var n=e.next();n instanceof Ce&&(t<(n=this.depth(n))&&(t=n))}return t+1}},createParentBoundables:function(t,e){l.isTrue(!t.isEmpty());var n=new I;n.add(this.createNode(e));t=new I(t);Zs.sort(t,this.getComparator());for(var i=t.iterator();i.hasNext();){var r=i.next();this.lastNode(n).getChildBoundables().size()===this.getNodeCapacity()&&n.add(this.createNode(e)),this.lastNode(n).addChildBoundable(r)}return n},isEmpty:function(){return(this.built?this.root:this.itemBoundables).isEmpty()},interfaces_:function(){return[o]},getClass:function(){return we}}),we.compareDoubles=function(t,e){return e<t?1:t<e?-1:0},we.IntersectsOp=function(){},we.serialVersionUID=-0x35ef64c82d4c5400,we.DEFAULT_NODE_CAPACITY=10,e(Le.prototype,{distance:function(t,e){},interfaces_:function(){return[]},getClass:function(){return Le}}),a(Re,we),e(Re.prototype,{createParentBoundablesFromVerticalSlices:function(t,e){l.isTrue(0<t.length);for(var n=new I,i=0;i<t.length;i++)n.addAll(this.createParentBoundablesFromVerticalSlice(t[i],e));return n},createNode:function(t){return new Te(t)},size:function(){return 0===arguments.length?we.prototype.size.call(this):we.prototype.size.apply(this,arguments)},insert:function(){if(2!==arguments.length)return we.prototype.insert.apply(this,arguments);var t=arguments[0],e=arguments[1];return t.isNull()?null:void we.prototype.insert.call(this,t,e)},getIntersectsOp:function(){return Re.intersectsOp},verticalSlices:function(t,e){for(var n=Math.trunc(Math.ceil(t.size()/e)),i=new Array(e).fill(null),r=t.iterator(),s=0;s<e;s++){i[s]=new I;for(var o=0;r.hasNext()&&o<n;){var a=r.next();i[s].add(a),o++}}return i},query:function(){if(1===arguments.length){var t=arguments[0];return we.prototype.query.call(this,t)}var e,n,i,r;2===arguments.length?(e=arguments[0],t=arguments[1],we.prototype.query.call(this,e,t)):3===arguments.length&&(R(arguments[2],Ie)&&arguments[0]instanceof Object&&arguments[1]instanceof Ce?(n=arguments[0],i=arguments[1],r=arguments[2],we.prototype.query.call(this,n,i,r)):R(arguments[2],v)&&arguments[0]instanceof Object&&arguments[1]instanceof Ce&&(n=arguments[0],i=arguments[1],r=arguments[2],we.prototype.query.call(this,n,i,r)))},getComparator:function(){return Re.yComparator},createParentBoundablesFromVerticalSlice:function(t,e){return we.prototype.createParentBoundables.call(this,t,e)},remove:function(){if(2!==arguments.length)return we.prototype.remove.apply(this,arguments);var t=arguments[0],e=arguments[1];return we.prototype.remove.call(this,t,e)},depth:function(){return 0===arguments.length?we.prototype.depth.call(this):we.prototype.depth.apply(this,arguments)},createParentBoundables:function(t,e){l.isTrue(!t.isEmpty());var n=Math.trunc(Math.ceil(t.size()/this.getNodeCapacity())),t=new I(t);Zs.sort(t,Re.xComparator);n=this.verticalSlices(t,Math.trunc(Math.ceil(Math.sqrt(n))));return this.createParentBoundablesFromVerticalSlices(n,e)},nearestNeighbour:function(){if(1===arguments.length){if(R(arguments[0],Le)){var t=arguments[0],t=new Se(this.getRoot(),this.getRoot(),t);return this.nearestNeighbour(t)}if(arguments[0]instanceof Se){var e=arguments[0];return this.nearestNeighbour(e,g.POSITIVE_INFINITY)}}else if(2===arguments.length){if(arguments[0]instanceof Re&&R(arguments[1],Le)){var e=arguments[0],n=arguments[1],t=new Se(this.getRoot(),e.getRoot(),n);return this.nearestNeighbour(t)}if(arguments[0]instanceof Se&&"number"==typeof arguments[1]){var i=arguments[0],r=arguments[1],s=null,o=new Ee;for(o.add(i);!o.isEmpty()&&0<r;){var a=o.poll(),u=a.getDistance();if(r<=u)break;a.isLeaves()?(r=u,s=a):a.expandToQueue(o,r)}return[s.getBoundable(0).getItem(),s.getBoundable(1).getItem()]}}else if(3===arguments.length){n=arguments[2],i=new xe(arguments[0],arguments[1]),t=new Se(this.getRoot(),i,n);return this.nearestNeighbour(t)[0]}},interfaces_:function(){return[Ne,o]},getClass:function(){return Re}}),Re.centreX=function(t){return Re.avg(t.getMinX(),t.getMaxX())},Re.avg=function(t,e){return(t+e)/2},Re.centreY=function(t){return Re.avg(t.getMinY(),t.getMaxY())},a(Te,Ce),e(Te.prototype,{computeBounds:function(){for(var t=null,e=this.getChildBoundables().iterator();e.hasNext();){var n=e.next();null===t?t=new C(n.getBounds()):t.expandToInclude(n.getBounds())}return t},interfaces_:function(){return[]},getClass:function(){return Te}}),Re.STRtreeNode=Te,Re.serialVersionUID=0x39920f7d5f261e0,Re.xComparator={interfaces_:function(){return[s]},compare:function(t,e){return we.compareDoubles(Re.centreX(t.getBounds()),Re.centreX(e.getBounds()))}},Re.yComparator={interfaces_:function(){return[s]},compare:function(t,e){return we.compareDoubles(Re.centreY(t.getBounds()),Re.centreY(e.getBounds()))}},Re.intersectsOp={interfaces_:function(){return[IntersectsOp]},intersects:function(t,e){return t.intersects(e)}},Re.DEFAULT_NODE_CAPACITY=10,e(Pe.prototype,{interfaces_:function(){return[]},getClass:function(){return Pe}}),Pe.relativeSign=function(t,e){return t<e?-1:e<t?1:0},Pe.compare=function(t,e,n){if(e.equals2D(n))return 0;var i=Pe.relativeSign(e.x,n.x),n=Pe.relativeSign(e.y,n.y);switch(t){case 0:return Pe.compareValue(i,n);case 1:return Pe.compareValue(n,i);case 2:return Pe.compareValue(n,-i);case 3:return Pe.compareValue(-i,n);case 4:return Pe.compareValue(-i,-n);case 5:return Pe.compareValue(-n,-i);case 6:return Pe.compareValue(-n,i);case 7:return Pe.compareValue(i,-n)}return l.shouldNeverReachHere("invalid octant value"),0},Pe.compareValue=function(t,e){return t<0?-1:0<t?1:e<0?-1:0<e?1:0},e(be.prototype,{getCoordinate:function(){return this.coord},print:function(t){t.print(this.coord),t.print(" seg # = "+this.segmentIndex)},compareTo:function(t){return this.segmentIndex<t.segmentIndex?-1:this.segmentIndex>t.segmentIndex?1:this.coord.equals2D(t.coord)?0:Pe.compare(this.segmentOctant,this.coord,t.coord)},isEndPoint:function(t){return 0===this.segmentIndex&&!this._isInterior||this.segmentIndex===t},isInterior:function(){return this._isInterior},interfaces_:function(){return[i]},getClass:function(){return be}}),e(Oe.prototype,{getSplitCoordinates:function(){var t=new N;this.addEndpoints();for(var e=this.iterator(),n=e.next();e.hasNext();){var i=e.next();this.addEdgeCoordinates(n,i,t),n=i}return t.toCoordinateArray()},addCollapsedNodes:function(){var t=new I;this.findCollapsesFromInsertedNodes(t),this.findCollapsesFromExistingVertices(t);for(var e=t.iterator();e.hasNext();){var n=e.next().intValue();this.add(this.edge.getCoordinate(n),n)}},print:function(t){t.println("Intersections:");for(var e=this.iterator();e.hasNext();){e.next().print(t)}},findCollapsesFromExistingVertices:function(t){for(var e=0;e<this.edge.size()-2;e++){var n=this.edge.getCoordinate(e),i=(this.edge.getCoordinate(e+1),this.edge.getCoordinate(e+2));n.equals2D(i)&&t.add(new b(e+1))}},addEdgeCoordinates:function(t,e,n){e.segmentIndex,t.segmentIndex;var i=this.edge.getCoordinate(e.segmentIndex),i=e.isInterior()||!e.coord.equals2D(i);n.add(new d(t.coord),!1);for(var r=t.segmentIndex+1;r<=e.segmentIndex;r++)n.add(this.edge.getCoordinate(r));i&&n.add(new d(e.coord))},iterator:function(){return this.nodeMap.values().iterator()},addSplitEdges:function(t){this.addEndpoints(),this.addCollapsedNodes();for(var e=this.iterator(),n=e.next();e.hasNext();){var i=e.next(),r=this.createSplitEdge(n,i);t.add(r),n=i}},findCollapseIndex:function(t,e,n){if(!t.coord.equals2D(e.coord))return!1;var i=e.segmentIndex-t.segmentIndex;return e.isInterior()||i--,1===i&&(n[0]=t.segmentIndex+1,!0)},findCollapsesFromInsertedNodes:function(t){for(var e=new Array(1).fill(null),n=this.iterator(),i=n.next();n.hasNext();){var r=n.next();this.findCollapseIndex(i,r,e)&&t.add(new b(e[0])),i=r}},getEdge:function(){return this.edge},addEndpoints:function(){var t=this.edge.size()-1;this.add(this.edge.getCoordinate(0),0),this.add(this.edge.getCoordinate(t),t)},createSplitEdge:function(t,e){var n=e.segmentIndex-t.segmentIndex+2,i=this.edge.getCoordinate(e.segmentIndex),i=e.isInterior()||!e.coord.equals2D(i);i||n--;var r=new Array(n).fill(null),s=0;r[s++]=new d(t.coord);for(var o=t.segmentIndex+1;o<=e.segmentIndex;o++)r[s++]=this.edge.getCoordinate(o);return i&&(r[s]=new d(e.coord)),new De(r,this.edge.getData())},add:function(t,e){var n=new be(this.edge,t,e,this.edge.getSegmentOctant(e)),e=this.nodeMap.get(n);return null!==e?(l.isTrue(e.coord.equals2D(t),"Found equal nodes with different coordinates"),e):(this.nodeMap.put(n,n),n)},checkSplitEdgesCorrectness:function(t){var e=this.edge.getCoordinates(),n=t.get(0).getCoordinate(0);if(!n.equals2D(e[0]))throw new p("bad split edge start point at "+n);t=t.get(t.size()-1).getCoordinates(),t=t[t.length-1];if(!t.equals2D(e[e.length-1]))throw new p("bad split edge end point at "+t)},interfaces_:function(){return[]},getClass:function(){return Oe}}),e(_e.prototype,{next:function(){return null===this.currNode?(this.currNode=this.nextNode,this.currSegIndex=this.currNode.segmentIndex,this.readNextNode(),this.currNode):null===this.nextNode?null:this.nextNode.segmentIndex===this.currNode.segmentIndex?(this.currNode=this.nextNode,this.currSegIndex=this.currNode.segmentIndex,this.readNextNode(),this.currNode):(this.nextNode.segmentIndex,this.currNode.segmentIndex,null)},remove:function(){throw new UnsupportedOperationException(this.getClass().getName())},hasNext:function(){return null!==this.nextNode},readNextNode:function(){this.nodeIt.hasNext()?this.nextNode=this.nodeIt.next():this.nextNode=null},interfaces_:function(){return[f]},getClass:function(){return _e}}),e(Me.prototype,{addIntersection:function(t,e){},interfaces_:function(){return[me]},getClass:function(){return Me}}),e(De.prototype,{getCoordinates:function(){return this.pts},size:function(){return this.pts.length},getCoordinate:function(t){return this.pts[t]},isClosed:function(){return this.pts[0].equals(this.pts[this.pts.length-1])},getSegmentOctant:function(t){return t===this.pts.length-1?-1:this.safeOctant(this.getCoordinate(t),this.getCoordinate(t+1))},setData:function(t){this.data=t},safeOctant:function(t,e){return t.equals2D(e)?0:pe.octant(t,e)},getData:function(){return this.data},addIntersection:function(){var t,e;2===arguments.length?(t=arguments[0],e=arguments[1],this.addIntersectionNode(t,e)):4===arguments.length&&(t=arguments[1],e=arguments[3],e=new d(arguments[0].getIntersection(e)),this.addIntersection(e,t))},toString:function(){return Xt.toLineString(new Ft(this.pts))},getNodeList:function(){return this.nodeList},addIntersectionNode:function(t,e){var n=e,i=n+1;return i<this.pts.length&&(e=this.pts[i],t.equals2D(e)&&(n=i)),this.nodeList.add(t,n)},addIntersections:function(t,e,n){for(var i=0;i<t.getIntersectionNum();i++)this.addIntersection(t,e,n,i)},interfaces_:function(){return[Me]},getClass:function(){return De}}),De.getNodedSubstrings=function(){if(1===arguments.length){var t=arguments[0],e=new I;return De.getNodedSubstrings(t,e),e}if(2===arguments.length)for(var n=arguments[1],i=arguments[0].iterator();i.hasNext();){i.next().getNodeList().addSplitEdges(n)}},e(Ae.prototype,{overlap:function(){var t,e,n;2===arguments.length||4===arguments.length&&(t=arguments[1],e=arguments[2],n=arguments[3],arguments[0].getLineSegment(t,this.overlapSeg1),e.getLineSegment(n,this.overlapSeg2),this.overlap(this.overlapSeg1,this.overlapSeg2))},interfaces_:function(){return[]},getClass:function(){return Ae}}),e(Fe.prototype,{getLineSegment:function(t,e){e.p0=this.pts[t],e.p1=this.pts[t+1]},computeSelect:function(t,e,n,i){var r=this.pts[e],s=this.pts[n];if(i.tempEnv1.init(r,s),n-e==1)return i.select(this,e),null;if(!t.intersects(i.tempEnv1))return null;s=Math.trunc((e+n)/2);e<s&&this.computeSelect(t,e,s,i),s<n&&this.computeSelect(t,s,n,i)},getCoordinates:function(){for(var t=new Array(this.end-this.start+1).fill(null),e=0,n=this.start;n<=this.end;n++)t[e++]=this.pts[n];return t},computeOverlaps:function(t,e){this.computeOverlapsInternal(this.start,this.end,t,t.start,t.end,e)},setId:function(t){this.id=t},select:function(t,e){this.computeSelect(t,this.start,this.end,e)},getEnvelope:function(){var t,e;return null===this.env&&(t=this.pts[this.start],e=this.pts[this.end],this.env=new C(t,e)),this.env},getEndIndex:function(){return this.end},getStartIndex:function(){return this.start},getContext:function(){return this.context},getId:function(){return this.id},computeOverlapsInternal:function(t,e,n,i,r,s){var o=this.pts[t],a=this.pts[e],u=n.pts[i],l=n.pts[r];if(e-t==1&&r-i==1)return s.overlap(this,t,n,i),null;if(s.tempEnv1.init(o,a),s.tempEnv2.init(u,l),!s.tempEnv1.intersects(s.tempEnv2))return null;u=Math.trunc((t+e)/2),l=Math.trunc((i+r)/2);t<u&&(i<l&&this.computeOverlapsInternal(t,u,n,i,l,s),l<r&&this.computeOverlapsInternal(t,u,n,l,r,s)),u<e&&(i<l&&this.computeOverlapsInternal(u,e,n,i,l,s),l<r&&this.computeOverlapsInternal(u,e,n,l,r,s))},interfaces_:function(){return[]},getClass:function(){return Fe}}),e(Ge.prototype,{interfaces_:function(){return[]},getClass:function(){return Ge}}),Ge.isNorthern=function(t){return t===Ge.NE||t===Ge.NW},Ge.isOpposite=function(t,e){return t!==e&&2==(t-e+4)%4},Ge.commonHalfPlane=function(t,e){if(t===e)return t;if(2==(t-e+4)%4)return-1;var n=t<e?t:e;return 0===n&&3===(e<t?t:e)?3:n},Ge.isInHalfPlane=function(t,e){return e===Ge.SE?t===Ge.SE||t===Ge.SW:t===e||t===e+1},Ge.quadrant=function(){if("number"==typeof arguments[0]&&"number"==typeof arguments[1]){var t=arguments[0],e=arguments[1];if(0===t&&0===e)throw new c;return 0<=t?0<=e?Ge.NE:Ge.SE:0<=e?Ge.NW:Ge.SW}if(arguments[0]instanceof d&&arguments[1]instanceof d){t=arguments[0],e=arguments[1];if(e.x===t.x&&e.y===t.y)throw new c;return e.x>=t.x?e.y>=t.y?Ge.NE:Ge.SE:e.y>=t.y?Ge.NW:Ge.SW}},Ge.NE=0,Ge.NW=1,Ge.SW=2,Ge.SE=3,e(qe.prototype,{interfaces_:function(){return[]},getClass:function(){return qe}}),qe.getChainStartIndices=function(t){var e=0,n=new I;n.add(new b(e));do{var i=qe.findChainEnd(t,e)}while(n.add(new b(i)),(e=i)<t.length-1);return qe.toIntArray(n)},qe.findChainEnd=function(t,e){for(var n=e;n<t.length-1&&t[n].equals2D(t[n+1]);)n++;if(n>=t.length-1)return t.length-1;for(var i=Ge.quadrant(t[n],t[n+1]),r=e+1;r<t.length;){if(!t[r-1].equals2D(t[r]))if(Ge.quadrant(t[r-1],t[r])!==i)break;r++}return r-1},qe.getChains=function(){if(1===arguments.length)return qe.getChains(arguments[0],null);if(2===arguments.length){for(var t=arguments[0],e=arguments[1],n=new I,i=qe.getChainStartIndices(t),r=0;r<i.length-1;r++){var s=new Fe(t,i[r],i[r+1],e);n.add(s)}return n}},qe.toIntArray=function(t){for(var e=new Array(t.size()).fill(null),n=0;n<e.length;n++)e[n]=t.get(n).intValue();return e},e(Be.prototype,{computeNodes:function(t){},getNodedSubstrings:function(){},interfaces_:function(){return[]},getClass:function(){return Be}}),e(ze.prototype,{setSegmentIntersector:function(t){this.segInt=t},interfaces_:function(){return[Be]},getClass:function(){return ze}}),a(Ve,ze),e(Ve.prototype,{getMonotoneChains:function(){return this.monoChains},getNodedSubstrings:function(){return De.getNodedSubstrings(this.nodedSegStrings)},getIndex:function(){return this.index},add:function(t){for(var e=qe.getChains(t.getCoordinates(),t).iterator();e.hasNext();){var n=e.next();n.setId(this.idCounter++),this.index.insert(n.getEnvelope(),n),this.monoChains.add(n)}},computeNodes:function(t){for(var e=(this.nodedSegStrings=t).iterator();e.hasNext();)this.add(e.next());this.intersectChains()},intersectChains:function(){for(var t=new ke(this.segInt),e=this.monoChains.iterator();e.hasNext();)for(var n=e.next(),i=this.index.query(n.getEnvelope()).iterator();i.hasNext();){var r=i.next();if(r.getId()>n.getId()&&(n.computeOverlaps(r,t),this.nOverlaps++),this.segInt.isDone())return null}},interfaces_:function(){return[]},getClass:function(){return Ve}}),a(ke,Ae),e(ke.prototype,{overlap:function(){if(4!==arguments.length)return Ae.prototype.overlap.apply(this,arguments);var t=arguments[1],e=arguments[2],n=arguments[3],i=arguments[0].getContext(),e=e.getContext();this.si.processIntersections(i,t,e,n)},interfaces_:function(){return[]},getClass:function(){return ke}}),Ve.SegmentOverlapAction=ke,a(Ye,p),e(Ye.prototype,{getCoordinate:function(){return this.pt},interfaces_:function(){return[]},getClass:function(){return Ye}}),Ye.msgWithCoord=function(t,e){return null!==e?t+" [ "+e+" ]":t},e(Ue.prototype,{processIntersections:function(t,e,n,i){},isDone:function(){},interfaces_:function(){return[]},getClass:function(){return Ue}}),e(Xe.prototype,{getInteriorIntersection:function(){return this.interiorIntersection},setCheckEndSegmentsOnly:function(t){this.isCheckEndSegmentsOnly=t},getIntersectionSegments:function(){return this.intSegments},count:function(){return this.intersectionCount},getIntersections:function(){return this.intersections},setFindAllIntersections:function(t){this.findAllIntersections=t},setKeepIntersections:function(t){this.keepIntersections=t},processIntersections:function(t,e,n,i){if(!this.findAllIntersections&&this.hasIntersection())return null;if(t===n&&e===i)return null;if(this.isCheckEndSegmentsOnly&&!(this.isEndSegment(t,e)||this.isEndSegment(n,i)))return null;var r=t.getCoordinates()[e],t=t.getCoordinates()[e+1],e=n.getCoordinates()[i],i=n.getCoordinates()[i+1];this.li.computeIntersection(r,t,e,i),this.li.hasIntersection()&&this.li.isInteriorIntersection()&&(this.intSegments=new Array(4).fill(null),this.intSegments[0]=r,this.intSegments[1]=t,this.intSegments[2]=e,this.intSegments[3]=i,this.interiorIntersection=this.li.getIntersection(0),this.keepIntersections&&this.intersections.add(this.interiorIntersection),this.intersectionCount++)},isEndSegment:function(t,e){return 0===e||e>=t.size()-2},hasIntersection:function(){return null!==this.interiorIntersection},isDone:function(){return!this.findAllIntersections&&null!==this.interiorIntersection},interfaces_:function(){return[Ue]},getClass:function(){return Xe}}),Xe.createAllIntersectionsFinder=function(t){t=new Xe(t);return t.setFindAllIntersections(!0),t},Xe.createAnyIntersectionFinder=function(t){return new Xe(t)},Xe.createIntersectionCounter=function(t){t=new Xe(t);return t.setFindAllIntersections(!0),t.setKeepIntersections(!1),t},e(He.prototype,{execute:function(){return null!==this.segInt?null:void this.checkInteriorIntersections()},getIntersections:function(){return this.segInt.getIntersections()},isValid:function(){return this.execute(),this._isValid},setFindAllIntersections:function(t){this.findAllIntersections=t},checkInteriorIntersections:function(){this._isValid=!0,this.segInt=new Xe(this.li),this.segInt.setFindAllIntersections(this.findAllIntersections);var t=new Ve;return t.setSegmentIntersector(this.segInt),t.computeNodes(this.segStrings),this.segInt.hasIntersection()?(this._isValid=!1,null):void 0},checkValid:function(){if(this.execute(),!this._isValid)throw new Ye(this.getErrorMessage(),this.segInt.getInteriorIntersection())},getErrorMessage:function(){if(this._isValid)return"no intersections found";var t=this.segInt.getIntersectionSegments();return"found non-noded intersection between "+Xt.toLineString(t[0],t[1])+" and "+Xt.toLineString(t[2],t[3])},interfaces_:function(){return[]},getClass:function(){return He}}),He.computeIntersections=function(t){t=new He(t);return t.setFindAllIntersections(!0),t.isValid(),t.getIntersections()},e(We.prototype,{checkValid:function(){this.nv.checkValid()},interfaces_:function(){return[]},getClass:function(){return We}}),We.toSegmentStrings=function(t){for(var e=new I,n=t.iterator();n.hasNext();){var i=n.next();e.add(new ye(i.getCoordinates(),i))}return e},We.checkValid=function(t){new We(t).checkValid()},e(je.prototype,{map:function(t){for(var e=new I,n=0;n<t.getNumGeometries();n++){var i=this.mapOp.map(t.getGeometryN(n));i.isEmpty()||e.add(i)}return t.getFactory().createGeometryCollection(Yt.toGeometryArray(e))},interfaces_:function(){return[]},getClass:function(){return je}}),je.map=function(t,e){return new je(e).map(t)},e(Ke.prototype,{interfaces_:function(){return[]},getClass:function(){return Ke}}),Ke.opposite=function(t){return t===Ke.LEFT?Ke.RIGHT:t===Ke.RIGHT?Ke.LEFT:t},Ke.ON=0,Ke.LEFT=1,Ke.RIGHT=2,e(Ze.prototype,{setAllLocations:function(t){for(var e=0;e<this.location.length;e++)this.location[e]=t},isNull:function(){for(var t=0;t<this.location.length;t++)if(this.location[t]!==L.NONE)return!1;return!0},setAllLocationsIfNull:function(t){for(var e=0;e<this.location.length;e++)this.location[e]===L.NONE&&(this.location[e]=t)},isLine:function(){return 1===this.location.length},merge:function(t){var e;t.location.length>this.location.length&&((e=new Array(3).fill(null))[Ke.ON]=this.location[Ke.ON],e[Ke.LEFT]=L.NONE,e[Ke.RIGHT]=L.NONE,this.location=e);for(var n=0;n<this.location.length;n++)this.location[n]===L.NONE&&n<t.location.length&&(this.location[n]=t.location[n])},getLocations:function(){return this.location},flip:function(){if(this.location.length<=1)return null;var t=this.location[Ke.LEFT];this.location[Ke.LEFT]=this.location[Ke.RIGHT],this.location[Ke.RIGHT]=t},toString:function(){var t=new P;return 1<this.location.length&&t.append(L.toLocationSymbol(this.location[Ke.LEFT])),t.append(L.toLocationSymbol(this.location[Ke.ON])),1<this.location.length&&t.append(L.toLocationSymbol(this.location[Ke.RIGHT])),t.toString()},setLocations:function(t,e,n){this.location[Ke.ON]=t,this.location[Ke.LEFT]=e,this.location[Ke.RIGHT]=n},get:function(t){return t<this.location.length?this.location[t]:L.NONE},isArea:function(){return 1<this.location.length},isAnyNull:function(){for(var t=0;t<this.location.length;t++)if(this.location[t]===L.NONE)return!0;return!1},setLocation:function(){var t,e;1===arguments.length?(e=arguments[0],this.setLocation(Ke.ON,e)):2===arguments.length&&(t=arguments[0],e=arguments[1],this.location[t]=e)},init:function(t){this.location=new Array(t).fill(null),this.setAllLocations(L.NONE)},isEqualOnSide:function(t,e){return this.location[e]===t.location[e]},allPositionsEqual:function(t){for(var e=0;e<this.location.length;e++)if(this.location[e]!==t)return!1;return!0},interfaces_:function(){return[]},getClass:function(){return Ze}}),e(Je.prototype,{getGeometryCount:function(){var t=0;return this.elt[0].isNull()||t++,this.elt[1].isNull()||t++,t},setAllLocations:function(t,e){this.elt[t].setAllLocations(e)},isNull:function(t){return this.elt[t].isNull()},setAllLocationsIfNull:function(){var t,e;1===arguments.length?(e=arguments[0],this.setAllLocationsIfNull(0,e),this.setAllLocationsIfNull(1,e)):2===arguments.length&&(t=arguments[0],e=arguments[1],this.elt[t].setAllLocationsIfNull(e))},isLine:function(t){return this.elt[t].isLine()},merge:function(t){for(var e=0;e<2;e++)null===this.elt[e]&&null!==t.elt[e]?this.elt[e]=new Ze(t.elt[e]):this.elt[e].merge(t.elt[e])},flip:function(){this.elt[0].flip(),this.elt[1].flip()},getLocation:function(){if(1===arguments.length){var t=arguments[0];return this.elt[t].get(Ke.ON)}if(2===arguments.length){var e=arguments[0],t=arguments[1];return this.elt[e].get(t)}},toString:function(){var t=new P;return null!==this.elt[0]&&(t.append("A:"),t.append(this.elt[0].toString())),null!==this.elt[1]&&(t.append(" B:"),t.append(this.elt[1].toString())),t.toString()},isArea:function(){if(0===arguments.length)return this.elt[0].isArea()||this.elt[1].isArea();if(1===arguments.length){var t=arguments[0];return this.elt[t].isArea()}},isAnyNull:function(t){return this.elt[t].isAnyNull()},setLocation:function(){var t,e,n;2===arguments.length?(e=arguments[0],n=arguments[1],this.elt[e].setLocation(Ke.ON,n)):3===arguments.length&&(t=arguments[0],e=arguments[1],n=arguments[2],this.elt[t].setLocation(e,n))},isEqualOnSide:function(t,e){return this.elt[0].isEqualOnSide(t.elt[0],e)&&this.elt[1].isEqualOnSide(t.elt[1],e)},allPositionsEqual:function(t,e){return this.elt[t].allPositionsEqual(e)},toLine:function(t){this.elt[t].isArea()&&(this.elt[t]=new Ze(this.elt[t].location[0]))},interfaces_:function(){return[]},getClass:function(){return Je}}),Je.toLineLabel=function(t){for(var e=new Je(L.NONE),n=0;n<2;n++)e.setLocation(n,t.getLocation(n));return e},e(Qe.prototype,{computeRing:function(){if(null!==this.ring)return null;for(var t=new Array(this.pts.size()).fill(null),e=0;e<this.pts.size();e++)t[e]=this.pts.get(e);this.ring=this.geometryFactory.createLinearRing(t),this._isHole=Zt.isCCW(this.ring.getCoordinates())},isIsolated:function(){return 1===this.label.getGeometryCount()},computePoints:function(t){var e=this.startDe=t,n=!0;do{if(null===e)throw new Ye("Found null DirectedEdge");if(e.getEdgeRing()===this)throw new Ye("Directed Edge visited twice during ring-building at "+e.getCoordinate());this.edges.add(e);var i=e.getLabel()}while(l.isTrue(i.isArea()),this.mergeLabel(i),this.addPoints(e.getEdge(),e.isForward(),n),n=!1,this.setEdgeRing(e,this),(e=this.getNext(e))!==this.startDe)},getLinearRing:function(){return this.ring},getCoordinate:function(t){return this.pts.get(t)},computeMaxNodeDegree:function(){this.maxNodeDegree=0;var t=this.startDe;do{var e=t.getNode().getEdges().getOutgoingDegree(this)}while(e>this.maxNodeDegree&&(this.maxNodeDegree=e),(t=this.getNext(t))!==this.startDe);this.maxNodeDegree*=2},addPoints:function(t,e,n){var i=t.getCoordinates();if(e){var r=1;n&&(r=0);for(var s=r;s<i.length;s++)this.pts.add(i[s])}else{r=i.length-2;n&&(r=i.length-1);for(s=r;0<=s;s--)this.pts.add(i[s])}},isHole:function(){return this._isHole},setInResult:function(){for(var t=this.startDe;t.getEdge().setInResult(!0),(t=t.getNext())!==this.startDe;);},containsPoint:function(t){var e=this.getLinearRing();if(!e.getEnvelopeInternal().contains(t))return!1;if(!Zt.isPointInRing(t,e.getCoordinates()))return!1;for(var n=this.holes.iterator();n.hasNext();){if(n.next().containsPoint(t))return!1}return!0},addHole:function(t){this.holes.add(t)},isShell:function(){return null===this.shell},getLabel:function(){return this.label},getEdges:function(){return this.edges},getMaxNodeDegree:function(){return this.maxNodeDegree<0&&this.computeMaxNodeDegree(),this.maxNodeDegree},getShell:function(){return this.shell},mergeLabel:function(){if(1===arguments.length){var t=arguments[0];this.mergeLabel(t,0),this.mergeLabel(t,1)}else if(2===arguments.length){var e=arguments[1],t=arguments[0].getLocation(e,Ke.RIGHT);return t===L.NONE?null:this.label.getLocation(e)===L.NONE?(this.label.setLocation(e,t),null):void 0}},setShell:function(t){null!==(this.shell=t)&&t.addHole(this)},toPolygon:function(t){for(var e=new Array(this.holes.size()).fill(null),n=0;n<this.holes.size();n++)e[n]=this.holes.get(n).getLinearRing();return t.createPolygon(this.getLinearRing(),e)},interfaces_:function(){return[]},getClass:function(){return Qe}}),a($e,Qe),e($e.prototype,{setEdgeRing:function(t,e){t.setMinEdgeRing(e)},getNext:function(t){return t.getNextMin()},interfaces_:function(){return[]},getClass:function(){return $e}}),a(tn,Qe),e(tn.prototype,{buildMinimalRings:function(){var t,e=new I,n=this.startDe;do{}while(null===n.getMinEdgeRing()&&(t=new $e(n,this.geometryFactory),e.add(t)),(n=n.getNext())!==this.startDe);return e},setEdgeRing:function(t,e){t.setEdgeRing(e)},linkDirectedEdgesForMinimalEdgeRings:function(){var t=this.startDe;do{}while(t.getNode().getEdges().linkMinimalDirectedEdges(this),(t=t.getNext())!==this.startDe)},getNext:function(t){return t.getNext()},interfaces_:function(){return[]},getClass:function(){return tn}}),e(en.prototype,{setVisited:function(t){this._isVisited=t},setInResult:function(t){this._isInResult=t},isCovered:function(){return this._isCovered},isCoveredSet:function(){return this._isCoveredSet},setLabel:function(t){this.label=t},getLabel:function(){return this.label},setCovered:function(t){this._isCovered=t,this._isCoveredSet=!0},updateIM:function(t){l.isTrue(2<=this.label.getGeometryCount(),"found partial label"),this.computeIM(t)},isInResult:function(){return this._isInResult},isVisited:function(){return this._isVisited},interfaces_:function(){return[]},getClass:function(){return en}}),a(nn,en),e(nn.prototype,{isIncidentEdgeInResult:function(){for(var t=this.getEdges().getEdges().iterator();t.hasNext();){if(t.next().getEdge().isInResult())return!0}return!1},isIsolated:function(){return 1===this.label.getGeometryCount()},getCoordinate:function(){return this.coord},print:function(t){t.println("node "+this.coord+" lbl: "+this.label)},computeIM:function(t){},computeMergedLocation:function(t,e){var n=L.NONE,n=this.label.getLocation(e);return t.isNull(e)||(e=t.getLocation(e),n!==L.BOUNDARY&&(n=e)),n},setLabel:function(){if(2!==arguments.length)return en.prototype.setLabel.apply(this,arguments);var t=arguments[0],e=arguments[1];null===this.label?this.label=new Je(t,e):this.label.setLocation(t,e)},getEdges:function(){return this.edges},mergeLabel:function(){if(arguments[0]instanceof nn){var t=arguments[0];this.mergeLabel(t.label)}else if(arguments[0]instanceof Je)for(var e=arguments[0],n=0;n<2;n++){var i=this.computeMergedLocation(e,n);this.label.getLocation(n)===L.NONE&&this.label.setLocation(n,i)}},add:function(t){this.edges.insert(t),t.setNode(this)},setLabelBoundary:function(t){if(null===this.label)return null;var e=L.NONE;null!==this.label&&(e=this.label.getLocation(t));var n=null;switch(e){case L.BOUNDARY:n=L.INTERIOR;break;case L.INTERIOR:n=L.BOUNDARY;break;default:n=L.BOUNDARY}this.label.setLocation(t,n)},interfaces_:function(){return[]},getClass:function(){return nn}}),e(rn.prototype,{find:function(t){return this.nodeMap.get(t)},addNode:function(){if(arguments[0]instanceof d){var t=arguments[0];return null===(e=this.nodeMap.get(t))&&(e=this.nodeFact.createNode(t),this.nodeMap.put(t,e)),e}if(arguments[0]instanceof nn){var e,t=arguments[0];return null===(e=this.nodeMap.get(t.getCoordinate()))?(this.nodeMap.put(t.getCoordinate(),t),t):(e.mergeLabel(t),e)}},print:function(t){for(var e=this.iterator();e.hasNext();){e.next().print(t)}},iterator:function(){return this.nodeMap.values().iterator()},values:function(){return this.nodeMap.values()},getBoundaryNodes:function(t){for(var e=new I,n=this.iterator();n.hasNext();){var i=n.next();i.getLabel().getLocation(t)===L.BOUNDARY&&e.add(i)}return e},add:function(t){var e=t.getCoordinate();this.addNode(e).add(t)},interfaces_:function(){return[]},getClass:function(){return rn}}),e(sn.prototype,{compareDirection:function(t){return this.dx===t.dx&&this.dy===t.dy?0:this.quadrant>t.quadrant?1:this.quadrant<t.quadrant?-1:Zt.computeOrientation(t.p0,t.p1,this.p1)},getDy:function(){return this.dy},getCoordinate:function(){return this.p0},setNode:function(t){this.node=t},print:function(t){var e=Math.atan2(this.dy,this.dx),n=this.getClass().getName(),i=n.lastIndexOf("."),i=n.substring(i+1);t.print("  "+i+": "+this.p0+" - "+this.p1+" "+this.quadrant+":"+e+"   "+this.label)},compareTo:function(t){return this.compareDirection(t)},getDirectedCoordinate:function(){return this.p1},getDx:function(){return this.dx},getLabel:function(){return this.label},getEdge:function(){return this.edge},getQuadrant:function(){return this.quadrant},getNode:function(){return this.node},toString:function(){var t=Math.atan2(this.dy,this.dx),e=this.getClass().getName(),n=e.lastIndexOf(".");return"  "+e.substring(n+1)+": "+this.p0+" - "+this.p1+" "+this.quadrant+":"+t+"   "+this.label},computeLabel:function(t){},init:function(t,e){this.p0=t,this.p1=e,this.dx=e.x-t.x,this.dy=e.y-t.y,this.quadrant=Ge.quadrant(this.dx,this.dy),l.isTrue(!(0===this.dx&&0===this.dy),"EdgeEnd with identical endpoints found")},interfaces_:function(){return[i]},getClass:function(){return sn}}),a(on,sn),e(on.prototype,{getNextMin:function(){return this.nextMin},getDepth:function(t){return this.depth[t]},setVisited:function(t){this._isVisited=t},computeDirectedLabel:function(){this.label=new Je(this.edge.getLabel()),this._isForward||this.label.flip()},getNext:function(){return this.next},setDepth:function(t,e){if(-999!==this.depth[t]&&this.depth[t]!==e)throw new Ye("assigned depths do not match",this.getCoordinate());this.depth[t]=e},isInteriorAreaEdge:function(){for(var t=!0,e=0;e<2;e++)this.label.isArea(e)&&this.label.getLocation(e,Ke.LEFT)===L.INTERIOR&&this.label.getLocation(e,Ke.RIGHT)===L.INTERIOR||(t=!1);return t},setNextMin:function(t){this.nextMin=t},print:function(t){sn.prototype.print.call(this,t),t.print(" "+this.depth[Ke.LEFT]+"/"+this.depth[Ke.RIGHT]),t.print(" ("+this.getDepthDelta()+")"),this._isInResult&&t.print(" inResult")},setMinEdgeRing:function(t){this.minEdgeRing=t},isLineEdge:function(){var t=this.label.isLine(0)||this.label.isLine(1),e=!this.label.isArea(0)||this.label.allPositionsEqual(0,L.EXTERIOR),n=!this.label.isArea(1)||this.label.allPositionsEqual(1,L.EXTERIOR);return t&&e&&n},setEdgeRing:function(t){this.edgeRing=t},getMinEdgeRing:function(){return this.minEdgeRing},getDepthDelta:function(){var t=this.edge.getDepthDelta();return this._isForward||(t=-t),t},setInResult:function(t){this._isInResult=t},getSym:function(){return this.sym},isForward:function(){return this._isForward},getEdge:function(){return this.edge},printEdge:function(t){this.print(t),t.print(" "),this._isForward?this.edge.print(t):this.edge.printReverse(t)},setSym:function(t){this.sym=t},setVisitedEdge:function(t){this.setVisited(t),this.sym.setVisited(t)},setEdgeDepths:function(t,e){var n=this.getEdge().getDepthDelta();this._isForward||(n=-n);var i=1;t===Ke.LEFT&&(i=-1);var r=Ke.opposite(t),i=e+n*i;this.setDepth(t,e),this.setDepth(r,i)},getEdgeRing:function(){return this.edgeRing},isInResult:function(){return this._isInResult},setNext:function(t){this.next=t},isVisited:function(){return this._isVisited},interfaces_:function(){return[]},getClass:function(){return on}}),on.depthFactor=function(t,e){return t===L.EXTERIOR&&e===L.INTERIOR?1:t===L.INTERIOR&&e===L.EXTERIOR?-1:0},e(an.prototype,{createNode:function(t){return new nn(t,null)},interfaces_:function(){return[]},getClass:function(){return an}}),e(un.prototype,{printEdges:function(t){t.println("Edges:");for(var e=0;e<this.edges.size();e++){t.println("edge "+e+":");var n=this.edges.get(e);n.print(t),n.eiList.print(t)}},find:function(t){return this.nodes.find(t)},addNode:function(){if(arguments[0]instanceof nn){var t=arguments[0];return this.nodes.addNode(t)}if(arguments[0]instanceof d){t=arguments[0];return this.nodes.addNode(t)}},getNodeIterator:function(){return this.nodes.iterator()},linkResultDirectedEdges:function(){for(var t=this.nodes.iterator();t.hasNext();){t.next().getEdges().linkResultDirectedEdges()}},debugPrintln:function(t){A.out.println(t)},isBoundaryNode:function(t,e){e=this.nodes.find(e);if(null===e)return!1;e=e.getLabel();return null!==e&&e.getLocation(t)===L.BOUNDARY},linkAllDirectedEdges:function(){for(var t=this.nodes.iterator();t.hasNext();){t.next().getEdges().linkAllDirectedEdges()}},matchInSameDirection:function(t,e,n,i){return!!t.equals(n)&&(Zt.computeOrientation(t,e,i)===Zt.COLLINEAR&&Ge.quadrant(t,e)===Ge.quadrant(n,i))},getEdgeEnds:function(){return this.edgeEndList},debugPrint:function(t){A.out.print(t)},getEdgeIterator:function(){return this.edges.iterator()},findEdgeInSameDirection:function(t,e){for(var n=0;n<this.edges.size();n++){var i=this.edges.get(n),r=i.getCoordinates();if(this.matchInSameDirection(t,e,r[0],r[1]))return i;if(this.matchInSameDirection(t,e,r[r.length-1],r[r.length-2]))return i}return null},insertEdge:function(t){this.edges.add(t)},findEdgeEnd:function(t){for(var e=this.getEdgeEnds().iterator();e.hasNext();){var n=e.next();if(n.getEdge()===t)return n}return null},addEdges:function(t){for(var e=t.iterator();e.hasNext();){var n=e.next();this.edges.add(n);var i=new on(n,!0),n=new on(n,!1);i.setSym(n),n.setSym(i),this.add(i),this.add(n)}},add:function(t){this.nodes.add(t),this.edgeEndList.add(t)},getNodes:function(){return this.nodes.values()},findEdge:function(t,e){for(var n=0;n<this.edges.size();n++){var i=this.edges.get(n),r=i.getCoordinates();if(t.equals(r[0])&&e.equals(r[1]))return i}return null},interfaces_:function(){return[]},getClass:function(){return un}}),un.linkResultDirectedEdges=function(t){for(var e=t.iterator();e.hasNext();){e.next().getEdges().linkResultDirectedEdges()}},e(ln.prototype,{sortShellsAndHoles:function(t,e,n){for(var i=t.iterator();i.hasNext();){var r=i.next();(r.isHole()?n:e).add(r)}},computePolygons:function(t){for(var e=new I,n=t.iterator();n.hasNext();){var i=n.next().toPolygon(this.geometryFactory);e.add(i)}return e},placeFreeHoles:function(t,e){for(var n=e.iterator();n.hasNext();){var i=n.next();if(null===i.getShell()){var r=this.findEdgeRingContaining(i,t);if(null===r)throw new Ye("unable to assign hole to a shell",i.getCoordinate(0));i.setShell(r)}}},buildMinimalEdgeRings:function(t,e,n){for(var i=new I,r=t.iterator();r.hasNext();){var s,o,a=r.next();2<a.getMaxNodeDegree()?(a.linkDirectedEdgesForMinimalEdgeRings(),s=a.buildMinimalRings(),null!==(o=this.findShell(s))?(this.placePolygonHoles(o,s),e.add(o)):n.addAll(s)):i.add(a)}return i},containsPoint:function(t){for(var e=this.shellList.iterator();e.hasNext();){if(e.next().containsPoint(t))return!0}return!1},buildMaximalEdgeRings:function(t){for(var e=new I,n=t.iterator();n.hasNext();){var i=n.next();i.isInResult()&&i.getLabel().isArea()&&null===i.getEdgeRing()&&(i=new tn(i,this.geometryFactory),e.add(i),i.setInResult())}return e},placePolygonHoles:function(t,e){for(var n=e.iterator();n.hasNext();){var i=n.next();i.isHole()&&i.setShell(t)}},getPolygons:function(){return this.computePolygons(this.shellList)},findEdgeRingContaining:function(t,e){for(var t=t.getLinearRing(),n=t.getEnvelopeInternal(),i=t.getCoordinateN(0),r=null,s=null,o=e.iterator();o.hasNext();){var a=o.next(),u=a.getLinearRing(),l=u.getEnvelopeInternal();null!==r&&(s=r.getLinearRing().getEnvelopeInternal());var h=!1;l.contains(n)&&Zt.isPointInRing(i,u.getCoordinates())&&(h=!0),h&&(null===r||s.contains(l))&&(r=a)}return r},findShell:function(t){for(var e=0,n=null,i=t.iterator();i.hasNext();){var r=i.next();r.isHole()||(n=r,e++)}return l.isTrue(e<=1,"found two shells in MinimalEdgeRing list"),n},add:function(){var t,e;1===arguments.length?(e=arguments[0],this.add(e.getEdgeEnds(),e.getNodes())):2===arguments.length&&(t=arguments[0],un.linkResultDirectedEdges(arguments[1]),e=this.buildMaximalEdgeRings(t),t=new I,e=this.buildMinimalEdgeRings(e,this.shellList,t),this.sortShellsAndHoles(e,this.shellList,t),this.placeFreeHoles(this.shellList,t))},interfaces_:function(){return[]},getClass:function(){return ln}}),e(hn.prototype,{collectLines:function(t){for(var e=this.op.getGraph().getEdgeEnds().iterator();e.hasNext();){var n=e.next();this.collectLineEdge(n,t,this.lineEdgesList),this.collectBoundaryTouchEdge(n,t,this.lineEdgesList)}},labelIsolatedLine:function(t,e){var n=this.ptLocator.locate(t.getCoordinate(),this.op.getArgGeometry(e));t.getLabel().setLocation(e,n)},build:function(t){return this.findCoveredLineEdges(),this.collectLines(t),this.buildLines(t),this.resultLineList},collectLineEdge:function(t,e,n){var i=t.getLabel(),r=t.getEdge();t.isLineEdge()&&(t.isVisited()||!kn.isResultOfOp(i,e)||r.isCovered()||(n.add(r),t.setVisitedEdge(!0)))},findCoveredLineEdges:function(){for(var t=this.op.getGraph().getNodes().iterator();t.hasNext();){t.next().getEdges().findCoveredLineEdges()}for(var e=this.op.getGraph().getEdgeEnds().iterator();e.hasNext();){var n=e.next(),i=n.getEdge();n.isLineEdge()&&!i.isCoveredSet()&&(n=this.op.isCoveredByA(n.getCoordinate()),i.setCovered(n))}},labelIsolatedLines:function(t){for(var e=t.iterator();e.hasNext();){var n=e.next(),i=n.getLabel();n.isIsolated()&&(i.isNull(0)?this.labelIsolatedLine(n,0):this.labelIsolatedLine(n,1))}},buildLines:function(t){for(var e=this.lineEdgesList.iterator();e.hasNext();){var n=e.next(),i=(n.getLabel(),this.geometryFactory.createLineString(n.getCoordinates()));this.resultLineList.add(i),n.setInResult(!0)}},collectBoundaryTouchEdge:function(t,e,n){var i=t.getLabel();return t.isLineEdge()||t.isVisited()||t.isInteriorAreaEdge()||t.getEdge().isInResult()?null:(l.isTrue(!(t.isInResult()||t.getSym().isInResult())||!t.getEdge().isInResult()),void(kn.isResultOfOp(i,e)&&e===kn.INTERSECTION&&(n.add(t.getEdge()),t.setVisitedEdge(!0))))},interfaces_:function(){return[]},getClass:function(){return hn}}),e(cn.prototype,{filterCoveredNodeToPoint:function(t){t=t.getCoordinate();this.op.isCoveredByLA(t)||(t=this.geometryFactory.createPoint(t),this.resultPointList.add(t))},extractNonCoveredResultNodes:function(t){for(var e=this.op.getGraph().getNodes().iterator();e.hasNext();){var n,i=e.next();i.isInResult()||i.isIncidentEdgeInResult()||0!==i.getEdges().getDegree()&&t!==kn.INTERSECTION||(n=i.getLabel(),kn.isResultOfOp(n,t)&&this.filterCoveredNodeToPoint(i))}},build:function(t){return this.extractNonCoveredResultNodes(t),this.resultPointList},interfaces_:function(){return[]},getClass:function(){return cn}}),e(fn.prototype,{locate:function(t){},interfaces_:function(){return[]},getClass:function(){return fn}}),e(gn.prototype,{locate:function(t){return gn.locate(t,this.geom)},interfaces_:function(){return[fn]},getClass:function(){return gn}}),gn.isPointInRing=function(t,e){return!!e.getEnvelopeInternal().intersects(t)&&Zt.isPointInRing(t,e.getCoordinates())},gn.containsPointInPolygon=function(t,e){if(e.isEmpty())return!1;var n=e.getExteriorRing();if(!gn.isPointInRing(t,n))return!1;for(var i=0;i<e.getNumInteriorRing();i++){var r=e.getInteriorRingN(i);if(gn.isPointInRing(t,r))return!1}return!0},gn.containsPoint=function(t,e){if(e instanceof Rt)return gn.containsPointInPolygon(t,e);if(e instanceof ft)for(var n=new ge(e);n.hasNext();){var i=n.next();if(i!==e&&gn.containsPoint(t,i))return!0}return!1},gn.locate=function(t,e){return!e.isEmpty()&&gn.containsPoint(t,e)?L.INTERIOR:L.EXTERIOR},e(dn.prototype,{getNextCW:function(t){this.getEdges();var e=this.edgeList.indexOf(t),t=e-1;return 0===e&&(t=this.edgeList.size()-1),this.edgeList.get(t)},propagateSideLabels:function(t){for(var e=L.NONE,n=this.iterator();n.hasNext();){(r=(i=n.next()).getLabel()).isArea(t)&&r.getLocation(t,Ke.LEFT)!==L.NONE&&(e=r.getLocation(t,Ke.LEFT))}if(e===L.NONE)return null;for(var i,r,s=e,n=this.iterator();n.hasNext();){if((r=(i=n.next()).getLabel()).getLocation(t,Ke.ON)===L.NONE&&r.setLocation(t,Ke.ON,s),r.isArea(t)){var o=r.getLocation(t,Ke.LEFT),a=r.getLocation(t,Ke.RIGHT);if(a!==L.NONE){if(a!==s)throw new Ye("side location conflict",i.getCoordinate());o===L.NONE&&l.shouldNeverReachHere("found single null side (at "+i.getCoordinate()+")"),s=o}else l.isTrue(r.getLocation(t,Ke.LEFT)===L.NONE,"found single null side"),r.setLocation(t,Ke.RIGHT,s),r.setLocation(t,Ke.LEFT,s)}}},getCoordinate:function(){var t=this.iterator();return t.hasNext()?t.next().getCoordinate():null},print:function(t){A.out.println("EdgeEndStar:   "+this.getCoordinate());for(var e=this.iterator();e.hasNext();){e.next().print(t)}},isAreaLabelsConsistent:function(t){return this.computeEdgeEndLabels(t.getBoundaryNodeRule()),this.checkAreaLabelsConsistent(0)},checkAreaLabelsConsistent:function(t){var e=this.getEdges();if(e.size()<=0)return!0;var n=e.size()-1,n=e.get(n).getLabel().getLocation(t,Ke.LEFT);l.isTrue(n!==L.NONE,"Found unlabelled area edge");for(var i=n,r=this.iterator();r.hasNext();){var s=r.next().getLabel();l.isTrue(s.isArea(t),"Found non-area edge");var o=s.getLocation(t,Ke.LEFT),s=s.getLocation(t,Ke.RIGHT);if(o===s)return!1;if(s!==i)return!1;i=o}return!0},findIndex:function(t){this.iterator();for(var e=0;e<this.edgeList.size();e++){if(this.edgeList.get(e)===t)return e}return-1},iterator:function(){return this.getEdges().iterator()},getEdges:function(){return null===this.edgeList&&(this.edgeList=new I(this.edgeMap.values())),this.edgeList},getLocation:function(t,e,n){return this.ptInAreaLocation[t]===L.NONE&&(this.ptInAreaLocation[t]=gn.locate(e,n[t].getGeometry())),this.ptInAreaLocation[t]},toString:function(){var t=new P;t.append("EdgeEndStar:   "+this.getCoordinate()),t.append("\n");for(var e=this.iterator();e.hasNext();){var n=e.next();t.append(n),t.append("\n")}return t.toString()},computeEdgeEndLabels:function(t){for(var e=this.iterator();e.hasNext();){e.next().computeLabel(t)}},computeLabelling:function(t){this.computeEdgeEndLabels(t[0].getBoundaryNodeRule()),this.propagateSideLabels(0),this.propagateSideLabels(1);for(var e=[!1,!1],n=this.iterator();n.hasNext();)for(var i=n.next(),r=i.getLabel(),s=0;s<2;s++)r.isLine(s)&&r.getLocation(s)===L.BOUNDARY&&(e[s]=!0);for(var o,a,n=this.iterator();n.hasNext();)for(r=(i=n.next()).getLabel(),s=0;s<2;s++){r.isAnyNull(s)&&(a=L.NONE,a=e[s]?L.EXTERIOR:(o=i.getCoordinate(),this.getLocation(s,o,t)),r.setAllLocationsIfNull(s,a))}},getDegree:function(){return this.edgeMap.size()},insertEdgeEnd:function(t,e){this.edgeMap.put(t,e),this.edgeList=null},interfaces_:function(){return[]},getClass:function(){return dn}}),a(pn,dn),e(pn.prototype,{linkResultDirectedEdges:function(){this.getResultAreaEdges();for(var t=null,e=null,n=this.SCANNING_FOR_INCOMING,i=0;i<this.resultAreaEdgeList.size();i++){var r=this.resultAreaEdgeList.get(i),s=r.getSym();if(r.getLabel().isArea())switch(null===t&&r.isInResult()&&(t=r),n){case this.SCANNING_FOR_INCOMING:if(!s.isInResult())continue;e=s,n=this.LINKING_TO_OUTGOING;break;case this.LINKING_TO_OUTGOING:if(!r.isInResult())continue;e.setNext(r),n=this.SCANNING_FOR_INCOMING}}if(n===this.LINKING_TO_OUTGOING){if(null===t)throw new Ye("no outgoing dirEdge found",this.getCoordinate());l.isTrue(t.isInResult(),"unable to link last incoming dirEdge"),e.setNext(t)}},insert:function(t){this.insertEdgeEnd(t,t)},getRightmostEdge:function(){var t=this.getEdges(),e=t.size();if(e<1)return null;var n=t.get(0);if(1===e)return n;var i=t.get(e-1),t=n.getQuadrant(),e=i.getQuadrant();return Ge.isNorthern(t)&&Ge.isNorthern(e)?n:Ge.isNorthern(t)||Ge.isNorthern(e)?0!==n.getDy()?n:0!==i.getDy()?i:(l.shouldNeverReachHere("found two horizontal edges incident on node"),null):i},print:function(t){A.out.println("DirectedEdgeStar: "+this.getCoordinate());for(var e=this.iterator();e.hasNext();){var n=e.next();t.print("out "),n.print(t),t.println(),t.print("in "),n.getSym().print(t),t.println()}},getResultAreaEdges:function(){if(null!==this.resultAreaEdgeList)return this.resultAreaEdgeList;this.resultAreaEdgeList=new I;for(var t=this.iterator();t.hasNext();){var e=t.next();(e.isInResult()||e.getSym().isInResult())&&this.resultAreaEdgeList.add(e)}return this.resultAreaEdgeList},updateLabelling:function(t){for(var e=this.iterator();e.hasNext();){var n=e.next().getLabel();n.setAllLocationsIfNull(0,t.getLocation(0)),n.setAllLocationsIfNull(1,t.getLocation(1))}},linkAllDirectedEdges:function(){this.getEdges();for(var t=null,e=null,n=this.edgeList.size()-1;0<=n;n--){var i=this.edgeList.get(n),r=i.getSym();null===e&&(e=r),null!==t&&r.setNext(t),t=i}e.setNext(t)},computeDepths:function(){if(1===arguments.length){var t=arguments[0],e=this.findIndex(t),n=(t.getLabel(),t.getDepth(Ke.LEFT)),i=t.getDepth(Ke.RIGHT),n=this.computeDepths(e+1,this.edgeList.size(),n);if(this.computeDepths(0,e,n)!==i)throw new Ye("depth mismatch at "+t.getCoordinate())}else if(3===arguments.length){for(var r=arguments[1],s=arguments[2],o=arguments[0];o<r;o++){var a=this.edgeList.get(o);a.getLabel(),a.setEdgeDepths(Ke.RIGHT,s),s=a.getDepth(Ke.LEFT)}return s}},mergeSymLabels:function(){for(var t=this.iterator();t.hasNext();){var e=t.next();e.getLabel().merge(e.getSym().getLabel())}},linkMinimalDirectedEdges:function(t){for(var e=null,n=null,i=this.SCANNING_FOR_INCOMING,r=this.resultAreaEdgeList.size()-1;0<=r;r--){var s=this.resultAreaEdgeList.get(r),o=s.getSym();switch(null===e&&s.getEdgeRing()===t&&(e=s),i){case this.SCANNING_FOR_INCOMING:if(o.getEdgeRing()!==t)continue;n=o,i=this.LINKING_TO_OUTGOING;break;case this.LINKING_TO_OUTGOING:if(s.getEdgeRing()!==t)continue;n.setNextMin(s),i=this.SCANNING_FOR_INCOMING}}i===this.LINKING_TO_OUTGOING&&(l.isTrue(null!==e,"found null for first outgoing dirEdge"),l.isTrue(e.getEdgeRing()===t,"unable to link last incoming dirEdge"),n.setNextMin(e))},getOutgoingDegree:function(){if(0===arguments.length){for(var t=0,e=this.iterator();e.hasNext();){e.next().isInResult()&&t++}return t}if(1===arguments.length){for(var n=arguments[0],t=0,e=this.iterator();e.hasNext();){e.next().getEdgeRing()===n&&t++}return t}},getLabel:function(){return this.label},findCoveredLineEdges:function(){for(var t=L.NONE,e=this.iterator();e.hasNext();){var n=(r=e.next()).getSym();if(!r.isLineEdge()){if(r.isInResult()){t=L.INTERIOR;break}if(n.isInResult()){t=L.EXTERIOR;break}}}if(t===L.NONE)return null;for(var i=t,e=this.iterator();e.hasNext();){var r,n=(r=e.next()).getSym();r.isLineEdge()?r.getEdge().setCovered(i===L.INTERIOR):(r.isInResult()&&(i=L.EXTERIOR),n.isInResult()&&(i=L.INTERIOR))}},computeLabelling:function(t){dn.prototype.computeLabelling.call(this,t),this.label=new Je(L.NONE);for(var e=this.iterator();e.hasNext();)for(var n=e.next().getEdge().getLabel(),i=0;i<2;i++){var r=n.getLocation(i);r!==L.INTERIOR&&r!==L.BOUNDARY||this.label.setLocation(i,L.INTERIOR)}},interfaces_:function(){return[]},getClass:function(){return pn}}),a(mn,an),e(mn.prototype,{createNode:function(t){return new nn(t,new pn)},interfaces_:function(){return[]},getClass:function(){return mn}}),e(yn.prototype,{computeIntersections:function(t,e){this.mce.computeIntersectsForChain(this.chainIndex,t.mce,t.chainIndex,e)},interfaces_:function(){return[]},getClass:function(){return yn}}),e(vn.prototype,{isDelete:function(){return this.eventType===vn.DELETE},setDeleteEventIndex:function(t){this.deleteEventIndex=t},getObject:function(){return this.obj},compareTo:function(t){return this.xValue<t.xValue?-1:this.xValue>t.xValue?1:this.eventType<t.eventType?-1:this.eventType>t.eventType?1:0},getInsertEvent:function(){return this.insertEvent},isInsert:function(){return this.eventType===vn.INSERT},isSameLabel:function(t){return null!==this.label&&this.label===t.label},getDeleteEventIndex:function(){return this.deleteEventIndex},interfaces_:function(){return[i]},getClass:function(){return vn}}),vn.INSERT=1,vn.DELETE=2,e(xn.prototype,{interfaces_:function(){return[]},getClass:function(){return xn}}),e(En.prototype,{isTrivialIntersection:function(t,e,n,i){if(t===n&&1===this.li.getIntersectionNum()){if(En.isAdjacentSegments(e,i))return!0;if(t.isClosed()){t=t.getNumPoints()-1;if(0===e&&i===t||0===i&&e===t)return!0}}return!1},getProperIntersectionPoint:function(){return this.properIntersectionPoint},setIsDoneIfProperInt:function(t){this.isDoneWhenProperInt=t},hasProperInteriorIntersection:function(){return this.hasProperInterior},isBoundaryPointInternal:function(t,e){for(var n=e.iterator();n.hasNext();){var i=n.next().getCoordinate();if(t.isIntersection(i))return!0}return!1},hasProperIntersection:function(){return this.hasProper},hasIntersection:function(){return this._hasIntersection},isDone:function(){return this._isDone},isBoundaryPoint:function(t,e){return null!==e&&(!!this.isBoundaryPointInternal(t,e[0])||!!this.isBoundaryPointInternal(t,e[1]))},setBoundaryNodes:function(t,e){this.bdyNodes=new Array(2).fill(null),this.bdyNodes[0]=t,this.bdyNodes[1]=e},addIntersections:function(t,e,n,i){if(t===n&&e===i)return null;this.numTests++;var r=t.getCoordinates()[e],s=t.getCoordinates()[e+1],o=n.getCoordinates()[i],a=n.getCoordinates()[i+1];this.li.computeIntersection(r,s,o,a),this.li.hasIntersection()&&(this.recordIsolated&&(t.setIsolated(!1),n.setIsolated(!1)),this.numIntersections++,this.isTrivialIntersection(t,e,n,i)||(this._hasIntersection=!0,!this.includeProper&&this.li.isProper()||(t.addIntersections(this.li,e,0),n.addIntersections(this.li,i,1)),this.li.isProper()&&(this.properIntersectionPoint=this.li.getIntersection(0).copy(),this.hasProper=!0,this.isDoneWhenProperInt&&(this._isDone=!0),this.isBoundaryPoint(this.li,this.bdyNodes)||(this.hasProperInterior=!0))))},interfaces_:function(){return[]},getClass:function(){return En}}),En.isAdjacentSegments=function(t,e){return 1===Math.abs(t-e)},a(In,xn),e(In.prototype,{prepareEvents:function(){Zs.sort(this.events);for(var t=0;t<this.events.size();t++){var e=this.events.get(t);e.isDelete()&&e.getInsertEvent().setDeleteEventIndex(t)}},computeIntersections:function(){if(1===arguments.length){var t=arguments[0];this.nOverlaps=0,this.prepareEvents();for(var e=0;e<this.events.size();e++){var n=this.events.get(e);if(n.isInsert()&&this.processOverlaps(e,n.getDeleteEventIndex(),n,t),t.isDone())break}}else{var i,r,s;3===arguments.length&&(arguments[2]instanceof En&&R(arguments[0],v)&&R(arguments[1],v)?(i=arguments[0],r=arguments[1],s=arguments[2],this.addEdges(i,i),this.addEdges(r,r),this.computeIntersections(s)):"boolean"==typeof arguments[2]&&R(arguments[0],v)&&arguments[1]instanceof En&&(r=arguments[0],s=arguments[1],arguments[2]?this.addEdges(r,null):this.addEdges(r),this.computeIntersections(s)))}},addEdge:function(t,e){for(var n=t.getMonotoneChainEdge(),i=n.getStartIndexes(),r=0;r<i.length-1;r++){var s=new yn(n,r),s=new vn(e,n.getMinX(r),s);this.events.add(s),this.events.add(new vn(n.getMaxX(r),s))}},processOverlaps:function(t,e,n,i){for(var r=n.getObject(),s=t;s<e;s++){var o,a=this.events.get(s);a.isInsert()&&(o=a.getObject(),n.isSameLabel(a)||(r.computeIntersections(o,i),this.nOverlaps++))}},addEdges:function(){if(1===arguments.length)for(var t=arguments[0].iterator();t.hasNext();){var e=t.next();this.addEdge(e,e)}else if(2===arguments.length)for(var n=arguments[1],t=arguments[0].iterator();t.hasNext();){e=t.next();this.addEdge(e,n)}},interfaces_:function(){return[]},getClass:function(){return In}}),e(Nn.prototype,{getMin:function(){return this.min},intersects:function(t,e){return!(this.min>e||this.max<t)},getMax:function(){return this.max},toString:function(){return Xt.toLineString(new d(this.min,0),new d(this.max,0))},interfaces_:function(){return[]},getClass:function(){return Nn}}),e(Cn.prototype,{compare:function(t,e){t=(t.min+t.max)/2,e=(e.min+e.max)/2;return t<e?-1:e<t?1:0},interfaces_:function(){return[s]},getClass:function(){return Cn}}),Nn.NodeComparator=Cn,a(Sn,Nn),e(Sn.prototype,{query:function(t,e,n){return this.intersects(t,e)?void n.visitItem(this.item):null},interfaces_:function(){return[]},getClass:function(){return Sn}}),a(wn,Nn),e(wn.prototype,{buildExtent:function(t,e){this.min=Math.min(t.min,e.min),this.max=Math.max(t.max,e.max)},query:function(t,e,n){return this.intersects(t,e)?(null!==this.node1&&this.node1.query(t,e,n),void(null!==this.node2&&this.node2.query(t,e,n))):null},interfaces_:function(){return[]},getClass:function(){return wn}}),e(Ln.prototype,{buildTree:function(){Zs.sort(this.leaves,new IntervalRTreeNode.NodeComparator);for(var t,e=this.leaves,n=new I;;){if(this.buildLevel(e,n),1===n.size())return n.get(0);t=e,e=n,n=t}},insert:function(t,e,n){if(null!==this.root)throw new IllegalStateException("Index cannot be added to once it has been queried");this.leaves.add(new Sn(t,e,n))},query:function(t,e,n){this.init(),this.root.query(t,e,n)},buildRoot:function(){return null!==this.root?null:void(this.root=this.buildTree())},printNode:function(t){A.out.println(Xt.toLineString(new d(t.min,this.level),new d(t.max,this.level)))},init:function(){return null!==this.root?null:void this.buildRoot()},buildLevel:function(t,e){this.level++,e.clear();for(var n=0;n<t.size();n+=2){var i=t.get(n);null===(n+1<t.size()?t.get(n):null)?e.add(i):(i=new wn(t.get(n),t.get(n+1)),e.add(i))}},interfaces_:function(){return[]},getClass:function(){return Ln}}),e(Rn.prototype,{filter:function(t){if(this.isForcedToLineString&&t instanceof Pt){var e=t.getFactory().createLineString(t.getCoordinateSequence());return this.lines.add(e),null}t instanceof Ct&&this.lines.add(t)},setForceToLineString:function(t){this.isForcedToLineString=t},interfaces_:function(){return[q]},getClass:function(){return Rn}}),Rn.getGeometry=function(){if(1===arguments.length){var t=arguments[0];return t.getFactory().buildGeometry(Rn.getLines(t))}if(2===arguments.length){var e=arguments[0],t=arguments[1];return e.getFactory().buildGeometry(Rn.getLines(e,t))}},Rn.getLines=function(){if(1===arguments.length)return Rn.getLines(arguments[0],!1);if(2===arguments.length){if(R(arguments[0],m)&&R(arguments[1],m)){for(var t=arguments[1],e=arguments[0].iterator();e.hasNext();){var n=e.next();Rn.getLines(n,t)}return t}if(arguments[0]instanceof B&&"boolean"==typeof arguments[1]){var i=arguments[0],r=arguments[1],s=new I;return i.apply(new Rn(s,r)),s}if(arguments[0]instanceof B&&R(arguments[1],m)){var o=arguments[0],a=arguments[1];return o instanceof Ct?a.add(o):o.apply(new Rn(a)),a}}else if(3===arguments.length){if("boolean"==typeof arguments[2]&&R(arguments[0],m)&&R(arguments[1],m)){for(var u=arguments[1],l=arguments[2],e=arguments[0].iterator();e.hasNext();){n=e.next();Rn.getLines(n,u,l)}return u}if("boolean"==typeof arguments[2]&&arguments[0]instanceof B&&R(arguments[1],m)){o=arguments[1],a=arguments[2];return arguments[0].apply(new Rn(o,a)),o}}},e(Tn.prototype,{visitItem:function(t){this.items.add(t)},getItems:function(){return this.items},interfaces_:function(){return[Ie]},getClass:function(){return Tn}}),e(Pn.prototype,{locate:function(t){var e=new Kt(t),n=new bn(e);return this.index.query(t.y,t.y,n),e.getLocation()},interfaces_:function(){return[fn]},getClass:function(){return Pn}}),e(bn.prototype,{visitItem:function(t){this.counter.countSegment(t.getCoordinate(0),t.getCoordinate(1))},interfaces_:function(){return[Ie]},getClass:function(){return bn}}),e(On.prototype,{init:function(t){for(var e=Rn.getLines(t).iterator();e.hasNext();){var n=e.next().getCoordinates();this.addLine(n)}},addLine:function(t){for(var e=1;e<t.length;e++){var n=new Jt(t[e-1],t[e]),i=Math.min(n.p0.y,n.p1.y),r=Math.max(n.p0.y,n.p1.y);this.index.insert(i,r,n)}},query:function(){if(2===arguments.length){var t=arguments[0],e=arguments[1],n=new Tn;return this.index.query(t,e,n),n.getItems()}3===arguments.length&&(t=arguments[0],e=arguments[1],n=arguments[2],this.index.query(t,e,n))},interfaces_:function(){return[]},getClass:function(){return On}}),Pn.SegmentVisitor=bn,Pn.IntervalIndexedGeometry=On,e(_n.prototype,{getSegmentIndex:function(){return this.segmentIndex},getCoordinate:function(){return this.coord},print:function(t){t.print(this.coord),t.print(" seg # = "+this.segmentIndex),t.println(" dist = "+this.dist)},compareTo:function(t){return this.compare(t.segmentIndex,t.dist)},isEndPoint:function(t){return 0===this.segmentIndex&&0===this.dist||this.segmentIndex===t},toString:function(){return this.coord+" seg # = "+this.segmentIndex+" dist = "+this.dist},getDistance:function(){return this.dist},compare:function(t,e){return this.segmentIndex<t?-1:this.segmentIndex>t?1:this.dist<e?-1:this.dist>e?1:0},interfaces_:function(){return[i]},getClass:function(){return _n}}),e(Mn.prototype,{print:function(t){t.println("Intersections:");for(var e=this.iterator();e.hasNext();){e.next().print(t)}},iterator:function(){return this.nodeMap.values().iterator()},addSplitEdges:function(t){this.addEndpoints();for(var e=this.iterator(),n=e.next();e.hasNext();){var i=e.next(),r=this.createSplitEdge(n,i);t.add(r),n=i}},addEndpoints:function(){var t=this.edge.pts.length-1;this.add(this.edge.pts[0],0,0),this.add(this.edge.pts[t],t,0)},createSplitEdge:function(t,e){var n=e.segmentIndex-t.segmentIndex+2,i=this.edge.pts[e.segmentIndex],i=0<e.dist||!e.coord.equals2D(i);i||n--;var r=new Array(n).fill(null),s=0;r[s++]=new d(t.coord);for(var o=t.segmentIndex+1;o<=e.segmentIndex;o++)r[s++]=this.edge.pts[o];return i&&(r[s]=e.coord),new Gn(r,new Je(this.edge.label))},add:function(t,e,n){e=new _n(t,e,n),n=this.nodeMap.get(e);return null!==n?n:(this.nodeMap.put(e,e),e)},isIntersection:function(t){for(var e=this.iterator();e.hasNext();){if(e.next().coord.equals(t))return!0}return!1},interfaces_:function(){return[]},getClass:function(){return Mn}}),e(Dn.prototype,{getChainStartIndices:function(t){var e=0,n=new I;n.add(new b(e));do{var i=this.findChainEnd(t,e)}while(n.add(new b(i)),(e=i)<t.length-1);return Dn.toIntArray(n)},findChainEnd:function(t,e){for(var n=Ge.quadrant(t[e],t[e+1]),i=e+1;i<t.length;){if(Ge.quadrant(t[i-1],t[i])!==n)break;i++}return i-1},interfaces_:function(){return[]},getClass:function(){return Dn}}),Dn.toIntArray=function(t){for(var e=new Array(t.size()).fill(null),n=0;n<e.length;n++)e[n]=t.get(n).intValue();return e},e(An.prototype,{getCoordinates:function(){return this.pts},getMaxX:function(t){var e=this.pts[this.startIndex[t]].x,t=this.pts[this.startIndex[t+1]].x;return t<e?e:t},getMinX:function(t){var e=this.pts[this.startIndex[t]].x,t=this.pts[this.startIndex[t+1]].x;return e<t?e:t},computeIntersectsForChain:function(){if(4===arguments.length){var t=arguments[0],e=arguments[1],n=arguments[2],i=arguments[3];this.computeIntersectsForChain(this.startIndex[t],this.startIndex[t+1],e,e.startIndex[n],e.startIndex[n+1],i)}else if(6===arguments.length){var r=arguments[0],s=arguments[1],o=arguments[2],a=arguments[3],u=arguments[4],l=arguments[5],t=this.pts[r],e=this.pts[s],n=o.pts[a],i=o.pts[u];if(s-r==1&&u-a==1)return l.addIntersections(this.e,r,o.e,a),null;if(this.env1.init(t,e),this.env2.init(n,i),!this.env1.intersects(this.env2))return null;n=Math.trunc((r+s)/2),i=Math.trunc((a+u)/2);r<n&&(a<i&&this.computeIntersectsForChain(r,n,o,a,i,l),i<u&&this.computeIntersectsForChain(r,n,o,i,u,l)),n<s&&(a<i&&this.computeIntersectsForChain(n,s,o,a,i,l),i<u&&this.computeIntersectsForChain(n,s,o,i,u,l))}},getStartIndexes:function(){return this.startIndex},computeIntersects:function(t,e){for(var n=0;n<this.startIndex.length-1;n++)for(var i=0;i<t.startIndex.length-1;i++)this.computeIntersectsForChain(n,t,i,e)},interfaces_:function(){return[]},getClass:function(){return An}}),e(Fn.prototype,{getDepth:function(t,e){return this.depth[t][e]},setDepth:function(t,e,n){this.depth[t][e]=n},isNull:function(){if(0===arguments.length){for(var t=0;t<2;t++)for(var e=0;e<3;e++)if(this.depth[t][e]!==Fn.NULL_VALUE)return!1;return!0}if(1===arguments.length){var n=arguments[0];return this.depth[n][1]===Fn.NULL_VALUE}if(2===arguments.length){var i=arguments[0],n=arguments[1];return this.depth[i][n]===Fn.NULL_VALUE}},normalize:function(){for(var t=0;t<2;t++)if(!this.isNull(t)){var e=this.depth[t][1];this.depth[t][2]<e&&(e=this.depth[t][2]),e<0&&(e=0);for(var n=1;n<3;n++){var i=0;this.depth[t][n]>e&&(i=1),this.depth[t][n]=i}}},getDelta:function(t){return this.depth[t][Ke.RIGHT]-this.depth[t][Ke.LEFT]},getLocation:function(t,e){return this.depth[t][e]<=0?L.EXTERIOR:L.INTERIOR},toString:function(){return"A: "+this.depth[0][1]+","+this.depth[0][2]+" B: "+this.depth[1][1]+","+this.depth[1][2]},add:function(){var t,e;if(1===arguments.length)for(var n=arguments[0],i=0;i<2;i++)for(var r=1;r<3;r++){var s=n.getLocation(i,r);s!==L.EXTERIOR&&s!==L.INTERIOR||(this.isNull(i,r)?this.depth[i][r]=Fn.depthAtLocation(s):this.depth[i][r]+=Fn.depthAtLocation(s))}else 3===arguments.length&&(t=arguments[0],e=arguments[1],arguments[2]===L.INTERIOR&&this.depth[t][e]++)},interfaces_:function(){return[]},getClass:function(){return Fn}}),Fn.depthAtLocation=function(t){return t===L.EXTERIOR?0:t===L.INTERIOR?1:Fn.NULL_VALUE},Fn.NULL_VALUE=-1,a(Gn,en),e(Gn.prototype,{getDepth:function(){return this.depth},getCollapsedEdge:function(){var t=new Array(2).fill(null);return t[0]=this.pts[0],t[1]=this.pts[1],new Gn(t,Je.toLineLabel(this.label))},isIsolated:function(){return this._isIsolated},getCoordinates:function(){return this.pts},setIsolated:function(t){this._isIsolated=t},setName:function(t){this.name=t},equals:function(t){if(!(t instanceof Gn))return!1;var e=t;if(this.pts.length!==e.pts.length)return!1;for(var n=!0,i=!0,r=this.pts.length,s=0;s<this.pts.length;s++)if(this.pts[s].equals2D(e.pts[s])||(n=!1),this.pts[s].equals2D(e.pts[--r])||(i=!1),!n&&!i)return!1;return!0},getCoordinate:function(){if(0===arguments.length)return 0<this.pts.length?this.pts[0]:null;if(1===arguments.length){var t=arguments[0];return this.pts[t]}},print:function(t){t.print("edge "+this.name+": "),t.print("LINESTRING (");for(var e=0;e<this.pts.length;e++)0<e&&t.print(","),t.print(this.pts[e].x+" "+this.pts[e].y);t.print(")  "+this.label+" "+this.depthDelta)},computeIM:function(t){Gn.updateIM(this.label,t)},isCollapsed:function(){return!!this.label.isArea()&&(3===this.pts.length&&!!this.pts[0].equals(this.pts[2]))},isClosed:function(){return this.pts[0].equals(this.pts[this.pts.length-1])},getMaximumSegmentIndex:function(){return this.pts.length-1},getDepthDelta:function(){return this.depthDelta},getNumPoints:function(){return this.pts.length},printReverse:function(t){t.print("edge "+this.name+": ");for(var e=this.pts.length-1;0<=e;e--)t.print(this.pts[e]+" ");t.println("")},getMonotoneChainEdge:function(){return null===this.mce&&(this.mce=new An(this)),this.mce},getEnvelope:function(){if(null===this.env){this.env=new C;for(var t=0;t<this.pts.length;t++)this.env.expandToInclude(this.pts[t])}return this.env},addIntersection:function(t,e,n,i){var r=new d(t.getIntersection(i)),e=e,t=t.getEdgeDistance(n,i),n=e+1;n<this.pts.length&&(i=this.pts[n],r.equals2D(i)&&(e=n,t=0)),this.eiList.add(r,e,t)},toString:function(){var t=new P;t.append("edge "+this.name+": "),t.append("LINESTRING (");for(var e=0;e<this.pts.length;e++)0<e&&t.append(","),t.append(this.pts[e].x+" "+this.pts[e].y);return t.append(")  "+this.label+" "+this.depthDelta),t.toString()},isPointwiseEqual:function(t){if(this.pts.length!==t.pts.length)return!1;for(var e=0;e<this.pts.length;e++)if(!this.pts[e].equals2D(t.pts[e]))return!1;return!0},setDepthDelta:function(t){this.depthDelta=t},getEdgeIntersectionList:function(){return this.eiList},addIntersections:function(t,e,n){for(var i=0;i<t.getIntersectionNum();i++)this.addIntersection(t,e,n,i)},interfaces_:function(){return[]},getClass:function(){return Gn}}),Gn.updateIM=function(){if(2!==arguments.length)return en.prototype.updateIM.apply(this,arguments);var t=arguments[0],e=arguments[1];e.setAtLeastIfValid(t.getLocation(0,Ke.ON),t.getLocation(1,Ke.ON),1),t.isArea()&&(e.setAtLeastIfValid(t.getLocation(0,Ke.LEFT),t.getLocation(1,Ke.LEFT),2),e.setAtLeastIfValid(t.getLocation(0,Ke.RIGHT),t.getLocation(1,Ke.RIGHT),2))},a(qn,un),e(qn.prototype,{insertBoundaryPoint:function(t,e){var n=this.nodes.addNode(e).getLabel(),e=1;n.getLocation(t,Ke.ON)===L.BOUNDARY&&e++;e=qn.determineBoundary(this.boundaryNodeRule,e);n.setLocation(t,e)},computeSelfNodes:function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];return this.computeSelfNodes(t,e,!1)}if(3===arguments.length){var n=arguments[1],i=arguments[2],t=new En(arguments[0],!0,!1);t.setIsDoneIfProperInt(i);e=this.createEdgeSetIntersector(),i=this.parentGeom instanceof Pt||this.parentGeom instanceof Rt||this.parentGeom instanceof bt,i=n||!i;return e.computeIntersections(this.edges,t,i),this.addSelfIntersectionNodes(this.argIndex),t}},computeSplitEdges:function(t){for(var e=this.edges.iterator();e.hasNext();){e.next().eiList.addSplitEdges(t)}},computeEdgeIntersections:function(t,e,n){n=new En(e,n,!0);return n.setBoundaryNodes(this.getBoundaryNodes(),t.getBoundaryNodes()),this.createEdgeSetIntersector().computeIntersections(this.edges,t.edges,n),n},getGeometry:function(){return this.parentGeom},getBoundaryNodeRule:function(){return this.boundaryNodeRule},hasTooFewPoints:function(){return this._hasTooFewPoints},addPoint:function(){var t;arguments[0]instanceof wt?(t=arguments[0].getCoordinate(),this.insertPoint(this.argIndex,t,L.INTERIOR)):arguments[0]instanceof d&&(t=arguments[0],this.insertPoint(this.argIndex,t,L.INTERIOR))},addPolygon:function(t){this.addPolygonRing(t.getExteriorRing(),L.EXTERIOR,L.INTERIOR);for(var e=0;e<t.getNumInteriorRing();e++){var n=t.getInteriorRingN(e);this.addPolygonRing(n,L.INTERIOR,L.EXTERIOR)}},addEdge:function(t){this.insertEdge(t);t=t.getCoordinates();this.insertPoint(this.argIndex,t[0],L.BOUNDARY),this.insertPoint(this.argIndex,t[t.length-1],L.BOUNDARY)},addLineString:function(t){var e=H.removeRepeatedPoints(t.getCoordinates());if(e.length<2)return this._hasTooFewPoints=!0,this.invalidPoint=e[0],null;var n=new Gn(e,new Je(this.argIndex,L.INTERIOR));this.lineEdgeMap.put(t,n),this.insertEdge(n),l.isTrue(2<=e.length,"found LineString with single point"),this.insertBoundaryPoint(this.argIndex,e[0]),this.insertBoundaryPoint(this.argIndex,e[e.length-1])},getInvalidPoint:function(){return this.invalidPoint},getBoundaryPoints:function(){for(var t=this.getBoundaryNodes(),e=new Array(t.size()).fill(null),n=0,i=t.iterator();i.hasNext();){var r=i.next();e[n++]=r.getCoordinate().copy()}return e},getBoundaryNodes:function(){return null===this.boundaryNodes&&(this.boundaryNodes=this.nodes.getBoundaryNodes(this.argIndex)),this.boundaryNodes},addSelfIntersectionNode:function(t,e,n){return this.isBoundaryNode(t,e)?null:void(n===L.BOUNDARY&&this.useBoundaryDeterminationRule?this.insertBoundaryPoint(t,e):this.insertPoint(t,e,n))},addPolygonRing:function(t,e,n){if(t.isEmpty())return null;var i=H.removeRepeatedPoints(t.getCoordinates());if(i.length<4)return this._hasTooFewPoints=!0,this.invalidPoint=i[0],null;var r=e,s=n;Zt.isCCW(i)&&(r=n,s=e);s=new Gn(i,new Je(this.argIndex,L.BOUNDARY,r,s));this.lineEdgeMap.put(t,s),this.insertEdge(s),this.insertPoint(this.argIndex,i[0],L.BOUNDARY)},insertPoint:function(t,e,n){var i=this.nodes.addNode(e),e=i.getLabel();null===e?i.label=new Je(t,n):e.setLocation(t,n)},createEdgeSetIntersector:function(){return new In},addSelfIntersectionNodes:function(t){for(var e=this.edges.iterator();e.hasNext();)for(var n=e.next(),i=n.getLabel().getLocation(t),r=n.eiList.iterator();r.hasNext();){var s=r.next();this.addSelfIntersectionNode(t,s.coord,i)}},add:function(){if(1!==arguments.length)return un.prototype.add.apply(this,arguments);var t=arguments[0];if(t.isEmpty())return null;if(t instanceof bt&&(this.useBoundaryDeterminationRule=!1),t instanceof Rt)this.addPolygon(t);else if(t instanceof Ct)this.addLineString(t);else if(t instanceof wt)this.addPoint(t);else if(t instanceof Tt)this.addCollection(t);else if(t instanceof gt)this.addCollection(t);else if(t instanceof bt)this.addCollection(t);else{if(!(t instanceof ft))throw new UnsupportedOperationException(t.getClass().getName());this.addCollection(t)}},addCollection:function(t){for(var e=0;e<t.getNumGeometries();e++){var n=t.getGeometryN(e);this.add(n)}},locate:function(t){return R(this.parentGeom,Lt)&&50<this.parentGeom.getNumGeometries()?(null===this.areaPtLocator&&(this.areaPtLocator=new Pn(this.parentGeom)),this.areaPtLocator.locate(t)):this.ptLocator.locate(t,this.parentGeom)},findEdge:function(){if(1!==arguments.length)return un.prototype.findEdge.apply(this,arguments);var t=arguments[0];return this.lineEdgeMap.get(t)},interfaces_:function(){return[]},getClass:function(){return qn}}),qn.determineBoundary=function(t,e){return t.isInBoundary(e)?L.BOUNDARY:L.INTERIOR},e(Bn.prototype,{getArgGeometry:function(t){return this.arg[t].getGeometry()},setComputationPrecision:function(t){this.resultPrecisionModel=t,this.li.setPrecisionModel(this.resultPrecisionModel)},interfaces_:function(){return[]},getClass:function(){return Bn}}),e(zn.prototype,{compareTo:function(t){return zn.compareOriented(this.pts,this._orientation,t.pts,t._orientation)},interfaces_:function(){return[i]},getClass:function(){return zn}}),zn.orientation=function(t){return 1===H.increasingDirection(t)},zn.compareOriented=function(t,e,n,i){for(var r=e?1:-1,s=i?1:-1,o=e?t.length:-1,a=i?n.length:-1,u=e?0:t.length-1,l=i?0:n.length-1;;){var h=t[u].compareTo(n[l]);if(0!==h)return h;var c=(u+=r)===o,h=(l+=s)===a;if(c&&!h)return-1;if(!c&&h)return 1;if(c&&h)return 0}},e(Vn.prototype,{print:function(t){t.print("MULTILINESTRING ( ");for(var e=0;e<this.edges.size();e++){var n=this.edges.get(e);0<e&&t.print(","),t.print("(");for(var i=n.getCoordinates(),r=0;r<i.length;r++)0<r&&t.print(","),t.print(i[r].x+" "+i[r].y);t.println(")")}t.print(")  ")},addAll:function(t){for(var e=t.iterator();e.hasNext();)this.add(e.next())},findEdgeIndex:function(t){for(var e=0;e<this.edges.size();e++)if(this.edges.get(e).equals(t))return e;return-1},iterator:function(){return this.edges.iterator()},getEdges:function(){return this.edges},get:function(t){return this.edges.get(t)},findEqualEdge:function(t){t=new zn(t.getCoordinates());return this.ocaMap.get(t)},add:function(t){this.edges.add(t);var e=new zn(t.getCoordinates());this.ocaMap.put(e,t)},interfaces_:function(){return[]},getClass:function(){return Vn}}),a(kn,Bn),e(kn.prototype,{insertUniqueEdge:function(t){var e,n,i=this.edgeList.findEqualEdge(t);null!==i?(e=i.getLabel(),n=t.getLabel(),i.isPointwiseEqual(t)||(n=new Je(t.getLabel())).flip(),(i=i.getDepth()).isNull()&&i.add(e),i.add(n),e.merge(n)):this.edgeList.add(t)},getGraph:function(){return this.graph},cancelDuplicateResultEdges:function(){for(var t=this.graph.getEdgeEnds().iterator();t.hasNext();){var e=t.next(),n=e.getSym();e.isInResult()&&n.isInResult()&&(e.setInResult(!1),n.setInResult(!1))}},isCoveredByLA:function(t){return!!this.isCovered(t,this.resultLineList)||!!this.isCovered(t,this.resultPolyList)},computeGeometry:function(t,e,n,i){var r=new I;return r.addAll(t),r.addAll(e),r.addAll(n),r.isEmpty()?kn.createEmptyResult(i,this.arg[0].getGeometry(),this.arg[1].getGeometry(),this.geomFact):this.geomFact.buildGeometry(r)},mergeSymLabels:function(){for(var t=this.graph.getNodes().iterator();t.hasNext();){t.next().getEdges().mergeSymLabels()}},isCovered:function(t,e){for(var n=e.iterator();n.hasNext();){var i=n.next();if(this.ptLocator.locate(t,i)!==L.EXTERIOR)return!0}return!1},replaceCollapsedEdges:function(){for(var t=new I,e=this.edgeList.iterator();e.hasNext();){var n=e.next();n.isCollapsed()&&(e.remove(),t.add(n.getCollapsedEdge()))}this.edgeList.addAll(t)},updateNodeLabelling:function(){for(var t=this.graph.getNodes().iterator();t.hasNext();){var e=t.next(),n=e.getEdges().getLabel();e.getLabel().merge(n)}},getResultGeometry:function(t){return this.computeOverlay(t),this.resultGeom},insertUniqueEdges:function(t){for(var e=t.iterator();e.hasNext();){var n=e.next();this.insertUniqueEdge(n)}},computeOverlay:function(t){this.copyPoints(0),this.copyPoints(1),this.arg[0].computeSelfNodes(this.li,!1),this.arg[1].computeSelfNodes(this.li,!1),this.arg[0].computeEdgeIntersections(this.arg[1],this.li,!0);var e=new I;this.arg[0].computeSplitEdges(e),this.arg[1].computeSplitEdges(e),this.insertUniqueEdges(e),this.computeLabelsFromDepths(),this.replaceCollapsedEdges(),We.checkValid(this.edgeList.getEdges()),this.graph.addEdges(this.edgeList.getEdges()),this.computeLabelling(),this.labelIncompleteNodes(),this.findResultAreaEdges(t),this.cancelDuplicateResultEdges();e=new ln(this.geomFact);e.add(this.graph),this.resultPolyList=e.getPolygons();e=new hn(this,this.geomFact,this.ptLocator);this.resultLineList=e.build(t);e=new cn(this,this.geomFact,this.ptLocator);this.resultPointList=e.build(t),this.resultGeom=this.computeGeometry(this.resultPointList,this.resultLineList,this.resultPolyList,t)},labelIncompleteNode:function(t,e){var n=this.ptLocator.locate(t.getCoordinate(),this.arg[e].getGeometry());t.getLabel().setLocation(e,n)},copyPoints:function(t){for(var e=this.arg[t].getNodeIterator();e.hasNext();){var n=e.next();this.graph.addNode(n.getCoordinate()).setLabel(t,n.getLabel().getLocation(t))}},findResultAreaEdges:function(t){for(var e=this.graph.getEdgeEnds().iterator();e.hasNext();){var n=e.next(),i=n.getLabel();i.isArea()&&!n.isInteriorAreaEdge()&&kn.isResultOfOp(i.getLocation(0,Ke.RIGHT),i.getLocation(1,Ke.RIGHT),t)&&n.setInResult(!0)}},computeLabelsFromDepths:function(){for(var t=this.edgeList.iterator();t.hasNext();){var e=t.next(),n=e.getLabel(),i=e.getDepth();if(!i.isNull()){i.normalize();for(var r=0;r<2;r++)n.isNull(r)||!n.isArea()||i.isNull(r)||(0===i.getDelta(r)?n.toLine(r):(l.isTrue(!i.isNull(r,Ke.LEFT),"depth of LEFT side has not been initialized"),n.setLocation(r,Ke.LEFT,i.getLocation(r,Ke.LEFT)),l.isTrue(!i.isNull(r,Ke.RIGHT),"depth of RIGHT side has not been initialized"),n.setLocation(r,Ke.RIGHT,i.getLocation(r,Ke.RIGHT))))}}},computeLabelling:function(){for(var t=this.graph.getNodes().iterator();t.hasNext();){t.next().getEdges().computeLabelling(this.arg)}this.mergeSymLabels(),this.updateNodeLabelling()},labelIncompleteNodes:function(){for(var t=this.graph.getNodes().iterator();t.hasNext();){var e=t.next(),n=e.getLabel();e.isIsolated()&&(n.isNull(0)?this.labelIncompleteNode(e,0):this.labelIncompleteNode(e,1)),e.getEdges().updateLabelling(n)}},isCoveredByA:function(t){return!!this.isCovered(t,this.resultPolyList)},interfaces_:function(){return[]},getClass:function(){return kn}}),kn.overlayOp=function(t,e,n){return new kn(t,e).getResultGeometry(n)},kn.intersection=function(t,e){if(t.isEmpty()||e.isEmpty())return kn.createEmptyResult(kn.INTERSECTION,t,e,t.getFactory());if(t.isGeometryCollection()){var n=e;return je.map(t,{interfaces_:function(){return[MapOp]},map:function(t){return t.intersection(n)}})}return t.checkNotGeometryCollection(t),t.checkNotGeometryCollection(e),Un.overlayOp(t,e,kn.INTERSECTION)},kn.symDifference=function(t,e){if(t.isEmpty()||e.isEmpty()){if(t.isEmpty()&&e.isEmpty())return kn.createEmptyResult(kn.SYMDIFFERENCE,t,e,t.getFactory());if(t.isEmpty())return e.copy();if(e.isEmpty())return t.copy()}return t.checkNotGeometryCollection(t),t.checkNotGeometryCollection(e),Un.overlayOp(t,e,kn.SYMDIFFERENCE)},kn.resultDimension=function(t,e,n){var i=e.getDimension(),e=n.getDimension(),n=-1;switch(t){case kn.INTERSECTION:n=Math.min(i,e);break;case kn.UNION:n=Math.max(i,e);break;case kn.DIFFERENCE:n=i;break;case kn.SYMDIFFERENCE:n=Math.max(i,e)}return n},kn.createEmptyResult=function(t,e,n,i){var r=null;switch(kn.resultDimension(t,e,n)){case-1:r=i.createGeometryCollection(new Array(0).fill(null));break;case 0:r=i.createPoint();break;case 1:r=i.createLineString();break;case 2:r=i.createPolygon()}return r},kn.difference=function(t,e){return t.isEmpty()?kn.createEmptyResult(kn.DIFFERENCE,t,e,t.getFactory()):e.isEmpty()?t.copy():(t.checkNotGeometryCollection(t),t.checkNotGeometryCollection(e),Un.overlayOp(t,e,kn.DIFFERENCE))},kn.isResultOfOp=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1],n=t.getLocation(0),t=t.getLocation(1);return kn.isResultOfOp(n,t,e)}if(3===arguments.length){t=arguments[0],e=arguments[1];switch(t===L.BOUNDARY&&(t=L.INTERIOR),e===L.BOUNDARY&&(e=L.INTERIOR),arguments[2]){case kn.INTERSECTION:return t===L.INTERIOR&&e===L.INTERIOR;case kn.UNION:return t===L.INTERIOR||e===L.INTERIOR;case kn.DIFFERENCE:return t===L.INTERIOR&&e!==L.INTERIOR;case kn.SYMDIFFERENCE:return t===L.INTERIOR&&e!==L.INTERIOR||t!==L.INTERIOR&&e===L.INTERIOR}return!1}},kn.INTERSECTION=1,kn.UNION=2,kn.DIFFERENCE=3,kn.SYMDIFFERENCE=4,e(Yn.prototype,{selfSnap:function(t){return new ae(t).snapTo(t,this.snapTolerance)},removeCommonBits:function(t){this.cbr=new he,this.cbr.add(t[0]),this.cbr.add(t[1]);var e=new Array(2).fill(null);return e[0]=this.cbr.removeCommonBits(t[0].copy()),e[1]=this.cbr.removeCommonBits(t[1].copy()),e},prepareResult:function(t){return this.cbr.addCommonBits(t),t},getResultGeometry:function(t){var e=this.snap(this.geom),t=kn.overlayOp(e[0],e[1],t);return this.prepareResult(t)},checkValid:function(t){t.isValid()||A.out.println("Snapped geometry is invalid")},computeSnapTolerance:function(){this.snapTolerance=ae.computeOverlaySnapTolerance(this.geom[0],this.geom[1])},snap:function(t){t=this.removeCommonBits(t);return ae.snap(t[0],t[1],this.snapTolerance)},interfaces_:function(){return[]},getClass:function(){return Yn}}),Yn.overlayOp=function(t,e,n){return new Yn(t,e).getResultGeometry(n)},Yn.union=function(t,e){return Yn.overlayOp(t,e,kn.UNION)},Yn.intersection=function(t,e){return Yn.overlayOp(t,e,kn.INTERSECTION)},Yn.symDifference=function(t,e){return Yn.overlayOp(t,e,kn.SYMDIFFERENCE)},Yn.difference=function(t,e){return Yn.overlayOp(t,e,kn.DIFFERENCE)},e(Un.prototype,{getResultGeometry:function(t){var e=null,n=!1,i=null;try{e=kn.overlayOp(this.geom[0],this.geom[1],t);n=!0}catch(t){if(!(t instanceof p))throw t;i=t}if(!n)try{e=Yn.overlayOp(this.geom[0],this.geom[1],t)}catch(t){throw t instanceof p?i:t}return e},interfaces_:function(){return[]},getClass:function(){return Un}}),Un.overlayOp=function(t,e,n){return new Un(t,e).getResultGeometry(n)},Un.union=function(t,e){return Un.overlayOp(t,e,kn.UNION)},Un.intersection=function(t,e){return Un.overlayOp(t,e,kn.INTERSECTION)},Un.symDifference=function(t,e){return Un.overlayOp(t,e,kn.SYMDIFFERENCE)},Un.difference=function(t,e){return Un.overlayOp(t,e,kn.DIFFERENCE)},e(Xn.prototype,{addPolygon:function(t){if(t.isEmpty())return null;var e=null,n=0,i=this.horizontalBisector(t);e=0===i.getLength()?(n=0,i.getCoordinate()):(t=Un.overlayOp(i,t,kn.INTERSECTION),n=(t=this.widestGeometry(t)).getEnvelopeInternal().getWidth(),Xn.centre(t.getEnvelopeInternal())),(null===this.interiorPoint||n>this.maxWidth)&&(this.interiorPoint=e,this.maxWidth=n)},getInteriorPoint:function(){return this.interiorPoint},widestGeometry:function(){if(arguments[0]instanceof ft){var t=arguments[0];if(t.isEmpty())return t;for(var e=t.getGeometryN(0),n=1;n<t.getNumGeometries();n++)t.getGeometryN(n).getEnvelopeInternal().getWidth()>e.getEnvelopeInternal().getWidth()&&(e=t.getGeometryN(n));return e}if(arguments[0]instanceof B){var i=arguments[0];return i instanceof ft?this.widestGeometry(i):i}},horizontalBisector:function(t){var e=t.getEnvelopeInternal(),t=Hn.getBisectorY(t);return this.factory.createLineString([new d(e.getMinX(),t),new d(e.getMaxX(),t)])},add:function(t){if(t instanceof Rt)this.addPolygon(t);else if(t instanceof ft)for(var e=t,n=0;n<e.getNumGeometries();n++)this.add(e.getGeometryN(n))},interfaces_:function(){return[]},getClass:function(){return Xn}}),Xn.centre=function(t){return new d(Xn.avg(t.getMinX(),t.getMaxX()),Xn.avg(t.getMinY(),t.getMaxY()))},Xn.avg=function(t,e){return(t+e)/2},e(Hn.prototype,{updateInterval:function(t){t<=this.centreY?t>this.loY&&(this.loY=t):t>this.centreY&&t<this.hiY&&(this.hiY=t)},getBisectorY:function(){this.process(this.poly.getExteriorRing());for(var t=0;t<this.poly.getNumInteriorRing();t++)this.process(this.poly.getInteriorRingN(t));return Xn.avg(this.hiY,this.loY)},process:function(t){for(var e=t.getCoordinateSequence(),n=0;n<e.size();n++){var i=e.getY(n);this.updateInterval(i)}},interfaces_:function(){return[]},getClass:function(){return Hn}}),Hn.getBisectorY=function(t){return new Hn(t).getBisectorY()},Xn.SafeBisectorFinder=Hn,e(Wn.prototype,{addEndpoints:function(){if(arguments[0]instanceof B){var t=arguments[0];if(t instanceof Ct)this.addEndpoints(t.getCoordinates());else if(t instanceof ft)for(var e=t,n=0;n<e.getNumGeometries();n++)this.addEndpoints(e.getGeometryN(n))}else{arguments[0]instanceof Array&&(t=arguments[0],this.add(t[0]),this.add(t[t.length-1]))}},getInteriorPoint:function(){return this.interiorPoint},addInterior:function(){if(arguments[0]instanceof B){var t=arguments[0];if(t instanceof Ct)this.addInterior(t.getCoordinates());else if(t instanceof ft)for(var e=t,n=0;n<e.getNumGeometries();n++)this.addInterior(e.getGeometryN(n))}else if(arguments[0]instanceof Array)for(var i=arguments[0],n=1;n<i.length-1;n++)this.add(i[n])},add:function(t){var e=t.distance(this.centroid);e<this.minDistance&&(this.interiorPoint=new d(t),this.minDistance=e)},interfaces_:function(){return[]},getClass:function(){return Wn}}),e(jn.prototype,{getInteriorPoint:function(){return this.interiorPoint},add:function(){if(arguments[0]instanceof B){var t=arguments[0];if(t instanceof wt)this.add(t.getCoordinate());else if(t instanceof ft)for(var e=t,n=0;n<e.getNumGeometries();n++)this.add(e.getGeometryN(n))}else{var i;arguments[0]instanceof d&&((t=(i=arguments[0]).distance(this.centroid))<this.minDistance&&(this.interiorPoint=new d(i),this.minDistance=t))}},interfaces_:function(){return[]},getClass:function(){return jn}}),e(Kn.prototype,{interfaces_:function(){return[]},getClass:function(){return Kn}}),Kn.toDegrees=function(t){return 180*t/Math.PI},Kn.normalize=function(t){for(;t>Math.PI;)t-=Kn.PI_TIMES_2;for(;t<=-Math.PI;)t+=Kn.PI_TIMES_2;return t},Kn.angle=function(){if(1===arguments.length){var t=arguments[0];return Math.atan2(t.y,t.x)}if(2===arguments.length){var e=arguments[0],n=arguments[1],t=n.x-e.x,e=n.y-e.y;return Math.atan2(e,t)}},Kn.isAcute=function(t,e,n){var i=t.x-e.x,t=t.y-e.y;return 0<i*(n.x-e.x)+t*(n.y-e.y)},Kn.isObtuse=function(t,e,n){var i=t.x-e.x,t=t.y-e.y;return i*(n.x-e.x)+t*(n.y-e.y)<0},Kn.interiorAngle=function(t,e,n){t=Kn.angle(e,t),n=Kn.angle(e,n);return Math.abs(n-t)},Kn.normalizePositive=function(t){if(t<0){for(;t<0;)t+=Kn.PI_TIMES_2;Kn.PI_TIMES_2<=t&&(t=0)}else{for(;Kn.PI_TIMES_2<=t;)t-=Kn.PI_TIMES_2;t<0&&(t=0)}return t},Kn.angleBetween=function(t,e,n){t=Kn.angle(e,t),n=Kn.angle(e,n);return Kn.diff(t,n)},Kn.diff=function(t,e){var n=null;return(n=t<e?e-t:t-e)>Math.PI&&(n=2*Math.PI-n),n},Kn.toRadians=function(t){return t*Math.PI/180},Kn.getTurn=function(t,e){t=Math.sin(e-t);return 0<t?Kn.COUNTERCLOCKWISE:t<0?Kn.CLOCKWISE:Kn.NONE},Kn.angleBetweenOriented=function(t,e,n){t=Kn.angle(e,t),t=Kn.angle(e,n)-t;return t<=-Math.PI?t+Kn.PI_TIMES_2:t>Math.PI?t-Kn.PI_TIMES_2:t},Kn.PI_TIMES_2=2*Math.PI,Kn.PI_OVER_2=Math.PI/2,Kn.PI_OVER_4=Math.PI/4,Kn.COUNTERCLOCKWISE=Zt.COUNTERCLOCKWISE,Kn.CLOCKWISE=Zt.CLOCKWISE,Kn.NONE=Zt.COLLINEAR,e(Zn.prototype,{area:function(){return Zn.area(this.p0,this.p1,this.p2)},signedArea:function(){return Zn.signedArea(this.p0,this.p1,this.p2)},interpolateZ:function(t){if(null===t)throw new c;return Zn.interpolateZ(t,this.p0,this.p1,this.p2)},longestSideLength:function(){return Zn.longestSideLength(this.p0,this.p1,this.p2)},isAcute:function(){return Zn.isAcute(this.p0,this.p1,this.p2)},circumcentre:function(){return Zn.circumcentre(this.p0,this.p1,this.p2)},area3D:function(){return Zn.area3D(this.p0,this.p1,this.p2)},centroid:function(){return Zn.centroid(this.p0,this.p1,this.p2)},inCentre:function(){return Zn.inCentre(this.p0,this.p1,this.p2)},interfaces_:function(){return[]},getClass:function(){return Zn}}),Zn.area=function(t,e,n){return Math.abs(((n.x-t.x)*(e.y-t.y)-(e.x-t.x)*(n.y-t.y))/2)},Zn.signedArea=function(t,e,n){return((n.x-t.x)*(e.y-t.y)-(e.x-t.x)*(n.y-t.y))/2},Zn.det=function(t,e,n,i){return t*i-e*n},Zn.interpolateZ=function(t,e,n,i){var r=e.x,s=e.y,o=n.x-r,a=i.x-r,u=n.y-s,l=i.y-s,h=o*l-a*u,r=t.x-r,s=t.y-s,a=(l*r-a*s)/h,h=(-u*r+o*s)/h;return e.z+a*(n.z-e.z)+h*(i.z-e.z)},Zn.longestSideLength=function(t,e,n){var i=t.distance(e),e=e.distance(n),t=n.distance(t),i=i;return i<e&&(i=e),i<t&&(i=t),i},Zn.isAcute=function(t,e,n){return!(!Kn.isAcute(t,e,n)||!Kn.isAcute(e,n,t))&&!!Kn.isAcute(n,t,e)},Zn.circumcentre=function(t,e,n){var i=n.x,r=n.y,s=t.x-i,o=t.y-r,n=e.x-i,t=e.y-r,e=2*Zn.det(s,o,n,t);return new d(i-Zn.det(o,s*s+o*o,t,n*n+t*t)/e,r+Zn.det(s,s*s+o*o,n,n*n+t*t)/e)},Zn.perpendicularBisector=function(t,e){var n=e.x-t.x,i=e.y-t.y,e=new F(t.x+n/2,t.y+i/2,1),i=new F(t.x-i+n/2,t.y+n+i/2,1);return new F(e,i)},Zn.angleBisector=function(t,e,n){var i=e.distance(t),i=i/(i+e.distance(n)),e=n.x-t.x,n=n.y-t.y;return new d(t.x+i*e,t.y+i*n)},Zn.area3D=function(t,e,n){var i=e.x-t.x,r=e.y-t.y,s=e.z-t.z,o=n.x-t.x,e=n.y-t.y,n=n.z-t.z,t=r*n-s*e,n=s*o-i*n,o=i*e-r*o,o=t*t+n*n+o*o;return Math.sqrt(o)/2},Zn.centroid=function(t,e,n){return new d((t.x+e.x+n.x)/3,(t.y+e.y+n.y)/3)},Zn.inCentre=function(t,e,n){var i=e.distance(n),r=t.distance(n),s=t.distance(e),o=i+r+s;return new d((i*t.x+r*e.x+s*n.x)/o,(i*t.y+r*e.y+s*n.y)/o)},e(Jn.prototype,{getRadius:function(){return this.compute(),this.radius},getDiameter:function(){switch(this.compute(),this.extremalPts.length){case 0:return this.input.getFactory().createLineString();case 1:return this.input.getFactory().createPoint(this.centre)}var t=this.extremalPts[0],e=this.extremalPts[1];return this.input.getFactory().createLineString([t,e])},getExtremalPoints:function(){return this.compute(),this.extremalPts},computeCirclePoints:function(){if(this.input.isEmpty())return this.extremalPts=new Array(0).fill(null),null;if(1===this.input.getNumPoints()){var t=this.input.getCoordinates();return this.extremalPts=[new d(t[0])],null}var e=this.input.convexHull().getCoordinates(),t=e;if(e[0].equals2D(e[e.length-1])&&(t=new Array(e.length-1).fill(null),H.copyDeep(e,0,t,0,e.length-1)),t.length<=2)return this.extremalPts=H.copyDeep(t),null;for(var n=Jn.lowestPoint(t),i=Jn.pointWitMinAngleWithX(t,n),r=0;r<t.length;r++){var s=Jn.pointWithMinAngleWithSegment(t,n,i);if(Kn.isObtuse(n,s,i))return this.extremalPts=[new d(n),new d(i)],null;if(Kn.isObtuse(s,n,i))n=s;else{if(!Kn.isObtuse(s,i,n))return this.extremalPts=[new d(n),new d(i),new d(s)],null;i=s}}l.shouldNeverReachHere("Logic failure in Minimum Bounding Circle algorithm!")},compute:function(){return null!==this.extremalPts?null:(this.computeCirclePoints(),this.computeCentre(),void(null!==this.centre&&(this.radius=this.centre.distance(this.extremalPts[0]))))},getFarthestPoints:function(){switch(this.compute(),this.extremalPts.length){case 0:return this.input.getFactory().createLineString();case 1:return this.input.getFactory().createPoint(this.centre)}var t=this.extremalPts[0],e=this.extremalPts[this.extremalPts.length-1];return this.input.getFactory().createLineString([t,e])},getCircle:function(){if(this.compute(),null===this.centre)return this.input.getFactory().createPolygon();var t=this.input.getFactory().createPoint(this.centre);return 0===this.radius?t:t.buffer(this.radius)},getCentre:function(){return this.compute(),this.centre},computeCentre:function(){switch(this.extremalPts.length){case 0:this.centre=null;break;case 1:this.centre=this.extremalPts[0];break;case 2:this.centre=new d((this.extremalPts[0].x+this.extremalPts[1].x)/2,(this.extremalPts[0].y+this.extremalPts[1].y)/2);break;case 3:this.centre=Zn.circumcentre(this.extremalPts[0],this.extremalPts[1],this.extremalPts[2])}},interfaces_:function(){return[]},getClass:function(){return Jn}}),Jn.pointWitMinAngleWithX=function(t,e){for(var n=g.MAX_VALUE,i=null,r=0;r<t.length;r++){var s,o,a=t[r];a!==e&&(s=a.x-e.x,(o=a.y-e.y)<0&&(o=-o),(o=o/Math.sqrt(s*s+o*o))<n&&(n=o,i=a))}return i},Jn.lowestPoint=function(t){for(var e=t[0],n=1;n<t.length;n++)t[n].y<e.y&&(e=t[n]);return e},Jn.pointWithMinAngleWithSegment=function(t,e,n){for(var i=g.MAX_VALUE,r=null,s=0;s<t.length;s++){var o,a=t[s];a===e||a===n||(o=Kn.angleBetween(e,a,n))<i&&(i=o,r=a)}return r},e(Qn.prototype,{getWidthCoordinate:function(){return this.computeMinimumDiameter(),this.minWidthPt},getSupportingSegment:function(){return this.computeMinimumDiameter(),this.inputGeom.getFactory().createLineString([this.minBaseSeg.p0,this.minBaseSeg.p1])},getDiameter:function(){if(this.computeMinimumDiameter(),null===this.minWidthPt)return this.inputGeom.getFactory().createLineString(null);var t=this.minBaseSeg.project(this.minWidthPt);return this.inputGeom.getFactory().createLineString([t,this.minWidthPt])},computeWidthConvex:function(t){this.convexHullPts=(t instanceof Rt?t.getExteriorRing():t).getCoordinates(),0===this.convexHullPts.length?(this.minWidth=0,this.minWidthPt=null,this.minBaseSeg=null):1===this.convexHullPts.length?(this.minWidth=0,this.minWidthPt=this.convexHullPts[0],this.minBaseSeg.p0=this.convexHullPts[0],this.minBaseSeg.p1=this.convexHullPts[0]):2===this.convexHullPts.length||3===this.convexHullPts.length?(this.minWidth=0,this.minWidthPt=this.convexHullPts[0],this.minBaseSeg.p0=this.convexHullPts[0],this.minBaseSeg.p1=this.convexHullPts[1]):this.computeConvexRingMinDiameter(this.convexHullPts)},computeConvexRingMinDiameter:function(t){this.minWidth=g.MAX_VALUE;for(var e=1,n=new Jt,i=0;i<t.length-1;i++)n.p0=t[i],n.p1=t[i+1],e=this.findMaxPerpDistance(t,n,e)},computeMinimumDiameter:function(){if(null!==this.minWidthPt)return null;var t;this.isConvex?this.computeWidthConvex(this.inputGeom):(t=new ie(this.inputGeom).getConvexHull(),this.computeWidthConvex(t))},getLength:function(){return this.computeMinimumDiameter(),this.minWidth},findMaxPerpDistance:function(t,e,n){for(var i=e.distancePerpendicular(t[n]),r=i,s=n,o=s;i<=r;)i=r,s=o,o=Qn.nextIndex(t,s),r=e.distancePerpendicular(t[o]);return i<this.minWidth&&(this.minPtIndex=s,this.minWidth=i,this.minWidthPt=t[this.minPtIndex],this.minBaseSeg=new Jt(e)),s},getMinimumRectangle:function(){if(this.computeMinimumDiameter(),0===this.minWidth)return this.minBaseSeg.p0.equals2D(this.minBaseSeg.p1)?this.inputGeom.getFactory().createPoint(this.minBaseSeg.p0):this.minBaseSeg.toGeometry(this.inputGeom.getFactory());for(var t=this.minBaseSeg.p1.x-this.minBaseSeg.p0.x,e=this.minBaseSeg.p1.y-this.minBaseSeg.p0.y,n=g.MAX_VALUE,i=-g.MAX_VALUE,r=g.MAX_VALUE,s=-g.MAX_VALUE,o=0;o<this.convexHullPts.length;o++){var a=Qn.computeC(t,e,this.convexHullPts[o]);i<a&&(i=a),a<n&&(n=a);a=Qn.computeC(-e,t,this.convexHullPts[o]);s<a&&(s=a),a<r&&(r=a)}var u=Qn.computeSegmentForLine(-t,-e,s),l=Qn.computeSegmentForLine(-t,-e,r),h=Qn.computeSegmentForLine(-e,t,i),c=Qn.computeSegmentForLine(-e,t,n),f=h.lineIntersection(u),u=c.lineIntersection(u),c=c.lineIntersection(l),l=h.lineIntersection(l),f=this.inputGeom.getFactory().createLinearRing([f,u,c,l,f]);return this.inputGeom.getFactory().createPolygon(f,null)},interfaces_:function(){return[]},getClass:function(){return Qn}}),Qn.nextIndex=function(t,e){return++e>=t.length&&(e=0),e},Qn.computeC=function(t,e,n){return t*n.y-e*n.x},Qn.getMinimumDiameter=function(t){return new Qn(t).getDiameter()},Qn.getMinimumRectangle=function(t){return new Qn(t).getMinimumRectangle()},Qn.computeSegmentForLine=function(t,e,n){var i=null,r=null,r=Math.abs(e)>Math.abs(t)?(i=new d(0,n/e),new d(1,n/e-t/e)):(i=new d(n/t,0),new d(n/t-e/t,1));return new Jt(i,r)};var Js=Object.freeze({Centroid:$t,CGAlgorithms:Zt,ConvexHull:ie,InteriorPointArea:Xn,InteriorPointLine:Wn,InteriorPointPoint:jn,RobustLineIntersector:Wt,MinimumBoundingCircle:Jn,MinimumDiameter:Qn});e($n.prototype,{getResultGeometry:function(){return new ti(this.distanceTolerance).transform(this.inputGeom)},setDistanceTolerance:function(t){if(t<=0)throw new c;this.distanceTolerance=t},interfaces_:function(){return[]},getClass:function(){return $n}}),$n.densifyPoints=function(t,e,n){for(var i=new Jt,r=new N,s=0;s<t.length-1;s++){i.p0=t[s],i.p1=t[s+1],r.add(i.p0,!1);var o=i.getLength(),a=Math.trunc(o/e)+1;if(1<a)for(var u=o/a,l=1;l<a;l++){var h=l*u/o,h=i.pointAlong(h);n.makePrecise(h),r.add(h,!1)}}return r.add(t[t.length-1],!1),r.toCoordinateArray()},$n.densify=function(t,e){t=new $n(t);return t.setDistanceTolerance(e),t.getResultGeometry()},a(ti,se),e(ti.prototype,{transformMultiPolygon:function(t,e){e=se.prototype.transformMultiPolygon.call(this,t,e);return this.createValidArea(e)},transformPolygon:function(t,e){t=se.prototype.transformPolygon.call(this,t,e);return e instanceof bt?t:this.createValidArea(t)},transformCoordinates:function(t,e){t=t.toCoordinateArray(),t=$n.densifyPoints(t,this.distanceTolerance,e.getPrecisionModel());return e instanceof Ct&&1===t.length&&(t=new Array(0).fill(null)),this.factory.getCoordinateSequenceFactory().create(t)},createValidArea:function(t){return t.buffer(0)},interfaces_:function(){return[]},getClass:function(){return ti}}),$n.DensifyTransformer=ti;var Qs=Object.freeze({Densifier:$n});e(ei.prototype,{find:function(t){var e=this;do{if(null===e)return null;if(e.dest().equals2D(t))return e}while((e=e.oNext())!==this);return null},dest:function(){return this._sym._orig},oNext:function(){return this._sym._next},insert:function(t){if(this.oNext()===this)return this.insertAfter(t),null;var e=this.compareTo(t),n=this;do{var i=n.oNext();if(i.compareTo(t)!==e||i===this)return n.insertAfter(t),null}while((n=i)!==this);l.shouldNeverReachHere()},insertAfter:function(t){l.equals(this._orig,t.orig());var e=this.oNext();this._sym.setNext(t),t.sym().setNext(e)},degree:function(){for(var t=0,e=this;t++,(e=e.oNext())!==this;);return t},equals:function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];return this._orig.equals2D(t)&&this._sym._orig.equals(e)}},deltaY:function(){return this._sym._orig.y-this._orig.y},sym:function(){return this._sym},prev:function(){return this._sym.next()._sym},compareAngularDirection:function(t){var e=this.deltaX(),n=this.deltaY(),i=t.deltaX(),r=t.deltaY();if(e===i&&n===r)return 0;n=Ge.quadrant(e,n),r=Ge.quadrant(i,r);return r<n?1:n<r?-1:Zt.computeOrientation(t._orig,t.dest(),this.dest())},prevNode:function(){for(var t=this;2===t.degree();)if((t=t.prev())===this)return null;return t},compareTo:function(t){return this.compareAngularDirection(t)},next:function(){return this._next},setSym:function(t){this._sym=t},orig:function(){return this._orig},toString:function(){return"HE("+this._orig.x+" "+this._orig.y+", "+this._sym._orig.x+" "+this._sym._orig.y+")"},setNext:function(t){this._next=t},init:function(t){this.setSym(t),t.setSym(this),this.setNext(t),t.setNext(this)},deltaX:function(){return this._sym._orig.x-this._orig.x},interfaces_:function(){return[]},getClass:function(){return ei}}),ei.init=function(t,e){if(null!==t._sym||null!==e._sym||null!==t._next||null!==e._next)throw new IllegalStateException("Edges are already initialized");return t.init(e),t},ei.create=function(t,e){t=new ei(t),e=new ei(e);return t.init(e),t},a(ni,ei),e(ni.prototype,{mark:function(){this._isMarked=!0},setMark:function(t){this._isMarked=t},isMarked:function(){return this._isMarked},interfaces_:function(){return[]},getClass:function(){return ni}}),ni.setMarkBoth=function(t,e){t.setMark(e),t.sym().setMark(e)},ni.isMarked=function(t){return t.isMarked()},ni.setMark=function(t,e){t.setMark(e)},ni.markBoth=function(t){t.mark(),t.sym().mark()},ni.mark=function(t){t.mark()},e(ii.prototype,{insert:function(t,e,n){var i=this.create(t,e);null!==n?n.insert(i):this.vertexMap.put(t,i);t=this.vertexMap.get(e);return null!==t?t.insert(i.sym()):this.vertexMap.put(e,i.sym()),i},create:function(t,e){t=this.createEdge(t),e=this.createEdge(e);return ei.init(t,e),t},createEdge:function(t){return new ei(t)},addEdge:function(t,e){if(!ii.isValidEdge(t,e))return null;var n=this.vertexMap.get(t),i=null;return null!==n&&(i=n.find(e)),null!==i?i:this.insert(t,e,n)},getVertexEdges:function(){return this.vertexMap.values()},findEdge:function(t,e){t=this.vertexMap.get(t);return null===t?null:t.find(e)},interfaces_:function(){return[]},getClass:function(){return ii}}),ii.isValidEdge=function(t,e){return 0!==e.compareTo(t)},a(ri,ni),e(ri.prototype,{setStart:function(){this._isStart=!0},isStart:function(){return this._isStart},interfaces_:function(){return[]},getClass:function(){return ri}}),a(si,ii),e(si.prototype,{createEdge:function(t){return new ri(t)},interfaces_:function(){return[]},getClass:function(){return si}}),e(oi.prototype,{addLine:function(t){this.lines.add(this.factory.createLineString(t.toCoordinateArray()))},updateRingStartEdge:function(t){return t.isStart()||(t=t.sym()).isStart()?null===this.ringStartEdge?(this.ringStartEdge=t,null):void(t.orig().compareTo(this.ringStartEdge.orig())<0&&(this.ringStartEdge=t)):null},getResult:function(){return null===this.result&&this.computeResult(),this.result},process:function(t){var e=t.prevNode();null===e&&(e=t),this.stackEdges(e),this.buildLines()},buildRing:function(t){var e=new N,n=t;for(e.add(n.orig().copy(),!1);2===n.sym().degree();){var i=n.next();if(i===t)break;e.add(i.orig().copy(),!1),n=i}e.add(n.dest().copy(),!1),this.addLine(e)},buildLine:function(t){var e=new N,n=t;for(this.ringStartEdge=null,ni.markBoth(n),e.add(n.orig().copy(),!1);2===n.sym().degree();){this.updateRingStartEdge(n);var i=n.next();if(i===t)return this.buildRing(this.ringStartEdge),null;e.add(i.orig().copy(),!1),ni.markBoth(n=i)}e.add(n.dest().copy(),!1),this.stackEdges(n.sym()),this.addLine(e)},stackEdges:function(t){for(var e=t;ni.isMarked(e)||this.nodeEdgeStack.add(e),(e=e.oNext())!==t;);},computeResult:function(){for(var t=this.graph.getVertexEdges().iterator();t.hasNext();){var e=t.next();ni.isMarked(e)||this.process(e)}this.result=this.factory.buildGeometry(this.lines)},buildLines:function(){for(;!this.nodeEdgeStack.empty();){var t=this.nodeEdgeStack.pop();ni.isMarked(t)||this.buildLine(t)}},add:function(){if(arguments[0]instanceof B)arguments[0].apply({interfaces_:function(){return[q]},filter:function(t){t instanceof Ct&&this.add(t)}});else if(R(arguments[0],m))for(var t=arguments[0].iterator();t.hasNext();){var e=t.next();this.add(e)}else if(arguments[0]instanceof Ct){var n=arguments[0];null===this.factory&&(this.factory=n.getFactory());for(var i=n.getCoordinateSequence(),r=!1,t=1;t<i.size();t++){var s=this.graph.addEdge(i.getCoordinate(t-1),i.getCoordinate(t));null!==s&&(r||(s.setStart(),r=!0))}}},interfaces_:function(){return[]},getClass:function(){return oi}}),oi.dissolve=function(t){var e=new oi;return e.add(t),e.getResult()};var $s=Object.freeze({LineDissolver:oi});e(ai.prototype,{hasChildren:function(){for(var t=0;t<4;t++)if(null!==this.subnode[t])return!0;return!1},isPrunable:function(){return!(this.hasChildren()||this.hasItems())},addAllItems:function(t){t.addAll(this.items);for(var e=0;e<4;e++)null!==this.subnode[e]&&this.subnode[e].addAllItems(t);return t},getNodeCount:function(){for(var t=0,e=0;e<4;e++)null!==this.subnode[e]&&(t+=this.subnode[e].size());return t+1},size:function(){for(var t=0,e=0;e<4;e++)null!==this.subnode[e]&&(t+=this.subnode[e].size());return t+this.items.size()},addAllItemsFromOverlapping:function(t,e){if(!this.isSearchMatch(t))return null;e.addAll(this.items);for(var n=0;n<4;n++)null!==this.subnode[n]&&this.subnode[n].addAllItemsFromOverlapping(t,e)},visitItems:function(t,e){for(var n=this.items.iterator();n.hasNext();)e.visitItem(n.next())},hasItems:function(){return!this.items.isEmpty()},remove:function(t,e){if(!this.isSearchMatch(t))return!1;for(var n=!1,i=0;i<4;i++)if(null!==this.subnode[i]&&(n=this.subnode[i].remove(t,e))){this.subnode[i].isPrunable()&&(this.subnode[i]=null);break}return n=n||this.items.remove(e)},visit:function(t,e){if(!this.isSearchMatch(t))return null;this.visitItems(t,e);for(var n=0;n<4;n++)null!==this.subnode[n]&&this.subnode[n].visit(t,e)},getItems:function(){return this.items},depth:function(){for(var t,e=0,n=0;n<4;n++){null===this.subnode[n]||e<(t=this.subnode[n].depth())&&(e=t)}return e+1},isEmpty:function(){var t=!0;this.items.isEmpty()||(t=!1);for(var e=0;e<4;e++)null!==this.subnode[e]&&(this.subnode[e].isEmpty()||(t=!1));return t},add:function(t){this.items.add(t)},interfaces_:function(){return[o]},getClass:function(){return ai}}),ai.getSubnodeIndex=function(t,e,n){var i=-1;return t.getMinX()>=e&&(t.getMinY()>=n&&(i=3),t.getMaxY()<=n&&(i=1)),t.getMaxX()<=e&&(t.getMinY()>=n&&(i=2),t.getMaxY()<=n&&(i=0)),i},ui.exponent=function(t){return function(t,e){var n,i,r,s,o={32:8,64:11}[t];if(s||(n=e<0||1/e<0,isFinite(e)||(s={32:{d:127,c:128,b:0,a:0},64:{d:32752,c:0,b:0,a:0}}[t],n&&(s.d+=1<<t/4-1),i=Math.pow(2,o)-1,r=0)),!s){for(i={32:127,64:1023}[t],r=Math.abs(e);2<=r;)i++,r/=2;for(;r<1&&0<i;)i--,r*=2;i<=0&&(r/=2),32===t&&254<i&&(s={d:n?255:127,c:128,b:0,a:0},i=Math.pow(2,o)-1,r=0)}return i}(64,t)-1023},ui.powerOf2=function(t){return Math.pow(2,t)},e(li.prototype,{getLevel:function(){return this.level},computeKey:function(){if(1===arguments.length){var t=arguments[0];for(this.level=li.computeQuadLevel(t),this.env=new C,this.computeKey(this.level,t);!this.env.contains(t);)this.level+=1,this.computeKey(this.level,t)}else{var e,n;2===arguments.length&&(e=arguments[1],n=ui.powerOf2(arguments[0]),this.pt.x=Math.floor(e.getMinX()/n)*n,this.pt.y=Math.floor(e.getMinY()/n)*n,this.env.init(this.pt.x,this.pt.x+n,this.pt.y,this.pt.y+n))}},getEnvelope:function(){return this.env},getCentre:function(){return new d((this.env.getMinX()+this.env.getMaxX())/2,(this.env.getMinY()+this.env.getMaxY())/2)},getPoint:function(){return this.pt},interfaces_:function(){return[]},getClass:function(){return li}}),li.computeQuadLevel=function(t){var e=t.getWidth(),t=t.getHeight();return ui.exponent(t<e?e:t)+1},a(hi,ai),e(hi.prototype,{find:function(t){var e=ai.getSubnodeIndex(t,this.centrex,this.centrey);return-1===e||null===this.subnode[e]?this:this.subnode[e].find(t)},isSearchMatch:function(t){return this.env.intersects(t)},getSubnode:function(t){return null===this.subnode[t]&&(this.subnode[t]=this.createSubnode(t)),this.subnode[t]},getEnvelope:function(){return this.env},getNode:function(t){var e=ai.getSubnodeIndex(t,this.centrex,this.centrey);return-1===e?this:this.getSubnode(e).getNode(t)},createSubnode:function(t){var e=0,n=0,i=0,r=0;switch(t){case 0:e=this.env.getMinX(),n=this.centrex,i=this.env.getMinY(),r=this.centrey;break;case 1:e=this.centrex,n=this.env.getMaxX(),i=this.env.getMinY(),r=this.centrey;break;case 2:e=this.env.getMinX(),n=this.centrex,i=this.centrey,r=this.env.getMaxY();break;case 3:e=this.centrex,n=this.env.getMaxX(),i=this.centrey,r=this.env.getMaxY()}return new hi(new C(e,n,i,r),this.level-1)},insertNode:function(t){l.isTrue(null===this.env||this.env.contains(t.env));var e,n=ai.getSubnodeIndex(t.env,this.centrex,this.centrey);t.level===this.level-1?this.subnode[n]=t:((e=this.createSubnode(n)).insertNode(t),this.subnode[n]=e)},interfaces_:function(){return[]},getClass:function(){return hi}}),hi.createNode=function(t){t=new li(t);return new hi(t.getEnvelope(),t.getLevel())},hi.createExpanded=function(t,e){e=new C(e);null!==t&&e.expandToInclude(t.env);e=hi.createNode(e);return null!==t&&e.insertNode(t),e},e(ci.prototype,{interfaces_:function(){return[]},getClass:function(){return ci}}),ci.isZeroWidth=function(t,e){var n=e-t;if(0==n)return!0;e=Math.max(Math.abs(t),Math.abs(e));return ui.exponent(n/e)<=ci.MIN_BINARY_EXPONENT},ci.MIN_BINARY_EXPONENT=-50,a(fi,ai),e(fi.prototype,{insert:function(t,e){var n=ai.getSubnodeIndex(t,fi.origin.x,fi.origin.y);if(-1===n)return this.add(e),null;var i=this.subnode[n];null!==i&&i.getEnvelope().contains(t)||(i=hi.createExpanded(i,t),this.subnode[n]=i),this.insertContained(this.subnode[n],t,e)},isSearchMatch:function(t){return!0},insertContained:function(t,e,n){l.isTrue(t.getEnvelope().contains(e));var i=ci.isZeroWidth(e.getMinX(),e.getMaxX()),r=ci.isZeroWidth(e.getMinY(),e.getMaxY());(i||r?t.find(e):t.getNode(e)).add(n)},interfaces_:function(){return[]},getClass:function(){return fi}}),fi.origin=new d(0,0),e(gi.prototype,{size:function(){return null!==this.root?this.root.size():0},insert:function(t,e){this.collectStats(t);t=gi.ensureExtent(t,this.minExtent);this.root.insert(t,e)},query:function(){if(1===arguments.length){var t=arguments[0],e=new Tn;return this.query(t,e),e.getItems()}2===arguments.length&&(t=arguments[0],e=arguments[1],this.root.visit(t,e))},queryAll:function(){var t=new I;return this.root.addAllItems(t),t},remove:function(t,e){t=gi.ensureExtent(t,this.minExtent);return this.root.remove(t,e)},collectStats:function(t){var e=t.getWidth();e<this.minExtent&&0<e&&(this.minExtent=e);t=t.getHeight();t<this.minExtent&&0<t&&(this.minExtent=t)},depth:function(){return null!==this.root?this.root.depth():0},isEmpty:function(){return null===this.root},interfaces_:function(){return[Ne,o]},getClass:function(){return gi}}),gi.ensureExtent=function(t,e){var n=t.getMinX(),i=t.getMaxX(),r=t.getMinY(),s=t.getMaxY();return n!==i&&r!==s?t:(n===i&&(i=(n-=e/2)+e/2),r===s&&(s=(r-=e/2)+e/2),new C(n,i,r,s))},gi.serialVersionUID=-0x678b60c967a25400;var to=Object.freeze({Quadtree:gi}),eo=Object.freeze({STRtree:Re}),no=Object.freeze({quadtree:to,strtree:eo}),io=["Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon"];e(di.prototype,{read:function(t){var e=void 0,t=(e="string"==typeof t?JSON.parse(t):t).type;if(!ro[t])throw new Error("Unknown GeoJSON type: "+e.type);return-1!==io.indexOf(t)?ro[t].apply(this,[e.coordinates]):"GeometryCollection"===t?ro[t].apply(this,[e.geometries]):ro[t].apply(this,[e])},write:function(t){var e=t.getGeometryType();if(!so[e])throw new Error("Geometry is not supported");return so[e].apply(this,[t])}});var ro={Feature:function(t){var e,n={};for(e in t)n[e]=t[e];if(t.geometry){var i=t.geometry.type;if(!ro[i])throw new Error("Unknown GeoJSON type: "+t.type);n.geometry=this.read(t.geometry)}return t.bbox&&(n.bbox=ro.bbox.apply(this,[t.bbox])),n},FeatureCollection:function(t){var e={};if(t.features){e.features=[];for(var n=0;n<t.features.length;++n)e.features.push(this.read(t.features[n]))}return t.bbox&&(e.bbox=this.parse.bbox.apply(this,[t.bbox])),e},coordinates:function(t){for(var e=[],n=0;n<t.length;++n){var i=t[n];e.push(new d(i[0],i[1]))}return e},bbox:function(t){return this.geometryFactory.createLinearRing([new d(t[0],t[1]),new d(t[2],t[1]),new d(t[2],t[3]),new d(t[0],t[3]),new d(t[0],t[1])])},Point:function(t){t=new d(t[0],t[1]);return this.geometryFactory.createPoint(t)},MultiPoint:function(t){for(var e=[],n=0;n<t.length;++n)e.push(ro.Point.apply(this,[t[n]]));return this.geometryFactory.createMultiPoint(e)},LineString:function(t){t=ro.coordinates.apply(this,[t]);return this.geometryFactory.createLineString(t)},MultiLineString:function(t){for(var e=[],n=0;n<t.length;++n)e.push(ro.LineString.apply(this,[t[n]]));return this.geometryFactory.createMultiLineString(e)},Polygon:function(t){for(var e=ro.coordinates.apply(this,[t[0]]),e=this.geometryFactory.createLinearRing(e),n=[],i=1;i<t.length;++i){var r=t[i],r=ro.coordinates.apply(this,[r]),r=this.geometryFactory.createLinearRing(r);n.push(r)}return this.geometryFactory.createPolygon(e,n)},MultiPolygon:function(t){for(var e=[],n=0;n<t.length;++n){var i=t[n];e.push(ro.Polygon.apply(this,[i]))}return this.geometryFactory.createMultiPolygon(e)},GeometryCollection:function(t){for(var e=[],n=0;n<t.length;++n){var i=t[n];e.push(this.read(i))}return this.geometryFactory.createGeometryCollection(e)}},so={coordinate:function(t){return[t.x,t.y]},Point:function(t){return{type:"Point",coordinates:so.coordinate.apply(this,[t.getCoordinate()])}},MultiPoint:function(t){for(var e=[],n=0;n<t.geometries.length;++n){var i=t.geometries[n],i=so.Point.apply(this,[i]);e.push(i.coordinates)}return{type:"MultiPoint",coordinates:e}},LineString:function(t){for(var e=[],n=t.getCoordinates(),i=0;i<n.length;++i){var r=n[i];e.push(so.coordinate.apply(this,[r]))}return{type:"LineString",coordinates:e}},MultiLineString:function(t){for(var e=[],n=0;n<t.geometries.length;++n){var i=t.geometries[n],i=so.LineString.apply(this,[i]);e.push(i.coordinates)}return{type:"MultiLineString",coordinates:e}},Polygon:function(t){var e=[],n=so.LineString.apply(this,[t.shell]);e.push(n.coordinates);for(var i=0;i<t.holes.length;++i){var r=t.holes[i],r=so.LineString.apply(this,[r]);e.push(r.coordinates)}return{type:"Polygon",coordinates:e}},MultiPolygon:function(t){for(var e=[],n=0;n<t.geometries.length;++n){var i=t.geometries[n],i=so.Polygon.apply(this,[i]);e.push(i.coordinates)}return{type:"MultiPolygon",coordinates:e}},GeometryCollection:function(t){for(var e=[],n=0;n<t.geometries.length;++n){var i=t.geometries[n],r=i.getGeometryType();e.push(so[r].apply(this,[i]))}return{type:"GeometryCollection",geometries:e}}};e(pi.prototype,{read:function(t){t=this.parser.read(t);return this.precisionModel.getType()===Vt.FIXED&&this.reducePrecision(t),t},reducePrecision:function(t){var e,n;if(t.coordinate)this.precisionModel.makePrecise(t.coordinate);else if(t.points)for(e=0,n=t.points.length;e<n;e++)this.precisionModel.makePrecise(t.points[e]);else if(t.geometries)for(e=0,n=t.geometries.length;e<n;e++)this.reducePrecision(t.geometries[e])}}),e(mi.prototype,{write:function(t){return this.parser.write(t)}}),e(yi.prototype,{read:function(t){t=this.parser.read(t);return this.precisionModel.getType()===Vt.FIXED&&this.reducePrecision(t),t},reducePrecision:function(t){if(t.coordinate)this.precisionModel.makePrecise(t.coordinate);else if(t.points)for(var e=0,n=t.points.coordinates.length;e<n;e++)this.precisionModel.makePrecise(t.points.coordinates[e]);else if(t.geometries)for(var i=0,r=t.geometries.length;i<r;i++)this.reducePrecision(t.geometries[i])}}),e(xi.prototype,{read:function(t){return t instanceof ol.geom.Point?this.convertFromPoint(t):t instanceof ol.geom.LineString?this.convertFromLineString(t):t instanceof ol.geom.LinearRing?this.convertFromLinearRing(t):t instanceof ol.geom.Polygon?this.convertFromPolygon(t):t instanceof ol.geom.MultiPoint?this.convertFromMultiPoint(t):t instanceof ol.geom.MultiLineString?this.convertFromMultiLineString(t):t instanceof ol.geom.MultiPolygon?this.convertFromMultiPolygon(t):t instanceof ol.geom.GeometryCollection?this.convertFromCollection(t):void 0},convertFromPoint:function(t){t=t.getCoordinates();return this.geometryFactory.createPoint(new d(t[0],t[1]))},convertFromLineString:function(t){return this.geometryFactory.createLineString(t.getCoordinates().map(function(t){return new d(t[0],t[1])}))},convertFromLinearRing:function(t){return this.geometryFactory.createLinearRing(t.getCoordinates().map(function(t){return new d(t[0],t[1])}))},convertFromPolygon:function(t){for(var e=t.getLinearRings(),n=null,i=[],r=0;r<e.length;r++){var s=this.convertFromLinearRing(e[r]);0===r?n=s:i.push(s)}return this.geometryFactory.createPolygon(n,i)},convertFromMultiPoint:function(t){t=t.getPoints().map(function(t){return this.convertFromPoint(t)},this);return this.geometryFactory.createMultiPoint(t)},convertFromMultiLineString:function(t){t=t.getLineStrings().map(function(t){return this.convertFromLineString(t)},this);return this.geometryFactory.createMultiLineString(t)},convertFromMultiPolygon:function(t){t=t.getPolygons().map(function(t){return this.convertFromPolygon(t)},this);return this.geometryFactory.createMultiPolygon(t)},convertFromCollection:function(t){t=t.getGeometries().map(function(t){return this.read(t)},this);return this.geometryFactory.createGeometryCollection(t)},write:function(t){return"Point"===t.getGeometryType()?this.convertToPoint(t.getCoordinate()):"LineString"===t.getGeometryType()?this.convertToLineString(t):"LinearRing"===t.getGeometryType()?this.convertToLinearRing(t):"Polygon"===t.getGeometryType()?this.convertToPolygon(t):"MultiPoint"===t.getGeometryType()?this.convertToMultiPoint(t):"MultiLineString"===t.getGeometryType()?this.convertToMultiLineString(t):"MultiPolygon"===t.getGeometryType()?this.convertToMultiPolygon(t):"GeometryCollection"===t.getGeometryType()?this.convertToCollection(t):void 0},convertToPoint:function(t){return new ol.geom.Point([t.x,t.y])},convertToLineString:function(t){t=t.points.coordinates.map(vi);return new ol.geom.LineString(t)},convertToLinearRing:function(t){t=t.points.coordinates.map(vi);return new ol.geom.LinearRing(t)},convertToPolygon:function(t){for(var e=[t.shell.points.coordinates.map(vi)],n=0;n<t.holes.length;n++)e.push(t.holes[n].points.coordinates.map(vi));return new ol.geom.Polygon(e)},convertToMultiPoint:function(t){return new ol.geom.MultiPoint(t.getCoordinates().map(vi))},convertToMultiLineString:function(t){for(var e=[],n=0;n<t.geometries.length;n++)e.push(this.convertToLineString(t.geometries[n]).getCoordinates());return new ol.geom.MultiLineString(e)},convertToMultiPolygon:function(t){for(var e=[],n=0;n<t.geometries.length;n++)e.push(this.convertToPolygon(t.geometries[n]).getCoordinates());return new ol.geom.MultiPolygon(e)},convertToCollection:function(t){for(var e=[],n=0;n<t.geometries.length;n++){var i=t.geometries[n];e.push(this.write(i))}return new ol.geom.GeometryCollection(e)}});var oo=Object.freeze({GeoJSONReader:pi,GeoJSONWriter:mi,OL3Parser:xi,WKTReader:yi,WKTWriter:Xt});e(Ei.prototype,{rescale:function(){if(R(arguments[0],m))for(var t=arguments[0].iterator();t.hasNext();){var e=t.next();this.rescale(e.getCoordinates())}else if(arguments[0]instanceof Array){var n=arguments[0];2===n.length&&(new d(n[0]),new d(n[1]));for(t=0;t<n.length;t++)n[t].x=n[t].x/this.scaleFactor+this.offsetX,n[t].y=n[t].y/this.scaleFactor+this.offsetY;2===n.length&&n[0].equals2D(n[1])&&A.out.println(n)}},scale:function(){if(R(arguments[0],m)){for(var t=arguments[0],e=new I,n=t.iterator();n.hasNext();){var i=n.next();e.add(new De(this.scale(i.getCoordinates()),i.getData()))}return e}if(arguments[0]instanceof Array){for(var r=arguments[0],s=new Array(r.length).fill(null),n=0;n<r.length;n++)s[n]=new d(Math.round((r[n].x-this.offsetX)*this.scaleFactor),Math.round((r[n].y-this.offsetY)*this.scaleFactor),r[n].z);return H.removeRepeatedPoints(s)}},isIntegerPrecision:function(){return 1===this.scaleFactor},getNodedSubstrings:function(){var t=this.noder.getNodedSubstrings();return this.isScaled&&this.rescale(t),t},computeNodes:function(t){var e=t;this.isScaled&&(e=this.scale(t)),this.noder.computeNodes(e)},interfaces_:function(){return[Be]},getClass:function(){return Ei}});var ao=Object.freeze({MCIndexNoder:Ve,ScaledNoder:Ei,SegmentString:me});e(Ii.prototype,{isSimpleMultiPoint:function(t){if(t.isEmpty())return!0;for(var e=new at,n=0;n<t.getNumGeometries();n++){var i=t.getGeometryN(n).getCoordinate();if(e.contains(i))return this.nonSimpleLocation=i,!1;e.add(i)}return!0},isSimplePolygonal:function(t){for(var e=Rn.getLines(t).iterator();e.hasNext();){var n=e.next();if(!this.isSimpleLinearGeometry(n))return!1}return!0},hasClosedEndpointIntersection:function(t){for(var e=new rt,n=t.getEdgeIterator();n.hasNext();){var i=n.next(),r=(i.getMaximumSegmentIndex(),i.isClosed()),s=i.getCoordinate(0);this.addEndpoint(e,s,r);i=i.getCoordinate(i.getNumPoints()-1);this.addEndpoint(e,i,r)}for(n=e.values().iterator();n.hasNext();){var o=n.next();if(o.isClosed&&2!==o.degree)return this.nonSimpleLocation=o.getCoordinate(),!0}return!1},getNonSimpleLocation:function(){return this.nonSimpleLocation},isSimpleLinearGeometry:function(t){if(t.isEmpty())return!0;var e=new qn(0,t),t=new Wt,t=e.computeSelfNodes(t,!0);return!t.hasIntersection()||(t.hasProperIntersection()?(this.nonSimpleLocation=t.getProperIntersectionPoint(),!1):!this.hasNonEndpointIntersection(e)&&(!this.isClosedEndpointsInInterior||!this.hasClosedEndpointIntersection(e)))},hasNonEndpointIntersection:function(t){for(var e=t.getEdgeIterator();e.hasNext();)for(var n=e.next(),i=n.getMaximumSegmentIndex(),r=n.getEdgeIntersectionList().iterator();r.hasNext();){var s=r.next();if(!s.isEndPoint(i))return this.nonSimpleLocation=s.getCoordinate(),!0}return!1},addEndpoint:function(t,e,n){var i=t.get(e);null===i&&(i=new Ni(e),t.put(e,i)),i.addEndpoint(n)},computeSimple:function(t){return this.nonSimpleLocation=null,!!t.isEmpty()||(t instanceof Ct||t instanceof gt?this.isSimpleLinearGeometry(t):t instanceof Tt?this.isSimpleMultiPoint(t):R(t,Lt)?this.isSimplePolygonal(t):!(t instanceof ft)||this.isSimpleGeometryCollection(t))},isSimple:function(){return this.nonSimpleLocation=null,this.computeSimple(this.inputGeom)},isSimpleGeometryCollection:function(t){for(var e=0;e<t.getNumGeometries();e++){var n=t.getGeometryN(e);if(!this.computeSimple(n))return!1}return!0},interfaces_:function(){return[]},getClass:function(){return Ii}}),e(Ni.prototype,{addEndpoint:function(t){this.degree++,this.isClosed|=t},getCoordinate:function(){return this.pt},interfaces_:function(){return[]},getClass:function(){return Ni}}),Ii.EndpointInfo=Ni,e(Ci.prototype,{getEndCapStyle:function(){return this.endCapStyle},isSingleSided:function(){return this._isSingleSided},setQuadrantSegments:function(t){this.quadrantSegments=t,0===this.quadrantSegments&&(this.joinStyle=Ci.JOIN_BEVEL),this.quadrantSegments<0&&(this.joinStyle=Ci.JOIN_MITRE,this.mitreLimit=Math.abs(this.quadrantSegments)),t<=0&&(this.quadrantSegments=1),this.joinStyle!==Ci.JOIN_ROUND&&(this.quadrantSegments=Ci.DEFAULT_QUADRANT_SEGMENTS)},getJoinStyle:function(){return this.joinStyle},setJoinStyle:function(t){this.joinStyle=t},setSimplifyFactor:function(t){this.simplifyFactor=t<0?0:t},getSimplifyFactor:function(){return this.simplifyFactor},getQuadrantSegments:function(){return this.quadrantSegments},setEndCapStyle:function(t){this.endCapStyle=t},getMitreLimit:function(){return this.mitreLimit},setMitreLimit:function(t){this.mitreLimit=t},setSingleSided:function(t){this._isSingleSided=t},interfaces_:function(){return[]},getClass:function(){return Ci}}),Ci.bufferDistanceError=function(t){t=Math.PI/2/t;return 1-Math.cos(t/2)},Ci.CAP_ROUND=1,Ci.CAP_FLAT=2,Ci.CAP_SQUARE=3,Ci.JOIN_ROUND=1,Ci.JOIN_MITRE=2,Ci.JOIN_BEVEL=3,Ci.DEFAULT_QUADRANT_SEGMENTS=8,Ci.DEFAULT_MITRE_LIMIT=5,Ci.DEFAULT_SIMPLIFY_FACTOR=.01,e(Si.prototype,{getCoordinate:function(){return this.minCoord},getRightmostSide:function(t,e){var n=this.getRightmostSideOfSegment(t,e);return n<0&&(n=this.getRightmostSideOfSegment(t,e-1)),n<0&&(this.minCoord=null,this.checkForRightmostCoordinate(t)),n},findRightmostEdgeAtVertex:function(){var t=this.minDe.getEdge().getCoordinates();l.isTrue(0<this.minIndex&&this.minIndex<t.length,"rightmost point expected to be interior vertex of edge");var e=t[this.minIndex-1],n=t[this.minIndex+1],i=Zt.computeOrientation(this.minCoord,n,e),t=!1;(e.y<this.minCoord.y&&n.y<this.minCoord.y&&i===Zt.COUNTERCLOCKWISE||e.y>this.minCoord.y&&n.y>this.minCoord.y&&i===Zt.CLOCKWISE)&&(t=!0),t&&(this.minIndex=this.minIndex-1)},getRightmostSideOfSegment:function(t,e){var n=t.getEdge().getCoordinates();if(e<0||e+1>=n.length)return-1;if(n[e].y===n[e+1].y)return-1;t=Ke.LEFT;return n[e].y<n[e+1].y&&(t=Ke.RIGHT),t},getEdge:function(){return this.orientedDe},checkForRightmostCoordinate:function(t){for(var e=t.getEdge().getCoordinates(),n=0;n<e.length-1;n++)(null===this.minCoord||e[n].x>this.minCoord.x)&&(this.minDe=t,this.minIndex=n,this.minCoord=e[n])},findRightmostEdgeAtNode:function(){var t=this.minDe.getNode().getEdges();this.minDe=t.getRightmostEdge(),this.minDe.isForward()||(this.minDe=this.minDe.getSym(),this.minIndex=this.minDe.getEdge().getCoordinates().length-1)},findEdge:function(t){for(var e=t.iterator();e.hasNext();){var n=e.next();n.isForward()&&this.checkForRightmostCoordinate(n)}l.isTrue(0!==this.minIndex||this.minCoord.equals(this.minDe.getCoordinate()),"inconsistency in rightmost processing"),0===this.minIndex?this.findRightmostEdgeAtNode():this.findRightmostEdgeAtVertex(),this.orientedDe=this.minDe,this.getRightmostSide(this.minDe,this.minIndex)===Ke.LEFT&&(this.orientedDe=this.minDe.getSym())},interfaces_:function(){return[]},getClass:function(){return Si}}),wi.prototype.addLast=function(t){this.array_.push(t)},wi.prototype.removeFirst=function(){return this.array_.shift()},wi.prototype.isEmpty=function(){return 0===this.array_.length},e(Li.prototype,{clearVisitedEdges:function(){for(var t=this.dirEdgeList.iterator();t.hasNext();){t.next().setVisited(!1)}},getRightmostCoordinate:function(){return this.rightMostCoord},computeNodeDepth:function(t){for(var e=null,n=t.getEdges().iterator();n.hasNext();){if((i=n.next()).isVisited()||i.getSym().isVisited()){e=i;break}}if(null===e)throw new Ye("unable to find edge to compute depths at "+t.getCoordinate());t.getEdges().computeDepths(e);for(var i,n=t.getEdges().iterator();n.hasNext();){(i=n.next()).setVisited(!0),this.copySymDepths(i)}},computeDepth:function(t){this.clearVisitedEdges();var e=this.finder.getEdge();e.getNode(),e.getLabel(),e.setEdgeDepths(Ke.RIGHT,t),this.copySymDepths(e),this.computeDepths(e)},create:function(t){this.addReachable(t),this.finder.findEdge(this.dirEdgeList),this.rightMostCoord=this.finder.getCoordinate()},findResultEdges:function(){for(var t=this.dirEdgeList.iterator();t.hasNext();){var e=t.next();1<=e.getDepth(Ke.RIGHT)&&e.getDepth(Ke.LEFT)<=0&&!e.isInteriorAreaEdge()&&e.setInResult(!0)}},computeDepths:function(t){var e=new Q,n=new wi,i=t.getNode();for(n.addLast(i),e.add(i),t.setVisited(!0);!n.isEmpty();){var r=n.removeFirst();e.add(r),this.computeNodeDepth(r);for(var s=r.getEdges().iterator();s.hasNext();){var o=s.next().getSym();o.isVisited()||(o=o.getNode(),e.contains(o)||(n.addLast(o),e.add(o)))}}},compareTo:function(t){return this.rightMostCoord.x<t.rightMostCoord.x?-1:this.rightMostCoord.x>t.rightMostCoord.x?1:0},getEnvelope:function(){if(null===this.env){for(var t=new C,e=this.dirEdgeList.iterator();e.hasNext();)for(var n=e.next().getEdge().getCoordinates(),i=0;i<n.length-1;i++)t.expandToInclude(n[i]);this.env=t}return this.env},addReachable:function(t){var e=new ee;for(e.add(t);!e.empty();){var n=e.pop();this.add(n,e)}},copySymDepths:function(t){var e=t.getSym();e.setDepth(Ke.LEFT,t.getDepth(Ke.RIGHT)),e.setDepth(Ke.RIGHT,t.getDepth(Ke.LEFT))},add:function(t,e){t.setVisited(!0),this.nodes.add(t);for(var n=t.getEdges().iterator();n.hasNext();){var i=n.next();this.dirEdgeList.add(i);i=i.getSym().getNode();i.isVisited()||e.push(i)}},getNodes:function(){return this.nodes},getDirectedEdges:function(){return this.dirEdgeList},interfaces_:function(){return[i]},getClass:function(){return Li}}),e(Ri.prototype,{isDeletable:function(t,e,n,i){var r=this.inputLine[t],s=this.inputLine[e],e=this.inputLine[n];return!(!this.isConcave(r,s,e)||!this.isShallow(r,s,e,i))&&this.isShallowSampled(r,s,t,n,i)},deleteShallowConcavities:function(){for(var t=1,e=(this.inputLine.length,this.findNextNonDeletedIndex(t)),n=this.findNextNonDeletedIndex(e),i=!1;n<this.inputLine.length;){var r=!1;this.isDeletable(t,e,n,this.distanceTol)&&(this.isDeleted[e]=Ri.DELETE,i=r=!0),t=r?n:e,e=this.findNextNonDeletedIndex(t),n=this.findNextNonDeletedIndex(e)}return i},isShallowConcavity:function(t,e,n,i){return Zt.computeOrientation(t,e,n)===this.angleOrientation&&Zt.distancePointLine(e,t,n)<i},isShallowSampled:function(t,e,n,i,r){var s=Math.trunc((i-n)/Ri.NUM_PTS_TO_CHECK);s<=0&&(s=1);for(var o=n;o<i;o+=s)if(!this.isShallow(t,e,this.inputLine[o],r))return!1;return!0},isConcave:function(t,e,n){var i=Zt.computeOrientation(t,e,n)===this.angleOrientation;return i},simplify:function(t){this.distanceTol=Math.abs(t),t<0&&(this.angleOrientation=Zt.CLOCKWISE),this.isDeleted=new Array(this.inputLine.length).fill(null);for(;this.deleteShallowConcavities(););return this.collapseLine()},findNextNonDeletedIndex:function(t){for(var e=t+1;e<this.inputLine.length&&this.isDeleted[e]===Ri.DELETE;)e++;return e},isShallow:function(t,e,n,i){return Zt.distancePointLine(e,t,n)<i},collapseLine:function(){for(var t=new N,e=0;e<this.inputLine.length;e++)this.isDeleted[e]!==Ri.DELETE&&t.add(this.inputLine[e]);return t.toCoordinateArray()},interfaces_:function(){return[]},getClass:function(){return Ri}}),Ri.simplify=function(t,e){return new Ri(t).simplify(e)},Ri.INIT=0,Ri.DELETE=1,Ri.KEEP=1,Ri.NUM_PTS_TO_CHECK=10,e(Ti.prototype,{getCoordinates:function(){return this.ptList.toArray(Ti.COORDINATE_ARRAY_TYPE)},setPrecisionModel:function(t){this.precisionModel=t},addPt:function(t){t=new d(t);return this.precisionModel.makePrecise(t),this.isRedundant(t)?null:void this.ptList.add(t)},reverse:function(){},addPts:function(t,e){if(e)for(var n=0;n<t.length;n++)this.addPt(t[n]);else for(n=t.length-1;0<=n;n--)this.addPt(t[n])},isRedundant:function(t){if(this.ptList.size()<1)return!1;var e=this.ptList.get(this.ptList.size()-1);return t.distance(e)<this.minimimVertexDistance},toString:function(){return(new Yt).createLineString(this.getCoordinates()).toString()},closeRing:function(){if(this.ptList.size()<1)return null;var t=new d(this.ptList.get(0)),e=this.ptList.get(this.ptList.size()-1);return 2<=this.ptList.size()&&this.ptList.get(this.ptList.size()-2),t.equals(e)?null:void this.ptList.add(t)},setMinimumVertexDistance:function(t){this.minimimVertexDistance=t},interfaces_:function(){return[]},getClass:function(){return Ti}}),Ti.COORDINATE_ARRAY_TYPE=new Array(0).fill(null),e(Pi.prototype,{addNextSegment:function(t,e){if(this.s0=this.s1,this.s1=this.s2,this.s2=t,this.seg0.setCoordinates(this.s0,this.s1),this.computeOffsetSegment(this.seg0,this.side,this.distance,this.offset0),this.seg1.setCoordinates(this.s1,this.s2),this.computeOffsetSegment(this.seg1,this.side,this.distance,this.offset1),this.s1.equals(this.s2))return null;var n=Zt.computeOrientation(this.s0,this.s1,this.s2),t=n===Zt.CLOCKWISE&&this.side===Ke.LEFT||n===Zt.COUNTERCLOCKWISE&&this.side===Ke.RIGHT;0===n?this.addCollinear(e):t?this.addOutsideTurn(n,e):this.addInsideTurn(n,e)},addLineEndCap:function(t,e){var n=new Jt(t,e),i=new Jt;this.computeOffsetSegment(n,Ke.LEFT,this.distance,i);var r=new Jt;this.computeOffsetSegment(n,Ke.RIGHT,this.distance,r);n=e.x-t.x,t=e.y-t.y,n=Math.atan2(t,n);switch(this.bufParams.getEndCapStyle()){case Ci.CAP_ROUND:this.segList.addPt(i.p1),this.addFilletArc(e,n+Math.PI/2,n-Math.PI/2,Zt.CLOCKWISE,this.distance),this.segList.addPt(r.p1);break;case Ci.CAP_FLAT:this.segList.addPt(i.p1),this.segList.addPt(r.p1);break;case Ci.CAP_SQUARE:e=new d;e.x=Math.abs(this.distance)*Math.cos(n),e.y=Math.abs(this.distance)*Math.sin(n);i=new d(i.p1.x+e.x,i.p1.y+e.y),e=new d(r.p1.x+e.x,r.p1.y+e.y);this.segList.addPt(i),this.segList.addPt(e)}},getCoordinates:function(){return this.segList.getCoordinates()},addMitreJoin:function(t,e,n,i){var r=!0,s=null;try{s=F.intersection(e.p0,e.p1,n.p0,n.p1);(i<=0?1:s.distance(t)/Math.abs(i))>this.bufParams.getMitreLimit()&&(r=!1)}catch(t){if(!(t instanceof w))throw t;s=new d(0,0),r=!1}r?this.segList.addPt(s):this.addLimitedMitreJoin(e,n,i,this.bufParams.getMitreLimit())},addFilletCorner:function(t,e,n,i,r){var s=e.x-t.x,o=e.y-t.y,a=Math.atan2(o,s),o=n.x-t.x,s=n.y-t.y,o=Math.atan2(s,o);i===Zt.CLOCKWISE?a<=o&&(a+=2*Math.PI):o<=a&&(a-=2*Math.PI),this.segList.addPt(e),this.addFilletArc(t,a,o,i,r),this.segList.addPt(n)},addOutsideTurn:function(t,e){return this.offset0.p1.distance(this.offset1.p0)<this.distance*Pi.OFFSET_SEGMENT_SEPARATION_FACTOR?(this.segList.addPt(this.offset0.p1),null):void(this.bufParams.getJoinStyle()===Ci.JOIN_MITRE?this.addMitreJoin(this.s1,this.offset0,this.offset1,this.distance):this.bufParams.getJoinStyle()===Ci.JOIN_BEVEL?this.addBevelJoin(this.offset0,this.offset1):(e&&this.segList.addPt(this.offset0.p1),this.addFilletCorner(this.s1,this.offset0.p1,this.offset1.p0,t,this.distance),this.segList.addPt(this.offset1.p0)))},createSquare:function(t){this.segList.addPt(new d(t.x+this.distance,t.y+this.distance)),this.segList.addPt(new d(t.x+this.distance,t.y-this.distance)),this.segList.addPt(new d(t.x-this.distance,t.y-this.distance)),this.segList.addPt(new d(t.x-this.distance,t.y+this.distance)),this.segList.closeRing()},addSegments:function(t,e){this.segList.addPts(t,e)},addFirstSegment:function(){this.segList.addPt(this.offset1.p0)},addLastSegment:function(){this.segList.addPt(this.offset1.p1)},initSideSegments:function(t,e,n){this.s1=t,this.s2=e,this.side=n,this.seg1.setCoordinates(t,e),this.computeOffsetSegment(this.seg1,n,this.distance,this.offset1)},addLimitedMitreJoin:function(t,e,n,i){var r=this.seg0.p1,s=Kn.angle(r,this.seg0.p0),o=(Kn.angle(r,this.seg1.p1),Kn.angleBetweenOriented(this.seg0.p0,r,this.seg1.p1))/2,s=Kn.normalize(s+o),s=Kn.normalize(s+Math.PI),i=i*n,o=n-i*Math.abs(Math.sin(o)),i=new Jt(r,new d(r.x+i*Math.cos(s),r.y+i*Math.sin(s))),s=i.pointAlongOffset(1,o),o=i.pointAlongOffset(1,-o);this.side===Ke.LEFT?(this.segList.addPt(s),this.segList.addPt(o)):(this.segList.addPt(o),this.segList.addPt(s))},computeOffsetSegment:function(t,e,n,i){var r=e===Ke.LEFT?1:-1,s=t.p1.x-t.p0.x,o=t.p1.y-t.p0.y,e=Math.sqrt(s*s+o*o),s=r*n*s/e,e=r*n*o/e;i.p0.x=t.p0.x-e,i.p0.y=t.p0.y+s,i.p1.x=t.p1.x-e,i.p1.y=t.p1.y+s},addFilletArc:function(t,e,n,i,r){var s=i===Zt.CLOCKWISE?-1:1,o=Math.abs(e-n),n=Math.trunc(o/this.filletAngleQuantum+.5);if(n<1)return null;for(var a=o/n,u=0,l=new d;u<o;){var h=e+s*u;l.x=t.x+r*Math.cos(h),l.y=t.y+r*Math.sin(h),this.segList.addPt(l),u+=a}},addInsideTurn:function(t,e){var n;this.li.computeIntersection(this.offset0.p0,this.offset0.p1,this.offset1.p0,this.offset1.p1),this.li.hasIntersection()?this.segList.addPt(this.li.getIntersection(0)):(this._hasNarrowConcaveAngle=!0,this.offset0.p1.distance(this.offset1.p0)<this.distance*Pi.INSIDE_TURN_VERTEX_SNAP_DISTANCE_FACTOR?this.segList.addPt(this.offset0.p1):(this.segList.addPt(this.offset0.p1),0<this.closingSegLengthFactor?(n=new d((this.closingSegLengthFactor*this.offset0.p1.x+this.s1.x)/(this.closingSegLengthFactor+1),(this.closingSegLengthFactor*this.offset0.p1.y+this.s1.y)/(this.closingSegLengthFactor+1)),this.segList.addPt(n),n=new d((this.closingSegLengthFactor*this.offset1.p0.x+this.s1.x)/(this.closingSegLengthFactor+1),(this.closingSegLengthFactor*this.offset1.p0.y+this.s1.y)/(this.closingSegLengthFactor+1)),this.segList.addPt(n)):this.segList.addPt(this.s1),this.segList.addPt(this.offset1.p0)))},createCircle:function(t){var e=new d(t.x+this.distance,t.y);this.segList.addPt(e),this.addFilletArc(t,0,2*Math.PI,-1,this.distance),this.segList.closeRing()},addBevelJoin:function(t,e){this.segList.addPt(t.p1),this.segList.addPt(e.p0)},init:function(t){this.distance=t,this.maxCurveSegmentError=t*(1-Math.cos(this.filletAngleQuantum/2)),this.segList=new Ti,this.segList.setPrecisionModel(this.precisionModel),this.segList.setMinimumVertexDistance(t*Pi.CURVE_VERTEX_SNAP_DISTANCE_FACTOR)},addCollinear:function(t){this.li.computeIntersection(this.s0,this.s1,this.s1,this.s2),2<=this.li.getIntersectionNum()&&(this.bufParams.getJoinStyle()===Ci.JOIN_BEVEL||this.bufParams.getJoinStyle()===Ci.JOIN_MITRE?(t&&this.segList.addPt(this.offset0.p1),this.segList.addPt(this.offset1.p0)):this.addFilletCorner(this.s1,this.offset0.p1,this.offset1.p0,Zt.CLOCKWISE,this.distance))},closeRing:function(){this.segList.closeRing()},hasNarrowConcaveAngle:function(){return this._hasNarrowConcaveAngle},interfaces_:function(){return[]},getClass:function(){return Pi}}),Pi.OFFSET_SEGMENT_SEPARATION_FACTOR=.001,Pi.INSIDE_TURN_VERTEX_SNAP_DISTANCE_FACTOR=.001,Pi.CURVE_VERTEX_SNAP_DISTANCE_FACTOR=1e-6,Pi.MAX_CLOSING_SEG_LEN_FACTOR=80,e(bi.prototype,{getOffsetCurve:function(t,e){if(0===(this.distance=e))return null;var n=e<0,e=Math.abs(e),e=this.getSegGen(e);t.length<=1?this.computePointCurve(t[0],e):this.computeOffsetCurve(t,n,e);e=e.getCoordinates();return n&&H.reverse(e),e},computeSingleSidedBufferCurve:function(t,e,n){var i=this.simplifyTolerance(this.distance);if(e){n.addSegments(t,!0);var r=Ri.simplify(t,-i),e=r.length-1;n.initSideSegments(r[e],r[e-1],Ke.LEFT),n.addFirstSegment();for(var s=e-2;0<=s;s--)n.addNextSegment(r[s],!0)}else{n.addSegments(t,!1);var o=Ri.simplify(t,i),a=o.length-1;n.initSideSegments(o[0],o[1],Ke.LEFT),n.addFirstSegment();for(s=2;s<=a;s++)n.addNextSegment(o[s],!0)}n.addLastSegment(),n.closeRing()},computeRingBufferCurve:function(t,e,n){var i=this.simplifyTolerance(this.distance);e===Ke.RIGHT&&(i=-i);var r=Ri.simplify(t,i),s=r.length-1;n.initSideSegments(r[s-1],r[0],e);for(var o=1;o<=s;o++){var a=1!==o;n.addNextSegment(r[o],a)}n.closeRing()},computeLineBufferCurve:function(t,e){var n=this.simplifyTolerance(this.distance),i=Ri.simplify(t,n),r=i.length-1;e.initSideSegments(i[0],i[1],Ke.LEFT);for(var s=2;s<=r;s++)e.addNextSegment(i[s],!0);e.addLastSegment(),e.addLineEndCap(i[r-1],i[r]);var o=Ri.simplify(t,-n),n=o.length-1;e.initSideSegments(o[n],o[n-1],Ke.LEFT);for(s=n-2;0<=s;s--)e.addNextSegment(o[s],!0);e.addLastSegment(),e.addLineEndCap(o[1],o[0]),e.closeRing()},computePointCurve:function(t,e){switch(this.bufParams.getEndCapStyle()){case Ci.CAP_ROUND:e.createCircle(t);break;case Ci.CAP_SQUARE:e.createSquare(t)}},getLineCurve:function(t,e){if((this.distance=e)<0&&!this.bufParams.isSingleSided())return null;if(0===e)return null;var n=Math.abs(e),n=this.getSegGen(n);return t.length<=1?this.computePointCurve(t[0],n):this.bufParams.isSingleSided()?(e=e<0,this.computeSingleSidedBufferCurve(t,e,n)):this.computeLineBufferCurve(t,n),n.getCoordinates()},getBufferParameters:function(){return this.bufParams},simplifyTolerance:function(t){return t*this.bufParams.getSimplifyFactor()},getRingCurve:function(t,e,n){if(this.distance=n,t.length<=2)return this.getLineCurve(t,n);if(0===n)return bi.copyCoordinates(t);n=this.getSegGen(n);return this.computeRingBufferCurve(t,e,n),n.getCoordinates()},computeOffsetCurve:function(t,e,n){var i=this.simplifyTolerance(this.distance);if(e){var r=Ri.simplify(t,-i),e=r.length-1;n.initSideSegments(r[e],r[e-1],Ke.LEFT),n.addFirstSegment();for(var s=e-2;0<=s;s--)n.addNextSegment(r[s],!0)}else{var o=Ri.simplify(t,i),a=o.length-1;n.initSideSegments(o[0],o[1],Ke.LEFT),n.addFirstSegment();for(s=2;s<=a;s++)n.addNextSegment(o[s],!0)}n.addLastSegment()},getSegGen:function(t){return new Pi(this.precisionModel,this.bufParams,t)},interfaces_:function(){return[]},getClass:function(){return bi}}),bi.copyCoordinates=function(t){for(var e=new Array(t.length).fill(null),n=0;n<e.length;n++)e[n]=new d(t[n]);return e},e(Oi.prototype,{findStabbedSegments:function(){if(1===arguments.length){for(var t=arguments[0],e=new I,n=this.subgraphs.iterator();n.hasNext();){var i=n.next(),r=i.getEnvelope();t.y<r.getMinY()||t.y>r.getMaxY()||this.findStabbedSegments(t,i.getDirectedEdges(),e)}return e}if(3===arguments.length)if(R(arguments[2],v)&&arguments[0]instanceof d&&arguments[1]instanceof on)for(var s=arguments[0],o=arguments[1],a=arguments[2],u=o.getEdge().getCoordinates(),n=0;n<u.length-1;n++){var l;this.seg.p0=u[n],this.seg.p1=u[n+1],this.seg.p0.y>this.seg.p1.y&&this.seg.reverse(),Math.max(this.seg.p0.x,this.seg.p1.x)<s.x||this.seg.isHorizontal()||s.y<this.seg.p0.y||s.y>this.seg.p1.y||Zt.computeOrientation(this.seg.p0,this.seg.p1,s)===Zt.RIGHT||(l=o.getDepth(Ke.LEFT),this.seg.p0.equals(u[n])||(l=o.getDepth(Ke.RIGHT)),l=new _i(this.seg,l),a.add(l))}else if(R(arguments[2],v)&&arguments[0]instanceof d&&R(arguments[1],v))for(var h=arguments[0],c=arguments[2],n=arguments[1].iterator();n.hasNext();){var f=n.next();f.isForward()&&this.findStabbedSegments(h,f,c)}},getDepth:function(t){t=this.findStabbedSegments(t);return 0===t.size()?0:Zs.min(t).leftDepth},interfaces_:function(){return[]},getClass:function(){return Oi}}),e(_i.prototype,{compareTo:function(t){var e=t;if(this.upwardSeg.minX()>=e.upwardSeg.maxX())return 1;if(this.upwardSeg.maxX()<=e.upwardSeg.minX())return-1;t=this.upwardSeg.orientationIndex(e.upwardSeg);return 0!==t?t:0!==(t=-1*e.upwardSeg.orientationIndex(this.upwardSeg))?t:this.upwardSeg.compareTo(e.upwardSeg)},compareX:function(t,e){var n=t.p0.compareTo(e.p0);return 0!==n?n:t.p1.compareTo(e.p1)},toString:function(){return this.upwardSeg.toString()},interfaces_:function(){return[i]},getClass:function(){return _i}}),Oi.DepthSegment=_i,e(Mi.prototype,{addPoint:function(t){if(this.distance<=0)return null;t=t.getCoordinates(),t=this.curveBuilder.getLineCurve(t,this.distance);this.addCurve(t,L.EXTERIOR,L.INTERIOR)},addPolygon:function(t){var e=this.distance,n=Ke.LEFT;this.distance<0&&(e=-this.distance,n=Ke.RIGHT);var i=t.getExteriorRing(),r=H.removeRepeatedPoints(i.getCoordinates());if(this.distance<0&&this.isErodedCompletely(i,this.distance))return null;if(this.distance<=0&&r.length<3)return null;this.addPolygonRing(r,e,n,L.EXTERIOR,L.INTERIOR);for(var s=0;s<t.getNumInteriorRing();s++){var o=t.getInteriorRingN(s),a=H.removeRepeatedPoints(o.getCoordinates());0<this.distance&&this.isErodedCompletely(o,-this.distance)||this.addPolygonRing(a,e,Ke.opposite(n),L.INTERIOR,L.EXTERIOR)}},isTriangleErodedCompletely:function(t,e){var n=new Zn(t[0],t[1],t[2]),t=n.inCentre();return Zt.distancePointLine(t,n.p0,n.p1)<Math.abs(e)},addLineString:function(t){if(this.distance<=0&&!this.curveBuilder.getBufferParameters().isSingleSided())return null;t=H.removeRepeatedPoints(t.getCoordinates()),t=this.curveBuilder.getLineCurve(t,this.distance);this.addCurve(t,L.EXTERIOR,L.INTERIOR)},addCurve:function(t,e,n){if(null===t||t.length<2)return null;n=new De(t,new Je(0,L.BOUNDARY,e,n));this.curveList.add(n)},getCurves:function(){return this.add(this.inputGeom),this.curveList},addPolygonRing:function(t,e,n,i,r){if(0===e&&t.length<Pt.MINIMUM_VALID_SIZE)return null;var s=i,o=r;t.length>=Pt.MINIMUM_VALID_SIZE&&Zt.isCCW(t)&&(s=r,o=i,n=Ke.opposite(n));e=this.curveBuilder.getRingCurve(t,n,e);this.addCurve(e,s,o)},add:function(t){if(t.isEmpty())return null;if(t instanceof Rt)this.addPolygon(t);else if(t instanceof Ct)this.addLineString(t);else if(t instanceof wt)this.addPoint(t);else if(t instanceof Tt)this.addCollection(t);else if(t instanceof gt)this.addCollection(t);else if(t instanceof bt)this.addCollection(t);else{if(!(t instanceof ft))throw new UnsupportedOperationException(t.getClass().getName());this.addCollection(t)}},isErodedCompletely:function(t,e){var n=t.getCoordinates();if(n.length<4)return e<0;if(4===n.length)return this.isTriangleErodedCompletely(n,e);t=t.getEnvelopeInternal(),t=Math.min(t.getHeight(),t.getWidth());return e<0&&2*Math.abs(e)>t},addCollection:function(t){for(var e=0;e<t.getNumGeometries();e++){var n=t.getGeometryN(e);this.add(n)}},interfaces_:function(){return[]},getClass:function(){return Mi}}),e(Di.prototype,{isTrivialIntersection:function(t,e,n,i){if(t===n&&1===this.li.getIntersectionNum()){if(Di.isAdjacentSegments(e,i))return!0;if(t.isClosed()){t=t.size()-1;if(0===e&&i===t||0===i&&e===t)return!0}}return!1},getProperIntersectionPoint:function(){return this.properIntersectionPoint},hasProperInteriorIntersection:function(){return this.hasProperInterior},getLineIntersector:function(){return this.li},hasProperIntersection:function(){return this.hasProper},processIntersections:function(t,e,n,i){if(t===n&&e===i)return null;this.numTests++;var r=t.getCoordinates()[e],s=t.getCoordinates()[e+1],o=n.getCoordinates()[i],a=n.getCoordinates()[i+1];this.li.computeIntersection(r,s,o,a),this.li.hasIntersection()&&(this.numIntersections++,this.li.isInteriorIntersection()&&(this.numInteriorIntersections++,this.hasInterior=!0),this.isTrivialIntersection(t,e,n,i)||(this._hasIntersection=!0,t.addIntersections(this.li,e,0),n.addIntersections(this.li,i,1),this.li.isProper()&&(this.numProperIntersections++,this.hasProper=!0,this.hasProperInterior=!0)))},hasIntersection:function(){return this._hasIntersection},isDone:function(){return!1},hasInteriorIntersection:function(){return this.hasInterior},interfaces_:function(){return[Ue]},getClass:function(){return Di}}),Di.isAdjacentSegments=function(t,e){return 1===Math.abs(t-e)},e(Ai.prototype,{setWorkingPrecisionModel:function(t){this.workingPrecisionModel=t},insertUniqueEdge:function(t){var e,n,i=this.edgeList.findEqualEdge(t);null!==i?(e=i.getLabel(),n=t.getLabel(),i.isPointwiseEqual(t)||(n=new Je(t.getLabel())).flip(),e.merge(n),n=Ai.depthDelta(n),n=i.getDepthDelta()+n,i.setDepthDelta(n)):(this.edgeList.add(t),t.setDepthDelta(Ai.depthDelta(t.getLabel())))},buildSubgraphs:function(t,e){for(var n=new I,i=t.iterator();i.hasNext();){var r=i.next(),s=r.getRightmostCoordinate(),s=new Oi(n).getDepth(s);r.computeDepth(s),r.findResultEdges(),n.add(r),e.add(r.getDirectedEdges(),r.getNodes())}},createSubgraphs:function(t){for(var e=new I,n=t.getNodes().iterator();n.hasNext();){var i,r=n.next();r.isVisited()||((i=new Li).create(r),e.add(i))}return Zs.sort(e,Zs.reverseOrder()),e},createEmptyResultGeometry:function(){return this.geomFact.createPolygon()},getNoder:function(t){if(null!==this.workingNoder)return this.workingNoder;var e=new Ve,n=new Wt;return n.setPrecisionModel(t),e.setSegmentIntersector(new Di(n)),e},buffer:function(t,e){var n=this.workingPrecisionModel;null===n&&(n=t.getPrecisionModel()),this.geomFact=t.getFactory();e=new Mi(t,e,new bi(n,this.bufParams)).getCurves();if(e.size()<=0)return this.createEmptyResultGeometry();this.computeNodedEdges(e,n),this.graph=new un(new mn),this.graph.addEdges(this.edgeList.getEdges());e=this.createSubgraphs(this.graph),n=new ln(this.geomFact);this.buildSubgraphs(e,n);n=n.getPolygons();return n.size()<=0?this.createEmptyResultGeometry():this.geomFact.buildGeometry(n)},computeNodedEdges:function(t,e){e=this.getNoder(e);e.computeNodes(t);for(var n=e.getNodedSubstrings().iterator();n.hasNext();){var i=n.next(),r=i.getCoordinates();2===r.length&&r[0].equals2D(r[1])||(r=i.getData(),r=new Gn(i.getCoordinates(),new Je(r)),this.insertUniqueEdge(r))}},setNoder:function(t){this.workingNoder=t},interfaces_:function(){return[]},getClass:function(){return Ai}}),Ai.depthDelta=function(t){var e=t.getLocation(0,Ke.LEFT),t=t.getLocation(0,Ke.RIGHT);return e===L.INTERIOR&&t===L.EXTERIOR?1:e===L.EXTERIOR&&t===L.INTERIOR?-1:0},Ai.convertSegStrings=function(t){for(var e=new Yt,n=new I;t.hasNext();){var i=t.next(),i=e.createLineString(i.getCoordinates());n.add(i)}return e.buildGeometry(n)},e(Fi.prototype,{checkEndPtVertexIntersections:function(){if(0===arguments.length)for(var t=this.segStrings.iterator();t.hasNext();){var e=t.next().getCoordinates();this.checkEndPtVertexIntersections(e[0],this.segStrings),this.checkEndPtVertexIntersections(e[e.length-1],this.segStrings)}else if(2===arguments.length)for(var n=arguments[0],t=arguments[1].iterator();t.hasNext();)for(var e=t.next().getCoordinates(),i=1;i<e.length-1;i++)if(e[i].equals(n))throw new p("found endpt/interior pt intersection at index "+i+" :pt "+n)},checkInteriorIntersections:function(){if(0===arguments.length)for(var t=this.segStrings.iterator();t.hasNext();)for(var e=t.next(),n=this.segStrings.iterator();n.hasNext();){var i=n.next();this.checkInteriorIntersections(e,i)}else if(2===arguments.length)for(var r=arguments[0],s=arguments[1],o=r.getCoordinates(),a=s.getCoordinates(),u=0;u<o.length-1;u++)for(var l=0;l<a.length-1;l++)this.checkInteriorIntersections(r,u,s,l);else if(4===arguments.length){var h=arguments[0],c=arguments[1],f=arguments[2],g=arguments[3];if(h===f&&c===g)return null;var d=h.getCoordinates()[c],h=h.getCoordinates()[c+1],c=f.getCoordinates()[g],g=f.getCoordinates()[g+1];if(this.li.computeIntersection(d,h,c,g),this.li.hasIntersection()&&(this.li.isProper()||this.hasInteriorIntersection(this.li,d,h)||this.hasInteriorIntersection(this.li,c,g)))throw new p("found non-noded intersection at "+d+"-"+h+" and "+c+"-"+g)}},checkValid:function(){this.checkEndPtVertexIntersections(),this.checkInteriorIntersections(),this.checkCollapses()},checkCollapses:function(){if(0===arguments.length)for(var t=this.segStrings.iterator();t.hasNext();){var e=t.next();this.checkCollapses(e)}else if(1===arguments.length)for(var n=arguments[0].getCoordinates(),t=0;t<n.length-2;t++)this.checkCollapse(n[t],n[t+1],n[t+2])},hasInteriorIntersection:function(t,e,n){for(var i=0;i<t.getIntersectionNum();i++){var r=t.getIntersection(i);if(!r.equals(e)&&!r.equals(n))return!0}return!1},checkCollapse:function(t,e,n){if(t.equals(n))throw new p("found non-noded collapse at "+Fi.fact.createLineString([t,e,n]))},interfaces_:function(){return[]},getClass:function(){return Fi}}),Fi.fact=new Yt,e(Gi.prototype,{intersectsScaled:function(t,e){var n=Math.min(t.x,e.x),i=Math.max(t.x,e.x),r=Math.min(t.y,e.y),s=Math.max(t.y,e.y),s=this.maxx<n||this.minx>i||this.maxy<r||this.miny>s;if(s)return!1;e=this.intersectsToleranceSquare(t,e);return l.isTrue(!(s&&e),"Found bad envelope test"),e},initCorners:function(t){this.minx=t.x-.5,this.maxx=t.x+.5,this.miny=t.y-.5,this.maxy=t.y+.5,this.corner[0]=new d(this.maxx,this.maxy),this.corner[1]=new d(this.minx,this.maxy),this.corner[2]=new d(this.minx,this.miny),this.corner[3]=new d(this.maxx,this.miny)},intersects:function(t,e){return 1===this.scaleFactor?this.intersectsScaled(t,e):(this.copyScaled(t,this.p0Scaled),this.copyScaled(e,this.p1Scaled),this.intersectsScaled(this.p0Scaled,this.p1Scaled))},scale:function(t){return Math.round(t*this.scaleFactor)},getCoordinate:function(){return this.originalPt},copyScaled:function(t,e){e.x=this.scale(t.x),e.y=this.scale(t.y)},getSafeEnvelope:function(){var t;return null===this.safeEnv&&(t=Gi.SAFE_ENV_EXPANSION_FACTOR/this.scaleFactor,this.safeEnv=new C(this.originalPt.x-t,this.originalPt.x+t,this.originalPt.y-t,this.originalPt.y+t)),this.safeEnv},intersectsPixelClosure:function(t,e){return this.li.computeIntersection(t,e,this.corner[0],this.corner[1]),!!this.li.hasIntersection()||(this.li.computeIntersection(t,e,this.corner[1],this.corner[2]),!!this.li.hasIntersection()||(this.li.computeIntersection(t,e,this.corner[2],this.corner[3]),!!this.li.hasIntersection()||(this.li.computeIntersection(t,e,this.corner[3],this.corner[0]),!!this.li.hasIntersection())))},intersectsToleranceSquare:function(t,e){var n=!1,i=!1;return this.li.computeIntersection(t,e,this.corner[0],this.corner[1]),!!this.li.isProper()||(this.li.computeIntersection(t,e,this.corner[1],this.corner[2]),!!this.li.isProper()||(this.li.hasIntersection()&&(n=!0),this.li.computeIntersection(t,e,this.corner[2],this.corner[3]),!!this.li.isProper()||(this.li.hasIntersection()&&(i=!0),this.li.computeIntersection(t,e,this.corner[3],this.corner[0]),!!this.li.isProper()||(!(!n||!i)||(!!t.equals(this.pt)||!!e.equals(this.pt))))))},addSnappedNode:function(t,e){var n=t.getCoordinate(e),i=t.getCoordinate(e+1);return!!this.intersects(n,i)&&(t.addIntersection(this.getCoordinate(),e),!0)},interfaces_:function(){return[]},getClass:function(){return Gi}}),Gi.SAFE_ENV_EXPANSION_FACTOR=.75,e(qi.prototype,{select:function(){var t;1===arguments.length||2===arguments.length&&(t=arguments[1],arguments[0].getLineSegment(t,this.selectedSegment),this.select(this.selectedSegment))},interfaces_:function(){return[]},getClass:function(){return qi}}),e(Bi.prototype,{snap:function(){if(1===arguments.length){var t=arguments[0];return this.snap(t,null,-1)}if(3===arguments.length){var e=arguments[0],n=arguments[1],t=arguments[2],i=e.getSafeEnvelope(),r=new zi(e,n,t);return this.index.query(i,{interfaces_:function(){return[Ie]},visitItem:function(t){t.select(i,r)}}),r.isNodeAdded()}},interfaces_:function(){return[]},getClass:function(){return Bi}}),a(zi,qi),e(zi.prototype,{isNodeAdded:function(){return this._isNodeAdded},select:function(){if(2!==arguments.length)return qi.prototype.select.apply(this,arguments);var t=arguments[1],e=arguments[0].getContext();return null!==this.parentEdge&&e===this.parentEdge&&t===this.hotPixelVertexIndex?null:void(this._isNodeAdded=this.hotPixel.addSnappedNode(e,t))},interfaces_:function(){return[]},getClass:function(){return zi}}),Bi.HotPixelSnapAction=zi,e(Vi.prototype,{processIntersections:function(t,e,n,i){if(t===n&&e===i)return null;var r=t.getCoordinates()[e],s=t.getCoordinates()[e+1],o=n.getCoordinates()[i],a=n.getCoordinates()[i+1];if(this.li.computeIntersection(r,s,o,a),this.li.hasIntersection()&&this.li.isInteriorIntersection()){for(var u=0;u<this.li.getIntersectionNum();u++)this.interiorIntersections.add(this.li.getIntersection(u));t.addIntersections(this.li,e,0),n.addIntersections(this.li,i,1)}},isDone:function(){return!1},getInteriorIntersections:function(){return this.interiorIntersections},interfaces_:function(){return[Ue]},getClass:function(){return Vi}}),e(ki.prototype,{checkCorrectness:function(t){var e=new Fi(De.getNodedSubstrings(t));try{e.checkValid()}catch(t){if(!(t instanceof S))throw t;t.printStackTrace()}},getNodedSubstrings:function(){return De.getNodedSubstrings(this.nodedSegStrings)},snapRound:function(t,e){e=this.findInteriorIntersections(t,e);this.computeIntersectionSnaps(e),this.computeVertexSnaps(t)},findInteriorIntersections:function(t,e){e=new Vi(e);return this.noder.setSegmentIntersector(e),this.noder.computeNodes(t),e.getInteriorIntersections()},computeVertexSnaps:function(){if(R(arguments[0],m))for(var t=arguments[0].iterator();t.hasNext();){var e=t.next();this.computeVertexSnaps(e)}else if(arguments[0]instanceof De)for(var n=arguments[0],i=n.getCoordinates(),r=0;r<i.length;r++){var s=new Gi(i[r],this.scaleFactor,this.li);this.pointSnapper.snap(s,n,r)&&n.addIntersection(i[r],r)}},computeNodes:function(t){this.nodedSegStrings=t,this.noder=new Ve,this.pointSnapper=new Bi(this.noder.getIndex()),this.snapRound(t,this.li)},computeIntersectionSnaps:function(t){for(var e=t.iterator();e.hasNext();){var n=new Gi(e.next(),this.scaleFactor,this.li);this.pointSnapper.snap(n)}},interfaces_:function(){return[Be]},getClass:function(){return ki}}),e(Yi.prototype,{bufferFixedPrecision:function(t){var e=new Ei(new ki(new Vt(1)),t.getScale()),n=new Ai(this.bufParams);n.setWorkingPrecisionModel(t),n.setNoder(e),this.resultGeometry=n.buffer(this.argGeom,this.distance)},bufferReducedPrecision:function(){if(0===arguments.length){for(var t=Yi.MAX_PRECISION_DIGITS;0<=t;t--){try{this.bufferReducedPrecision(t)}catch(t){if(!(t instanceof Ye))throw t;this.saveException=t}if(null!==this.resultGeometry)return null}throw this.saveException}var e;1===arguments.length&&(e=arguments[0],e=new Vt(Yi.precisionScaleFactor(this.argGeom,this.distance,e)),this.bufferFixedPrecision(e))},computeGeometry:function(){if(this.bufferOriginalPrecision(),null!==this.resultGeometry)return null;var t=this.argGeom.getFactory().getPrecisionModel();t.getType()===Vt.FIXED?this.bufferFixedPrecision(t):this.bufferReducedPrecision()},setQuadrantSegments:function(t){this.bufParams.setQuadrantSegments(t)},bufferOriginalPrecision:function(){try{var t=new Ai(this.bufParams);this.resultGeometry=t.buffer(this.argGeom,this.distance)}catch(t){if(!(t instanceof p))throw t;this.saveException=t}},getResultGeometry:function(t){return this.distance=t,this.computeGeometry(),this.resultGeometry},setEndCapStyle:function(t){this.bufParams.setEndCapStyle(t)},interfaces_:function(){return[]},getClass:function(){return Yi}}),Yi.bufferOp=function(){if(2===arguments.length){var t=arguments[1];return new Yi(arguments[0]).getResultGeometry(t)}if(3===arguments.length){if(Number.isInteger(arguments[2])&&arguments[0]instanceof B&&"number"==typeof arguments[1]){var e=arguments[1],n=arguments[2];return(r=new Yi(arguments[0])).setQuadrantSegments(n),r.getResultGeometry(e)}if(arguments[2]instanceof Ci&&arguments[0]instanceof B&&"number"==typeof arguments[1]){var i=arguments[1];return(r=new Yi(arguments[0],arguments[2])).getResultGeometry(i)}}else if(4===arguments.length){var r,n=arguments[1],e=arguments[2],i=arguments[3];return(r=new Yi(arguments[0])).setQuadrantSegments(e),r.setEndCapStyle(i),r.getResultGeometry(n)}},Yi.precisionScaleFactor=function(t,e,n){t=t.getEnvelopeInternal(),e=T.max(Math.abs(t.getMaxX()),Math.abs(t.getMaxY()),Math.abs(t.getMinX()),Math.abs(t.getMinY()))+2*(0<e?e:0),e=n-Math.trunc(Math.log(e)/Math.log(10)+1);return Math.pow(10,e)},Yi.CAP_ROUND=Ci.CAP_ROUND,Yi.CAP_BUTT=Ci.CAP_FLAT,Yi.CAP_FLAT=Ci.CAP_FLAT,Yi.CAP_SQUARE=Ci.CAP_SQUARE,Yi.MAX_PRECISION_DIGITS=12;var uo=Object.freeze({BufferOp:Yi,BufferParameters:Ci});e(Ui.prototype,{filter:function(t){t instanceof Rt&&this.comps.add(t)},interfaces_:function(){return[ht]},getClass:function(){return Ui}}),Ui.getPolygons=function(){if(1===arguments.length)return Ui.getPolygons(arguments[0],new I);if(2===arguments.length){var t=arguments[0],e=arguments[1];return t instanceof Rt?e.add(t):t instanceof ft&&t.apply(new Ui(e)),e}},e(Xi.prototype,{isInsideArea:function(){return this.segIndex===Xi.INSIDE_AREA},getCoordinate:function(){return this.pt},getGeometryComponent:function(){return this.component},getSegmentIndex:function(){return this.segIndex},interfaces_:function(){return[]},getClass:function(){return Xi}}),Xi.INSIDE_AREA=-1,e(Hi.prototype,{filter:function(t){t instanceof wt&&this.pts.add(t)},interfaces_:function(){return[ht]},getClass:function(){return Hi}}),Hi.getPoints=function(){if(1===arguments.length){var t=arguments[0];return t instanceof wt?Zs.singletonList(t):Hi.getPoints(t,new I)}if(2===arguments.length){var e=arguments[0],t=arguments[1];return e instanceof wt?t.add(e):e instanceof ft&&e.apply(new Hi(t)),t}},e(Wi.prototype,{filter:function(t){(t instanceof wt||t instanceof Ct||t instanceof Rt)&&this.locations.add(new Xi(t,0,t.getCoordinate()))},interfaces_:function(){return[ht]},getClass:function(){return Wi}}),Wi.getLocations=function(t){var e=new I;return t.apply(new Wi(e)),e},e(ji.prototype,{computeContainmentDistance:function(){if(0===arguments.length){var t=new Array(2).fill(null);if(this.computeContainmentDistance(0,t),this.minDistance<=this.terminateDistance)return null;this.computeContainmentDistance(1,t)}else if(2===arguments.length){var e=arguments[0],n=arguments[1],i=1-e,r=Ui.getPolygons(this.geom[e]);if(0<r.size()){t=Wi.getLocations(this.geom[i]);if(this.computeContainmentDistance(t,r,n),this.minDistance<=this.terminateDistance)return this.minDistanceLocation[i]=n[0],this.minDistanceLocation[e]=n[1],null}}else if(3===arguments.length)if(arguments[2]instanceof Array&&R(arguments[0],v)&&R(arguments[1],v)){for(var s=arguments[0],o=arguments[1],a=arguments[2],u=0;u<s.size();u++)for(var l=s.get(u),h=0;h<o.size();h++)if(this.computeContainmentDistance(l,o.get(h),a),this.minDistance<=this.terminateDistance)return null}else if(arguments[2]instanceof Array&&arguments[0]instanceof Xi&&arguments[1]instanceof Rt){r=arguments[0],i=arguments[1],e=arguments[2],n=r.getCoordinate();if(L.EXTERIOR!==this.ptLocator.locate(n,i))return e[this.minDistance=0]=r,e[1]=new Xi(i,n),null}},computeMinDistanceLinesPoints:function(t,e,n){for(var i=0;i<t.size();i++)for(var r=t.get(i),s=0;s<e.size();s++){var o=e.get(s);if(this.computeMinDistance(r,o,n),this.minDistance<=this.terminateDistance)return null}},computeFacetDistance:function(){var t=new Array(2).fill(null),e=Rn.getLines(this.geom[0]),n=Rn.getLines(this.geom[1]),i=Hi.getPoints(this.geom[0]),r=Hi.getPoints(this.geom[1]);return this.computeMinDistanceLines(e,n,t),this.updateMinDistance(t,!1),this.minDistance<=this.terminateDistance?null:(t[0]=null,t[1]=null,this.computeMinDistanceLinesPoints(e,r,t),this.updateMinDistance(t,!1),this.minDistance<=this.terminateDistance?null:(t[0]=null,t[1]=null,this.computeMinDistanceLinesPoints(n,i,t),this.updateMinDistance(t,!0),this.minDistance<=this.terminateDistance?null:(t[0]=null,t[1]=null,this.computeMinDistancePoints(i,r,t),void this.updateMinDistance(t,!1))))},nearestLocations:function(){return this.computeMinDistance(),this.minDistanceLocation},updateMinDistance:function(t,e){return null===t[0]?null:void(e?(this.minDistanceLocation[0]=t[1],this.minDistanceLocation[1]=t[0]):(this.minDistanceLocation[0]=t[0],this.minDistanceLocation[1]=t[1]))},nearestPoints:function(){return this.computeMinDistance(),[this.minDistanceLocation[0].getCoordinate(),this.minDistanceLocation[1].getCoordinate()]},computeMinDistance:function(){if(0===arguments.length)return null!==this.minDistanceLocation?null:(this.minDistanceLocation=new Array(2).fill(null),this.computeContainmentDistance(),this.minDistance<=this.terminateDistance?null:void this.computeFacetDistance());if(3===arguments.length)if(arguments[2]instanceof Array&&arguments[0]instanceof Ct&&arguments[1]instanceof wt){var t=arguments[0],e=arguments[1],n=arguments[2];if(t.getEnvelopeInternal().distance(e.getEnvelopeInternal())>this.minDistance)return null;for(var i,r=t.getCoordinates(),s=e.getCoordinate(),o=0;o<r.length-1;o++){if((h=Zt.distancePointLine(s,r[o],r[o+1]))<this.minDistance&&(this.minDistance=h,i=new Jt(r[o],r[o+1]).closestPoint(s),n[0]=new Xi(t,o,i),n[1]=new Xi(e,0,s)),this.minDistance<=this.terminateDistance)return null}}else if(arguments[2]instanceof Array&&arguments[0]instanceof Ct&&arguments[1]instanceof Ct){var a=arguments[0],u=arguments[1],l=arguments[2];if(a.getEnvelopeInternal().distance(u.getEnvelopeInternal())>this.minDistance)return null;for(var h,c,f,r=a.getCoordinates(),g=u.getCoordinates(),o=0;o<r.length-1;o++)for(var d=0;d<g.length-1;d++){if((h=Zt.distanceLineLine(r[o],r[o+1],g[d],g[d+1]))<this.minDistance&&(this.minDistance=h,c=new Jt(r[o],r[o+1]),f=new Jt(g[d],g[d+1]),f=c.closestPoints(f),l[0]=new Xi(a,o,f[0]),l[1]=new Xi(u,d,f[1])),this.minDistance<=this.terminateDistance)return null}}},computeMinDistancePoints:function(t,e,n){for(var i=0;i<t.size();i++)for(var r=t.get(i),s=0;s<e.size();s++){var o=e.get(s),a=r.getCoordinate().distance(o.getCoordinate());if(a<this.minDistance&&(this.minDistance=a,n[0]=new Xi(r,0,r.getCoordinate()),n[1]=new Xi(o,0,o.getCoordinate())),this.minDistance<=this.terminateDistance)return null}},distance:function(){if(null===this.geom[0]||null===this.geom[1])throw new c;return this.geom[0].isEmpty()||this.geom[1].isEmpty()?0:(this.computeMinDistance(),this.minDistance)},computeMinDistanceLines:function(t,e,n){for(var i=0;i<t.size();i++)for(var r=t.get(i),s=0;s<e.size();s++){var o=e.get(s);if(this.computeMinDistance(r,o,n),this.minDistance<=this.terminateDistance)return null}},interfaces_:function(){return[]},getClass:function(){return ji}}),ji.distance=function(t,e){return new ji(t,e).distance()},ji.isWithinDistance=function(t,e,n){return new ji(t,e,n).distance()<=n},ji.nearestPoints=function(t,e){return new ji(t,e).nearestPoints()};var lo=Object.freeze({DistanceOp:ji});e(Ki.prototype,{getCoordinates:function(){if(null===this.coordinates){for(var t=0,e=0,n=new N,i=this.directedEdges.iterator();i.hasNext();){var r=i.next();r.getEdgeDirection()?t++:e++,n.add(r.getEdge().getLine().getCoordinates(),!1,r.getEdgeDirection())}this.coordinates=n.toCoordinateArray(),t<e&&H.reverse(this.coordinates)}return this.coordinates},toLineString:function(){return this.factory.createLineString(this.getCoordinates())},add:function(t){this.directedEdges.add(t)},interfaces_:function(){return[]},getClass:function(){return Ki}}),e(Zi.prototype,{setVisited:function(t){this._isVisited=t},isMarked:function(){return this._isMarked},setData:function(t){this.data=t},getData:function(){return this.data},setMarked:function(t){this._isMarked=t},getContext:function(){return this.data},isVisited:function(){return this._isVisited},setContext:function(t){this.data=t},interfaces_:function(){return[]},getClass:function(){return Zi}}),Zi.getComponentWithVisitedState=function(t,e){for(;t.hasNext();){var n=t.next();if(n.isVisited()===e)return n}return null},Zi.setVisited=function(t,e){for(;t.hasNext();){t.next().setVisited(e)}},Zi.setMarked=function(t,e){for(;t.hasNext();){t.next().setMarked(e)}},a(Ji,Zi),e(Ji.prototype,{isRemoved:function(){return null===this.parentEdge},compareDirection:function(t){return this.quadrant>t.quadrant?1:this.quadrant<t.quadrant?-1:Zt.computeOrientation(t.p0,t.p1,this.p1)},getCoordinate:function(){return this.from.getCoordinate()},print:function(t){var e=this.getClass().getName(),n=e.lastIndexOf("."),n=e.substring(n+1);t.print("  "+n+": "+this.p0+" - "+this.p1+" "+this.quadrant+":"+this.angle)},getDirectionPt:function(){return this.p1},getAngle:function(){return this.angle},compareTo:function(t){return this.compareDirection(t)},getFromNode:function(){return this.from},getSym:function(){return this.sym},setEdge:function(t){this.parentEdge=t},remove:function(){this.sym=null,this.parentEdge=null},getEdge:function(){return this.parentEdge},getQuadrant:function(){return this.quadrant},setSym:function(t){this.sym=t},getToNode:function(){return this.to},getEdgeDirection:function(){return this.edgeDirection},interfaces_:function(){return[i]},getClass:function(){return Ji}}),Ji.toEdges=function(t){for(var e=new I,n=t.iterator();n.hasNext();)e.add(n.next().parentEdge);return e},a(Qi,Ji),e(Qi.prototype,{getNext:function(){return 2!==this.getToNode().getDegree()?null:this.getToNode().getOutEdges().getEdges().get(0)===this.getSym()?this.getToNode().getOutEdges().getEdges().get(1):(l.isTrue(this.getToNode().getOutEdges().getEdges().get(1)===this.getSym()),this.getToNode().getOutEdges().getEdges().get(0))},interfaces_:function(){return[]},getClass:function(){return Qi}}),a($i,Zi),e($i.prototype,{isRemoved:function(){return null===this.dirEdge},setDirectedEdges:function(t,e){this.dirEdge=[t,e],t.setEdge(this),e.setEdge(this),t.setSym(e),e.setSym(t),t.getFromNode().addOutEdge(t),e.getFromNode().addOutEdge(e)},getDirEdge:function(){if(Number.isInteger(arguments[0])){var t=arguments[0];return this.dirEdge[t]}if(arguments[0]instanceof er){t=arguments[0];return this.dirEdge[0].getFromNode()===t?this.dirEdge[0]:this.dirEdge[1].getFromNode()===t?this.dirEdge[1]:null}},remove:function(){this.dirEdge=null},getOppositeNode:function(t){return this.dirEdge[0].getFromNode()===t?this.dirEdge[0].getToNode():this.dirEdge[1].getFromNode()===t?this.dirEdge[1].getToNode():null},interfaces_:function(){return[]},getClass:function(){return $i}}),e(tr.prototype,{getNextEdge:function(t){t=this.getIndex(t);return this.outEdges.get(this.getIndex(t+1))},getCoordinate:function(){var t=this.iterator();return t.hasNext()?t.next().getCoordinate():null},iterator:function(){return this.sortEdges(),this.outEdges.iterator()},sortEdges:function(){this.sorted||(Zs.sort(this.outEdges),this.sorted=!0)},remove:function(t){this.outEdges.remove(t)},getEdges:function(){return this.sortEdges(),this.outEdges},getNextCWEdge:function(t){t=this.getIndex(t);return this.outEdges.get(this.getIndex(t-1))},getIndex:function(){if(arguments[0]instanceof $i){var t=arguments[0];this.sortEdges();for(var e=0;e<this.outEdges.size();e++){if(this.outEdges.get(e).getEdge()===t)return e}return-1}if(arguments[0]instanceof Ji){var n=arguments[0];this.sortEdges();for(e=0;e<this.outEdges.size();e++){if(this.outEdges.get(e)===n)return e}return-1}if(Number.isInteger(arguments[0])){var i=arguments[0]%this.outEdges.size();return i<0&&(i+=this.outEdges.size()),i}},add:function(t){this.outEdges.add(t),this.sorted=!1},getDegree:function(){return this.outEdges.size()},interfaces_:function(){return[]},getClass:function(){return tr}}),a(er,Zi),e(er.prototype,{isRemoved:function(){return null===this.pt},addOutEdge:function(t){this.deStar.add(t)},getCoordinate:function(){return this.pt},getOutEdges:function(){return this.deStar},remove:function(){var t;0===arguments.length?this.pt=null:1===arguments.length&&(t=arguments[0],this.deStar.remove(t))},getIndex:function(t){return this.deStar.getIndex(t)},getDegree:function(){return this.deStar.getDegree()},interfaces_:function(){return[]},getClass:function(){return er}}),er.getEdgesBetween=function(t,e){t=new Q(Ji.toEdges(t.getOutEdges().getEdges())),e=Ji.toEdges(e.getOutEdges().getEdges());return t.retainAll(e),t},a(nr,$i),e(nr.prototype,{getLine:function(){return this.line},interfaces_:function(){return[]},getClass:function(){return nr}}),e(ir.prototype,{find:function(t){return this.nodeMap.get(t)},iterator:function(){return this.nodeMap.values().iterator()},remove:function(t){return this.nodeMap.remove(t)},values:function(){return this.nodeMap.values()},add:function(t){return this.nodeMap.put(t.getCoordinate(),t),t},interfaces_:function(){return[]},getClass:function(){return ir}}),e(rr.prototype,{findNodesOfDegree:function(t){for(var e=new I,n=this.nodeIterator();n.hasNext();){var i=n.next();i.getDegree()===t&&e.add(i)}return e},dirEdgeIterator:function(){return this.dirEdges.iterator()},edgeIterator:function(){return this.edges.iterator()},remove:function(){if(arguments[0]instanceof $i){var t=arguments[0];this.remove(t.getDirEdge(0)),this.remove(t.getDirEdge(1)),this.edges.remove(t),t.remove()}else if(arguments[0]instanceof Ji){var e=arguments[0];null!==(i=e.getSym())&&i.setSym(null),e.getFromNode().remove(e),e.remove(),this.dirEdges.remove(e)}else if(arguments[0]instanceof er){for(var e=arguments[0],n=e.getOutEdges().getEdges().iterator();n.hasNext();){var i,r=n.next();null!==(i=r.getSym())&&this.remove(i),this.dirEdges.remove(r);r=r.getEdge();null!==r&&this.edges.remove(r)}this.nodeMap.remove(e.getCoordinate()),e.remove()}},findNode:function(t){return this.nodeMap.find(t)},getEdges:function(){return this.edges},nodeIterator:function(){return this.nodeMap.iterator()},contains:function(){if(arguments[0]instanceof $i){var t=arguments[0];return this.edges.contains(t)}if(arguments[0]instanceof Ji){t=arguments[0];return this.dirEdges.contains(t)}},add:function(){var t,e;arguments[0]instanceof er?(t=arguments[0],this.nodeMap.add(t)):arguments[0]instanceof $i?(e=arguments[0],this.edges.add(e),this.add(e.getDirEdge(0)),this.add(e.getDirEdge(1))):arguments[0]instanceof Ji&&(e=arguments[0],this.dirEdges.add(e))},getNodes:function(){return this.nodeMap.values()},interfaces_:function(){return[]},getClass:function(){return rr}}),a(sr,rr),e(sr.prototype,{addEdge:function(t){if(t.isEmpty())return null;var e=H.removeRepeatedPoints(t.getCoordinates());if(e.length<=1)return null;var n=e[0],i=e[e.length-1],r=this.getNode(n),n=this.getNode(i),i=new Qi(r,n,e[1],!0),e=new Qi(n,r,e[e.length-2],!1),t=new nr(t);t.setDirectedEdges(i,e),this.add(t)},getNode:function(t){var e=this.findNode(t);return null===e&&(e=new er(t),this.add(e)),e},interfaces_:function(){return[]},getClass:function(){return sr}}),e(or.prototype,{buildEdgeStringsForUnprocessedNodes:function(){for(var t=this.graph.getNodes().iterator();t.hasNext();){var e=t.next();e.isMarked()||(l.isTrue(2===e.getDegree()),this.buildEdgeStringsStartingAt(e),e.setMarked(!0))}},buildEdgeStringsForNonDegree2Nodes:function(){for(var t=this.graph.getNodes().iterator();t.hasNext();){var e=t.next();2!==e.getDegree()&&(this.buildEdgeStringsStartingAt(e),e.setMarked(!0))}},buildEdgeStringsForObviousStartNodes:function(){this.buildEdgeStringsForNonDegree2Nodes()},getMergedLineStrings:function(){return this.merge(),this.mergedLineStrings},buildEdgeStringsStartingAt:function(t){for(var e=t.getOutEdges().iterator();e.hasNext();){var n=e.next();n.getEdge().isMarked()||this.edgeStrings.add(this.buildEdgeStringStartingWith(n))}},merge:function(){if(null!==this.mergedLineStrings)return null;Zi.setMarked(this.graph.nodeIterator(),!1),Zi.setMarked(this.graph.edgeIterator(),!1),this.edgeStrings=new I,this.buildEdgeStringsForObviousStartNodes(),this.buildEdgeStringsForIsolatedLoops(),this.mergedLineStrings=new I;for(var t=this.edgeStrings.iterator();t.hasNext();){var e=t.next();this.mergedLineStrings.add(e.toLineString())}},buildEdgeStringStartingWith:function(t){for(var e=new Ki(this.factory),n=t;e.add(n),n.getEdge().setMarked(!0),null!==(n=n.getNext())&&n!==t;);return e},add:function(){if(arguments[0]instanceof B)arguments[0].apply({interfaces_:function(){return[q]},filter:function(t){t instanceof Ct&&this.add(t)}});else if(R(arguments[0],m)){var t=arguments[0];this.mergedLineStrings=null;for(var e=t.iterator();e.hasNext();){var n=e.next();this.add(n)}}else{arguments[0]instanceof Ct&&(t=arguments[0],null===this.factory&&(this.factory=t.getFactory()),this.graph.addEdge(t))}},buildEdgeStringsForIsolatedLoops:function(){this.buildEdgeStringsForUnprocessedNodes()},interfaces_:function(){return[]},getClass:function(){return or}});var ho=Object.freeze({LineMerger:or}),co=Object.freeze({OverlayOp:kn});a(ar,Ji),e(ar.prototype,{getNext:function(){return this.next},isInRing:function(){return null!==this.edgeRing},setRing:function(t){this.edgeRing=t},setLabel:function(t){this.label=t},getLabel:function(){return this.label},setNext:function(t){this.next=t},getRing:function(){return this.edgeRing},interfaces_:function(){return[]},getClass:function(){return ar}}),a(ur,$i),e(ur.prototype,{getLine:function(){return this.line},interfaces_:function(){return[]},getClass:function(){return ur}}),e(lr.prototype,{isIncluded:function(){return this._isIncluded},getCoordinates:function(){if(null===this.ringPts){for(var t=new N,e=this.deList.iterator();e.hasNext();){var n=e.next(),i=n.getEdge();lr.addEdge(i.getLine().getCoordinates(),n.getEdgeDirection(),t)}this.ringPts=t.toCoordinateArray()}return this.ringPts},isIncludedSet:function(){return this._isIncludedSet},isValid:function(){return this.getCoordinates(),!(this.ringPts.length<=3)&&(this.getRing(),this.ring.isValid())},build:function(t){for(var e=t;this.add(e),e.setRing(this),e=e.getNext(),l.isTrue(null!==e,"found null DE in ring"),l.isTrue(e===t||!e.isInRing(),"found DE already in ring"),e!==t;);},isOuterHole:function(){return!!this._isHole&&!this.hasShell()},getPolygon:function(){var t=null;if(null!==this.holes){t=new Array(this.holes.size()).fill(null);for(var e=0;e<this.holes.size();e++)t[e]=this.holes.get(e)}return this.factory.createPolygon(this.ring,t)},isHole:function(){return this._isHole},isProcessed:function(){return this._isProcessed},addHole:function(){var t;arguments[0]instanceof Pt?(t=arguments[0],null===this.holes&&(this.holes=new I),this.holes.add(t)):arguments[0]instanceof lr&&((t=arguments[0]).setShell(this),t=t.getRing(),null===this.holes&&(this.holes=new I),this.holes.add(t))},setIncluded:function(t){this._isIncluded=t,this._isIncludedSet=!0},getOuterHole:function(){if(this.isHole())return null;for(var t=0;t<this.deList.size();t++){var e=this.deList.get(t).getSym().getRing();if(e.isOuterHole())return e}return null},computeHole:function(){var t=this.getRing();this._isHole=Zt.isCCW(t.getCoordinates())},hasShell:function(){return null!==this.shell},isOuterShell:function(){return null!==this.getOuterHole()},getLineString:function(){return this.getCoordinates(),this.factory.createLineString(this.ringPts)},toString:function(){return Xt.toLineString(new Ft(this.getCoordinates()))},getShell:function(){return this.isHole()?this.shell:this},add:function(t){this.deList.add(t)},getRing:function(){if(null!==this.ring)return this.ring;this.getCoordinates(),this.ringPts.length<3&&A.out.println(this.ringPts);try{this.ring=this.factory.createLinearRing(this.ringPts)}catch(t){if(!(t instanceof S))throw t;A.out.println(this.ringPts)}return this.ring},updateIncluded:function(){if(this.isHole())return null;for(var t=0;t<this.deList.size();t++){var e=this.deList.get(t).getSym().getRing().getShell();if(null!==e&&e.isIncludedSet())return this.setIncluded(!e.isIncluded()),null}},setShell:function(t){this.shell=t},setProcessed:function(t){this._isProcessed=t},interfaces_:function(){return[]},getClass:function(){return lr}}),lr.findDirEdgesInRing=function(t){for(var e=t,n=new I;n.add(e),e=e.getNext(),l.isTrue(null!==e,"found null DE in ring"),l.isTrue(e===t||!e.isInRing(),"found DE already in ring"),e!==t;);return n},lr.addEdge=function(t,e,n){if(e)for(var i=0;i<t.length;i++)n.add(t[i],!1);else for(i=t.length-1;0<=i;i--)n.add(t[i],!1)},lr.findEdgeRingContaining=function(t,e){for(var n=t.getRing(),i=n.getEnvelopeInternal(),r=n.getCoordinateN(0),s=null,o=null,a=e.iterator();a.hasNext();){var u,l=a.next(),h=l.getRing(),c=h.getEnvelopeInternal();!c.equals(i)&&c.contains(i)&&(r=H.ptNotInList(n.getCoordinates(),h.getCoordinates()),u=!1,Zt.isPointInRing(r,h.getCoordinates())&&(u=!0),u&&(null===s||o.contains(c))&&(o=(s=l).getRing().getEnvelopeInternal()))}return s},e(hr.prototype,{compare:function(t,e){return t.getRing().getEnvelope().compareTo(e.getRing().getEnvelope())},interfaces_:function(){return[s]},getClass:function(){return hr}}),lr.EnvelopeComparator=hr,a(cr,rr),e(cr.prototype,{findEdgeRing:function(t){var e=new lr(this.factory);return e.build(t),e},computeDepthParity:function(){if(0===arguments.length)for(;;){return null}},computeNextCWEdges:function(){for(var t=this.nodeIterator();t.hasNext();){var e=t.next();cr.computeNextCWEdges(e)}},addEdge:function(t){if(t.isEmpty())return null;var e=H.removeRepeatedPoints(t.getCoordinates());if(e.length<2)return null;var n=e[0],i=e[e.length-1],r=this.getNode(n),n=this.getNode(i),i=new ar(r,n,e[1],!0),e=new ar(n,r,e[e.length-2],!1),t=new ur(t);t.setDirectedEdges(i,e),this.add(t)},deleteCutEdges:function(){this.computeNextCWEdges(),cr.findLabeledEdgeRings(this.dirEdges);for(var t=new I,e=this.dirEdges.iterator();e.hasNext();){var n,i=e.next();i.isMarked()||(n=i.getSym(),i.getLabel()===n.getLabel()&&(i.setMarked(!0),n.setMarked(!0),i=i.getEdge(),t.add(i.getLine())))}return t},getEdgeRings:function(){this.computeNextCWEdges(),cr.label(this.dirEdges,-1);var t=cr.findLabeledEdgeRings(this.dirEdges);this.convertMaximalToMinimalEdgeRings(t);for(var e=new I,n=this.dirEdges.iterator();n.hasNext();){var i=n.next();i.isMarked()||i.isInRing()||(i=this.findEdgeRing(i),e.add(i))}return e},getNode:function(t){var e=this.findNode(t);return null===e&&(e=new er(t),this.add(e)),e},convertMaximalToMinimalEdgeRings:function(t){for(var e=t.iterator();e.hasNext();){var n=e.next(),i=n.getLabel(),n=cr.findIntersectionNodes(n,i);if(null!==n)for(var r=n.iterator();r.hasNext();){var s=r.next();cr.computeNextCCWEdges(s,i)}}},deleteDangles:function(){for(var t=this.findNodesOfDegree(1),e=new Q,n=new ee,i=t.iterator();i.hasNext();)n.push(i.next());for(;!n.isEmpty();){var r=n.pop();cr.deleteAllEdges(r);for(i=r.getOutEdges().getEdges().iterator();i.hasNext();){var s=i.next();s.setMarked(!0);var o=s.getSym();null!==o&&o.setMarked(!0);o=s.getEdge();e.add(o.getLine());s=s.getToNode();1===cr.getDegreeNonDeleted(s)&&n.push(s)}}return e},interfaces_:function(){return[]},getClass:function(){return cr}}),cr.findLabeledEdgeRings=function(t){for(var e=new I,n=1,i=t.iterator();i.hasNext();){var r=i.next();r.isMarked()||0<=r.getLabel()||(e.add(r),r=lr.findDirEdgesInRing(r),cr.label(r,n),n++)}return e},cr.getDegreeNonDeleted=function(t){for(var e=0,n=t.getOutEdges().getEdges().iterator();n.hasNext();){n.next().isMarked()||e++}return e},cr.deleteAllEdges=function(t){for(var e=t.getOutEdges().getEdges().iterator();e.hasNext();){var n=e.next();n.setMarked(!0);n=n.getSym();null!==n&&n.setMarked(!0)}},cr.label=function(t,e){for(var n=t.iterator();n.hasNext();){n.next().setLabel(e)}},cr.computeNextCWEdges=function(t){for(var e=null,n=null,i=t.getOutEdges().getEdges().iterator();i.hasNext();){var r=i.next();r.isMarked()||(null===e&&(e=r),null!==n&&n.getSym().setNext(r),n=r)}null!==n&&n.getSym().setNext(e)},cr.computeNextCCWEdges=function(t,e){for(var n=null,i=null,r=t.getOutEdges().getEdges(),s=r.size()-1;0<=s;s--){var o=r.get(s),a=o.getSym(),u=null;o.getLabel()===e&&(u=o);o=null;a.getLabel()===e&&(o=a),null===u&&null===o||(null!==o&&(i=o),null!==u&&(null!==i&&(i.setNext(u),i=null),null===n&&(n=u)))}null!==i&&(l.isTrue(null!==n),i.setNext(n))},cr.getDegree=function(t,e){for(var n=0,i=t.getOutEdges().getEdges().iterator();i.hasNext();){i.next().getLabel()===e&&n++}return n},cr.findIntersectionNodes=function(t,e){var n=t,i=null;do{var r=n.getFromNode()}while(1<cr.getDegree(r,e)&&(null===i&&(i=new I),i.add(r)),n=n.getNext(),l.isTrue(null!==n,"found null DE in ring"),l.isTrue(n===t||!n.isInRing(),"found DE already in ring"),n!==t);return i},e(fr.prototype,{getGeometry:function(){return null===this.geomFactory&&(this.geomFactory=new Yt),this.polygonize(),this.extractOnlyPolygonal?this.geomFactory.buildGeometry(this.polyList):this.geomFactory.createGeometryCollection(Yt.toGeometryArray(this.polyList))},getInvalidRingLines:function(){return this.polygonize(),this.invalidRingLines},findValidRings:function(t,e,n){for(var i=t.iterator();i.hasNext();){var r=i.next();r.isValid()?e.add(r):n.add(r.getLineString())}},polygonize:function(){if(null!==this.polyList)return null;if(this.polyList=new I,null===this.graph)return null;this.dangles=this.graph.deleteDangles(),this.cutEdges=this.graph.deleteCutEdges();var t=this.graph.getEdgeRings(),e=new I;this.invalidRingLines=new I,this.isCheckingRingsValid?this.findValidRings(t,e,this.invalidRingLines):e=t,this.findShellsAndHoles(e),fr.assignHolesToShells(this.holeList,this.shellList),Zs.sort(this.shellList,new lr.EnvelopeComparator);e=!0;this.extractOnlyPolygonal&&(fr.findDisjointShells(this.shellList),e=!1),this.polyList=fr.extractPolygons(this.shellList,e)},getDangles:function(){return this.polygonize(),this.dangles},getCutEdges:function(){return this.polygonize(),this.cutEdges},getPolygons:function(){return this.polygonize(),this.polyList},add:function(){var t;if(R(arguments[0],m))for(var e=arguments[0].iterator();e.hasNext();){var n=e.next();this.add(n)}else arguments[0]instanceof Ct?(t=arguments[0],this.geomFactory=t.getFactory(),null===this.graph&&(this.graph=new cr(this.geomFactory)),this.graph.addEdge(t)):arguments[0]instanceof B&&arguments[0].apply(this.lineStringAdder)},setCheckRingsValid:function(t){this.isCheckingRingsValid=t},findShellsAndHoles:function(t){this.holeList=new I,this.shellList=new I;for(var e=t.iterator();e.hasNext();){var n=e.next();n.computeHole(),(n.isHole()?this.holeList:this.shellList).add(n)}},interfaces_:function(){return[]},getClass:function(){return fr}}),fr.findOuterShells=function(t){for(var e=t.iterator();e.hasNext();){var n=e.next(),i=n.getOuterHole();null===i||i.isProcessed()||(n.setIncluded(!0),i.setProcessed(!0))}},fr.extractPolygons=function(t,e){for(var n=new I,i=t.iterator();i.hasNext();){var r=i.next();(e||r.isIncluded())&&n.add(r.getPolygon())}return n},fr.assignHolesToShells=function(t,e){for(var n=t.iterator();n.hasNext();){var i=n.next();fr.assignHoleToShell(i,e)}},fr.assignHoleToShell=function(t,e){e=lr.findEdgeRingContaining(t,e);null!==e&&e.addHole(t)},fr.findDisjointShells=function(t){fr.findOuterShells(t);var e=null;do{e=!1;for(var n=t.iterator();n.hasNext();){var i=n.next();i.isIncludedSet()||(i.updateIncluded(),i.isIncludedSet()||(e=!0))}}while(e)},e(gr.prototype,{filter:function(t){t instanceof Ct&&this.p.add(t)},interfaces_:function(){return[q]},getClass:function(){return gr}}),fr.LineStringAdder=gr;var fo=Object.freeze({Polygonizer:fr});e(dr.prototype,{createEdgeEndForNext:function(t,e,n,i){var r=n.segmentIndex+1;if(r>=t.getNumPoints()&&null===i)return null;r=t.getCoordinate(r);null!==i&&i.segmentIndex===n.segmentIndex&&(r=i.coord);t=new sn(t,n.coord,r,new Je(t.getLabel()));e.add(t)},createEdgeEndForPrev:function(t,e,n,i){var r=n.segmentIndex;if(0===n.dist){if(0===r)return null;r--}var s=t.getCoordinate(r);null!==i&&i.segmentIndex>=r&&(s=i.coord);i=new Je(t.getLabel());i.flip();i=new sn(t,n.coord,s,i);e.add(i)},computeEdgeEnds:function(){if(1===arguments.length){for(var t=arguments[0],e=new I,n=t;n.hasNext();){var i=n.next();this.computeEdgeEnds(i,e)}return e}if(2===arguments.length){var r=arguments[0],s=arguments[1],t=r.getEdgeIntersectionList();t.addEndpoints();var o,a=t.iterator(),u=null;if(!a.hasNext())return null;for(var l=a.next();o=u,u=l,l=null,a.hasNext()&&(l=a.next()),null!==u&&(this.createEdgeEndForPrev(r,s,u,o),this.createEdgeEndForNext(r,s,u,l)),null!==u;);}},interfaces_:function(){return[]},getClass:function(){return dr}}),a(pr,sn),e(pr.prototype,{insert:function(t){this.edgeEnds.add(t)},print:function(t){t.println("EdgeEndBundle--\x3e Label: "+this.label);for(var e=this.iterator();e.hasNext();){e.next().print(t),t.println()}},iterator:function(){return this.edgeEnds.iterator()},getEdgeEnds:function(){return this.edgeEnds},computeLabelOn:function(t,e){for(var n=0,i=!1,r=this.iterator();r.hasNext();){(s=r.next().getLabel().getLocation(t))===L.BOUNDARY&&n++,s===L.INTERIOR&&(i=!0)}var s=i?L.INTERIOR:L.NONE;0<n&&(s=qn.determineBoundary(e,n)),this.label.setLocation(t,s)},computeLabelSide:function(t,e){for(var n=this.iterator();n.hasNext();){var i=n.next();if(i.getLabel().isArea()){i=i.getLabel().getLocation(t,e);if(i===L.INTERIOR)return this.label.setLocation(t,e,L.INTERIOR),null;i===L.EXTERIOR&&this.label.setLocation(t,e,L.EXTERIOR)}}},getLabel:function(){return this.label},computeLabelSides:function(t){this.computeLabelSide(t,Ke.LEFT),this.computeLabelSide(t,Ke.RIGHT)},updateIM:function(t){Gn.updateIM(this.label,t)},computeLabel:function(t){for(var e=!1,n=this.iterator();n.hasNext();){n.next().getLabel().isArea()&&(e=!0)}this.label=e?new Je(L.NONE,L.NONE,L.NONE):new Je(L.NONE);for(var i=0;i<2;i++)this.computeLabelOn(i,t),e&&this.computeLabelSides(i)},interfaces_:function(){return[]},getClass:function(){return pr}}),a(mr,dn),e(mr.prototype,{updateIM:function(t){for(var e=this.iterator();e.hasNext();){e.next().updateIM(t)}},insert:function(t){var e=this.edgeMap.get(t);null===e?(e=new pr(t),this.insertEdgeEnd(t,e)):e.insert(t)},interfaces_:function(){return[]},getClass:function(){return mr}}),a(yr,nn),e(yr.prototype,{updateIMFromEdges:function(t){this.edges.updateIM(t)},computeIM:function(t){t.setAtLeastIfValid(this.label.getLocation(0),this.label.getLocation(1),0)},interfaces_:function(){return[]},getClass:function(){return yr}}),a(vr,an),e(vr.prototype,{createNode:function(t){return new yr(t,new mr)},interfaces_:function(){return[]},getClass:function(){return vr}}),e(xr.prototype,{insertEdgeEnds:function(t){for(var e=t.iterator();e.hasNext();){var n=e.next();this.nodes.add(n)}},computeProperIntersectionIM:function(t,e){var n=this.arg[0].getGeometry().getDimension(),i=this.arg[1].getGeometry().getDimension(),r=t.hasProperIntersection(),t=t.hasProperInteriorIntersection();2===n&&2===i?r&&e.setAtLeast("212101212"):2===n&&1===i?(r&&e.setAtLeast("FFF0FFFF2"),t&&e.setAtLeast("1FFFFF1FF")):1===n&&2===i?(r&&e.setAtLeast("F0FFFFFF2"),t&&e.setAtLeast("1F1FFFFFF")):1===n&&1===i&&t&&e.setAtLeast("0FFFFFFFF")},labelIsolatedEdges:function(t,e){for(var n=this.arg[t].getEdgeIterator();n.hasNext();){var i=n.next();i.isIsolated()&&(this.labelIsolatedEdge(i,e,this.arg[e].getGeometry()),this.isolatedEdges.add(i))}},labelIsolatedEdge:function(t,e,n){0<n.getDimension()?(n=this.ptLocator.locate(t.getCoordinate(),n),t.getLabel().setAllLocations(e,n)):t.getLabel().setAllLocations(e,L.EXTERIOR)},computeIM:function(){var t=new Qt;if(t.set(L.EXTERIOR,L.EXTERIOR,2),!this.arg[0].getGeometry().getEnvelopeInternal().intersects(this.arg[1].getGeometry().getEnvelopeInternal()))return this.computeDisjointIM(t),t;this.arg[0].computeSelfNodes(this.li,!1),this.arg[1].computeSelfNodes(this.li,!1);var e=this.arg[0].computeEdgeIntersections(this.arg[1],this.li,!1);this.computeIntersectionNodes(0),this.computeIntersectionNodes(1),this.copyNodesAndLabels(0),this.copyNodesAndLabels(1),this.labelIsolatedNodes(),this.computeProperIntersectionIM(e,t);var n=new dr,e=n.computeEdgeEnds(this.arg[0].getEdgeIterator());this.insertEdgeEnds(e);n=n.computeEdgeEnds(this.arg[1].getEdgeIterator());return this.insertEdgeEnds(n),this.labelNodeEdges(),this.labelIsolatedEdges(0,1),this.labelIsolatedEdges(1,0),this.updateIM(t),t},labelNodeEdges:function(){for(var t=this.nodes.iterator();t.hasNext();){t.next().getEdges().computeLabelling(this.arg)}},copyNodesAndLabels:function(t){for(var e=this.arg[t].getNodeIterator();e.hasNext();){var n=e.next();this.nodes.addNode(n.getCoordinate()).setLabel(t,n.getLabel().getLocation(t))}},labelIntersectionNodes:function(t){for(var e=this.arg[t].getEdgeIterator();e.hasNext();)for(var n=e.next(),i=n.getLabel().getLocation(t),r=n.getEdgeIntersectionList().iterator();r.hasNext();){var s=r.next(),s=this.nodes.find(s.coord);s.getLabel().isNull(t)&&(i===L.BOUNDARY?s.setLabelBoundary(t):s.setLabel(t,L.INTERIOR))}},labelIsolatedNode:function(t,e){var n=this.ptLocator.locate(t.getCoordinate(),this.arg[e].getGeometry());t.getLabel().setAllLocations(e,n)},computeIntersectionNodes:function(t){for(var e=this.arg[t].getEdgeIterator();e.hasNext();)for(var n=e.next(),i=n.getLabel().getLocation(t),r=n.getEdgeIntersectionList().iterator();r.hasNext();){var s=r.next(),s=this.nodes.addNode(s.coord);i===L.BOUNDARY?s.setLabelBoundary(t):s.getLabel().isNull(t)&&s.setLabel(t,L.INTERIOR)}},labelIsolatedNodes:function(){for(var t=this.nodes.iterator();t.hasNext();){var e=t.next(),n=e.getLabel();l.isTrue(0<n.getGeometryCount(),"node with empty label found"),e.isIsolated()&&(n.isNull(0)?this.labelIsolatedNode(e,0):this.labelIsolatedNode(e,1))}},updateIM:function(t){for(var e=this.isolatedEdges.iterator();e.hasNext();){e.next().updateIM(t)}for(var n=this.nodes.iterator();n.hasNext();){var i=n.next();i.updateIM(t),i.updateIMFromEdges(t)}},computeDisjointIM:function(t){var e=this.arg[0].getGeometry();e.isEmpty()||(t.set(L.INTERIOR,L.EXTERIOR,e.getDimension()),t.set(L.BOUNDARY,L.EXTERIOR,e.getBoundaryDimension()));e=this.arg[1].getGeometry();e.isEmpty()||(t.set(L.EXTERIOR,L.INTERIOR,e.getDimension()),t.set(L.EXTERIOR,L.BOUNDARY,e.getBoundaryDimension()))},interfaces_:function(){return[]},getClass:function(){return xr}}),e(Er.prototype,{isContainedInBoundary:function(t){if(t instanceof Rt)return!1;if(t instanceof wt)return this.isPointContainedInBoundary(t);if(t instanceof Ct)return this.isLineStringContainedInBoundary(t);for(var e=0;e<t.getNumGeometries();e++){var n=t.getGeometryN(e);if(!this.isContainedInBoundary(n))return!1}return!0},isLineSegmentContainedInBoundary:function(t,e){if(t.equals(e))return this.isPointContainedInBoundary(t);if(t.x===e.x){if(t.x===this.rectEnv.getMinX()||t.x===this.rectEnv.getMaxX())return!0}else if(t.y===e.y&&(t.y===this.rectEnv.getMinY()||t.y===this.rectEnv.getMaxY()))return!0;return!1},isLineStringContainedInBoundary:function(t){for(var e=t.getCoordinateSequence(),n=new d,i=new d,r=0;r<e.size()-1;r++)if(e.getCoordinate(r,n),e.getCoordinate(r+1,i),!this.isLineSegmentContainedInBoundary(n,i))return!1;return!0},isPointContainedInBoundary:function(){if(arguments[0]instanceof wt){var t=arguments[0];return this.isPointContainedInBoundary(t.getCoordinate())}if(arguments[0]instanceof d){t=arguments[0];return t.x===this.rectEnv.getMinX()||t.x===this.rectEnv.getMaxX()||t.y===this.rectEnv.getMinY()||t.y===this.rectEnv.getMaxY()}},contains:function(t){return!!this.rectEnv.contains(t.getEnvelopeInternal())&&!this.isContainedInBoundary(t)},interfaces_:function(){return[]},getClass:function(){return Er}}),Er.contains=function(t,e){return new Er(t).contains(e)},e(Ir.prototype,{intersects:function(t,e){var n=new C(t,e);if(!this.rectEnv.intersects(n))return!1;if(this.rectEnv.intersects(t))return!0;if(this.rectEnv.intersects(e))return!0;0<t.compareTo(e)&&(i=t,t=e,e=i);var i=!1;return e.y>t.y&&(i=!0),i?this.li.computeIntersection(t,e,this.diagDown0,this.diagDown1):this.li.computeIntersection(t,e,this.diagUp0,this.diagUp1),!!this.li.hasIntersection()},interfaces_:function(){return[]},getClass:function(){return Ir}}),e(Nr.prototype,{applyTo:function(t){for(var e=0;e<t.getNumGeometries()&&!this._isDone;e++){var n=t.getGeometryN(e);if(n instanceof ft)this.applyTo(n);else if(this.visit(n),this.isDone())return this._isDone=!0,null}},interfaces_:function(){return[]},getClass:function(){return Nr}}),e(Cr.prototype,{intersects:function(t){if(!this.rectEnv.intersects(t.getEnvelopeInternal()))return!1;var e=new Sr(this.rectEnv);if(e.applyTo(t),e.intersects())return!0;e=new wr(this.rectangle);if(e.applyTo(t),e.containsPoint())return!0;e=new Lr(this.rectangle);return e.applyTo(t),!!e.intersects()},interfaces_:function(){return[]},getClass:function(){return Cr}}),Cr.intersects=function(t,e){return new Cr(t).intersects(e)},a(Sr,Nr),e(Sr.prototype,{isDone:function(){return!0===this._intersects},visit:function(t){t=t.getEnvelopeInternal();return this.rectEnv.intersects(t)?this.rectEnv.contains(t)||t.getMinX()>=this.rectEnv.getMinX()&&t.getMaxX()<=this.rectEnv.getMaxX()||t.getMinY()>=this.rectEnv.getMinY()&&t.getMaxY()<=this.rectEnv.getMaxY()?(this._intersects=!0,null):void 0:null},intersects:function(){return this._intersects},interfaces_:function(){return[]},getClass:function(){return Sr}}),a(wr,Nr),e(wr.prototype,{isDone:function(){return!0===this._containsPoint},visit:function(t){if(!(t instanceof Rt))return null;var e=t.getEnvelopeInternal();if(!this.rectEnv.intersects(e))return null;for(var n=new d,i=0;i<4;i++)if(this.rectSeq.getCoordinate(i,n),e.contains(n)&&gn.containsPointInPolygon(n,t))return this._containsPoint=!0,null},containsPoint:function(){return this._containsPoint},interfaces_:function(){return[]},getClass:function(){return wr}}),a(Lr,Nr),e(Lr.prototype,{intersects:function(){return this.hasIntersection},isDone:function(){return!0===this.hasIntersection},visit:function(t){var e=t.getEnvelopeInternal();if(!this.rectEnv.intersects(e))return null;t=Rn.getLines(t);this.checkIntersectionWithLineStrings(t)},checkIntersectionWithLineStrings:function(t){for(var e=t.iterator();e.hasNext();){var n=e.next();if(this.checkIntersectionWithSegments(n),this.hasIntersection)return null}},checkIntersectionWithSegments:function(t){for(var e=t.getCoordinateSequence(),n=1;n<e.size();n++)if(e.getCoordinate(n-1,this.p0),e.getCoordinate(n,this.p1),this.rectIntersector.intersects(this.p0,this.p1))return this.hasIntersection=!0,null},interfaces_:function(){return[]},getClass:function(){return Lr}}),a(Rr,Bn),e(Rr.prototype,{getIntersectionMatrix:function(){return this._relate.computeIM()},interfaces_:function(){return[]},getClass:function(){return Rr}}),Rr.covers=function(t,e){return!!t.getEnvelopeInternal().covers(e.getEnvelopeInternal())&&(!!t.isRectangle()||Rr.relate(t,e).isCovers())},Rr.intersects=function(t,e){return!!t.getEnvelopeInternal().intersects(e.getEnvelopeInternal())&&(t.isRectangle()?Cr.intersects(t,e):e.isRectangle()?Cr.intersects(e,t):Rr.relate(t,e).isIntersects())},Rr.touches=function(t,e){return!!t.getEnvelopeInternal().intersects(e.getEnvelopeInternal())&&Rr.relate(t,e).isTouches(t.getDimension(),e.getDimension())},Rr.within=function(t,e){return e.contains(t)},Rr.coveredBy=function(t,e){return Rr.covers(e,t)},Rr.relate=function(){if(2===arguments.length)return new Rr(arguments[0],arguments[1]).getIntersectionMatrix();if(3===arguments.length){if("string"==typeof arguments[2]&&arguments[0]instanceof B&&arguments[1]instanceof B){var t=arguments[2];return Rr.relateWithCheck(arguments[0],arguments[1]).matches(t)}if(R(arguments[2],V)&&arguments[0]instanceof B&&arguments[1]instanceof B)return new Rr(arguments[0],arguments[1],arguments[2]).getIntersectionMatrix()}},Rr.overlaps=function(t,e){return!!t.getEnvelopeInternal().intersects(e.getEnvelopeInternal())&&Rr.relate(t,e).isOverlaps(t.getDimension(),e.getDimension())},Rr.disjoint=function(t,e){return!t.intersects(e)},Rr.relateWithCheck=function(t,e){return t.checkNotGeometryCollection(t),t.checkNotGeometryCollection(e),Rr.relate(t,e)},Rr.crosses=function(t,e){return!!t.getEnvelopeInternal().intersects(e.getEnvelopeInternal())&&Rr.relate(t,e).isCrosses(t.getDimension(),e.getDimension())},Rr.contains=function(t,e){return!!t.getEnvelopeInternal().contains(e.getEnvelopeInternal())&&(t.isRectangle()?Er.contains(t,e):Rr.relate(t,e).isContains())};Ys=Object.freeze({RelateOp:Rr});e(Tr.prototype,{extractElements:function(t,e){if(null===t)return null;for(var n=0;n<t.getNumGeometries();n++){var i=t.getGeometryN(n);this.skipEmpty&&i.isEmpty()||e.add(i)}},combine:function(){for(var t=new I,e=this.inputGeoms.iterator();e.hasNext();){var n=e.next();this.extractElements(n,t)}return 0===t.size()?null!==this.geomFactory?this.geomFactory.createGeometryCollection(null):null:this.geomFactory.buildGeometry(t)},interfaces_:function(){return[]},getClass:function(){return Tr}}),Tr.combine=function(){if(1===arguments.length)return new Tr(arguments[0]).combine();if(2===arguments.length){var t=arguments[0],e=arguments[1];return new Tr(Tr.createList(t,e)).combine()}if(3===arguments.length){var n=arguments[0],t=arguments[1],e=arguments[2];return new Tr(Tr.createList(n,t,e)).combine()}},Tr.extractFactory=function(t){return t.isEmpty()?null:t.iterator().next().getFactory()},Tr.createList=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];return(n=new I).add(t),n.add(e),n}if(3===arguments.length){var n,i=arguments[0],t=arguments[1],e=arguments[2];return(n=new I).add(i),n.add(t),n.add(e),n}},e(Pr.prototype,{union:function(){for(var t=new de,e=new at,n=0;n<this.pointGeom.getNumGeometries();n++){var i=this.pointGeom.getGeometryN(n).getCoordinate();t.locate(i,this.otherGeom)===L.EXTERIOR&&e.add(i)}if(0===e.size())return this.otherGeom;var r=H.toCoordinateArray(e),s=1===r.length?this.geomFact.createPoint(r[0]):this.geomFact.createMultiPointFromCoords(r);return Tr.combine(s,this.otherGeom)},interfaces_:function(){return[]},getClass:function(){return Pr}}),Pr.union=function(t,e){return new Pr(t,e).union()},e(br.prototype,{filter:function(t){-1!==this.sortIndex&&t.getSortIndex()!==this.sortIndex||this.comps.add(t)},interfaces_:function(){return[ht]},getClass:function(){return br}}),br.extract=function(){if(2===arguments.length)return br.extract(arguments[0],arguments[1],new I);if(3===arguments.length){var t=arguments[0],e=arguments[1],n=arguments[2];return t.getSortIndex()===e?n.add(t):t instanceof ft&&t.apply(new br(e,n)),n}},e(Or.prototype,{reduceToGeometries:function(t){for(var e=new I,n=t.iterator();n.hasNext();){var i=n.next(),r=null;R(i,v)?r=this.unionTree(i):i instanceof B&&(r=i),e.add(r)}return e},extractByEnvelope:function(t,e,n){for(var i=new I,r=0;r<e.getNumGeometries();r++){var s=e.getGeometryN(r);(s.getEnvelopeInternal().intersects(t)?i:n).add(s)}return this.geomFactory.buildGeometry(i)},unionOptimized:function(t,e){var n=t.getEnvelopeInternal(),i=e.getEnvelopeInternal();if(!n.intersects(i))return Tr.combine(t,e);if(t.getNumGeometries()<=1&&e.getNumGeometries()<=1)return this.unionActual(t,e);i=n.intersection(i);return this.unionUsingEnvelopeIntersection(t,e,i)},union:function(){if(null===this.inputPolys)throw new IllegalStateException("union() method cannot be called twice");if(this.inputPolys.isEmpty())return null;this.geomFactory=this.inputPolys.iterator().next().getFactory();for(var t=new Re(Or.STRTREE_NODE_CAPACITY),e=this.inputPolys.iterator();e.hasNext();){var n=e.next();t.insert(n.getEnvelopeInternal(),n)}this.inputPolys=null;var i=t.itemsTree();return this.unionTree(i)},binaryUnion:function(){if(1===arguments.length){var t=arguments[0];return this.binaryUnion(t,0,t.size())}if(3===arguments.length){var e=arguments[0],n=arguments[1],i=arguments[2];if(i-n<=1){var r=Or.getGeometry(e,n);return this.unionSafe(r,null)}if(i-n==2)return this.unionSafe(Or.getGeometry(e,n),Or.getGeometry(e,n+1));t=Math.trunc((i+n)/2),r=this.binaryUnion(e,n,t),i=this.binaryUnion(e,t,i);return this.unionSafe(r,i)}},repeatedUnion:function(t){for(var e=null,n=t.iterator();n.hasNext();)var i=n.next(),e=null===e?i.copy():e.union(i);return e},unionSafe:function(t,e){return null===t&&null===e?null:null===t?e.copy():null===e?t.copy():this.unionOptimized(t,e)},unionActual:function(t,e){return Or.restrictToPolygons(t.union(e))},unionTree:function(t){t=this.reduceToGeometries(t);return this.binaryUnion(t)},unionUsingEnvelopeIntersection:function(t,e,n){var i=new I,t=this.extractByEnvelope(n,t,i),e=this.extractByEnvelope(n,e,i),e=this.unionActual(t,e);return i.add(e),Tr.combine(i)},bufferUnion:function(){if(1===arguments.length){var t=arguments[0];return t.get(0).getFactory().buildGeometry(t).buffer(0)}if(2===arguments.length){var e=arguments[0],t=arguments[1];return e.getFactory().createGeometryCollection([e,t]).buffer(0)}},interfaces_:function(){return[]},getClass:function(){return Or}}),Or.restrictToPolygons=function(t){if(R(t,Lt))return t;var e=Ui.getPolygons(t);return 1===e.size()?e.get(0):t.getFactory().createMultiPolygon(Yt.toPolygonArray(e))},Or.getGeometry=function(t,e){return e>=t.size()?null:t.get(e)},Or.union=function(t){return new Or(t).union()},Or.STRTREE_NODE_CAPACITY=4,e(_r.prototype,{unionNoOpt:function(t){var e=this.geomFact.createPoint();return Un.overlayOp(t,e,kn.UNION)},unionWithNull:function(t,e){return null===t&&null===e?null:null===e?t:null===t?e:t.union(e)},extract:function(){var t;if(R(arguments[0],m))for(var e=arguments[0].iterator();e.hasNext();){var n=e.next();this.extract(n)}else arguments[0]instanceof B&&(t=arguments[0],null===this.geomFact&&(this.geomFact=t.getFactory()),br.extract(t,B.SORTINDEX_POLYGON,this.polygons),br.extract(t,B.SORTINDEX_LINESTRING,this.lines),br.extract(t,B.SORTINDEX_POINT,this.points))},union:function(){if(null===this.geomFact)return null;var t=null;0<this.points.size()&&(e=this.geomFact.buildGeometry(this.points),t=this.unionNoOpt(e));var e=null;0<this.lines.size()&&(n=this.geomFact.buildGeometry(this.lines),e=this.unionNoOpt(n));var n=null;0<this.polygons.size()&&(n=Or.union(this.polygons));var n=this.unionWithNull(e,n),i=null;return i=null===t?n:null===n?t:Pr.union(t,n),null===i?this.geomFact.createGeometryCollection():i},interfaces_:function(){return[]},getClass:function(){return _r}}),_r.union=function(){return 1===arguments.length?R(arguments[0],m)||arguments[0]instanceof B?new _r(arguments[0]).union():void 0:2===arguments.length?new _r(arguments[0],arguments[1]).union():void 0};to=Object.freeze({UnaryUnionOp:_r});e(Mr.prototype,{visitInteriorRing:function(t,e){var n=t.getCoordinates(),t=n[0],n=Mr.findDifferentPoint(n,t),n=e.findEdgeInSameDirection(t,n),e=e.findEdgeEnd(n),n=null;e.getLabel().getLocation(0,Ke.RIGHT)===L.INTERIOR?n=e:e.getSym().getLabel().getLocation(0,Ke.RIGHT)===L.INTERIOR&&(n=e.getSym()),l.isTrue(null!==n,"unable to find dirEdge with Interior on RHS"),this.visitLinkedDirectedEdges(n)},visitShellInteriors:function(t,e){if(t instanceof Rt&&(r=t,this.visitInteriorRing(r.getExteriorRing(),e)),t instanceof bt)for(var n=t,i=0;i<n.getNumGeometries();i++){var r=n.getGeometryN(i);this.visitInteriorRing(r.getExteriorRing(),e)}},getCoordinate:function(){return this.disconnectedRingcoord},setInteriorEdgesInResult:function(t){for(var e=t.getEdgeEnds().iterator();e.hasNext();){var n=e.next();n.getLabel().getLocation(0,Ke.RIGHT)===L.INTERIOR&&n.setInResult(!0)}},visitLinkedDirectedEdges:function(t){for(var e=t,n=t;l.isTrue(null!==n,"found null Directed Edge"),n.setVisited(!0),(n=n.getNext())!==e;);},buildEdgeRings:function(t){for(var e=new I,n=t.iterator();n.hasNext();){var i=n.next();i.isInResult()&&null===i.getEdgeRing()&&((i=new tn(i,this.geometryFactory)).linkDirectedEdgesForMinimalEdgeRings(),i=i.buildMinimalRings(),e.addAll(i))}return e},hasUnvisitedShellEdge:function(t){for(var e=0;e<t.size();e++){var n=t.get(e);if(!n.isHole()){var i=n.getEdges(),r=i.get(0);if(r.getLabel().getLocation(0,Ke.RIGHT)===L.INTERIOR)for(var s=0;s<i.size();s++)if(!(r=i.get(s)).isVisited())return this.disconnectedRingcoord=r.getCoordinate(),!0}}return!1},isInteriorsConnected:function(){var t=new I;this.geomGraph.computeSplitEdges(t);var e=new un(new mn);e.addEdges(t),this.setInteriorEdgesInResult(e),e.linkResultDirectedEdges();t=this.buildEdgeRings(e.getEdgeEnds());return this.visitShellInteriors(this.geomGraph.getGeometry(),e),!this.hasUnvisitedShellEdge(t)},interfaces_:function(){return[]},getClass:function(){return Mr}}),Mr.findDifferentPoint=function(t,e){for(var n=0;n<t.length;n++)if(!t[n].equals(e))return t[n];return null},e(Dr.prototype,{hasChildren:function(){for(var t=0;t<2;t++)if(null!==this.subnode[t])return!0;return!1},isPrunable:function(){return!(this.hasChildren()||this.hasItems())},addAllItems:function(t){t.addAll(this.items);for(var e=0;e<2;e++)null!==this.subnode[e]&&this.subnode[e].addAllItems(t);return t},size:function(){for(var t=0,e=0;e<2;e++)null!==this.subnode[e]&&(t+=this.subnode[e].size());return t+this.items.size()},addAllItemsFromOverlapping:function(t,e){return null===t||this.isSearchMatch(t)?(e.addAll(this.items),null!==this.subnode[0]&&this.subnode[0].addAllItemsFromOverlapping(t,e),void(null!==this.subnode[1]&&this.subnode[1].addAllItemsFromOverlapping(t,e))):null},hasItems:function(){return!this.items.isEmpty()},remove:function(t,e){if(!this.isSearchMatch(t))return!1;for(var n=!1,i=0;i<2;i++)if(null!==this.subnode[i]&&(n=this.subnode[i].remove(t,e))){this.subnode[i].isPrunable()&&(this.subnode[i]=null);break}return n=n||this.items.remove(e)},getItems:function(){return this.items},depth:function(){for(var t,e=0,n=0;n<2;n++){null===this.subnode[n]||e<(t=this.subnode[n].depth())&&(e=t)}return e+1},nodeSize:function(){for(var t=0,e=0;e<2;e++)null!==this.subnode[e]&&(t+=this.subnode[e].nodeSize());return t+1},add:function(t){this.items.add(t)},interfaces_:function(){return[]},getClass:function(){return Dr}}),Dr.getSubnodeIndex=function(t,e){var n=-1;return t.min>=e&&(n=1),t.max<=e&&(n=0),n},e(Ar.prototype,{expandToInclude:function(t){t.max>this.max&&(this.max=t.max),t.min<this.min&&(this.min=t.min)},getWidth:function(){return this.max-this.min},overlaps:function(){if(1===arguments.length){var t=arguments[0];return this.overlaps(t.min,t.max)}if(2===arguments.length){var e=arguments[0],t=arguments[1];return!(this.min>t||this.max<e)}},getMin:function(){return this.min},toString:function(){return"["+this.min+", "+this.max+"]"},contains:function(){if(1===arguments.length){if(arguments[0]instanceof Ar){var t=arguments[0];return this.contains(t.min,t.max)}if("number"==typeof arguments[0]){var e=arguments[0];return e>=this.min&&e<=this.max}}else if(2===arguments.length){e=arguments[1];return arguments[0]>=this.min&&e<=this.max}},init:function(t,e){this.min=t,(this.max=e)<t&&(this.min=e,this.max=t)},getMax:function(){return this.max},interfaces_:function(){return[]},getClass:function(){return Ar}}),e(Fr.prototype,{getInterval:function(){return this.interval},getLevel:function(){return this.level},computeKey:function(t){for(this.level=Fr.computeLevel(t),this.interval=new Ar,this.computeInterval(this.level,t);!this.interval.contains(t);)this.level+=1,this.computeInterval(this.level,t)},computeInterval:function(t,e){t=ui.powerOf2(t);this.pt=Math.floor(e.getMin()/t)*t,this.interval.init(this.pt,this.pt+t)},getPoint:function(){return this.pt},interfaces_:function(){return[]},getClass:function(){return Fr}}),Fr.computeLevel=function(t){t=t.getWidth();return ui.exponent(t)+1},a(Gr,Dr),e(Gr.prototype,{getInterval:function(){return this.interval},find:function(t){var e=Dr.getSubnodeIndex(t,this.centre);return-1===e||null===this.subnode[e]?this:this.subnode[e].find(t)},insert:function(t){l.isTrue(null===this.interval||this.interval.contains(t.interval));var e,n=Dr.getSubnodeIndex(t.interval,this.centre);t.level===this.level-1?this.subnode[n]=t:((e=this.createSubnode(n)).insert(t),this.subnode[n]=e)},isSearchMatch:function(t){return t.overlaps(this.interval)},getSubnode:function(t){return null===this.subnode[t]&&(this.subnode[t]=this.createSubnode(t)),this.subnode[t]},getNode:function(t){var e=Dr.getSubnodeIndex(t,this.centre);return-1===e?this:this.getSubnode(e).getNode(t)},createSubnode:function(t){var e=0,n=0;switch(t){case 0:e=this.interval.getMin(),n=this.centre;break;case 1:e=this.centre,n=this.interval.getMax()}return new Gr(new Ar(e,n),this.level-1)},interfaces_:function(){return[]},getClass:function(){return Gr}}),Gr.createNode=function(t){t=new Fr(t);return new Gr(t.getInterval(),t.getLevel())},Gr.createExpanded=function(t,e){e=new Ar(e);null!==t&&e.expandToInclude(t.interval);e=Gr.createNode(e);return null!==t&&e.insert(t),e},a(qr,Dr),e(qr.prototype,{insert:function(t,e){var n=Dr.getSubnodeIndex(t,qr.origin);if(-1===n)return this.add(e),null;var i=this.subnode[n];null!==i&&i.getInterval().contains(t)||(i=Gr.createExpanded(i,t),this.subnode[n]=i),this.insertContained(this.subnode[n],t,e)},isSearchMatch:function(t){return!0},insertContained:function(t,e,n){l.isTrue(t.getInterval().contains(e));(ci.isZeroWidth(e.getMin(),e.getMax())?t.find(e):t.getNode(e)).add(n)},interfaces_:function(){return[]},getClass:function(){return qr}}),qr.origin=0,e(Br.prototype,{size:function(){return null!==this.root?this.root.size():0},insert:function(t,e){this.collectStats(t);t=Br.ensureExtent(t,this.minExtent);this.root.insert(t,e)},query:function(){if(1===arguments.length){if("number"==typeof arguments[0]){var t=arguments[0];return this.query(new Ar(t,t))}if(arguments[0]instanceof Ar){var e=arguments[0],n=new I;return this.query(e,n),n}}else{2===arguments.length&&(e=arguments[0],n=arguments[1],this.root.addAllItemsFromOverlapping(e,n))}},iterator:function(){var t=new I;return this.root.addAllItems(t),t.iterator()},remove:function(t,e){t=Br.ensureExtent(t,this.minExtent);return this.root.remove(t,e)},collectStats:function(t){t=t.getWidth();t<this.minExtent&&0<t&&(this.minExtent=t)},depth:function(){return null!==this.root?this.root.depth():0},nodeSize:function(){return null!==this.root?this.root.nodeSize():0},interfaces_:function(){return[]},getClass:function(){return Br}}),Br.ensureExtent=function(t,e){var n=t.getMin(),i=t.getMax();return n!==i?t:(n===i&&(i=(n-=e/2)+e/2),new Ar(n,i))},e(zr.prototype,{isInside:function(t){},interfaces_:function(){return[]},getClass:function(){return zr}}),e(Vr.prototype,{testLineSegment:function(t,e){var n=e.p0,e=e.p1,i=n.x-t.x,r=n.y-t.y,s=e.x-t.x,o=e.y-t.y;!(0<r&&o<=0||0<o&&r<=0)||0<jt.signOfDet2x2(i,r,s,o)/(o-r)&&this.crossings++},buildIndex:function(){this.tree=new Br;for(var t=H.removeRepeatedPoints(this.ring.getCoordinates()),e=qe.getChains(t),n=0;n<e.size();n++){var i=e.get(n),r=i.getEnvelope();this.interval.min=r.getMinY(),this.interval.max=r.getMaxY(),this.tree.insert(this.interval,i)}},testMonotoneChain:function(t,e,n){n.select(t,e)},isInside:function(t){this.crossings=0;var e=new C(g.NEGATIVE_INFINITY,g.POSITIVE_INFINITY,t.y,t.y);this.interval.min=t.y,this.interval.max=t.y;for(var n=this.tree.query(this.interval),i=new kr(this,t),r=n.iterator();r.hasNext();){var s=r.next();this.testMonotoneChain(e,i,s)}return this.crossings%2==1},interfaces_:function(){return[zr]},getClass:function(){return Vr}}),a(kr,qi),e(kr.prototype,{select:function(){if(1!==arguments.length)return qi.prototype.select.apply(this,arguments);var t=arguments[0];this.mcp.testLineSegment(this.p,t)},interfaces_:function(){return[]},getClass:function(){return kr}}),Vr.MCSelecter=kr,e(Yr.prototype,{insertEdgeEnds:function(t){for(var e=t.iterator();e.hasNext();){var n=e.next();this.nodes.add(n)}},getNodeIterator:function(){return this.nodes.iterator()},copyNodesAndLabels:function(t,e){for(var n=t.getNodeIterator();n.hasNext();){var i=n.next();this.nodes.addNode(i.getCoordinate()).setLabel(e,i.getLabel().getLocation(e))}},build:function(t){this.computeIntersectionNodes(t,0),this.copyNodesAndLabels(t,0);t=(new dr).computeEdgeEnds(t.getEdgeIterator());this.insertEdgeEnds(t)},computeIntersectionNodes:function(t,e){for(var n=t.getEdgeIterator();n.hasNext();)for(var i=n.next(),r=i.getLabel().getLocation(e),s=i.getEdgeIntersectionList().iterator();s.hasNext();){var o=s.next(),o=this.nodes.addNode(o.coord);r===L.BOUNDARY?o.setLabelBoundary(e):o.getLabel().isNull(e)&&o.setLabel(e,L.INTERIOR)}},interfaces_:function(){return[]},getClass:function(){return Yr}}),e(Ur.prototype,{isNodeEdgeAreaLabelsConsistent:function(){for(var t=this.nodeGraph.getNodeIterator();t.hasNext();){var e=t.next();if(!e.getEdges().isAreaLabelsConsistent(this.geomGraph))return this.invalidPoint=e.getCoordinate().copy(),!1}return!0},getInvalidPoint:function(){return this.invalidPoint},hasDuplicateRings:function(){for(var t=this.nodeGraph.getNodeIterator();t.hasNext();)for(var e=t.next().getEdges().iterator();e.hasNext();){var n=e.next();if(1<n.getEdgeEnds().size())return this.invalidPoint=n.getEdge().getCoordinate(0),!0}return!1},isNodeConsistentArea:function(){var t=this.geomGraph.computeSelfNodes(this.li,!0,!0);return t.hasProperIntersection()?(this.invalidPoint=t.getProperIntersectionPoint(),!1):(this.nodeGraph.build(this.geomGraph),this.isNodeEdgeAreaLabelsConsistent())},interfaces_:function(){return[]},getClass:function(){return Ur}}),e(Xr.prototype,{buildIndex:function(){this.index=new Re;for(var t=0;t<this.rings.size();t++){var e=this.rings.get(t),n=e.getEnvelopeInternal();this.index.insert(n,e)}},getNestedPoint:function(){return this.nestedPt},isNonNested:function(){this.buildIndex();for(var t=0;t<this.rings.size();t++)for(var e=this.rings.get(t),n=e.getCoordinates(),i=this.index.query(e.getEnvelopeInternal()),r=0;r<i.size();r++){var s=i.get(r),o=s.getCoordinates();if(e!==s&&e.getEnvelopeInternal().intersects(s.getEnvelopeInternal())){s=Wr.findPtNotNode(n,s,this.graph);if(null!==s)if(Zt.isPointInRing(s,o))return this.nestedPt=s,!1}}return!0},add:function(t){this.rings.add(t),this.totalEnv.expandToInclude(t.getEnvelopeInternal())},interfaces_:function(){return[]},getClass:function(){return Xr}}),e(Hr.prototype,{getErrorType:function(){return this.errorType},getMessage:function(){return Hr.errMsg[this.errorType]},getCoordinate:function(){return this.pt},toString:function(){var t="";return null!==this.pt&&(t=" at or near point "+this.pt),this.getMessage()+t},interfaces_:function(){return[]},getClass:function(){return Hr}}),Hr.ERROR=0,Hr.REPEATED_POINT=1,Hr.HOLE_OUTSIDE_SHELL=2,Hr.NESTED_HOLES=3,Hr.DISCONNECTED_INTERIOR=4,Hr.SELF_INTERSECTION=5,Hr.RING_SELF_INTERSECTION=6,Hr.NESTED_SHELLS=7,Hr.DUPLICATE_RINGS=8,Hr.TOO_FEW_POINTS=9,Hr.INVALID_COORDINATE=10,Hr.RING_NOT_CLOSED=11,Hr.errMsg=["Topology Validation Error","Repeated Point","Hole lies outside shell","Holes are nested","Interior is disconnected","Self-intersection","Ring Self-intersection","Nested shells","Duplicate Rings","Too few distinct points in geometry component","Invalid Coordinate","Ring is not closed"],e(Wr.prototype,{checkInvalidCoordinates:function(){if(arguments[0]instanceof Array){for(var t=arguments[0],e=0;e<t.length;e++)if(!Wr.isValid(t[e]))return this.validErr=new Hr(Hr.INVALID_COORDINATE,t[e]),null}else if(arguments[0]instanceof Rt){var n=arguments[0];if(this.checkInvalidCoordinates(n.getExteriorRing().getCoordinates()),null!==this.validErr)return null;for(e=0;e<n.getNumInteriorRing();e++)if(this.checkInvalidCoordinates(n.getInteriorRingN(e).getCoordinates()),null!==this.validErr)return null}},checkHolesNotNested:function(t,e){for(var n=new Xr(e),i=0;i<t.getNumInteriorRing();i++){var r=t.getInteriorRingN(i);n.add(r)}n.isNonNested()||(this.validErr=new Hr(Hr.NESTED_HOLES,n.getNestedPoint()))},checkConsistentArea:function(t){t=new Ur(t);return t.isNodeConsistentArea()?void(t.hasDuplicateRings()&&(this.validErr=new Hr(Hr.DUPLICATE_RINGS,t.getInvalidPoint()))):(this.validErr=new Hr(Hr.SELF_INTERSECTION,t.getInvalidPoint()),null)},isValid:function(){return this.checkValid(this.parentGeometry),null===this.validErr},checkShellInsideHole:function(t,e,n){var i=t.getCoordinates(),r=e.getCoordinates(),e=Wr.findPtNotNode(i,e,n);if(null!==e&&!Zt.isPointInRing(e,r))return e;n=Wr.findPtNotNode(r,t,n);return null===n?(l.shouldNeverReachHere("points in shell and hole appear to be equal"),null):Zt.isPointInRing(n,i)?n:null},checkNoSelfIntersectingRings:function(t){for(var e=t.getEdgeIterator();e.hasNext();){var n=e.next();if(this.checkNoSelfIntersectingRing(n.getEdgeIntersectionList()),null!==this.validErr)return null}},checkConnectedInteriors:function(t){t=new Mr(t);t.isInteriorsConnected()||(this.validErr=new Hr(Hr.DISCONNECTED_INTERIOR,t.getCoordinate()))},checkNoSelfIntersectingRing:function(t){for(var e=new at,n=!0,i=t.iterator();i.hasNext();){var r=i.next();if(n)n=!1;else{if(e.contains(r.coord))return this.validErr=new Hr(Hr.RING_SELF_INTERSECTION,r.coord),null;e.add(r.coord)}}},checkHolesInShell:function(t,e){for(var n=t.getExteriorRing(),i=new Vr(n),r=0;r<t.getNumInteriorRing();r++){var s=t.getInteriorRingN(r),s=Wr.findPtNotNode(s.getCoordinates(),n,e);if(null===s)return null;if(!i.isInside(s))return this.validErr=new Hr(Hr.HOLE_OUTSIDE_SHELL,s),null}},checkTooFewPoints:function(t){return t.hasTooFewPoints()?(this.validErr=new Hr(Hr.TOO_FEW_POINTS,t.getInvalidPoint()),null):void 0},getValidationError:function(){return this.checkValid(this.parentGeometry),this.validErr},checkValid:function(){if(arguments[0]instanceof wt){var t=arguments[0];this.checkInvalidCoordinates(t.getCoordinates())}else if(arguments[0]instanceof Tt){t=arguments[0];this.checkInvalidCoordinates(t.getCoordinates())}else if(arguments[0]instanceof Pt){var e=arguments[0];if(this.checkInvalidCoordinates(e.getCoordinates()),null!==this.validErr)return null;if(this.checkClosedRing(e),null!==this.validErr)return null;var n=new qn(0,e);if(this.checkTooFewPoints(n),null!==this.validErr)return null;e=new Wt;n.computeSelfNodes(e,!0,!0),this.checkNoSelfIntersectingRings(n)}else if(arguments[0]instanceof Ct){e=arguments[0];if(this.checkInvalidCoordinates(e.getCoordinates()),null!==this.validErr)return null;n=new qn(0,e);this.checkTooFewPoints(n)}else{if(arguments[0]instanceof Rt){var i=arguments[0];if(this.checkInvalidCoordinates(i),null!==this.validErr)return null;if(this.checkClosedRings(i),null!==this.validErr)return null;n=new qn(0,i);return(this.checkTooFewPoints(n),null!==this.validErr)?null:(this.checkConsistentArea(n),null===this.validErr&&(this.isSelfTouchingRingFormingHoleValid||(this.checkNoSelfIntersectingRings(n),null===this.validErr))?(this.checkHolesInShell(i,n),null!==this.validErr?null:(this.checkHolesNotNested(i,n),null!==this.validErr?null:void this.checkConnectedInteriors(n))):null)}if(arguments[0]instanceof bt){for(var r=arguments[0],s=0;s<r.getNumGeometries();s++){var o=r.getGeometryN(s);if(this.checkInvalidCoordinates(o),null!==this.validErr)return null;if(this.checkClosedRings(o),null!==this.validErr)return null}n=new qn(0,r);if(this.checkTooFewPoints(n),null!==this.validErr)return null;if(this.checkConsistentArea(n),null!==this.validErr)return null;if(!this.isSelfTouchingRingFormingHoleValid&&(this.checkNoSelfIntersectingRings(n),null!==this.validErr))return null;for(s=0;s<r.getNumGeometries();s++){o=r.getGeometryN(s);if(this.checkHolesInShell(o,n),null!==this.validErr)return null}for(s=0;s<r.getNumGeometries();s++){o=r.getGeometryN(s);if(this.checkHolesNotNested(o,n),null!==this.validErr)return null}if(this.checkShellsNotNested(r,n),null!==this.validErr)return null;this.checkConnectedInteriors(n)}else if(arguments[0]instanceof ft)for(var a=arguments[0],s=0;s<a.getNumGeometries();s++){var u=a.getGeometryN(s);if(this.checkValid(u),null!==this.validErr)return null}else if(arguments[0]instanceof B){i=arguments[0];if(this.validErr=null,i.isEmpty())return null;if(i instanceof wt)this.checkValid(i);else if(i instanceof Tt)this.checkValid(i);else if(i instanceof Pt)this.checkValid(i);else if(i instanceof Ct)this.checkValid(i);else if(i instanceof Rt)this.checkValid(i);else if(i instanceof bt)this.checkValid(i);else{if(!(i instanceof ft))throw new UnsupportedOperationException(i.getClass().getName());this.checkValid(i)}}}},setSelfTouchingRingFormingHoleValid:function(t){this.isSelfTouchingRingFormingHoleValid=t},checkShellNotNested:function(t,e,n){var i=t.getCoordinates(),r=e.getExteriorRing(),s=r.getCoordinates(),r=Wr.findPtNotNode(i,r,n);if(null===r)return null;if(!Zt.isPointInRing(r,s))return null;if(e.getNumInteriorRing()<=0)return this.validErr=new Hr(Hr.NESTED_SHELLS,r),null;for(var o=null,a=0;a<e.getNumInteriorRing();a++){var u=e.getInteriorRingN(a);if(null===(o=this.checkShellInsideHole(t,u,n)))return null}this.validErr=new Hr(Hr.NESTED_SHELLS,o)},checkClosedRings:function(t){if(this.checkClosedRing(t.getExteriorRing()),null!==this.validErr)return null;for(var e=0;e<t.getNumInteriorRing();e++)if(this.checkClosedRing(t.getInteriorRingN(e)),null!==this.validErr)return null},checkClosedRing:function(t){var e;t.isClosed()||(e=null,1<=t.getNumPoints()&&(e=t.getCoordinateN(0)),this.validErr=new Hr(Hr.RING_NOT_CLOSED,e))},checkShellsNotNested:function(t,e){for(var n=0;n<t.getNumGeometries();n++)for(var i=t.getGeometryN(n).getExteriorRing(),r=0;r<t.getNumGeometries();r++)if(n!==r){var s=t.getGeometryN(r);if(this.checkShellNotNested(i,s,e),null!==this.validErr)return null}},interfaces_:function(){return[]},getClass:function(){return Wr}}),Wr.findPtNotNode=function(t,e,n){for(var i=n.findEdge(e).getEdgeIntersectionList(),r=0;r<t.length;r++){var s=t[r];if(!i.isIntersection(s))return s}return null},Wr.isValid=function(){if(arguments[0]instanceof B)return new Wr(arguments[0]).isValid();if(arguments[0]instanceof d){var t=arguments[0];return!g.isNaN(t.x)&&(!g.isInfinite(t.x)&&(!g.isNaN(t.y)&&!g.isInfinite(t.y)))}};eo=Object.freeze({IsValidOp:Wr}),fo=Object.freeze({BoundaryOp:dt,IsSimpleOp:Ii,buffer:uo,distance:lo,linemerge:ho,overlay:co,polygonize:fo,relate:Ys,union:to,valid:eo});a(jr,Ot.CoordinateOperation),e(jr.prototype,{editCoordinates:function(t,e){if(0===t.length)return null;for(var n=new Array(t.length).fill(null),i=0;i<t.length;i++){var r=new d(t[i]);this.targetPM.makePrecise(r),n[i]=r}var s=new N(n,!1).toCoordinateArray(),o=e instanceof Pt?4:e instanceof Ct?2:0,e=n;return this.removeCollapsed&&(e=null),s.length<o?e:s},interfaces_:function(){return[]},getClass:function(){return jr}}),e(Kr.prototype,{fixPolygonalTopology:function(t){var e=t;this.changePrecisionModel||(e=this.changePM(t,this.targetPM));var n=e.buffer(0),e=n;return this.changePrecisionModel||(e=t.getFactory().createGeometry(n)),e},reducePointwise:function(t){var e=null;e=this.changePrecisionModel?new Ot(this.createFactory(t.getFactory(),this.targetPM)):new Ot;var n=this.removeCollapsed;return 2<=t.getDimension()&&(n=!0),e.edit(t,new jr(this.targetPM,n))},changePM:function(t,e){return this.createEditor(t.getFactory(),e).edit(t,new Ot.NoOpGeometryOperation)},setRemoveCollapsedComponents:function(t){this.removeCollapsed=t},createFactory:function(t,e){return new Yt(e,t.getSRID(),t.getCoordinateSequenceFactory())},setChangePrecisionModel:function(t){this.changePrecisionModel=t},reduce:function(t){t=this.reducePointwise(t);return this.isPointwise||!R(t,Lt)||t.isValid()?t:this.fixPolygonalTopology(t)},setPointwise:function(t){this.isPointwise=t},createEditor:function(t,e){return t.getPrecisionModel()===e?new Ot:new Ot(this.createFactory(t,e))},interfaces_:function(){return[]},getClass:function(){return Kr}}),Kr.reduce=function(t,e){return new Kr(e).reduce(t)},Kr.reducePointwise=function(t,e){e=new Kr(e);return e.setPointwise(!0),e.reduce(t)};Ys=Object.freeze({GeometryPrecisionReducer:Kr});e(Zr.prototype,{simplifySection:function(t,e){if(t+1===e)return null;this.seg.p0=this.pts[t],this.seg.p1=this.pts[e];for(var n=-1,i=t,r=t+1;r<e;r++){var s=this.seg.distance(this.pts[r]);n<s&&(n=s,i=r)}if(n<=this.distanceTolerance)for(r=t+1;r<e;r++)this.usePt[r]=!1;else this.simplifySection(t,i),this.simplifySection(i,e)},setDistanceTolerance:function(t){this.distanceTolerance=t},simplify:function(){this.usePt=new Array(this.pts.length).fill(null);for(var t=0;t<this.pts.length;t++)this.usePt[t]=!0;this.simplifySection(0,this.pts.length-1);for(var e=new N,t=0;t<this.pts.length;t++)this.usePt[t]&&e.add(new d(this.pts[t]));return e.toCoordinateArray()},interfaces_:function(){return[]},getClass:function(){return Zr}}),Zr.simplify=function(t,e){t=new Zr(t);return t.setDistanceTolerance(e),t.simplify()},e(Jr.prototype,{setEnsureValid:function(t){this.isEnsureValidTopology=t},getResultGeometry:function(){return this.inputGeom.isEmpty()?this.inputGeom.copy():new Qr(this.isEnsureValidTopology,this.distanceTolerance).transform(this.inputGeom)},setDistanceTolerance:function(t){if(t<0)throw new c;this.distanceTolerance=t},interfaces_:function(){return[]},getClass:function(){return Jr}}),Jr.simplify=function(t,e){t=new Jr(t);return t.setDistanceTolerance(e),t.getResultGeometry()},a(Qr,se),e(Qr.prototype,{transformPolygon:function(t,e){if(t.isEmpty())return null;t=se.prototype.transformPolygon.call(this,t,e);return e instanceof bt?t:this.createValidArea(t)},createValidArea:function(t){return this.isEnsureValidTopology?t.buffer(0):t},transformCoordinates:function(t,e){var n=t.toCoordinateArray(),t=null,t=0===n.length?new Array(0).fill(null):Zr.simplify(n,this.distanceTolerance);return this.factory.getCoordinateSequenceFactory().create(t)},transformMultiPolygon:function(t,e){e=se.prototype.transformMultiPolygon.call(this,t,e);return this.createValidArea(e)},transformLinearRing:function(t,e){var n=e instanceof Rt,e=se.prototype.transformLinearRing.call(this,t,e);return!n||e instanceof Pt?e:null},interfaces_:function(){return[]},getClass:function(){return Qr}}),Jr.DPTransformer=Qr,a($r,Jt),e($r.prototype,{getIndex:function(){return this.index},getParent:function(){return this.parent},interfaces_:function(){return[]},getClass:function(){return $r}}),e(ts.prototype,{addToResult:function(t){this.resultSegs.add(t)},asLineString:function(){return this.parentLine.getFactory().createLineString(ts.extractCoordinates(this.resultSegs))},getResultSize:function(){var t=this.resultSegs.size();return 0===t?0:t+1},getParent:function(){return this.parentLine},getSegment:function(t){return this.segs[t]},getParentCoordinates:function(){return this.parentLine.getCoordinates()},getMinimumSize:function(){return this.minimumSize},asLinearRing:function(){return this.parentLine.getFactory().createLinearRing(ts.extractCoordinates(this.resultSegs))},getSegments:function(){return this.segs},init:function(){var t=this.parentLine.getCoordinates();this.segs=new Array(t.length-1).fill(null);for(var e=0;e<t.length-1;e++){var n=new $r(t[e],t[e+1],this.parentLine,e);this.segs[e]=n}},getResultCoordinates:function(){return ts.extractCoordinates(this.resultSegs)},interfaces_:function(){return[]},getClass:function(){return ts}}),ts.extractCoordinates=function(t){for(var e=new Array(t.size()+1).fill(null),n=null,i=0;i<t.size();i++)n=t.get(i),e[i]=n.p0;return e[e.length-1]=n.p1,e},e(es.prototype,{remove:function(t){this.index.remove(new C(t.p0,t.p1),t)},add:function(){var t;if(arguments[0]instanceof ts)for(var e=arguments[0].getSegments(),n=0;n<e.length;n++){var i=e[n];this.add(i)}else arguments[0]instanceof Jt&&(t=arguments[0],this.index.insert(new C(t.p0,t.p1),t))},query:function(t){var e=new C(t.p0,t.p1),t=new ns(t);return this.index.query(e,t),t.getItems()},interfaces_:function(){return[]},getClass:function(){return es}}),e(ns.prototype,{visitItem:function(t){C.intersects(t.p0,t.p1,this.querySeg.p0,this.querySeg.p1)&&this.items.add(t)},getItems:function(){return this.items},interfaces_:function(){return[Ie]},getClass:function(){return ns}}),e(is.prototype,{flatten:function(t,e){var n=new Jt(this.linePts[t],this.linePts[e]);return this.remove(this.line,t,e),this.outputIndex.add(n),n},hasBadIntersection:function(t,e,n){return!!this.hasBadOutputIntersection(n)||!!this.hasBadInputIntersection(t,e,n)},setDistanceTolerance:function(t){this.distanceTolerance=t},simplifySection:function(t,e,n){n+=1;var i=new Array(2).fill(null);if(t+1===e){var r=this.line.getSegment(t);return this.line.addToResult(r),null}var s=!0;this.line.getResultSize()<this.line.getMinimumSize()&&n+1<this.line.getMinimumSize()&&(s=!1);var o=new Array(1).fill(null),a=this.findFurthestPoint(this.linePts,t,e,o);o[0]>this.distanceTolerance&&(s=!1);o=new Jt;if(o.p0=this.linePts[t],o.p1=this.linePts[e],i[0]=t,i[1]=e,this.hasBadIntersection(this.line,i,o)&&(s=!1),s){r=this.flatten(t,e);return this.line.addToResult(r),null}this.simplifySection(t,a,n),this.simplifySection(a,e,n)},hasBadOutputIntersection:function(t){for(var e=this.outputIndex.query(t).iterator();e.hasNext();){var n=e.next();if(this.hasInteriorIntersection(n,t))return!0}return!1},findFurthestPoint:function(t,e,n,i){var r=new Jt;r.p0=t[e],r.p1=t[n];for(var s=-1,o=e,a=e+1;a<n;a++){var u=t[a],u=r.distance(u);s<u&&(s=u,o=a)}return i[0]=s,o},simplify:function(t){this.line=t,this.linePts=t.getParentCoordinates(),this.simplifySection(0,this.linePts.length-1,0)},remove:function(t,e,n){for(var i=e;i<n;i++){var r=t.getSegment(i);this.inputIndex.remove(r)}},hasInteriorIntersection:function(t,e){return this.li.computeIntersection(t.p0,t.p1,e.p0,e.p1),this.li.isInteriorIntersection()},hasBadInputIntersection:function(t,e,n){for(var i=this.inputIndex.query(n).iterator();i.hasNext();){var r=i.next();if(this.hasInteriorIntersection(r,n)&&!is.isInLineSection(t,e,r))return!0}return!1},interfaces_:function(){return[]},getClass:function(){return is}}),is.isInLineSection=function(t,e,n){if(n.getParent()!==t.getParent())return!1;n=n.getIndex();return n>=e[0]&&n<e[1]},e(rs.prototype,{setDistanceTolerance:function(t){this.distanceTolerance=t},simplify:function(t){for(var e=t.iterator();e.hasNext();)this.inputIndex.add(e.next());for(e=t.iterator();e.hasNext();){var n=new is(this.inputIndex,this.outputIndex);n.setDistanceTolerance(this.distanceTolerance),n.simplify(e.next())}},interfaces_:function(){return[]},getClass:function(){return rs}}),e(ss.prototype,{getResultGeometry:function(){return this.inputGeom.isEmpty()?this.inputGeom.copy():(this.linestringMap=new zt,this.inputGeom.apply(new as(this)),this.lineSimplifier.simplify(this.linestringMap.values()),new os(this.linestringMap).transform(this.inputGeom))},setDistanceTolerance:function(t){if(t<0)throw new c;this.lineSimplifier.setDistanceTolerance(t)},interfaces_:function(){return[]},getClass:function(){return ss}}),ss.simplify=function(t,e){t=new ss(t);return t.setDistanceTolerance(e),t.getResultGeometry()},a(os,se),e(os.prototype,{transformCoordinates:function(t,e){if(0===t.size())return null;if(e instanceof Ct){var n=this.linestringMap.get(e);return this.createCoordinateSequence(n.getResultCoordinates())}return se.prototype.transformCoordinates.call(this,t,e)},interfaces_:function(){return[]},getClass:function(){return os}}),e(as.prototype,{filter:function(t){if(t instanceof Ct){var e=t;if(e.isEmpty())return null;t=e.isClosed()?4:2,t=new ts(e,t);this.tps.linestringMap.put(e,t)}},interfaces_:function(){return[q]},getClass:function(){return as}}),ss.LineStringTransformer=os,ss.LineStringMapBuilderFilter=as;to=Object.freeze({DouglasPeuckerSimplifier:Jr,TopologyPreservingSimplifier:ss});e(us.prototype,{splitAt:function(){if(1===arguments.length){var t=arguments[0],e=this.minimumLen/this.segLen;return t.distance(this.seg.p0)<this.minimumLen?(this.splitPt=this.seg.pointAlong(e),null):t.distance(this.seg.p1)<this.minimumLen?(this.splitPt=us.pointAlongReverse(this.seg,e),null):void(this.splitPt=t)}2===arguments.length&&(e=arguments[0],t=arguments[1],e=this.getConstrainedLength(e)/this.segLen,t.equals2D(this.seg.p0)?this.splitPt=this.seg.pointAlong(e):this.splitPt=us.pointAlongReverse(this.seg,e))},setMinimumLength:function(t){this.minimumLen=t},getConstrainedLength:function(t){return t<this.minimumLen?this.minimumLen:t},getSplitPoint:function(){return this.splitPt},interfaces_:function(){return[]},getClass:function(){return us}}),us.pointAlongReverse=function(t,e){var n=new d;return n.x=t.p1.x-e*(t.p1.x-t.p0.x),n.y=t.p1.y-e*(t.p1.y-t.p0.y),n},e(ls.prototype,{findSplitPoint:function(t,e){},interfaces_:function(){return[]},getClass:function(){return ls}}),e(hs.prototype,{findSplitPoint:function(t,e){var n=t.getLineSegment(),i=n.getLength()/2,n=new us(n),t=hs.projectedSplitPoint(t,e),e=2*t.distance(e)*.8;return i<e&&(e=i),n.setMinimumLength(e),n.splitAt(t),n.getSplitPoint()},interfaces_:function(){return[ls]},getClass:function(){return hs}}),hs.projectedSplitPoint=function(t,e){return t.getLineSegment().project(e)},e(cs.prototype,{interfaces_:function(){return[]},getClass:function(){return cs}}),cs.triArea=function(t,e,n){return(e.x-t.x)*(n.y-t.y)-(e.y-t.y)*(n.x-t.x)},cs.isInCircleDDNormalized=function(t,e,n,i){var r=_.valueOf(t.x).selfSubtract(i.x),s=_.valueOf(t.y).selfSubtract(i.y),o=_.valueOf(e.x).selfSubtract(i.x),a=_.valueOf(e.y).selfSubtract(i.y),u=_.valueOf(n.x).selfSubtract(i.x),t=_.valueOf(n.y).selfSubtract(i.y),e=r.multiply(a).selfSubtract(o.multiply(s)),n=o.multiply(t).selfSubtract(u.multiply(a)),i=u.multiply(s).selfSubtract(r.multiply(t)),s=r.multiply(r).selfAdd(s.multiply(s)),a=o.multiply(o).selfAdd(a.multiply(a)),t=u.multiply(u).selfAdd(t.multiply(t));return 0<s.selfMultiply(n).selfAdd(a.selfMultiply(i)).selfAdd(t.selfMultiply(e)).doubleValue()},cs.checkRobustInCircle=function(t,e,n,i){var r=cs.isInCircleNonRobust(t,e,n,i),s=cs.isInCircleDDSlow(t,e,n,i),o=cs.isInCircleCC(t,e,n,i),a=Zn.circumcentre(t,e,n);A.out.println("p radius diff a = "+Math.abs(i.distance(a)-t.distance(a))/t.distance(a)),r===s&&r===o||(A.out.println("inCircle robustness failure (double result = "+r+", DD result = "+s+", CC result = "+o+")"),A.out.println(Xt.toLineString(new Ft([t,e,n,i]))),A.out.println("Circumcentre = "+Xt.toPoint(a)+" radius = "+t.distance(a)),A.out.println("p radius diff a = "+Math.abs(i.distance(a)/t.distance(a)-1)),A.out.println("p radius diff b = "+Math.abs(i.distance(a)/e.distance(a)-1)),A.out.println("p radius diff c = "+Math.abs(i.distance(a)/n.distance(a)-1)),A.out.println())},cs.isInCircleDDFast=function(t,e,n,i){var r=_.sqr(t.x).selfAdd(_.sqr(t.y)).selfMultiply(cs.triAreaDDFast(e,n,i)),s=_.sqr(e.x).selfAdd(_.sqr(e.y)).selfMultiply(cs.triAreaDDFast(t,n,i)),o=_.sqr(n.x).selfAdd(_.sqr(n.y)).selfMultiply(cs.triAreaDDFast(t,e,i)),n=_.sqr(i.x).selfAdd(_.sqr(i.y)).selfMultiply(cs.triAreaDDFast(t,e,n));return 0<r.selfSubtract(s).selfAdd(o).selfSubtract(n).doubleValue()},cs.isInCircleCC=function(t,e,n,i){n=Zn.circumcentre(t,e,n),t=t.distance(n);return i.distance(n)-t<=0},cs.isInCircleNormalized=function(t,e,n,i){var r=t.x-i.x,s=t.y-i.y,o=e.x-i.x,t=e.y-i.y,e=n.x-i.x,i=n.y-i.y;return 0<(r*r+s*s)*(o*i-e*t)+(o*o+t*t)*(e*s-r*i)+(e*e+i*i)*(r*t-o*s)},cs.isInCircleDDSlow=function(t,e,n,i){var r=_.valueOf(i.x),s=_.valueOf(i.y),o=_.valueOf(t.x),a=_.valueOf(t.y),u=_.valueOf(e.x),l=_.valueOf(e.y),h=_.valueOf(n.x),i=_.valueOf(n.y),t=o.multiply(o).add(a.multiply(a)).multiply(cs.triAreaDDSlow(u,l,h,i,r,s)),e=u.multiply(u).add(l.multiply(l)).multiply(cs.triAreaDDSlow(o,a,h,i,r,s)),n=h.multiply(h).add(i.multiply(i)).multiply(cs.triAreaDDSlow(o,a,u,l,r,s)),i=r.multiply(r).add(s.multiply(s)).multiply(cs.triAreaDDSlow(o,a,u,l,h,i));return 0<t.subtract(e).add(n).subtract(i).doubleValue()},cs.isInCircleNonRobust=function(t,e,n,i){return 0<(t.x*t.x+t.y*t.y)*cs.triArea(e,n,i)-(e.x*e.x+e.y*e.y)*cs.triArea(t,n,i)+(n.x*n.x+n.y*n.y)*cs.triArea(t,e,i)-(i.x*i.x+i.y*i.y)*cs.triArea(t,e,n)},cs.isInCircleRobust=function(t,e,n,i){return cs.isInCircleNormalized(t,e,n,i)},cs.triAreaDDSlow=function(t,e,n,i,r,s){return n.subtract(t).multiply(s.subtract(e)).subtract(i.subtract(e).multiply(r.subtract(t)))},cs.triAreaDDFast=function(t,e,n){var i=_.valueOf(e.x).selfSubtract(t.x).selfMultiply(_.valueOf(n.y).selfSubtract(t.y)),t=_.valueOf(e.y).selfSubtract(t.y).selfMultiply(_.valueOf(n.x).selfSubtract(t.x));return i.selfSubtract(t)},e(fs.prototype,{circleCenter:function(e,n){var i=new fs(this.getX(),this.getY()),t=new F(this.bisector(i,e),this.bisector(e,n)),r=null;try{r=new fs(t.getX(),t.getY())}catch(t){if(!(t instanceof w))throw t;A.err.println("a: "+i+"  b: "+e+"  c: "+n),A.err.println(t)}return r},dot:function(t){return this.p.x*t.getX()+this.p.y*t.getY()},magn:function(){return Math.sqrt(this.p.x*this.p.x+this.p.y*this.p.y)},getZ:function(){return this.p.z},bisector:function(t,e){var n=e.getX()-t.getX(),i=e.getY()-t.getY(),e=new F(t.getX()+n/2,t.getY()+i/2,1),i=new F(t.getX()-i+n/2,t.getY()+n+i/2,1);return new F(e,i)},equals:function(){if(1===arguments.length){var t=arguments[0];return this.p.x===t.getX()&&this.p.y===t.getY()}if(2===arguments.length){var e=arguments[0],t=arguments[1];return this.p.distance(e.getCoordinate())<t}},getCoordinate:function(){return this.p},isInCircle:function(t,e,n){return cs.isInCircleRobust(t.p,e.p,n.p,this.p)},interpolateZValue:function(t,e,n){var i=t.getX(),r=t.getY(),s=e.getX()-i,o=n.getX()-i,a=e.getY()-r,u=n.getY()-r,l=s*u-o*a,i=this.getX()-i,r=this.getY()-r,o=(u*i-o*r)/l,l=(-a*i+s*r)/l;return t.getZ()+o*(e.getZ()-t.getZ())+l*(n.getZ()-t.getZ())},midPoint:function(t){return new fs((this.p.x+t.getX())/2,(this.p.y+t.getY())/2,(this.p.z+t.getZ())/2)},rightOf:function(t){return this.isCCW(t.dest(),t.orig())},isCCW:function(t,e){return 0<(t.p.x-this.p.x)*(e.p.y-this.p.y)-(t.p.y-this.p.y)*(e.p.x-this.p.x)},getX:function(){return this.p.x},crossProduct:function(t){return this.p.x*t.getY()-this.p.y*t.getX()},setZ:function(t){this.p.z=t},times:function(t){return new fs(t*this.p.x,t*this.p.y)},cross:function(){return new fs(this.p.y,-this.p.x)},leftOf:function(t){return this.isCCW(t.orig(),t.dest())},toString:function(){return"POINT ("+this.p.x+" "+this.p.y+")"},sub:function(t){return new fs(this.p.x-t.getX(),this.p.y-t.getY())},getY:function(){return this.p.y},classify:function(t,e){var n=e.sub(t),i=this.sub(t),r=n.crossProduct(i);return 0<r?fs.LEFT:r<0?fs.RIGHT:n.getX()*i.getX()<0||n.getY()*i.getY()<0?fs.BEHIND:n.magn()<i.magn()?fs.BEYOND:t.equals(this)?fs.ORIGIN:e.equals(this)?fs.DESTINATION:fs.BETWEEN},sum:function(t){return new fs(this.p.x+t.getX(),this.p.y+t.getY())},distance:function(t,e){return Math.sqrt(Math.pow(e.getX()-t.getX(),2)+Math.pow(e.getY()-t.getY(),2))},circumRadiusRatio:function(t,e){var n=this.circleCenter(t,e),i=this.distance(n,t),n=this.distance(this,t),t=this.distance(t,e);return t<n&&(n=t),(t=this.distance(e,this))<n&&(n=t),i/n},interfaces_:function(){return[]},getClass:function(){return fs}}),fs.interpolateZ=function(){if(3===arguments.length){var t=arguments[0],e=arguments[1],n=arguments[2],i=e.distance(n),r=t.distance(e),s=n.z-e.z;return e.z+r/i*s}if(4===arguments.length){var o=arguments[0],a=arguments[1],u=arguments[2],l=arguments[3],h=a.x,t=a.y,n=u.x-h,e=l.x-h,r=u.y-t,i=l.y-t,s=n*i-e*r,h=o.x-h,t=o.y-t,e=(i*h-e*t)/s,s=(-r*h+n*t)/s;return a.z+e*(u.z-a.z)+s*(l.z-a.z)}},fs.LEFT=0,fs.RIGHT=1,fs.BEYOND=2,fs.BEHIND=3,fs.BETWEEN=4,fs.ORIGIN=5,fs.DESTINATION=6,a(gs,fs),e(gs.prototype,{getConstraint:function(){return this.constraint},setOnConstraint:function(t){this._isOnConstraint=t},merge:function(t){t._isOnConstraint&&(this._isOnConstraint=!0,this.constraint=t.constraint)},isOnConstraint:function(){return this._isOnConstraint},setConstraint:function(t){this._isOnConstraint=!0,this.constraint=t},interfaces_:function(){return[]},getClass:function(){return gs}}),e(ds.prototype,{equalsNonOriented:function(t){return!!this.equalsOriented(t)||!!this.equalsOriented(t.sym())},toLineSegment:function(){return new Jt(this.vertex.getCoordinate(),this.dest().getCoordinate())},dest:function(){return this.sym().orig()},oNext:function(){return this.next},equalsOriented:function(t){return!(!this.orig().getCoordinate().equals2D(t.orig().getCoordinate())||!this.dest().getCoordinate().equals2D(t.dest().getCoordinate()))},dNext:function(){return this.sym().oNext().sym()},lPrev:function(){return this.next.sym()},rPrev:function(){return this.sym().oNext()},rot:function(){return this._rot},oPrev:function(){return this._rot.next._rot},sym:function(){return this._rot._rot},setOrig:function(t){this.vertex=t},lNext:function(){return this.invRot().oNext().rot()},getLength:function(){return this.orig().getCoordinate().distance(this.dest().getCoordinate())},invRot:function(){return this._rot.sym()},setDest:function(t){this.sym().setOrig(t)},setData:function(t){this.data=t},getData:function(){return this.data},delete:function(){this._rot=null},orig:function(){return this.vertex},rNext:function(){return this._rot.next.invRot()},toString:function(){var t=this.vertex.getCoordinate(),e=this.dest().getCoordinate();return Xt.toLineString(t,e)},isLive:function(){return null!==this._rot},getPrimary:function(){return this.orig().getCoordinate().compareTo(this.dest().getCoordinate())<=0?this:this.sym()},dPrev:function(){return this.invRot().oNext().invRot()},setNext:function(t){this.next=t},interfaces_:function(){return[]},getClass:function(){return ds}}),ds.makeEdge=function(t,e){var n=new ds,i=new ds,r=new ds,s=new ds;((((n._rot=i)._rot=r)._rot=s)._rot=n).setNext(n),i.setNext(s),r.setNext(r),s.setNext(i);return n.setOrig(t),n.setDest(e),n},ds.swap=function(t){var e=t.oPrev(),n=t.sym().oPrev();ds.splice(t,e),ds.splice(t.sym(),n),ds.splice(t,e.lNext()),ds.splice(t.sym(),n.lNext()),t.setOrig(e.dest()),t.setDest(n.dest())},ds.splice=function(t,e){var n=t.oNext().rot(),i=e.oNext().rot(),r=e.oNext(),s=t.oNext(),o=i.oNext(),a=n.oNext();t.setNext(r),e.setNext(s),n.setNext(o),i.setNext(a)},ds.connect=function(t,e){var n=ds.makeEdge(t.dest(),e.orig());return ds.splice(n,t.lNext()),ds.splice(n.sym(),e),n},e(ps.prototype,{insertSite:function(t){var e=this.subdiv.locate(t);if(this.subdiv.isVertexOfEdge(e,t))return e;this.subdiv.isOnEdge(e,t.getCoordinate())&&(e=e.oPrev(),this.subdiv.delete(e.oNext()));var n=this.subdiv.makeEdge(e.orig(),t);ds.splice(n,e);for(var i=n;(e=(n=this.subdiv.connect(e,n.sym())).oPrev()).lNext()!==i;);for(;;){var r=e.oPrev();if(r.dest().rightOf(e)&&t.isInCircle(e.orig(),r.dest(),e.dest()))ds.swap(e),e=e.oPrev();else{if(e.oNext()===i)return n;e=e.oNext().lPrev()}}},insertSites:function(t){for(var e=t.iterator();e.hasNext();){var n=e.next();this.insertSite(n)}},interfaces_:function(){return[]},getClass:function(){return ps}}),e(ms.prototype,{locate:function(t){},interfaces_:function(){return[]},getClass:function(){return ms}}),e(ys.prototype,{init:function(){this.lastEdge=this.findEdge()},locate:function(t){this.lastEdge.isLive()||this.init();t=this.subdiv.locateFromEdge(t,this.lastEdge);return this.lastEdge=t},findEdge:function(){return this.subdiv.getEdges().iterator().next()},interfaces_:function(){return[ms]},getClass:function(){return ys}}),a(vs,p),e(vs.prototype,{getSegment:function(){return this.seg},interfaces_:function(){return[]},getClass:function(){return vs}}),vs.msgWithSpatial=function(t,e){return null!==e?t+" [ "+e+" ]":t},e(xs.prototype,{visit:function(t){},interfaces_:function(){return[]},getClass:function(){return xs}}),e(Es.prototype,{getTriangleVertices:function(t){var e=new Cs;return this.visitTriangles(e,t),e.getTriangleVertices()},isFrameVertex:function(t){return!!t.equals(this.frameVertex[0])||(!!t.equals(this.frameVertex[1])||!!t.equals(this.frameVertex[2]))},isVertexOfEdge:function(t,e){return!(!e.equals(t.orig(),this.tolerance)&&!e.equals(t.dest(),this.tolerance))},connect:function(t,e){e=ds.connect(t,e);return this.quadEdges.add(e),e},getVoronoiCellPolygon:function(t,e){var n=new I,i=t;do{var r=t.rot().orig().getCoordinate()}while(n.add(r),(t=t.oPrev())!==i);var s=new N;s.addAll(n,!1),s.closeRing(),s.size()<4&&(A.out.println(s),s.add(s.get(s.size()-1),!0));s=s.toCoordinateArray(),e=e.createPolygon(e.createLinearRing(s),null),s=i.orig();return e.setUserData(s.getCoordinate()),e},setLocator:function(t){this.locator=t},initSubdiv:function(){var t=this.makeEdge(this.frameVertex[0],this.frameVertex[1]),e=this.makeEdge(this.frameVertex[1],this.frameVertex[2]);ds.splice(t.sym(),e);var n=this.makeEdge(this.frameVertex[2],this.frameVertex[0]);return ds.splice(e.sym(),n),ds.splice(n.sym(),t),t},isFrameBorderEdge:function(t){var e=new Array(3).fill(null);Es.getTriangleEdges(t,e);e=new Array(3).fill(null);Es.getTriangleEdges(t.sym(),e);e=t.lNext().dest();if(this.isFrameVertex(e))return!0;t=t.sym().lNext().dest();return!!this.isFrameVertex(t)},makeEdge:function(t,e){e=ds.makeEdge(t,e);return this.quadEdges.add(e),e},visitTriangles:function(t,e){this.visitedKey++;var n=new ee;n.push(this.startingEdge);for(var i=new Q;!n.empty();){var r=n.pop();i.contains(r)||null!==(r=this.fetchTriangleToVisit(r,n,e,i))&&t.visit(r)}},isFrameEdge:function(t){return!(!this.isFrameVertex(t.orig())&&!this.isFrameVertex(t.dest()))},isOnEdge:function(t,e){return this.seg.setCoordinates(t.orig().getCoordinate(),t.dest().getCoordinate()),this.seg.distance(e)<this.edgeCoincidenceTolerance},getEnvelope:function(){return new C(this.frameEnv)},createFrame:function(t){var e=t.getWidth(),n=t.getHeight(),i=n<e?10*e:10*n;this.frameVertex[0]=new fs((t.getMaxX()+t.getMinX())/2,t.getMaxY()+i),this.frameVertex[1]=new fs(t.getMinX()-i,t.getMinY()-i),this.frameVertex[2]=new fs(t.getMaxX()+i,t.getMinY()-i),this.frameEnv=new C(this.frameVertex[0].getCoordinate(),this.frameVertex[1].getCoordinate()),this.frameEnv.expandToInclude(this.frameVertex[2].getCoordinate())},getTriangleCoordinates:function(t){var e=new Ss;return this.visitTriangles(e,t),e.getTriangles()},getVertices:function(t){for(var e=new Q,n=this.quadEdges.iterator();n.hasNext();){var i=n.next(),r=i.orig();!t&&this.isFrameVertex(r)||e.add(r);i=i.dest();!t&&this.isFrameVertex(i)||e.add(i)}return e},fetchTriangleToVisit:function(t,e,n,i){var r=t,s=0,o=!1;do{this.triEdges[s]=r,this.isFrameEdge(r)&&(o=!0);var a=r.sym()}while(i.contains(a)||e.push(a),i.add(r),s++,(r=r.lNext())!==t);return o&&!n?null:this.triEdges},getEdges:function(){if(0===arguments.length)return this.quadEdges;if(1===arguments.length){for(var t=arguments[0],e=this.getPrimaryEdges(!1),n=new Array(e.size()).fill(null),i=0,r=e.iterator();r.hasNext();){var s=r.next();n[i++]=t.createLineString([s.orig().getCoordinate(),s.dest().getCoordinate()])}return t.createMultiLineString(n)}},getVertexUniqueEdges:function(t){for(var e=new I,n=new Q,i=this.quadEdges.iterator();i.hasNext();){var r=i.next(),s=r.orig();n.contains(s)||(n.add(s),!t&&this.isFrameVertex(s)||e.add(r));s=r.sym(),r=s.orig();n.contains(r)||(n.add(r),!t&&this.isFrameVertex(r)||e.add(s))}return e},getTriangleEdges:function(t){var e=new Ns;return this.visitTriangles(e,t),e.getTriangleEdges()},getPrimaryEdges:function(t){this.visitedKey++;var e=new I,n=new ee;n.push(this.startingEdge);for(var i=new Q;!n.empty();){var r,s=n.pop();i.contains(s)||(r=s.getPrimary(),!t&&this.isFrameEdge(r)||e.add(r),n.push(s.oNext()),n.push(s.sym().oNext()),i.add(s),i.add(s.sym()))}return e},delete:function(t){ds.splice(t,t.oPrev()),ds.splice(t.sym(),t.sym().oPrev());var e=t.sym(),n=t.rot(),i=t.rot().sym();this.quadEdges.remove(t),this.quadEdges.remove(e),this.quadEdges.remove(n),this.quadEdges.remove(i),t.delete(),e.delete(),n.delete(),i.delete()},locateFromEdge:function(t,e){for(var n=0,i=this.quadEdges.size(),r=e;;){if(i<++n)throw new vs(r.toLineSegment());if(t.equals(r.orig())||t.equals(r.dest()))break;if(t.rightOf(r))r=r.sym();else if(t.rightOf(r.oNext())){if(t.rightOf(r.dPrev()))break;r=r.dPrev()}else r=r.oNext()}return r},getTolerance:function(){return this.tolerance},getVoronoiCellPolygons:function(t){this.visitTriangles(new Is,!0);for(var e=new I,n=this.getVertexUniqueEdges(!1).iterator();n.hasNext();){var i=n.next();e.add(this.getVoronoiCellPolygon(i,t))}return e},getVoronoiDiagram:function(t){var e=this.getVoronoiCellPolygons(t);return t.createGeometryCollection(Yt.toGeometryArray(e))},getTriangles:function(t){for(var e=this.getTriangleCoordinates(!1),n=new Array(e.size()).fill(null),i=0,r=e.iterator();r.hasNext();){var s=r.next();n[i++]=t.createPolygon(t.createLinearRing(s),null)}return t.createGeometryCollection(n)},insertSite:function(t){var e=this.locate(t);if(t.equals(e.orig(),this.tolerance)||t.equals(e.dest(),this.tolerance))return e;var n=this.makeEdge(e.orig(),t);ds.splice(n,e);for(var i=n;(e=(n=this.connect(e,n.sym())).oPrev()).lNext()!==i;);return i},locate:function(){if(1===arguments.length){if(arguments[0]instanceof fs){var t=arguments[0];return this.locator.locate(t)}if(arguments[0]instanceof d){var e=arguments[0];return this.locator.locate(new fs(e))}}else if(2===arguments.length){var t=arguments[0],n=arguments[1],e=this.locator.locate(new fs(t));if(null===e)return null;var i=e;e.dest().getCoordinate().equals2D(t)&&(i=e.sym());var r=i;do{if(r.dest().getCoordinate().equals2D(n))return r}while((r=r.oNext())!==i);return null}},interfaces_:function(){return[]},getClass:function(){return Es}}),Es.getTriangleEdges=function(t,e){if(e[0]=t,e[1]=e[0].lNext(),e[2]=e[1].lNext(),e[2].lNext()!==e[0])throw new c},e(Is.prototype,{visit:function(t){for(var e=t[0].orig().getCoordinate(),n=t[1].orig().getCoordinate(),i=t[2].orig().getCoordinate(),r=new fs(Zn.circumcentre(e,n,i)),s=0;s<3;s++)t[s].rot().setOrig(r)},interfaces_:function(){return[xs]},getClass:function(){return Is}}),e(Ns.prototype,{getTriangleEdges:function(){return this.triList},visit:function(t){this.triList.add(t.clone())},interfaces_:function(){return[xs]},getClass:function(){return Ns}}),e(Cs.prototype,{visit:function(t){this.triList.add([t[0].orig(),t[1].orig(),t[2].orig()])},getTriangleVertices:function(){return this.triList},interfaces_:function(){return[xs]},getClass:function(){return Cs}}),e(Ss.prototype,{checkTriangleSize:function(t){2<=t.length?Xt.toLineString(t[0],t[1]):1<=t.length&&Xt.toPoint(t[0])},visit:function(t){this.coordList.clear();for(var e=0;e<3;e++){var n=t[e].orig();this.coordList.add(n.getCoordinate())}if(0<this.coordList.size()){this.coordList.closeRing();var i=this.coordList.toCoordinateArray();if(4!==i.length)return null;this.triCoords.add(i)}},getTriangles:function(){return this.triCoords},interfaces_:function(){return[xs]},getClass:function(){return Ss}}),Es.TriangleCircumcentreVisitor=Is,Es.TriangleEdgesListVisitor=Ns,Es.TriangleVertexListVisitor=Cs,Es.TriangleCoordinatesVisitor=Ss,Es.EDGE_COINCIDENCE_TOL_FACTOR=1e3,e(ws.prototype,{getLineSegment:function(){return this.ls},getEndZ:function(){return this.ls.getCoordinate(1).z},getStartZ:function(){return this.ls.getCoordinate(0).z},intersection:function(t){return this.ls.intersection(t.getLineSegment())},getStart:function(){return this.ls.getCoordinate(0)},getEnd:function(){return this.ls.getCoordinate(1)},getEndY:function(){return this.ls.getCoordinate(1).y},getStartX:function(){return this.ls.getCoordinate(0).x},equalsTopo:function(t){return this.ls.equalsTopo(t.getLineSegment())},getStartY:function(){return this.ls.getCoordinate(0).y},setData:function(t){this.data=t},getData:function(){return this.data},getEndX:function(){return this.ls.getCoordinate(1).x},toString:function(){return this.ls.toString()},interfaces_:function(){return[]},getClass:function(){return ws}}),e(Ls.prototype,{visit:function(t){},interfaces_:function(){return[]},getClass:function(){return Ls}}),e(Rs.prototype,{isRepeated:function(){return 1<this.count},getRight:function(){return this.right},getCoordinate:function(){return this.p},setLeft:function(t){this.left=t},getX:function(){return this.p.x},getData:function(){return this.data},getCount:function(){return this.count},getLeft:function(){return this.left},getY:function(){return this.p.y},increment:function(){this.count=this.count+1},setRight:function(t){this.right=t},interfaces_:function(){return[]},getClass:function(){return Rs}}),e(Ts.prototype,{insert:function(){if(1===arguments.length){var t=arguments[0];return this.insert(t,null)}if(2===arguments.length){var e=arguments[0],n=arguments[1];if(null===this.root)return this.root=new Rs(e,n),this.root;if(0<this.tolerance){t=this.findBestMatchNode(e);if(null!==t)return t.increment(),t}return this.insertExact(e,n)}},query:function(){var t,e,n=arguments,i=this;if(1===arguments.length){var r=arguments[0],s=new I;return this.query(r,s),s}2===arguments.length&&(arguments[0]instanceof C&&R(arguments[1],v)?(t=n[0],e=n[1],i.queryNode(i.root,t,!0,{interfaces_:function(){return[Ls]},visit:function(t){e.add(t)}})):arguments[0]instanceof C&&R(arguments[1],Ls)&&(i=arguments[0],t=arguments[1],this.queryNode(this.root,i,!0,t)))},queryNode:function(t,e,n,i){if(null===t)return null;var r=null,s=null,o=null,s=(o=n?(r=e.getMinX(),s=e.getMaxX(),t.getX()):(r=e.getMinY(),s=e.getMaxY(),t.getY()))<=s;r<o&&this.queryNode(t.getLeft(),e,!n,i),e.contains(t.getCoordinate())&&i.visit(t),s&&this.queryNode(t.getRight(),e,!n,i)},findBestMatchNode:function(t){t=new Ps(t,this.tolerance);return this.query(t.queryEnvelope(),t),t.getNode()},isEmpty:function(){return null===this.root},insertExact:function(t,e){for(var n=this.root,i=this.root,r=!0,s=!0;null!==n;){if(null!==n)if(t.distance(n.getCoordinate())<=this.tolerance)return n.increment(),n;s=r?t.x<n.getX():t.y<n.getY(),i=n,n=s?n.getLeft():n.getRight(),r=!r}this.numberOfNodes=this.numberOfNodes+1;e=new Rs(t,e);return s?i.setLeft(e):i.setRight(e),e},interfaces_:function(){return[]},getClass:function(){return Ts}}),Ts.toCoordinates=function(){if(1===arguments.length){var t=arguments[0];return Ts.toCoordinates(t,!1)}if(2===arguments.length){for(var t=arguments[0],e=arguments[1],n=new N,i=t.iterator();i.hasNext();)for(var r=i.next(),s=e?r.getCount():1,o=0;o<s;o++)n.add(r.getCoordinate(),!0);return n.toCoordinateArray()}},e(Ps.prototype,{visit:function(t){var e=this.p.distance(t.getCoordinate());if(!(e<=this.tolerance))return null;var n=!1;(null===this.matchNode||e<this.matchDist||null!==this.matchNode&&e===this.matchDist&&t.getCoordinate().compareTo(this.matchNode.getCoordinate())<1)&&(n=!0),n&&(this.matchNode=t,this.matchDist=e)},queryEnvelope:function(){var t=new C(this.p);return t.expandBy(this.tolerance),t},getNode:function(){return this.matchNode},interfaces_:function(){return[Ls]},getClass:function(){return Ps}}),Ts.BestMatchVisitor=Ps,e(bs.prototype,{getInitialVertices:function(){return this.initialVertices},getKDT:function(){return this.kdt},enforceConstraints:function(){this.addConstraintVertices();for(var t=0;t++,0<this.enforceGabriel(this.segments)&&t<bs.MAX_SPLIT_ITER;);},insertSites:function(t){for(var e=t.iterator();e.hasNext();){var n=e.next();this.insertSite(n)}},getVertexFactory:function(){return this.vertexFactory},getPointArray:function(){for(var t=new Array(this.initialVertices.size()+this.segVertices.size()).fill(null),e=0,n=this.initialVertices.iterator();n.hasNext();){var i=n.next();t[e++]=i.getCoordinate()}for(var r=this.segVertices.iterator();r.hasNext();){i=r.next();t[e++]=i.getCoordinate()}return t},setConstraints:function(t,e){this.segments=t,this.segVertices=e},computeConvexHull:function(){var t=new Yt,t=new ie(this.getPointArray(),t);this.convexHull=t.getConvexHull()},addConstraintVertices:function(){this.computeConvexHull(),this.insertSites(this.segVertices)},findNonGabrielPoint:function(t){var e=t.getStart(),n=t.getEnd(),i=new d((e.x+n.x)/2,(e.y+n.y)/2),r=e.distance(i),t=new C(i);t.expandBy(r);for(var t=this.kdt.query(t),s=null,o=g.MAX_VALUE,a=t.iterator();a.hasNext();){var u,l=a.next().getCoordinate();l.equals2D(e)||l.equals2D(n)||(u=i.distance(l))<r&&(null===s||u<o)&&(s=l,o=u)}return s},getConstraintSegments:function(){return this.segments},setSplitPointFinder:function(t){this.splitFinder=t},getConvexHull:function(){return this.convexHull},getTolerance:function(){return this.tolerance},enforceGabriel:function(t){for(var e=new I,n=0,i=new I,r=t.iterator();r.hasNext();){var s,o=r.next(),a=this.findNonGabrielPoint(o);null!==a&&(this.splitPt=this.splitFinder.findSplitPoint(o,a),s=this.createVertex(this.splitPt,o),this.insertSite(s),a=new ws(o.getStartX(),o.getStartY(),o.getStartZ(),s.getX(),s.getY(),s.getZ(),o.getData()),s=new ws(s.getX(),s.getY(),s.getZ(),o.getEndX(),o.getEndY(),o.getEndZ(),o.getData()),e.add(a),e.add(s),i.add(o),n+=1)}return t.removeAll(i),t.addAll(e),n},createVertex:function(){if(1===arguments.length){var t=arguments[0],e=null;return null!==this.vertexFactory?this.vertexFactory.createVertex(t,null):new gs(t)}if(2===arguments.length){var n=arguments[0],t=arguments[1],e=null;return(e=null!==this.vertexFactory?this.vertexFactory.createVertex(n,t):new gs(n)).setOnConstraint(!0),e}},getSubdivision:function(){return this.subdiv},computeBoundingBox:function(){var t=bs.computeVertexEnvelope(this.initialVertices),e=bs.computeVertexEnvelope(this.segVertices),n=new C(t);n.expandToInclude(e);t=.2*n.getWidth(),e=.2*n.getHeight(),e=Math.max(t,e);this.computeAreaEnv=new C(n),this.computeAreaEnv.expandBy(e)},setVertexFactory:function(t){this.vertexFactory=t},formInitialDelaunay:function(){this.computeBoundingBox(),this.subdiv=new Es(this.computeAreaEnv,this.tolerance),this.subdiv.setLocator(new ys(this.subdiv)),this.incDel=new ps(this.subdiv),this.insertSites(this.initialVertices)},insertSite:function(){if(arguments[0]instanceof gs){var t=arguments[0],e=this.kdt.insert(t.getCoordinate(),t);if(e.isRepeated()){e=e.getData();return e.merge(t),e}return this.incDel.insertSite(t),t}arguments[0]instanceof d&&(t=arguments[0],this.insertSite(this.createVertex(t)))},interfaces_:function(){return[]},getClass:function(){return bs}}),bs.computeVertexEnvelope=function(t){for(var e=new C,n=t.iterator();n.hasNext();){var i=n.next();e.expandToInclude(i.getCoordinate())}return e},bs.MAX_SPLIT_ITER=99,e(Os.prototype,{create:function(){if(null!==this.subdiv)return null;var t=Os.envelope(this.siteCoords),e=Os.toVertices(this.siteCoords);this.subdiv=new Es(t,this.tolerance),new ps(this.subdiv).insertSites(e)},setTolerance:function(t){this.tolerance=t},setSites:function(){var t;arguments[0]instanceof B?(t=arguments[0],this.siteCoords=Os.extractUniqueCoordinates(t)):R(arguments[0],m)&&(t=arguments[0],this.siteCoords=Os.unique(H.toCoordinateArray(t)))},getEdges:function(t){return this.create(),this.subdiv.getEdges(t)},getSubdivision:function(){return this.create(),this.subdiv},getTriangles:function(t){return this.create(),this.subdiv.getTriangles(t)},interfaces_:function(){return[]},getClass:function(){return Os}}),Os.extractUniqueCoordinates=function(t){if(null===t)return new N;t=t.getCoordinates();return Os.unique(t)},Os.envelope=function(t){for(var e=new C,n=t.iterator();n.hasNext();){var i=n.next();e.expandToInclude(i)}return e},Os.unique=function(t){t=H.copyDeep(t);return ut.sort(t),new N(t,!1)},Os.toVertices=function(t){for(var e=new I,n=t.iterator();n.hasNext();){var i=n.next();e.add(new fs(i))}return e},e(_s.prototype,{createSiteVertices:function(t){for(var e=new I,n=t.iterator();n.hasNext();){var i=n.next();this.constraintVertexMap.containsKey(i)||e.add(new gs(i))}return e},create:function(){if(null!==this.subdiv)return null;var t=Os.envelope(this.siteCoords),e=new I;null!==this.constraintLines&&(t.expandToInclude(this.constraintLines.getEnvelopeInternal()),this.createVertices(this.constraintLines),e=_s.createConstraintSegments(this.constraintLines));t=new bs(this.createSiteVertices(this.siteCoords),this.tolerance);t.setConstraints(e,new I(this.constraintVertexMap.values())),t.formInitialDelaunay(),t.enforceConstraints(),this.subdiv=t.getSubdivision()},setTolerance:function(t){this.tolerance=t},setConstraints:function(t){this.constraintLines=t},setSites:function(t){this.siteCoords=Os.extractUniqueCoordinates(t)},getEdges:function(t){return this.create(),this.subdiv.getEdges(t)},getSubdivision:function(){return this.create(),this.subdiv},getTriangles:function(t){return this.create(),this.subdiv.getTriangles(t)},createVertices:function(t){for(var e=t.getCoordinates(),n=0;n<e.length;n++){var i=new gs(e[n]);this.constraintVertexMap.put(e[n],i)}},interfaces_:function(){return[]},getClass:function(){return _s}}),_s.createConstraintSegments=function(){if(1===arguments.length){for(var t=Rn.getLines(arguments[0]),e=new I,n=t.iterator();n.hasNext();){var i=n.next();_s.createConstraintSegments(i,e)}return e}if(2===arguments.length)for(var r=arguments[1],s=arguments[0].getCoordinates(),n=1;n<s.length;n++)r.add(new ws(s[n-1],s[n]))},e(Ms.prototype,{create:function(){if(null!==this.subdiv)return null;var t=Os.envelope(this.siteCoords);this.diagramEnv=t;var e=Math.max(this.diagramEnv.getWidth(),this.diagramEnv.getHeight());this.diagramEnv.expandBy(e),null!==this.clipEnv&&this.diagramEnv.expandToInclude(this.clipEnv);e=Os.toVertices(this.siteCoords);this.subdiv=new Es(t,this.tolerance),new ps(this.subdiv).insertSites(e)},getDiagram:function(t){this.create();t=this.subdiv.getVoronoiDiagram(t);return Ms.clipGeometryCollection(t,this.diagramEnv)},setTolerance:function(t){this.tolerance=t},setSites:function(){var t;arguments[0]instanceof B?(t=arguments[0],this.siteCoords=Os.extractUniqueCoordinates(t)):R(arguments[0],m)&&(t=arguments[0],this.siteCoords=Os.unique(H.toCoordinateArray(t)))},setClipEnvelope:function(t){this.clipEnv=t},getSubdivision:function(){return this.create(),this.subdiv},interfaces_:function(){return[]},getClass:function(){return Ms}}),Ms.clipGeometryCollection=function(t,e){for(var n=t.getFactory().toGeometry(e),i=new I,r=0;r<t.getNumGeometries();r++){var s=t.getGeometryN(r),o=null;e.contains(s.getEnvelopeInternal())?o=s:e.intersects(s.getEnvelopeInternal())&&(o=n.intersection(s)).setUserData(s.getUserData()),null===o||o.isEmpty()||i.add(o)}return t.getFactory().createGeometryCollection(Yt.toGeometryArray(i))};eo=Object.freeze({ConformingDelaunayTriangulationBuilder:_s,DelaunayTriangulationBuilder:Os,VoronoiDiagramBuilder:Ms});e(Ds.prototype,{interfaces_:function(){return[]},getClass:function(){return Ds}}),Ds.union=function(t,e){if(t.isEmpty()||e.isEmpty()){if(t.isEmpty()&&e.isEmpty())return kn.createEmptyResult(kn.UNION,t,e,t.getFactory());if(t.isEmpty())return e.copy();if(e.isEmpty())return t.copy()}return t.checkNotGeometryCollection(t),t.checkNotGeometryCollection(e),Un.overlayOp(t,e,kn.UNION)},e(B.prototype,{equalsTopo:function(t){return!!this.getEnvelopeInternal().equals(t.getEnvelopeInternal())&&Rr.relate(this,t).isEquals(this.getDimension(),t.getDimension())},union:function(){return 0===arguments.length?_r.union(this):1===arguments.length?Ds.union(this,arguments[0]):void 0},isValid:function(){return Wr.isValid(this)},intersection:function(t){if(this.isEmpty()||t.isEmpty())return kn.createEmptyResult(kn.INTERSECTION,this,t,this.factory);if(this.isGeometryCollection()){var e=t;return je.map(this,{interfaces_:function(){return[MapOp]},map:function(t){return t.intersection(e)}})}return this.checkNotGeometryCollection(this),this.checkNotGeometryCollection(t),Un.overlayOp(this,t,kn.INTERSECTION)},covers:function(t){return Rr.covers(this,t)},coveredBy:function(t){return Rr.coveredBy(this,t)},touches:function(t){return Rr.touches(this,t)},intersects:function(t){return Rr.intersects(this,t)},within:function(t){return Rr.within(this,t)},overlaps:function(t){return Rr.overlaps(this,t)},disjoint:function(t){return Rr.disjoint(this,t)},crosses:function(t){return Rr.crosses(this,t)},buffer:function(){return 1===arguments.length?Yi.bufferOp(this,arguments[0]):2===arguments.length?Yi.bufferOp(this,arguments[0],arguments[1]):3===arguments.length?Yi.bufferOp(this,arguments[0],arguments[1],arguments[2]):void 0},convexHull:function(){return new ie(this).getConvexHull()},relate:function(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];return Rr.relate.apply(Rr,[this].concat(e))},getCentroid:function(){if(this.isEmpty())return this.factory.createPoint();var t=$t.getCentroid(this);return this.createPointFromInternalCoord(t,this)},getInteriorPoint:function(){if(this.isEmpty())return this.factory.createPoint();var t=null,e=this.getDimension();return t=new(0===e?jn:1===e?Wn:Xn)(this).getInteriorPoint(),this.createPointFromInternalCoord(t,this)},symDifference:function(t){if(this.isEmpty()||t.isEmpty()){if(this.isEmpty()&&t.isEmpty())return kn.createEmptyResult(kn.SYMDIFFERENCE,this,t,this.factory);if(this.isEmpty())return t.copy();if(t.isEmpty())return this.copy()}return this.checkNotGeometryCollection(this),this.checkNotGeometryCollection(t),Un.overlayOp(this,t,kn.SYMDIFFERENCE)},createPointFromInternalCoord:function(t,e){return e.getPrecisionModel().makePrecise(t),e.getFactory().createPoint(t)},toText:function(){return(new Xt).write(this)},toString:function(){this.toText()},contains:function(t){return Rr.contains(this,t)},difference:function(t){return this.isEmpty()?kn.createEmptyResult(kn.DIFFERENCE,this,t,this.factory):t.isEmpty()?this.copy():(this.checkNotGeometryCollection(this),this.checkNotGeometryCollection(t),Un.overlayOp(this,t,kn.DIFFERENCE))},isSimple:function(){return new Ii(this).isSimple()},isWithinDistance:function(t,e){return!(e<this.getEnvelopeInternal().distance(t.getEnvelopeInternal()))&&ji.isWithinDistance(this,t,e)},distance:function(t){return ji.distance(this,t)},isEquivalentClass:function(t){return this.getClass()===t.getClass()}});t.version="1.1.2 (248dab8)",t.algorithm=Js,t.densify=Qs,t.dissolve=$s,t.geom=Ks,t.index=no,t.io=oo,t.noding=ao,t.operation=fo,t.precision=Ys,t.simplify=to,t.triangulate=eo},"object"==typeof n&&void 0!==e?r(n):"function"==typeof define&&define.amd?define(["exports"],r):r(i.jsts=i.jsts||{})},{}],4:[function(t,e,n){!function(){"use strict";function i(t,e){var n=t.length-1,i=[t[0]];return function t(e,n,i,r,s){for(var o,a,u,l,h,c,f,g=r,d=n+1;d<i;d++){var p=(a=e[d],u=e[n],l=e[i],p=f=c=h=void 0,h=u.x,c=u.y,f=l.x-h,p=l.y-c,0===f&&0===p||(1<(u=((a.x-h)*f+(a.y-c)*p)/(f*f+p*p))?(h=l.x,c=l.y):0<u&&(h+=f*u,c+=p*u)),(f=a.x-h)*f+(p=a.y-c)*p);g<p&&(o=d,g=p)}r<g&&(1<o-n&&t(e,n,o,r,s),s.push(e[o]),1<i-o&&t(e,o,i,r,s))}(t,0,n,e,i),i.push(t[n]),i}function t(t,e,n){if(t.length<=2)return t;e=void 0!==e?e*e:1;return t=i(t=n?t:function(t,e){for(var n,i,r,s,o=t[0],a=[o],u=1,l=t.length;u<l;u++)n=t[u],r=o,s=void 0,s=(i=n).x-r.x,r=i.y-r.y,e<s*s+r*r&&(a.push(n),o=n);return o!==n&&a.push(n),a}(t,e),e)}"function"==typeof define&&define.amd?define(function(){return t}):void 0!==e?(e.exports=t,e.exports.default=t):"undefined"!=typeof self?self.simplify=t:window.simplify=t}()},{}],5:[function(t,e,n){var u=t("turf-distance"),l=t("turf-helpers").point,h=t("turf-bearing"),c=t("turf-destination");e.exports=function(t,e,n){var i;if("Feature"===t.type)i=t.geometry.coordinates;else{if("LineString"!==t.type)throw new Error("input must be a LineString Feature or Geometry");i=t.coordinates}for(var r=0,s=0;s<i.length&&!(r<=e&&s===i.length-1);s++){if(e<=r){var o=e-r;if(o){var a=h(i[s],i[s-1])-180;return c(i[s],o,a,n)}return l(i[s])}r+=u(i[s],i[s+1],n)}return l(i[i.length-1])}},{"turf-bearing":8,"turf-destination":14,"turf-distance":15,"turf-helpers":18}],6:[function(t,e,n){var r=t("turf-helpers").polygon;e.exports=function(t){var e=[t[0],t[1]],n=[t[0],t[3]],i=[t[2],t[3]],t=[t[2],t[1]];return r([[e,t,i,n,e]])}},{"turf-helpers":18}],7:[function(t,e,n){var i=t("turf-meta").coordEach;e.exports=function(t){var e=[1/0,1/0,-1/0,-1/0];return i(t,function(t){e[0]>t[0]&&(e[0]=t[0]),e[1]>t[1]&&(e[1]=t[1]),e[2]<t[0]&&(e[2]=t[0]),e[3]<t[1]&&(e[3]=t[1])}),e}},{"turf-meta":21}],8:[function(t,e,n){var o=t("turf-invariant").getCoord;e.exports=function(t,e){var n=Math.PI/180,i=180/Math.PI,r=o(t),s=o(e),t=n*r[0],e=n*s[0],r=n*r[1],n=n*s[1],s=Math.sin(e-t)*Math.cos(n),t=Math.cos(r)*Math.sin(n)-Math.sin(r)*Math.cos(n)*Math.cos(e-t);return i*Math.atan2(s,t)}},{"turf-invariant":20}],9:[function(t,e,n){var a=t("turf-helpers").lineString,u=t("./spline.js");e.exports=function(t,e,n){var i=a([]);i.properties=t.properties;for(var r=new u({points:t.geometry.coordinates.map(function(t){return{x:t[0],y:t[1]}}),duration:e,sharpness:n}),s=0;s<r.duration;s+=10){var o=r.pos(s);Math.floor(s/100)%2==0&&i.geometry.coordinates.push([o.x,o.y])}return i}},{"./spline.js":10,"turf-helpers":18}],10:[function(t,e,n){function i(t){this.points=t.points||[],this.duration=t.duration||1e4,this.sharpness=t.sharpness||.85,this.centers=[],this.controls=[],this.stepLength=t.stepLength||60,this.length=this.points.length;for(var e=this.delay=0;e<this.length;e++)this.points[e].z=this.points[e].z||0;for(e=0;e<this.length-1;e++){var n=this.points[e],i=this.points[e+1];this.centers.push({x:(n.x+i.x)/2,y:(n.y+i.y)/2,z:(n.z+i.z)/2})}for(this.controls.push([this.points[0],this.points[0]]),e=0;e<this.centers.length-1;e++){var n=this.centers[e],i=this.centers[e+1],r=this.points[e+1].x-(this.centers[e].x+this.centers[e+1].x)/2,s=this.points[e+1].y-(this.centers[e].y+this.centers[e+1].y)/2,o=this.points[e+1].z-(this.centers[e].y+this.centers[e+1].z)/2;this.controls.push([{x:(1-this.sharpness)*this.points[e+1].x+this.sharpness*(this.centers[e].x+r),y:(1-this.sharpness)*this.points[e+1].y+this.sharpness*(this.centers[e].y+s),z:(1-this.sharpness)*this.points[e+1].z+this.sharpness*(this.centers[e].z+o)},{x:(1-this.sharpness)*this.points[e+1].x+this.sharpness*(this.centers[e+1].x+r),y:(1-this.sharpness)*this.points[e+1].y+this.sharpness*(this.centers[e+1].y+s),z:(1-this.sharpness)*this.points[e+1].z+this.sharpness*(this.centers[e+1].z+o)}])}return this.controls.push([this.points[this.length-1],this.points[this.length-1]]),this.steps=this.cacheSteps(this.stepLength),this}i.prototype.cacheSteps=function(t){var e=[],n=this.pos(0);e.push(0);for(var i=0;i<this.duration;i+=10){var r=this.pos(i);t<Math.sqrt((r.x-n.x)*(r.x-n.x)+(r.y-n.y)*(r.y-n.y)+(r.z-n.z)*(r.z-n.z))&&(e.push(i),n=r)}return e},i.prototype.vector=function(t){var e=this.pos(t+10),t=this.pos(t-10);return{angle:180*Math.atan2(e.y-t.y,e.x-t.x)/3.14,speed:Math.sqrt((t.x-e.x)*(t.x-e.x)+(t.y-e.y)*(t.y-e.y)+(t.z-e.z)*(t.z-e.z))}},i.prototype.pos=function(t){var e=t-this.delay;e<0&&(e=0),e>this.duration&&(e=this.duration-1);t=e/this.duration;if(1<=t)return this.points[this.length-1];var n,i,r,s,o,a,e=Math.floor((this.points.length-1)*t),t=(this.length-1)*t-e;return n=t,i=this.points[e],r=this.controls[e][1],s=this.controls[e+1][0],o=this.points[e+1],a=[(n=(a=n)*a)*a,3*n*(1-a),3*a*(1-a)*(1-a),(1-a)*(1-a)*(1-a)],{x:o.x*a[0]+s.x*a[1]+r.x*a[2]+i.x*a[3],y:o.y*a[0]+s.y*a[1]+r.y*a[2]+i.y*a[3],z:o.z*a[0]+s.z*a[1]+r.z*a[2]+i.z*a[3]}},e.exports=i},{}],11:[function(t,e,n){var r=t("turf-helpers"),s=r.featureCollection,o=t("jsts"),a=t("geojson-normalize");e.exports=function(t,e,n){var i=r.distanceToDegrees(e,n),t=a(t),t=a(s(t.features.map(function(t){return function(t,e){t=(new o.io.GeoJSONReader).read(t.geometry).buffer(e),e=new o.io.GeoJSONWriter;return{type:"Feature",geometry:t=e.write(t),properties:{}}}(t,i)})));return 1<t.features.length?t:1===t.features.length?t.features[0]:void 0}},{"geojson-normalize":2,jsts:3,"turf-helpers":18}],12:[function(t,e,n){var i=t("turf-bbox"),r=t("turf-helpers").point;e.exports=function(t){var e=i(t),t=(e[0]+e[2])/2,e=(e[1]+e[3])/2;return r([t,e])}},{"turf-bbox":7,"turf-helpers":18}],13:[function(t,e,n){var r=t("turf-meta").coordEach,s=t("turf-helpers").point;e.exports=function(t){var e=0,n=0,i=0;return r(t,function(t){e+=t[0],n+=t[1],i++},!0),s([e/i,n/i])}},{"turf-helpers":18,"turf-meta":21}],14:[function(t,e,n){var a=t("turf-invariant").getCoord,t=t("turf-helpers"),u=t.point,l=t.distanceToRadians;e.exports=function(t,e,n,i){var r=Math.PI/180,s=180/Math.PI,o=a(t),t=r*o[0],o=r*o[1],n=r*n,e=l(e,i),i=Math.asin(Math.sin(o)*Math.cos(e)+Math.cos(o)*Math.sin(e)*Math.cos(n)),o=t+Math.atan2(Math.sin(n)*Math.sin(e)*Math.cos(o),Math.cos(e)-Math.sin(o)*Math.sin(i));return u([s*o,s*i])}},{"turf-helpers":18,"turf-invariant":20}],15:[function(t,e,n){var o=t("turf-invariant").getCoord,a=t("turf-helpers").radiansToDistance;e.exports=function(t,e,n){var i=Math.PI/180,r=o(t),s=o(e),t=i*(s[1]-r[1]),e=i*(s[0]-r[0]),r=i*r[1],s=i*s[1],s=Math.pow(Math.sin(t/2),2)+Math.pow(Math.sin(e/2),2)*Math.cos(r)*Math.cos(s);return a(2*Math.atan2(Math.sqrt(s),Math.sqrt(1-s)),n)}},{"turf-helpers":18,"turf-invariant":20}],16:[function(t,e,n){var i=t("turf-bbox"),r=t("turf-bbox-polygon");e.exports=function(t){return r(i(t))}},{"turf-bbox":7,"turf-bbox-polygon":6}],17:[function(t,e,n){var i=t("turf-helpers").featureCollection,r=t("turf-meta").coordEach,s=t("turf-helpers").point;e.exports=function(t){var e=[];return r(t,function(t){e.push(s(t))}),i(e)}},{"turf-helpers":18,"turf-meta":21}],18:[function(t,e,n){function s(t,e){return{type:"Feature",properties:e||{},geometry:t}}e.exports.feature=s,e.exports.point=function(t,e){if(!Array.isArray(t))throw new Error("Coordinates must be an array");if(t.length<2)throw new Error("Coordinates must be at least 2 numbers long");return s({type:"Point",coordinates:t.slice()},e)},e.exports.polygon=function(t,e){if(!t)throw new Error("No coordinates passed");for(var n=0;n<t.length;n++){var i=t[n];if(i.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var r=0;r<i[i.length-1].length;r++)if(i[i.length-1][r]!==i[0][r])throw new Error("First and last Position are not equivalent.")}return s({type:"Polygon",coordinates:t},e)},e.exports.lineString=function(t,e){if(!t)throw new Error("No coordinates passed");return s({type:"LineString",coordinates:t},e)},e.exports.featureCollection=function(t){return{type:"FeatureCollection",features:t}},e.exports.multiLineString=function(t,e){if(!t)throw new Error("No coordinates passed");return s({type:"MultiLineString",coordinates:t},e)},e.exports.multiPoint=function(t,e){if(!t)throw new Error("No coordinates passed");return s({type:"MultiPoint",coordinates:t},e)},e.exports.multiPolygon=function(t,e){if(!t)throw new Error("No coordinates passed");return s({type:"MultiPolygon",coordinates:t},e)},e.exports.geometryCollection=function(t,e){return s({type:"GeometryCollection",geometries:t},e)};var i={miles:3960,nauticalmiles:3441.145,degrees:57.2957795,radians:1,inches:250905600,yards:6969600,meters:6373e3,metres:6373e3,kilometers:6373,kilometres:6373};e.exports.radiansToDistance=function(t,e){e=i[e||"kilometers"];if(void 0===e)throw new Error("Invalid unit");return t*e},e.exports.distanceToRadians=function(t,e){e=i[e||"kilometers"];if(void 0===e)throw new Error("Invalid unit");return t/e},e.exports.distanceToDegrees=function(t,e){e=i[e||"kilometers"];if(void 0===e)throw new Error("Invalid unit");return t/e*57.2958}},{}],19:[function(t,e,n){var u=t("turf-invariant");function l(t,e){for(var n=!1,i=0,r=e.length-1;i<e.length;r=i++){var s=e[i][0],o=e[i][1],a=e[r][0],u=e[r][1];o>t[1]!=u>t[1]&&t[0]<(a-s)*(t[1]-o)/(u-o)+s&&(n=!n)}return n}e.exports=function(t,e){var n=u.getCoord(t),i=e.geometry.coordinates;"Polygon"===e.geometry.type&&(i=[i]);for(var r=0,s=!1;r<i.length&&!s;r++)if(l(n,i[r][0])){for(var o=!1,a=1;a<i[r].length&&!o;)l(n,i[r][a])&&(o=!0),a++;o||(s=!0)}return s}},{"turf-invariant":20}],20:[function(t,e,n){e.exports.geojsonType=function(t,e,n){if(!e||!n)throw new Error("type and name required");if(!t||t.type!==e)throw new Error("Invalid input to "+n+": must be a "+e+", given "+t.type)},e.exports.collectionOf=function(t,e,n){if(!n)throw new Error(".collectionOf() requires a name");if(!t||"FeatureCollection"!==t.type)throw new Error("Invalid input to "+n+", FeatureCollection required");for(var i=0;i<t.features.length;i++){var r=t.features[i];if(!r||"Feature"!==r.type||!r.geometry)throw new Error("Invalid input to "+n+", Feature with geometry required");if(!r.geometry||r.geometry.type!==e)throw new Error("Invalid input to "+n+": must be a "+e+", given "+r.geometry.type)}},e.exports.featureOf=function(t,e,n){if(!n)throw new Error(".featureOf() requires a name");if(!t||"Feature"!==t.type||!t.geometry)throw new Error("Invalid input to "+n+", Feature with geometry required");if(!t.geometry||t.geometry.type!==e)throw new Error("Invalid input to "+n+": must be a "+e+", given "+t.geometry.type)},e.exports.getCoord=function(t){if(Array.isArray(t)&&"number"==typeof t[0]&&"number"==typeof t[1])return t;if(t){if("Feature"===t.type&&t.geometry&&"Point"===t.geometry.type&&Array.isArray(t.geometry.coordinates))return t.geometry.coordinates;if("Point"===t.type&&Array.isArray(t.coordinates))return t.coordinates}throw new Error("A coordinate, feature, or point geometry is required")}},{}],21:[function(t,e,n){function r(t,e,n){for(var i,r,s,o,a,u,l,h,c,f,g="FeatureCollection"===t.type,d="Feature"===t.type,p=g?t.features.length:1,m=0;m<p;m++)for(u=(f="GeometryCollection"===(h=g?t.features[m].geometry:d?t.geometry:t).type)?h.geometries.length:1,s=0;s<u;s++)if(l=(a=f?h.geometries[s]:h).coordinates,c=!n||"Polygon"!==a.type&&"MultiPolygon"!==a.type?0:1,"Point"===a.type)e(l);else if("LineString"===a.type||"MultiPoint"===a.type)for(i=0;i<l.length;i++)e(l[i]);else if("Polygon"===a.type||"MultiLineString"===a.type)for(i=0;i<l.length;i++)for(r=0;r<l[i].length-c;r++)e(l[i][r]);else{if("MultiPolygon"!==a.type)throw new Error("Unknown Geometry Type");for(i=0;i<l.length;i++)for(r=0;r<l[i].length;r++)for(o=0;o<l[i][r].length-c;o++)e(l[i][r][o])}}function i(t,e){var n;switch(t.type){case"FeatureCollection":for(n=0;n<t.features.length;n++)e(t.features[n].properties);break;case"Feature":e(t.properties)}}e.exports.coordEach=r,e.exports.coordReduce=function(t,e,n,i){return r(t,function(t){n=e(n,t)},i),n},e.exports.propEach=i,e.exports.propReduce=function(t,e,n){return i(t,function(t){n=e(n,t)}),n},e.exports.featureEach=function(t,e){if("Feature"===t.type)e(t);else if("FeatureCollection"===t.type)for(var n=0;n<t.features.length;n++)e(t.features[n])},e.exports.coordAll=function(t){var e=[];return r(t,function(t){e.push(t)}),e}},{}],22:[function(t,e,n){var i=t("turf-bearing"),r=t("turf-destination"),s=t("turf-distance");e.exports=function(t,e){var n=s(t,e,"miles"),e=i(t,e);return r(t,n/2,e,"miles")}},{"turf-bearing":8,"turf-destination":14,"turf-distance":15}],23:[function(t,e,n){var i=t("turf-helpers").featureCollection;e.exports=function(t,e){return i(function(t,e){var n,i,r=t.slice(0),s=t.length,o=s-e;for(;s-- >o;)i=Math.floor((s+1)*Math.random()),n=r[i],r[i]=r[s],r[s]=n;return r.slice(o)}(t.features,e))}},{"turf-helpers":18}],24:[function(t,e,n){var o=t("simplify-js"),r=["LineString","MultiLineString","Polygon","MultiPolygon"];function s(t,e,n){return"LineString"===t.geometry.type?{type:"LineString",coordinates:i(t.geometry.coordinates,e,n)}:"MultiLineString"===t.geometry.type?{type:"MultiLineString",coordinates:t.geometry.coordinates.map(function(t){return i(t,e,n)})}:"Polygon"===t.geometry.type?{type:"Polygon",coordinates:u(t.geometry.coordinates,e,n)}:"MultiPolygon"===t.geometry.type?{type:"MultiPolygon",coordinates:t.geometry.coordinates.map(function(t){return u(t,e,n)})}:t}function a(t,e){return{type:"Feature",geometry:t,properties:e}}function i(t,e,n){return o(t.map(function(t){return{x:t[0],y:t[1]}}),e,n).map(function(t){return[t.x,t.y]})}function u(t,r,s){return t.map(function(t){var e=t.map(function(t){return{x:t[0],y:t[1]}});if(e.length<4)throw new Error("Invalid polygon");for(var n,i=o(e,r,s).map(function(t){return[t.x,t.y]});(n=i).length<3||3===n.length&&n[2][0]===n[0][0]&&n[2][1]===n[0][1];)i=o(e,r-=.01*r,s).map(function(t){return[t.x,t.y]});return i[i.length-1][0]===i[0][0]&&i[i.length-1][1]===i[0][1]||i.push(i[0]),i})}e.exports=function(t,n,i){return"Feature"===t.type?a(s(t,n,i),t.properties):"FeatureCollection"===t.type?{type:"FeatureCollection",features:t.features.map(function(t){var e=s(t,n,i);return-1<r.indexOf(e.type)?a(e,t.properties):e})}:"GeometryCollection"===t.type?{type:"GeometryCollection",geometries:t.geometries.map(function(t){return-1<r.indexOf(t.type)?s({type:"Feature",geometry:t},n,i):t})}:t}},{"simplify-js":4}],25:[function(t,e,n){var i=t("turf-helpers").polygon,r=t("turf-helpers").featureCollection;function p(t,e,n){this.a=t,this.b=e,this.c=n;var i,r,s,o,a=e.x-t.x,u=e.y-t.y,l=n.x-t.x,h=n.y-t.y,c=a*(t.x+e.x)+u*(t.y+e.y),f=l*(t.x+n.x)+h*(t.y+n.y),g=2*(a*(n.y-e.y)-u*(n.x-e.x));Math.abs(g)<1e-6?(i=Math.min(t.x,e.x,n.x),r=Math.min(t.y,e.y,n.y),s=.5*(Math.max(t.x,e.x,n.x)-i),o=.5*(Math.max(t.y,e.y,n.y)-r),this.x=i+s,this.y=r+o):(this.x=(h*c-u*f)/g,this.y=(a*f-l*c)/g,s=this.x-t.x,o=this.y-t.y),this.r=s*s+o*o}function m(t,e){return e.x-t.x}e.exports=function(t,n){return r(function(t){if(t.length<3)return[];t.sort(m);var e=t.length-1,n=t[e].x,i=t[0].x,r=t[e].y,s=r;for(;e--;)t[e].y<r&&(r=t[e].y),t[e].y>s&&(s=t[e].y);var o,a,u,l=i-n,h=s-r,c=h<l?l:h,i=.5*(i+n),n=.5*(s+r),f=[new p({x:i-20*c,y:n-c,__sentinel:!0},{x:i,y:n+20*c,__sentinel:!0},{x:i+20*c,y:n-c,__sentinel:!0})],g=[],d=[];e=t.length;for(;e--;){for(d.length=0,o=f.length;o--;)0<(l=t[e].x-f[o].x)&&l*l>f[o].r?(g.push(f[o]),f.splice(o,1)):(h=t[e].y-f[o].y,l*l+h*h>f[o].r||(d.push(f[o].a,f[o].b,f[o].b,f[o].c,f[o].c,f[o].a),f.splice(o,1)));for(!function(t){var e,n,i,r,s,o=t.length;t:for(;o;)for(n=t[--o],e=t[--o],i=o;i;)if(s=t[--i],r=t[--i],e===r&&n===s||e===s&&n===r){t.splice(o,2),t.splice(i,2),o-=2;continue t}}(d),o=d.length;o;)u=d[--o],a=d[--o],f.push(new p(a,u,t[e]))}Array.prototype.push.apply(g,f),e=g.length;for(;e--;)(g[e].a.__sentinel||g[e].b.__sentinel||g[e].c.__sentinel)&&g.splice(e,1);return g}(t.features.map(function(t){var e={x:t.geometry.coordinates[0],y:t.geometry.coordinates[1]};return n&&(e.z=t.properties[n]),e})).map(function(t){return i([[[t.a.x,t.a.y],[t.b.x,t.b.y],[t.c.x,t.c.y],[t.a.x,t.a.y]]],{a:t.a.z,b:t.b.z,c:t.c.z})}))}},{"turf-helpers":18}],26:[function(t,e,n){var r=t("jsts");e.exports=function(t,e){var n=new r.io.GeoJSONReader,i=n.read(JSON.stringify(t.geometry)),e=n.read(JSON.stringify(e.geometry)),e=i.union(e);return{type:"Feature",geometry:e=(new r.io.GeoJSONWriter).write(e),properties:t.properties}}},{jsts:3}],27:[function(t,e,n){var s=t("turf-inside"),o=t("turf-helpers").featureCollection;e.exports=function(t,e){for(var n=o([]),i=0;i<e.features.length;i++)for(var r=0;r<t.features.length;r++){s(t.features[r],e.features[i])&&n.features.push(t.features[r])}return n}},{"turf-helpers":18,"turf-inside":19}]},{},[1]);
!function e(o,i,a){function u(t,n){if(!i[t]){if(!o[t]){var r="function"==typeof require&&require;if(!n&&r)return r(t,!0);if(c)return c(t,!0);throw(r=new Error("Cannot find module '"+t+"'")).code="MODULE_NOT_FOUND",r}r=i[t]={exports:{}},o[t][0].call(r.exports,function(n){return u(o[t][1][n]||n)},r,r.exports,e,o,i,a)}return i[t].exports}for(var c="function"==typeof require&&require,n=0;n<a.length;n++)u(a[n]);return u}({1:[function(n,t,r){window.topojson={topology:n("../node_modules/topojson/lib/topojson/topology"),client:n("../node_modules/topojson/build/topojson.js")}},{"../node_modules/topojson/build/topojson.js":3,"../node_modules/topojson/lib/topojson/topology":15}],2:[function(n,t,r){var e,o,t=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(t){if(e===setTimeout)return setTimeout(t,0);if((e===i||!e)&&setTimeout)return e=setTimeout,setTimeout(t,0);try{return e(t,0)}catch(n){try{return e.call(null,t,0)}catch(n){return e.call(this,t,0)}}}!function(){try{e="function"==typeof setTimeout?setTimeout:i}catch(n){e=i}try{o="function"==typeof clearTimeout?clearTimeout:a}catch(n){o=a}}();var c,f=[],s=!1,l=-1;function h(){s&&c&&(s=!1,c.length?f=c.concat(f):l=-1,f.length&&p())}function p(){if(!s){var n=u(h);s=!0;for(var t=f.length;t;){for(c=f,f=[];++l<t;)c&&c[l].run();l=-1,t=f.length}c=null,s=!1,function(t){if(o===clearTimeout)return clearTimeout(t);if((o===a||!o)&&clearTimeout)return o=clearTimeout,clearTimeout(t);try{o(t)}catch(n){try{return o.call(null,t)}catch(n){return o.call(this,t)}}}(n)}}function g(n,t){this.fun=n,this.array=t}function d(){}t.nextTick=function(n){var t=new Array(arguments.length-1);if(1<arguments.length)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];f.push(new g(n,t)),1!==f.length||s||u(p)},g.prototype.run=function(){this.fun.apply(null,this.array)},t.title="browser",t.browser=!0,t.env={},t.argv=[],t.version="",t.versions={},t.on=d,t.addListener=d,t.once=d,t.off=d,t.removeListener=d,t.removeAllListeners=d,t.emit=d,t.prependListener=d,t.prependOnceListener=d,t.listeners=function(n){return[]},t.binding=function(n){throw new Error("process.binding is not supported")},t.cwd=function(){return"/"},t.chdir=function(n){throw new Error("process.chdir is not supported")},t.umask=function(){return 0}},{}],3:[function(n,t,r){var e,o;e=this,o=function(n){"use strict";function g(){}function d(n){if(!n)return g;var r,e,o=n.scale[0],i=n.scale[1],a=n.translate[0],u=n.translate[1];return function(n,t){t||(r=e=0),n[0]=(r+=n[0])*o+a,n[1]=(e+=n[1])*i+u}}function v(n,t){for(var r=0,e=n.length;r<e;){var o=r+e>>>1;n[o]<t?r=1+o:e=o}return r}function r(n,t){n={type:"Feature",id:t.id,properties:t.properties||{},geometry:o(n,t)};return null==t.id&&delete n.id,n}function o(n,t){var a=d(n.transform),u=n.arcs;function o(n,t){t.length&&t.pop();for(var r,e=u[n<0?~n:n],o=0,i=e.length;o<i;++o)t.push(r=e[o].slice()),a(r,o);n<0&&function(n,t){for(var r,e=n.length,o=e-t;o<--e;)r=n[o],n[o++]=n[e],n[e]=r}(t,i)}function r(n){return n=n.slice(),a(n,0),n}function e(n){for(var t=[],r=0,e=n.length;r<e;++r)o(n[r],t);return t.length<2&&t.push(t[0].slice()),t}function i(n){for(var t=e(n);t.length<4;)t.push(t[0].slice());return t}function c(n){return n.map(i)}var f={Point:function(n){return r(n.coordinates)},MultiPoint:function(n){return n.coordinates.map(r)},LineString:function(n){return e(n.arcs)},MultiLineString:function(n){return n.arcs.map(e)},Polygon:function(n){return c(n.arcs)},MultiPolygon:function(n){return n.arcs.map(c)}};return function n(t){var r=t.type;return"GeometryCollection"===r?{type:r,geometries:t.geometries.map(n)}:r in f?{type:r,coordinates:f[r](t)}:null}(t)}function h(a,e){var o={},u={},c={},i=[],f=-1;function n(n,t){for(var r in n){var e=n[r];delete t[e.start],delete e.start,delete e.end,e.forEach(function(n){o[n<0?~n:n]=1}),i.push(e)}}return e.forEach(function(n,t){var r=a.arcs[n<0?~n:n];r.length<3&&!r[1][0]&&!r[1][1]&&(r=e[++f],e[f]=n,e[t]=r)}),e.forEach(function(n){var t,r,e=function(n){var t,r=a.arcs[n<0?~n:n],e=r[0];a.transform?(t=[0,0],r.forEach(function(n){t[0]+=n[0],t[1]+=n[1]})):t=r[r.length-1];return n<0?[t,e]:[e,t]}(n),o=e[0],i=e[1];(e=c[o])?(delete c[e.end],e.push(n),e.end=i,(t=u[i])?(delete u[t.start],r=t===e?e:e.concat(t),u[r.start=e.start]=c[r.end=t.end]=r):u[e.start]=c[e.end]=e):(e=u[i])?(delete u[e.start],e.unshift(n),e.start=o,(t=c[o])?(delete c[t.end],r=t===e?e:t.concat(e),u[r.start=t.start]=c[r.end=e.end]=r):u[e.start]=c[e.end]=e):u[(e=[n]).start=o]=c[e.end=i]=e}),n(c,u),n(u,c),e.forEach(function(n){o[n<0?~n:n]||i.push([n])}),i}function t(n,t,r){var e=[];function o(n){var t=n<0?~n:n;(c[t]||(c[t]=[])).push({i:n,g:u})}function i(n){n.forEach(o)}function a(n){n.forEach(i)}if(1<arguments.length){var u,c=[],f={LineString:i,MultiLineString:a,Polygon:a,MultiPolygon:function(n){n.forEach(a)}};!function n(t){"GeometryCollection"===t.type?t.geometries.forEach(n):t.type in f&&f[(u=t).type](t.arcs)}(t),c.forEach(arguments.length<3?function(n){e.push(n[0].i)}:function(n){r(n[0].g,n[n.length-1].g)&&e.push(n[0].i)})}else for(var s=0,l=n.arcs.length;s<l;++s)e.push(s);return{type:"MultiLineString",arcs:h(n,e)}}function i(n){var t=n[0],r=n[1],n=n[2];return Math.abs((t[0]-n[0])*(r[1]-t[1])-(t[0]-r[0])*(n[1]-t[1]))}function e(u,n){var c={},r=[],e=[];function t(t){t.forEach(function(n){n.forEach(function(n){(c[n=n<0?~n:n]||(c[n]=[])).push(t)})}),r.push(t)}function f(n){return Math.abs(function(n){for(var t,r=-1,e=n.length,o=n[e-1],i=0;++r<e;)t=o,o=n[r],i+=t[0]*o[1]-t[1]*o[0];return i/2}(o(u,{type:"Polygon",arcs:[n]}).coordinates[0]))}return n.forEach(function(n){"Polygon"===n.type?t(n.arcs):"MultiPolygon"===n.type&&n.arcs.forEach(t)}),r.forEach(function(n){if(!n._){var t=[],r=[n];for(n._=1,e.push(t);n=r.pop();)t.push(n),n.forEach(function(n){n.forEach(function(n){c[n<0?~n:n].forEach(function(n){n._||(n._=1,r.push(n))})})})}}),r.forEach(function(n){delete n._}),{type:"MultiPolygon",arcs:e.map(function(n){var t,r=[];if(n.forEach(function(n){n.forEach(function(n){n.forEach(function(n){c[n<0?~n:n].length<2&&r.push(n)})})}),1<(t=(r=h(u,r)).length))for(var e,o,i=1,a=f(r[0]);i<t;++i)(e=f(r[i]))>a&&(o=r[0],r[0]=r[i],r[i]=o,a=e);return r})}}function c(n,t){return n[1][2]-t[1][2]}n.version="1.6.27",n.mesh=function(n){return o(n,t.apply(this,arguments))},n.meshArcs=t,n.merge=function(n){return o(n,e.apply(this,arguments))},n.mergeArcs=e,n.feature=function(t,n){return"GeometryCollection"===n.type?{type:"FeatureCollection",features:n.geometries.map(function(n){return r(t,n)})}:r(t,n)},n.neighbors=function(n){var e={},t=n.map(function(){return[]});function r(n,r){n.forEach(function(n){n<0&&(n=~n);var t=e[n];t?t.push(r):e[n]=[r]})}function o(n,t){n.forEach(function(n){r(n,t)})}var i,a={LineString:r,MultiLineString:o,Polygon:o,MultiPolygon:function(n,t){n.forEach(function(n){o(n,t)})}};for(i in n.forEach(function t(n,r){"GeometryCollection"===n.type?n.geometries.forEach(function(n){t(n,r)}):n.type in a&&a[n.type](n.arcs,r)}),e)for(var u=e[i],c=u.length,f=0;f<c;++f)for(var s=f+1;s<c;++s){var l,h=u[f],p=u[s];(l=t[h])[i=v(l,p)]!==p&&l.splice(i,0,p),(l=t[p])[i=v(l,h)]!==h&&l.splice(i,0,h)}return t},n.presimplify=function(n,f){var t,a,u,s=d(n.transform),l=function(n){if(!n)return g;var e,o,i=n.scale[0],a=n.scale[1],u=n.translate[0],c=n.translate[1];return function(n,t){t||(e=o=0);var r=Math.round((n[0]-u)/i),t=Math.round((n[1]-c)/a);n[0]=r-e,n[1]=t-o,e=r,o=t}}(n.transform),h=(a=[],u=0,(t={}).push=function(n){return e(a[n._=u]=n,u++),u},t.pop=function(){if(!(u<=0)){var n,t=a[0];return 0<--u&&(n=a[u],o(a[n._=0]=n,0)),t}},t.remove=function(n){var t,r=n._;if(a[r]===n)return r!==--u&&(c(t=a[u],n)<0?e:o)(a[t._=r]=t,r),r},t);function e(n,t){for(;0<t;){var r=(t+1>>1)-1,e=a[r];if(0<=c(n,e))break;a[e._=t]=e,a[n._=t=r]=n}}function o(n,t){for(;;){var r=t+1<<1,e=r-1,o=t,i=a[o];if(e<u&&c(a[e],i)<0&&(i=a[o=e]),r<u&&c(a[r],i)<0&&(i=a[o=r]),o===t)break;a[i._=t]=i,a[n._=t=o]=n}}function p(n){h.remove(n),n[1][2]=f(n),h.push(n)}return f=f||i,n.arcs.forEach(function(n){for(var t,r,e=[],o=0,i=0,a=n.length;i<a;++i)r=n[i],s(n[i]=[r[0],r[1],1/0],i);for(i=1,a=n.length-1;i<a;++i)(t=n.slice(i-1,i+2))[1][2]=f(t),e.push(t),h.push(t);for(i=0,a=e.length;i<a;++i)(t=e[i]).previous=e[i-1],t.next=e[i+1];for(;t=h.pop();){var u=t.previous,c=t.next;t[1][2]<o?t[1][2]=o:o=t[1][2],u&&(u.next=c,u[2]=t[2],p(u)),c&&(c.previous=u,c[0]=t[0],p(c))}n.forEach(l)}),n},Object.defineProperty(n,"__esModule",{value:!0})},"object"==typeof r&&void 0!==t?o(r):"function"==typeof define&&define.amd?define(["exports"],o):o(e.topojson=e.topojson||{})},{}],4:[function(n,t,r){t.exports=function(n){var r=1/0,e=1/0,o=-1/0,i=-1/0;function t(n){n&&u.hasOwnProperty(n.type)&&u[n.type](n)}var a,u={GeometryCollection:function(n){n.geometries.forEach(t)},Point:function(n){c(n.coordinates)},MultiPoint:function(n){n.coordinates.forEach(c)},LineString:function(n){f(n.coordinates)},MultiLineString:function(n){n.coordinates.forEach(f)},Polygon:function(n){n.coordinates.forEach(f)},MultiPolygon:function(n){n.coordinates.forEach(s)}};function c(n){var t=n[0],n=n[1];t<r&&(r=t),o<t&&(o=t),n<e&&(e=n),i<n&&(i=n)}function f(n){n.forEach(c)}function s(n){n.forEach(f)}for(a in n)t(n[a]);return[r,e,o,i]}},{}],5:[function(n,t,r){r.name="cartesian",r.formatDistance=function(n){return n.toString()},r.ringArea=function(n){var t,r=-1,e=n.length,o=n[e-1],i=0;for(;++r<e;)t=o,o=n[r],i+=t[0]*o[1]-t[1]*o[0];return.5*i},r.absoluteArea=Math.abs,r.triangleArea=function(n){return Math.abs((n[0][0]-n[2][0])*(n[1][1]-n[0][1])-(n[0][0]-n[1][0])*(n[2][1]-n[0][1]))},r.distance=function(n,t,r,e){r=n-r,e=t-e;return Math.sqrt(r*r+e*e)}},{}],6:[function(n,t,r){t.exports=function(n,r){function t(n){var t=r(n);null==t?delete n.id:n.id=t}arguments.length<2&&(r=function(n){return n.id});var e,o,i={Feature:t,FeatureCollection:function(n){n.features.forEach(t)}};for(e in n)(o=n[e])&&i.hasOwnProperty(o.type)&&i[o.type](o);return n}},{}],7:[function(n,t,r){t.exports={cartesian:n("./cartesian"),spherical:n("./spherical")}},{"./cartesian":5,"./spherical":13}],8:[function(n,t,r){t.exports=function(n){for(var t=n.arcs,r=-1,e=t.length;++r<e;)for(var o,i,a=t[r],u=0,c=a.length,f=a[0],s=f[0],l=f[1];++u<c;)o=(f=a[u])[0],i=f[1],a[u]=[o-s,i-l],s=o,l=i;return n}},{}],9:[function(n,t,r){t.exports=function(n){function t(n){var t=n.geometry;return null==t?n.type=null:(o(t),n.type=t.type,t.geometries?n.geometries=t.geometries:t.coordinates&&(n.coordinates=t.coordinates)),delete n.geometry,n}function o(n){return n?(a.hasOwnProperty(n.type)&&a[n.type](n),n):{type:null}}var r,e,i={Feature:t,FeatureCollection:function(n){return n.type="GeometryCollection",n.geometries=n.features,n.features.forEach(t),delete n.features,n}},a={GeometryCollection:function(n){for(var t=n.geometries,r=-1,e=t.length;++r<e;)t[r]=o(t[r])},MultiPoint:function(n){n.coordinates.length?n.coordinates.length<2&&(n.type="Point",n.coordinates=n.coordinates[0]):(n.type=null,delete n.coordinates)},LineString:function(n){n.coordinates.length||(n.type=null,delete n.coordinates)},MultiLineString:function(n){for(var t=n.coordinates,r=0,e=0,o=t.length;r<o;++r){var i=t[r];i.length&&(t[e++]=i)}e?e<2?(n.type="LineString",n.coordinates=t[0]):n.coordinates.length=e:(n.type=null,delete n.coordinates)},Polygon:function(n){for(var t=n.coordinates,r=0,e=0,o=t.length;r<o;++r){var i=t[r];i.length&&(t[e++]=i)}e?n.coordinates.length=e:(n.type=null,delete n.coordinates)},MultiPolygon:function(n){for(var t=n.coordinates,r=0,e=0,o=t.length;r<o;++r){for(var i=t[r],a=0,u=0,c=i.length;a<c;++a){var f=i[a];f.length&&(i[u++]=f)}u&&(i.length=u,t[e++]=i)}e?e<2?(n.type="Polygon",n.coordinates=t[0]):t.length=e:(n.type=null,delete n.coordinates)}};for(r in n)n[r]=((e=n[r])&&i.hasOwnProperty(e.type)?i[e.type]:o)(e);return n}},{}],10:[function(n,t,r){var s=n("./quantize");t.exports=function(n,t,r){if(t){if(r===t||!n.bbox.every(isFinite))return n;var e=r/t,o=s(0,0,e,e);n.transform.scale[0]/=e,n.transform.scale[1]/=e}else{var i=n.bbox,a=isFinite(i[0])?i[0]:0,t=isFinite(i[1])?i[1]:0,e=isFinite(i[2])?i[2]:0,i=isFinite(i[3])?i[3]:0,o=s(-a,-t,e-a?(r-1)/(e-a):1,i-t?(r-1)/(i-t):1);n.transform=o.transform}function u(n){n&&f.hasOwnProperty(n.type)&&f[n.type](n)}var c,f={GeometryCollection:function(n){n.geometries.forEach(u)},Point:function(n){o.point(n.coordinates)},MultiPoint:function(n){n.coordinates.forEach(o.point)}};for(c in n.objects)u(n.objects[c]);return n.arcs=n.arcs.map(function(n){return o.line(n=n.map(function(n){return n.slice()})),n.length<2&&n.push(n[0]),n}),n}},{"./quantize":12}],11:[function(n,t,r){var h=n("./quantize");t.exports=function(n,t,r,e){arguments.length<4&&(e=r);var o=isFinite(t[0])?t[0]:0,i=isFinite(t[1])?t[1]:0,a=isFinite(t[2])?t[2]:0,u=isFinite(t[3])?t[3]:0,c=h(-o,-i,a-o?(e-1)/(a-o)*r/e:1,u-i?(e-1)/(u-i)*r/e:1);function f(n){n&&l.hasOwnProperty(n.type)&&l[n.type](n)}var s,l={GeometryCollection:function(n){n.geometries.forEach(f)},Point:function(n){c.point(n.coordinates)},MultiPoint:function(n){n.coordinates.forEach(c.point)},LineString:function(n){n=n.coordinates;c.line(n),n.length<2&&(n[1]=n[0])},MultiLineString:function(n){for(var t=n.coordinates,r=0,e=t.length;r<e;++r){var o=t[r];c.line(o),o.length<2&&(o[1]=o[0])}},Polygon:function(n){for(var t=n.coordinates,r=0,e=t.length;r<e;++r){var o=t[r];for(c.line(o);o.length<4;)o.push(o[0])}},MultiPolygon:function(n){for(var t=n.coordinates,r=0,e=t.length;r<e;++r)for(var o=t[r],i=0,a=o.length;i<a;++i){var u=o[i];for(c.line(u);u.length<4;)u.push(u[0])}}};for(s in n)f(n[s]);return c.transform}},{"./quantize":12}],12:[function(n,t,r){t.exports=function(t,r,e,o){function s(n){return n[0]=Math.round((n[0]+t)*e),n[1]=Math.round((n[1]+r)*o),n}return{point:s,line:function(n){for(var t,r,e,o=0,i=1,a=n.length,u=s(n[0]),c=u[0],f=u[1];++o<a;)r=(u=s(n[o]))[0],e=u[1],r===c&&e===f||((t=n[i++])[0]=c=r,t[1]=f=e);n.length=i},transform:{scale:[1/e,1/o],translate:[-t,-r]}}}},{}],13:[function(n,t,r){var d=Math.PI,v=d/4,y=d/180;function o(n,t){var r=(t[0]-n[0])*y,e=Math.sin(r),o=Math.cos(r),i=Math.sin(n[1]*y),r=Math.cos(n[1]*y),n=Math.sin(t[1]*y),t=Math.cos(t[1]*y);return Math.atan2(Math.sqrt((e=t*e)*e+(e=r*n-i*t*o)*e),i*n+r*t*o)}function i(n){return(n=Math.sin(n/2))*n}r.name="spherical",r.formatDistance=function(n){var t=n*y*6371;return(1<t?t.toFixed(3)+"km":(1e3*t).toPrecision(3)+"m")+" ("+n.toPrecision(3)+"°)"},r.ringArea=function(n){if(!n.length)return 0;for(var t=0,r=n[0],e=r[0]*y,o=r[1]*y/2+v,i=e,a=Math.cos(o),u=Math.sin(o),c=1,f=n.length;c<f;++c){r=n[c],e=r[0]*y,o=r[1]*y/2+v;var s=e-i,l=Math.cos(o),h=Math.sin(o),p=u*h,g=a*l+p*Math.cos(s),s=p*Math.sin(s);t+=Math.atan2(s,g),i=e,a=l,u=h}return 2*(d<t?t-2*d:t<-d?t+2*d:t)},r.absoluteArea=function(n){return n<0?n+4*d:n},r.triangleArea=function(n){var t=o(n[0],n[1]),r=o(n[1],n[2]),e=o(n[2],n[0]),n=(t+r+e)/2;return 4*Math.atan(Math.sqrt(Math.max(0,Math.tan(n/2)*Math.tan((n-t)/2)*Math.tan((n-r)/2)*Math.tan((n-e)/2))))},r.distance=function(n,t,r,e){return n*=y,t*=y,r*=y,e*=y,2*Math.asin(Math.sqrt(i(e-t)+Math.cos(t)*Math.cos(e)*i(r-n)))}},{}],14:[function(n,t,r){var l=n("./type");t.exports=function(n,t){var r,e,o,i=-180,P=i+.01,x=179.99,a=-90,b=a+.01,u=90,q=u-.01;function L(n){return n<=b?[0,a]:q<=n?[0,u]:[i,n]}function c(n){for(var t=[],r=0,e=n.length;r<e;++r){for(var o=n[r],i=0,a=o.length;i<a;++i){var u=o[i];u.polygon=o,t.push(u);for(var c=0,f=u.length;c<f;++c){var s=u[c],l=s[0],s=s[1];if(l<=P||x<=l||s<=b||q<=s){for(var h=c+1;h<f;++h){var p=u[h],g=p[0],p=p[1];if(P<g&&g<x&&b<p&&p<q)break}if(h!==c+1){if(c?((l=u.slice(0,c+1)).polygon=o,l[l.length-1]=L(s),t[t.length-1]=l):t.pop(),f<=h)break;t.push(u=u.slice(h-1)),u[0]=L(u[0][1]),u.polygon=o,c=-1,f=u.length}}}}o.length=0}for(var d={},v={},c=0,f=t.length;c<f;++c){var y=(M=t[c])[0],m=M[M.length-1];y[0]!==m[0]||y[1]!==m[1]?(M.index=c,d[y]=v[m]=M):(M.polygon.push(M),t[c]=null)}for(var M,w,E,c=0;c<f;++c){(M=t[c])&&(y=M[0],m=M[M.length-1],w=v[y],E=d[m],delete d[y],delete v[m],y[0]!==m[0]||y[1]!==m[1]?w?(delete v[y],delete d[w[0]],w.pop(),t[w.index]=null,(M=w.concat(M)).polygon=w.polygon,w===E?M.polygon.push(M):(M.index=f++,t.push(d[M[0]]=v[M[M.length-1]]=M))):E?(delete d[m],delete v[E[E.length-1]],M.pop(),(M=M.concat(E)).polygon=E.polygon,M.index=f++,t[E.index]=null,t.push(d[M[0]]=v[M[M.length-1]]=M)):(M.push(M[0]),M.polygon.push(M)):M.polygon.push(M))}}t&&(r=t.scale[0],e=t.scale[1],o=t.translate[0],t=t.translate[1],i=Math.round((i-o)/r),Math.round((180-o)/r),a=Math.round((a-t)/e),u=Math.round((u-t)/e),P=Math.round((P-o)/r),x=Math.round((x-o)/r),b=Math.round((b-t)/e),q=Math.round((q-t)/e));var f,s=l({Polygon:function(n){c([n.coordinates])},MultiPolygon:function(n){c(n.coordinates)}});for(f in n)s.object(n[f])}},{"./type":26}],15:[function(n,t,r){(function(E){(function(){n("./type");var s=n("./stitch"),l=n("./coordinate-systems"),h=n("./topology/index"),p=n("./delta"),g=n("./geomify"),d=n("./pre-quantize"),v=n("./post-quantize"),y=n("./bounds"),m=n("./compute-id"),M=n("./transform-properties"),w=1e-6;t.exports=function(n,t){var r,e=1e4,o=1e4,i=function(n){return n.id},a=function(){},u=!0,c=!1,f=null;if(t&&("verbose"in t&&(c=!!t.verbose),"stitch-poles"in t&&(u=!!t["stitch-poles"]),"coordinate-system"in t&&(f=l[t["coordinate-system"]]),"minimum-area"in t&&t["minimum-area"],"quantization"in t&&(e=o=+t.quantization),"pre-quantization"in t&&(e=+t["pre-quantization"]),"post-quantization"in t&&(o=+t["post-quantization"]),"id"in t&&(i=t.id),"property-transform"in t&&(a=t["property-transform"])),e/o%1)throw new Error("post-quantization is not a divisor of pre-quantization");if(e&&!o)throw new Error("post-quantization is required when input is already quantized");m(n,i),M(n,a),g(n);i=y(n),a=i[0]<-180-w||i[1]<-90-w||i[2]>180+w||i[3]>90+w;if(f||(f=l[a?"cartesian":"spherical"],t&&(t["coordinate-system"]=f.name)),f===l.spherical){if(a)throw new Error("spherical coordinates outside of [±180°, ±90°]");i[0]<w-180&&(i[0]=-180),i[1]<w-90&&(i[1]=-90),i[2]>180-w&&(i[2]=180),i[3]>90-w&&(i[3]=90)}c&&E.stderr.write("bounds: "+i.join(" ")+" ("+f.name+")\n"),e&&(r=d(n,i,e,o),c&&E.stderr.write("pre-quantization: "+r.scale.map(function(n){return f.formatDistance(n)}).join(" ")+"\n")),f===l.spherical&&u&&s(n,r);n=h(n);return e&&(n.transform=r),n.bbox=i,c&&E.stderr.write("topology: "+n.arcs.length+" arcs, "+n.arcs.reduce(function(n,t){return n+t.length},0)+" points\n"),o&&o!==e&&(v(n,e,o),r=n.transform,c&&E.stderr.write("post-quantization: "+r.scale.map(function(n){return f.formatDistance(n)}).join(" ")+"\n")),o&&p(n),n}}).call(this)}).call(this,n("_process"))},{"./bounds":4,"./compute-id":6,"./coordinate-systems":7,"./delta":8,"./geomify":9,"./post-quantize":10,"./pre-quantize":11,"./stitch":14,"./topology/index":21,"./transform-properties":25,"./type":26,_process:2}],16:[function(n,t,r){var w=n("./join");function E(n,t,r){for(var e,o=t+(r---t>>1);t<o;++t,--r)e=n[t],n[t]=n[r],n[r]=e}t.exports=function(n){for(var t=w(n),r=n.coordinates,e=n.lines,o=n.rings,i=0,a=e.length;i<a;++i)for(var u=e[i],c=u[0],f=u[1];++c<f;){t.has(r[c])&&(g={0:c,1:u[1]},u[1]=c,u=u.next=g)}for(var s,l,h,p,i=0,a=o.length;i<a;++i)for(var g,d=o[i],v=d[0],y=v,m=d[1],M=t.has(r[v]);++y<m;){t.has(r[y])&&(M?(g={0:y,1:d[1]},d[1]=y,d=d.next=g):(p=(h=m)-y,E(s=r,l=v,h),E(s,l,l+p),E(s,l+p,h),r[m]=r[v],M=!0,y=v))}return n}},{"./join":22}],17:[function(n,t,r){n("./join");var d=n("./hashmap"),v=n("./point-hash"),y=n("./point-equal");t.exports=function(n){var s=n.coordinates,t=n.lines,r=n.rings,e=t.length+r.length;delete n.lines,delete n.rings;for(var o=0,i=t.length;o<i;++o)for(var a=t[o];a=a.next;)++e;for(o=0,i=r.length;o<i;++o)for(var u=r[o];u=u.next;)++e;for(var f=d(2*e*1.4,v,y),l=n.arcs=[],o=0,i=t.length;o<i;++o)for(a=t[o];c(a),a=a.next;);for(o=0,i=r.length;o<i;++o){if((u=r[o]).next)for(;c(u),u=u.next;);else!function(n){var t,r;if(r=f.get(t=s[n[0]]))for(var e=0,o=r.length;e<o;++e){if(h(i=r[e],n))return n[0]=i[0],n[1]=i[1];if(p(i,n))return n[0]=i[1],n[1]=i[0]}if(r=f.get(t=s[n[0]+g(n)]))for(var i,e=0,o=r.length;e<o;++e){if(h(i=r[e],n))return n[0]=i[0],n[1]=i[1];if(p(i,n))return n[0]=i[1],n[1]=i[0]}r?r.push(n):f.set(t,[n]);l.push(n)}(u)}function c(n){var t,r,e,o;if(e=f.get(t=s[n[0]]))for(var i=0,a=e.length;i<a;++i){var u=e[i];if(function(n,t){var r=n[0],e=t[0],o=n[1],t=t[1];if(r-o!=e-t)return!1;for(;r<=o;++r,++e)if(!y(s[r],s[e]))return!1;return!0}(u,n))return n[0]=u[0],void(n[1]=u[1])}if(o=f.get(r=s[n[1]]))for(i=0,a=o.length;i<a;++i){var c=o[i];if(function(n,t){var r=n[0],e=t[0],o=n[1],i=t[1];if(r-o!=e-i)return!1;for(;r<=o;++r,--i)if(!y(s[r],s[i]))return!1;return!0}(c,n))return n[1]=c[0],void(n[0]=c[1])}e?e.push(n):f.set(t,[n]),o?o.push(n):f.set(r,[n]),l.push(n)}function h(n,t){var r=n[0],e=t[0],o=n[1]-r;if(o==t[1]-e){for(var i=g(n),a=g(t),u=0;u<o;++u)if(!y(s[r+(u+i)%o],s[e+(u+a)%o]))return;return 1}}function p(n,t){var r=n[0],e=t[0],o=n[1],i=t[1],a=o-r;if(a==i-e){for(var u=g(n),c=a-g(t),f=0;f<a;++f)if(!y(s[r+(f+u)%a],s[i-(f+c)%a]))return;return 1}}function g(n){for(var t=n[0],r=n[1],e=t,o=e,i=s[e];++e<r;){var a=s[e];(a[0]<i[0]||a[0]===i[0]&&a[1]<i[1])&&(o=e,i=a)}return o-t}return n}},{"./hashmap":19,"./join":22,"./point-equal":23,"./point-hash":24}],18:[function(n,t,r){t.exports=function(n){var o=-1,i=[],a=[],u=[];function t(n){n&&e.hasOwnProperty(n.type)&&e[n.type](n)}var r,e={GeometryCollection:function(n){n.geometries.forEach(t)},LineString:function(n){n.arcs=c(n.coordinates),delete n.coordinates},MultiLineString:function(n){n.arcs=n.coordinates.map(c),delete n.coordinates},Polygon:function(n){n.arcs=n.coordinates.map(f),delete n.coordinates},MultiPolygon:function(n){n.arcs=n.coordinates.map(s),delete n.coordinates}};function c(n){for(var t=0,r=n.length;t<r;++t)u[++o]=n[t];var e={0:o-r+1,1:o};return i.push(e),e}function f(n){for(var t=0,r=n.length;t<r;++t)u[++o]=n[t];var e={0:o-r+1,1:o};return a.push(e),e}function s(n){return n.map(f)}for(r in n)t(n[r]);return{type:"Topology",coordinates:u,lines:i,rings:a,objects:n}}},{}],19:[function(n,t,r){t.exports=function(i,a,u,n,c,t){3===arguments.length&&(n=t=Array,c=null);for(var f=new n(i=1<<Math.max(4,Math.ceil(Math.log(i)/Math.LN2))),s=new t(i),l=i-1,r=0;r<i;++r)f[r]=c;return{set:function(n,t){for(var r=a(n)&l,e=f[r],o=0;e!=c;){if(u(e,n))return s[r]=t;if(++o>=i)throw new Error("full hashmap");e=f[r=r+1&l]}return f[r]=n,s[r]=t,t},maybeSet:function(n,t){for(var r=a(n)&l,e=f[r],o=0;e!=c;){if(u(e,n))return s[r];if(++o>=i)throw new Error("full hashmap");e=f[r=r+1&l]}return f[r]=n,s[r]=t,t},get:function(n,t){for(var r=a(n)&l,e=f[r],o=0;e!=c;){if(u(e,n))return s[r];if(++o>=i)break;e=f[r=r+1&l]}return t},keys:function(){for(var n=[],t=0,r=f.length;t<r;++t){var e=f[t];e!=c&&n.push(e)}return n}}}},{}],20:[function(n,t,r){t.exports=function(o,i,a,n,u){3===arguments.length&&(n=Array,u=null);for(var c=new n(o=1<<Math.max(4,Math.ceil(Math.log(o)/Math.LN2))),f=o-1,t=0;t<o;++t)c[t]=u;return{add:function(n){for(var t=i(n)&f,r=c[t],e=0;r!=u;){if(a(r,n))return!0;if(++e>=o)throw new Error("full hashset");r=c[t=t+1&f]}return c[t]=n,!0},has:function(n){for(var t=i(n)&f,r=c[t],e=0;r!=u;){if(a(r,n))return!0;if(++e>=o)break;r=c[t=t+1&f]}return!1},values:function(){for(var n=[],t=0,r=c.length;t<r;++t){var e=c[t];e!=u&&n.push(e)}return n}}}},{}],21:[function(n,t,r){var f=n("./hashmap"),s=n("./extract"),l=n("./cut"),h=n("./dedup");function p(n){var t=n[0],r=n[1];return r<t&&(n=t,t=r,r=n),t+31*r}function g(n,t){var r,e=n[0],o=n[1],n=t[0],t=t[1];return o<e&&(r=e,e=o,o=r),t<n&&(r=n,n=t,t=r),e===n&&o===t}t.exports=function(n){var t=h(l(s(n))),r=t.coordinates,e=f(1.4*t.arcs.length,p,g);function o(n){n&&a.hasOwnProperty(n.type)&&a[n.type](n)}n=t.objects,t.arcs=t.arcs.map(function(n,t){return e.set(n,t),r.slice(n[0],n[1]+1)}),delete t.coordinates,r=null;var i,a={GeometryCollection:function(n){n.geometries.forEach(o)},LineString:function(n){n.arcs=u(n.arcs)},MultiLineString:function(n){n.arcs=n.arcs.map(u)},Polygon:function(n){n.arcs=n.arcs.map(u)},MultiPolygon:function(n){n.arcs=n.arcs.map(c)}};function u(n){var t=[];do{var r=e.get(n)}while(t.push(n[0]<n[1]?r:~r),n=n.next);return t}function c(n){return n.map(u)}for(i in n)o(n[i]);return t}},{"./cut":16,"./dedup":17,"./extract":18,"./hashmap":19}],22:[function(n,t,r){var q=n("./hashset"),L=n("./hashmap"),j=n("./point-hash"),F=n("./point-equal");t.exports=function(n){for(var o=n.coordinates,t=n.lines,r=n.rings,e=function(){for(var n=L(1.4*o.length,E,P,Int32Array,-1,Int32Array),t=new Int32Array(o.length),r=0,e=o.length;r<e;++r)t[r]=n.maybeSet(r,r);return t}(),i=new Int32Array(o.length),a=new Int32Array(o.length),u=new Int32Array(o.length),c=new Int8Array(o.length),f=0,s=0,l=o.length;s<l;++s)i[s]=a[s]=u[s]=-1;for(s=0,l=t.length;s<l;++s){var h=t[s],p=h[0],g=h[1],d=e[p],v=e[++p];for(++f,c[d]=1;++p<=g;)w(s,d,d=v,v=e[p]);++f,c[v]=1}for(s=0,l=o.length;s<l;++s)i[s]=-1;for(s=0,l=r.length;s<l;++s){var y=r[s],m=y[0]+1,M=y[1];for(w(s,e[M-1],d=e[m-1],v=e[m]);++m<=M;)w(s,d,d=v,v=e[m])}function w(n,t,r,e){var o;i[r]!==n&&(i[r]=n,0<=(o=a[r])?(n=u[r],o===t&&n===e||o===e&&n===t||(++f,c[r]=1)):(a[r]=t,u[r]=e))}function E(n){return j(o[n])}function P(n,t){return F(o[n],o[t])}i=a=u=null;for(var x,b=q(1.4*f,j,F),s=0,l=o.length;s<l;++s)c[x=e[s]]&&b.add(o[x]);return b}},{"./hashmap":19,"./hashset":20,"./point-equal":23,"./point-hash":24}],23:[function(n,t,r){t.exports=function(n,t){return n[0]===t[0]&&n[1]===t[1]}},{}],24:[function(n,t,r){var e=new ArrayBuffer(16),o=new Float64Array(e),i=new Uint32Array(e);t.exports=function(n){o[0]=n[0],o[1]=n[1];n=i[0]^i[1];return 2147483647&(n=n<<5^n>>7^i[2]^i[3])}},{}],25:[function(n,t,r){t.exports=function(n,e){function t(n){null==n.properties&&(n.properties={});var t=n.properties=e(n);if(t)for(var r in t)return;delete n.properties}arguments.length<2&&(e=function(){});var r,o,i={Feature:t,FeatureCollection:function(n){n.features.forEach(t)}};for(r in n)(o=n[r])&&i.hasOwnProperty(o.type)&&i[o.type](o);return n}},{}],26:[function(n,t,r){t.exports=function(n){for(var t in e)t in n||(n[t]=e[t]);return n.defaults=e,n};var e={Feature:function(n){n.geometry&&this.geometry(n.geometry)},FeatureCollection:function(n){for(var t=n.features,r=-1,e=t.length;++r<e;)this.Feature(t[r])},GeometryCollection:function(n){for(var t=n.geometries,r=-1,e=t.length;++r<e;)this.geometry(t[r])},LineString:function(n){this.line(n.coordinates)},MultiLineString:function(n){for(var t=n.coordinates,r=-1,e=t.length;++r<e;)this.line(t[r])},MultiPoint:function(n){for(var t=n.coordinates,r=-1,e=t.length;++r<e;)this.point(t[r])},MultiPolygon:function(n){for(var t=n.coordinates,r=-1,e=t.length;++r<e;)this.polygon(t[r])},Point:function(n){this.point(n.coordinates)},Polygon:function(n){this.polygon(n.coordinates)},object:function(n){return null==n?null:i.hasOwnProperty(n.type)?this[n.type](n):this.geometry(n)},geometry:function(n){return null!=n&&o.hasOwnProperty(n.type)?this[n.type](n):null},point:function(){},line:function(n){for(var t=-1,r=n.length;++t<r;)this.point(n[t])},polygon:function(n){for(var t=-1,r=n.length;++t<r;)this.line(n[t])}},o={LineString:1,MultiLineString:1,MultiPoint:1,MultiPolygon:1,Point:1,Polygon:1,GeometryCollection:1},i={Feature:1,FeatureCollection:1}},{}]},{},[1]);
!function(e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).overpassWizard=e()}(function(){return function n(a,u,i){function o(r,e){if(!u[r]){if(!a[r]){var t="function"==typeof require&&require;if(!e&&t)return t(r,!0);if(s)return s(r,!0);throw(t=new Error("Cannot find module '"+r+"'")).code="MODULE_NOT_FOUND",t}t=u[r]={exports:{}},a[r][0].call(t.exports,function(e){return o(a[r][1][e]||e)},t,t.exports,n,a,u,i)}return u[r].exports}for(var s="function"==typeof require&&require,e=0;e<i.length;e++)o(i[e]);return o}({1:[function(e,r,t){r.exports=function(u){var e={};if(!(u=u||{})){if("undefined"==typeof $)return!1;var r="data/iD_presets.json";try{$.ajax(r,{async:!1,dataType:"json"}).success(function(e){u=e}).error(function(){throw new Error})}catch(e){console.error("failed to load presets file",r,e)}}return Object.keys(u).map(function(e){e=u[e];e.nameCased=e.name,e.name=e.name.toLowerCase(),e.terms=e.terms?e.terms.map(function(e){return e.toLowerCase()}):[]}),function(){if("undefined"!=typeof $&&"undefined"!=typeof i18n){var e=i18n.getLanguage();if("en"!=e){var r="data/iD_presets_"+e+".json";try{$.ajax(r,{async:!1,dataType:"json"}).success(function(n){Object.keys(n).map(function(e){var r=n[e];(e=u[e]).translated=!0;var t=e.name;e.nameCased=r.name,e.name=r.name.toLowerCase(),r.terms&&(e.terms=r.terms.split(",").map(function(e){return e.trim().toLowerCase()}).concat(e.terms)),e.terms.unshift(t)})}).error(function(){throw new Error})}catch(e){console.error("failed to load preset translations file: "+r)}}}}(),e.get_query_clause=function(e){var t=e.free.toLowerCase(),e=Object.keys(u).map(function(e){return u[e]}).filter(function(e){return!1!==e.searchable&&(e.name===t||(e._termsIndex=e.terms.indexOf(t),-1!=e._termsIndex))});if(0===e.length)return!1;e.sort(function(e,r){return e.name===t?-1:r.name===t?1:e._termsIndex-r._termsIndex});var n=e[0],r=[];return n.geometry.forEach(function(e){switch(e){case"point":case"vertex":r.push("node");break;case"line":r.push("way");break;case"area":r.push("way"),r.push("relation");break;case"relation":r.push("relation");break;default:console.error("unknown geometry type "+e+" of preset "+n.name)}}),{types:r.filter(function(e,r,t){return t.indexOf(e)===r}),conditions:Object.keys(n.tags).map(function(e){var r=n.tags[e];return{query:"*"===r?"key":"eq",key:e,val:r}})}},e.fuzzy_search=function(e){var t=e.free.toLowerCase(),r=2+Math.floor(t.length/7);function n(e){return levenshteinDistance(e,t)<=r}e=Object.keys(u).map(function(e){return u[e]}).filter(function(e){return!1!==e.searchable&&(!!n(e.name)||e.terms.some(n))});return 0!==e.length&&(e.sort(function(e,r){return a(e)-a(r)}),e[0].nameCased);function a(e){return[e.name].concat(e.terms).map(function(e,r){return levenshteinDistance(e,t)}).reduce(function(e,r){return e<=r?e:r})}},e}},{}],2:[function(k,e,r){var q,x=k("./parser.js");function w(e){var r={logical:"or",queries:[]};return r.queries=function e(r){if(!r.logical)return[{logical:"and",queries:[r]}];if("and"===r.logical){for(var t=e(r.queries[0]),n=e(r.queries[1]),a=[],u=0;u<t.length;u++)for(var i=0;i<n.length;i++)a.push({logical:"and",queries:t[u].queries.concat(n[i].queries)});return a}if("or"===r.logical)return t=e(r.queries[0]),n=e(r.queries[1]),[].concat(t,n);console.error("unsupported boolean operator: "+r.logical)}(e),r}e.exports=function(e,r){var t,n,a={comment:!0,outputMode:"geom",globalBbox:!0,timeout:25,maxsize:void 0,outputFormat:"json",aroundRadius:1e3,freeFormPresets:void 0};for(t in r)a[t]=r[t];function u(e){return e.replace(/\*\//g,"[…]").replace(/\n/g,"\\n")}r=a;try{n=x.parse(e)}catch(e){return console.error("couldn't parse wizard input"),!1}var i,o=[];switch(!0===r.comment?(o.push("/*"),o.push("This has been generated by the overpass-turbo wizard."),o.push("The original search was:"),o.push("“"+u(e)+"”"),o.push("*/")):"string"==typeof r.comment&&(o.push("/*"),o.push(r.comment),o.push("*/"),comment=!0),o.push("[out:"+r.outputFormat+"][timeout:"+r.timeout+"]"+(void 0!==r.maxsize?"[maxsize:"+r.maxsize+"]":"")+(r.globalBbox&&"bbox"===n.bounds?"[bbox:{{bbox}}]":"")+";"),n.bounds){case"area":r.comment&&o.push("// fetch area “"+n.area+"” to search in"),o.push("{{geocodeArea:"+n.area+"}}->.searchArea;"),i="(area.searchArea)";break;case"around":r.comment&&o.push("// adjust the search radius (in meters) here"),o.push("{{radius="+r.aroundRadius+"}}"),i="(around:{{radius}},{{geocodeCoords:"+n.area+"}})";break;case"bbox":i=r.globalBbox?"":"({{bbox}})";break;case"global":i=void 0;break;default:return console.error("unknown bounds condition: "+n.bounds),!1}function s(e){function r(e){return e.replace(/([()[{*+.$^\\|?])/g,"\\$1")}function t(e){if("string"==typeof e)return e.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\t/g,"\\t").replace(/\n/g,"\\n")}var n=t(e.key),a=t(e.val);switch("substr"===e.query&&(e.query="like",e.val={regex:r(e.val)}),""===a&&("eq"===e.query?(e.query="like",e.val={regex:"^$"}):"neq"===e.query&&(e.query="notlike",e.val={regex:"^$"})),""===n&&("key"===e.query?(e.query="likelike",n="^$",e.val={regex:".*"}):"eq"===e.query?(e.query="likelike",n="^$",e.val={regex:"^"+r(e.val)+"$"}):"like"===e.query&&(e.query="likelike",n="^$")),e.query){case"key":return'["'+n+'"]';case"nokey":return'["'+n+'"!~".*"]';case"eq":return'["'+n+'"="'+a+'"]';case"neq":return'["'+n+'"!="'+a+'"]';case"like":return'["'+n+'"~"'+t(e.val.regex)+'"'+("i"===e.val.modifier?",i":"")+"]";case"likelike":return'[~"'+n+'"~"'+t(e.val.regex)+'"'+("i"===e.val.modifier?",i":"")+"]";case"notlike":return'["'+n+'"!~"'+t(e.val.regex)+'"'+("i"===e.val.modifier?",i":"")+"]";case"meta":switch(e.meta){case"id":return"("+a+")";case"newer":return e.val.match(/^-?\d+ ?(seconds?|minutes?|hours?|days?|weeks?|months?|years?)?$/)?'(newer:"{{date:'+a+'}}")':'(newer:"'+a+'")';case"user":return'(user:"'+a+'")';case"uid":return"(uid:"+a+")";default:return console.error("unknown query type: meta/"+e.meta),!1}case"free form":default:return console.error("unknown query type: "+e.query),!1}}function l(e){function r(e){return null===e.match(/^[a-zA-Z0-9_]+$/)?'"'+e.replace(/"/g,'\\"')+'"':e}function t(e){return null===e.regex.match(/^[a-zA-Z0-9_]+$/)||e.modifier?"/"+e.regex.replace(/\//g,"\\/")+"/"+(e.modifier||""):e.regex}switch(e.query){case"key":return u(r(e.key)+"=*");case"nokey":return u(r(e.key)+"!=*");case"eq":return u(r(e.key)+"="+r(e.val));case"neq":return u(r(e.key)+"!="+r(e.val));case"like":return u(r(e.key)+"~"+t(e.val));case"likelike":return u("~"+r(e.key)+"~"+t(e.val));case"notlike":return u(r(e.key)+"!~"+t(e.val));case"substr":return u(r(e.key)+":"+r(e.val));case"meta":switch(e.meta){case"id":return u("id:"+r(e.val));case"newer":return u("newer:"+r(e.val));case"user":return u("user:"+r(e.val));case"uid":return u("uid:"+r(e.val));default:return""}case"free form":return u(r(e.free));default:return""}}n.query=w(n.query),r.comment&&o.push("// gather results"),o.push("(");for(var c=0;c<n.query.queries.length;c++){for(var p=n.query.queries[c],f=["node","way","relation"],d=[],$=[],y=0;y<p.queries.length;y++){var h=p.queries[y];if("free form"===h.query){var v=(q=q||k("./free")(r.freeFormPresets)).get_query_clause(h);if(!1===v)return console.error("Couldn't find preset for free form input: "+h.free),!1;f=f.filter(function(e){return-1!=v.types.indexOf(e)}),r.comment&&$.push(l(h)),d=d.concat(v.conditions.map(s))}else if("type"===h.query)f=-1!=f.indexOf(h.type)?[h.type]:[];else{r.comment&&$.push(l(h));h=s(h);if(!1===h)return!1;d.push(h)}}$=$.join(" and "),r.comment&&o.push("  // query part for: “"+$+"”");for(var m=0;m<f.length;m++){for(var g="  "+f[m],b=0;b<d.length;b++)g+=d[b];i&&(g+=i),g+=";",o.push(g)}}return o.push(");"),r.comment&&o.push("// print results"),"recursive"===r.outputMode?(o.push("out body;"),o.push(">;"),o.push("out skel qt;")):o.push("out "+r.outputMode+";"),o.join("\n")}},{"./free":1,"./parser.js":3}],3:[function(e,r,t){r.exports=function(){"use strict";function v(e,r,t,n){this.message=e,this.expected=r,this.found=t,this.location=n,this.name="SyntaxError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(this,v)}function e(){this.constructor=r}var r,t;return r=v,t=Error,e.prototype=t.prototype,r.prototype=new e,{SyntaxError:v,parse:function(c){var e=1<arguments.length?arguments[1]:{},p={},r={start:0},t=0,f=[function(e){return e},"in bbox",{type:"literal",value:"in bbox",description:'"in bbox"'},"IN BBOX",{type:"literal",value:"IN BBOX",description:'"IN BBOX"'},function(e){return{bounds:"bbox",query:e}},"in",{type:"literal",value:"in",description:'"in"'},"IN",{type:"literal",value:"IN",description:'"IN"'},function(e,r){return{bounds:"area",query:e,area:r}},"around",{type:"literal",value:"around",description:'"around"'},"AROUND",{type:"literal",value:"AROUND",description:'"AROUND"'},function(e,r){return{bounds:"around",query:e,area:r}},"global",{type:"literal",value:"global",description:'"global"'},"GLOBAL",{type:"literal",value:"GLOBAL",description:'"GLOBAL"'},function(e){return{bounds:"global",query:e}},"or",{type:"literal",value:"or",description:'"or"'},"OR",{type:"literal",value:"OR",description:'"OR"'},"||",{type:"literal",value:"||",description:'"||"'},"|",{type:"literal",value:"|",description:'"|"'},function(e,r){return{logical:"or",queries:[e,r]}},"and",{type:"literal",value:"and",description:'"and"'},"AND",{type:"literal",value:"AND",description:'"AND"'},"&&",{type:"literal",value:"&&",description:'"&&"'},"&",{type:"literal",value:"&",description:'"&"'},function(e,r){return{logical:"and",queries:[e,r]}},"(",{type:"literal",value:"(",description:'"("'},")",{type:"literal",value:")",description:'")"'},function(e){return e},"=",{type:"literal",value:"=",description:'"="'},"==",{type:"literal",value:"==",description:'"=="'},function(e,r){return{query:"eq",key:e,val:r}},"!=",{type:"literal",value:"!=",description:'"!="'},"<>",{type:"literal",value:"<>",description:'"<>"'},function(e,r){return{query:"neq",key:e,val:r}},"*",{type:"literal",value:"*",description:'"*"'},function(e){return{query:"key",key:e}},"is",{type:"literal",value:"is",description:'"is"'},"not",{type:"literal",value:"not",description:'"not"'},"null",{type:"literal",value:"null",description:'"null"'},"IS",{type:"literal",value:"IS",description:'"IS"'},"NOT",{type:"literal",value:"NOT",description:'"NOT"'},"NULL",{type:"literal",value:"NULL",description:'"NULL"'},function(e){return{query:"nokey",key:e}},"~=",{type:"literal",value:"~=",description:'"~="'},"~",{type:"literal",value:"~",description:'"~"'},"=~",{type:"literal",value:"=~",description:'"=~"'},function(e,r){return{query:"like",key:e,val:r.regex?r:{regex:r}}},"like",{type:"literal",value:"like",description:'"like"'},"LIKE",{type:"literal",value:"LIKE",description:'"LIKE"'},function(e,r){return{query:"likelike",key:e,val:r.regex?r:{regex:r}}},"!~",{type:"literal",value:"!~",description:'"!~"'},function(e,r){return{query:"notlike",key:e,val:r.regex?r:{regex:r}}},":",{type:"literal",value:":",description:'":"'},function(e,r){return{query:"substr",key:e,val:r}},"type",{type:"literal",value:"type",description:'"type"'},function(e){return{query:"type",type:e}},"user",{type:"literal",value:"user",description:'"user"'},"uid",{type:"literal",value:"uid",description:'"uid"'},"newer",{type:"literal",value:"newer",description:'"newer"'},"id",{type:"literal",value:"id",description:'"id"'},function(e,r){return{query:"meta",meta:e,val:r}},function(e){return{query:"free form",free:e}},{type:"other",description:"Key"},/^[a-zA-Z0-9_:\-]/,{type:"class",value:"[a-zA-Z0-9_:-]",description:"[a-zA-Z0-9_:-]"},function(e){return e.join("")},'"',{type:"literal",value:'"',description:'"\\""'},"'",{type:"literal",value:"'",description:'"\'"'},function(e){return e[1]},{type:"other",description:"string"},/^[^'" ()~=!*\/:<>&|[\]{}#+@$%?\^.,]/,{type:"class",value:"[^'\" ()~=!*/:<>&|[\\]{}#+@$%?^.,]",description:"[^'\" ()~=!*/:<>&|[\\]{}#+@$%?^.,]"},function(e){return e.join("")},"\\",{type:"literal",value:"\\",description:'"\\\\"'},{type:"any",description:"any character"},function(e){return e},function(e){return e},/^['"\\bfnrtv]/,{type:"class",value:"['\"\\\\bfnrtv]",description:"['\"\\\\bfnrtv]"},function(e){return e.replace("b","\b").replace("f","\f").replace("n","\n").replace("r","\r").replace("t","\t").replace("v","\v")},"/",{type:"literal",value:"/",description:'"/"'},"i",{type:"literal",value:"i",description:'"i"'},"",function(e){return{regex:e[1],modifier:e[3]}},"\\/",{type:"literal",value:"\\/",description:'"\\\\/"'},function(){return"/"},{type:"other",description:"whitespace"},/^[ \t\n\r]/,{type:"class",value:"[ \\t\\n\\r]",description:"[ \\t\\n\\r]"}],d=[l("%;;/:#;!/1$;;/($8#: #!!)(#'#(\"'#&'#"),l('%;"/Y#$;</&#0#*;<&&&#/C$2!""6!7".) &2#""6#7$/($8#:%#!")(#\'#("\'#&\'#.Ł &%;"/y#$;</&#0#*;<&&&#/c$2&""6&7\'.) &2(""6(7)/H$$;</&#0#*;<&&&#/2$;2/)$8%:*%"$ )(%\'#($\'#(#\'#("\'#&\'#.Û &%;"/y#$;</&#0#*;<&&&#/c$2+""6+7,.) &2-""6-7./H$$;</&#0#*;<&&&#/2$;2/)$8%:/%"$ )(%\'#($\'#(#\'#("\'#&\'#.u &%;"/Y#$;</&#0#*;<&&&#/C$20""6071.) &22""6273/($8#:4#!")(#\'#("\'#&\'#./ &%;"/\' 8!:%!! )'),l('%;#/#$;</&#0#*;<&&&#/{$25""6576.A &27""6778.5 &29""697:.) &2;""6;7</H$$;</&#0#*;<&&&#/2$;"/)$8%:=%"$ )(%\'#($\'#(#\'#("\'#&\'#.# &;#'),l('%;$/#$;</&#0#*;<&&&#/{$2>""6>7?.A &2@""6@7A.5 &2B""6B7C.) &2D""6D7E/H$$;</&#0#*;<&&&#/2$;#/)$8%:F%"$ )(%\'#($\'#(#\'#("\'#&\'#.# &;$'),l(';%.b &%2G""6G7H/R#;;/I$;"/@$;;/7$2I""6I7J/($8%:K%!")(%\'#($\'#(#\'#("\'#&\'#'),l(";..Y &;/.S &;&.M &;'.G &;(.A &;).; &;*.5 &;+./ &;,.) &;-.# &;0"),l('%;1/_#;;/V$2L""6L7M.) &2N""6N7O/;$;;/2$;2/)$8%:P%"$ )(%\'#($\'#(#\'#("\'#&\'#'),l('%;1/_#;;/V$2Q""6Q7R.) &2S""6S7T/;$;;/2$;2/)$8%:U%"$ )(%\'#($\'#(#\'#("\'#&\'#'),l('%;1/d#;;/[$2L""6L7M.) &2N""6N7O/@$;;/7$2V""6V7W/($8%:X%!$)(%\'#($\'#(#\'#("\'#&\'#.ċ &%;2/ā#$;</&#0#*;<&&&#/ë$%2Y""6Y7Z/m#$;</&#0#*;<&&&#/W$2[""6[7\\/H$$;</&#0#*;<&&&#/2$2]""6]7^/#$+%)(%\'#($\'#(#\'#("\'#&\'#.} &%2_""6_7`/m#$;</&#0#*;<&&&#/W$2a""6a7b/H$$;</&#0#*;<&&&#/2$2c""6c7d/#$+%)(%\'#($\'#(#\'#("\'#&\'#/($8#:X#!")(#\'#("\'#&\'#'),l('%;1/d#;;/[$2Q""6Q7R.) &2S""6S7T/@$;;/7$2V""6V7W/($8%:e%!$)(%\'#($\'#(#\'#("\'#&\'#.Á &%;2/·#$;</&#0#*;<&&&#/¡$%2Y""6Y7Z/H#$;</&#0#*;<&&&#/2$2]""6]7^/#$+#)(#\'#("\'#&\'#.X &%2_""6_7`/H#$;</&#0#*;<&&&#/2$2c""6c7d/#$+#)(#\'#("\'#&\'#/($8#:e#!")(#\'#("\'#&\'#'),l('%;1/q#;;/h$2f""6f7g.5 &2h""6h7i.) &2j""6j7k/A$;;/8$;2.# &;8/)$8%:l%"$ )(%\'#($\'#(#\'#("\'#&\'#. &%;2/#$;</&#0#*;<&&&#/i$2m""6m7n.) &2o""6o7p/N$$;</&#0#*;<&&&#/8$;2.# &;8/)$8%:l%"$ )(%\'#($\'#(#\'#("\'#&\'#'),l("%2h\"\"6h7i/#;;/z$;2/q$;;/h$2f\"\"6f7g.5 &2h\"\"6h7i.) &2j\"\"6j7k/A$;;/8$;2.# &;8/)$8':q'\"$ )(''#(&'#(%'#($'#(#'#(\"'#&'#"),l("%;1/Y#;;/P$2r\"\"6r7s/A$;;/8$;2.# &;8/)$8%:t%\"$ )(%'#($'#(#'#(\"'#&'#.ç &%;2/Ý#$;</&#0#*;<&&&#/Ç$%2[\"\"6[7\\/H#$;</&#0#*;<&&&#/2$2m\"\"6m7n/#$+#)(#'#(\"'#&'#.X &%2a\"\"6a7b/H#$;</&#0#*;<&&&#/2$2o\"\"6o7p/#$+#)(#'#(\"'#&'#/N$$;</&#0#*;<&&&#/8$;2.# &;8/)$8%:t%\"$ )(%'#($'#(#'#(\"'#&'#"),l("%;2/S#;;/J$2u\"\"6u7v/;$;;/2$;2/)$8%:w%\"$ )(%'#($'#(#'#(\"'#&'#"),l("%2x\"\"6x7y/R#;;/I$2u\"\"6u7v/:$;;/1$;2/($8%:z%! )(%'#($'#(#'#(\"'#&'#"),l('%2{""6{7|.A &2}""6}7~.5 &2""67.) &2""67/S#;;/J$2u""6u7v/;$;;/2$;2/)$8%:%"$ )(%\'#($\'#(#\'#("\'#&\'#'),l("%;2/' 8!:!! )"),l('<%$4""5!7/,#0)*4""5!7&&&#/\' 8!:!! ). &%%2""67/;#;3/2$2""67/#$+#)(#\'#("\'#&\'#.K &%2""67/;#;4/2$2""67/#$+#)(#\'#("\'#&\'#/\' 8!:!! )=." 7'),l('<%$4""5!7/,#0)*4""5!7&&&#/\' 8!:!! ). &%%2""67/;#;3/2$2""67/#$+#)(#\'#("\'#&\'#.K &%2""67/;#;4/2$2""67/#$+#)(#\'#("\'#&\'#/\' 8!:!! )=." 7'),l("%$;50#*;5&/' 8!:!! )"),l("%$;60#*;6&/' 8!:!! )"),l('%%<2""67.) &2""67=.##&&!&\'#/6#1""5!7/($8":"! )("\'#&\'#.A &%2""67/1#;7/($8":"! )("\'#&\'#'),l('%%<2""67.) &2""67=.##&&!&\'#/6#1""5!7/($8":"! )("\'#&\'#.A &%2""67/1#;7/($8":"! )("\'#&\'#'),l('%4""5!7/\' 8!:!! )'),l('<%%2""67/U#;9/L$2""67/=$2""67.# & ." &"/#$+$)($\'#(#\'#("\'#&\'#/\' 8!:!! )=." 7'),l("%$;:/&#0#*;:&&&#/' 8!:!! )"),l('%%<2""67.) &2 ""6 7¡=.##&&!&\'#/6#1""5!7/($8":"! )("\'#&\'#.4 &%2 ""6 7¡/& 8!:¢! )'),l('<$;<0#*;<&=." 7£'),l('<4¤""5!7¥=." 7£')],$=0,a=[{line:1,column:1,seenCR:!1}],n=0,u=[],y=0;if("startRule"in e){if(!(e.startRule in r))throw new Error("Can't start parsing from rule \""+e.startRule+'".');t=r[e.startRule]}function i(e){var r,t,n=a[e];if(n)return n;for(r=e-1;!a[r];)r--;for(n={line:(n=a[r]).line,column:n.column,seenCR:n.seenCR};r<e;)"\n"===(t=c.charAt(r))?(n.seenCR||n.line++,n.column=1,n.seenCR=!1):"\r"===t||"\u2028"===t||"\u2029"===t?(n.line++,n.column=1,n.seenCR=!0):(n.column++,n.seenCR=!1),r++;return a[e]=n}function o(e,r){var t=i(e),n=i(r);return{start:{offset:e,line:t.line,column:t.column},end:{offset:r,line:n.line,column:n.column}}}function h(e){$<n||(n<$&&(n=$,u=[]),u.push(e))}function s(e,r,t,n){return null!==r&&function(e){var r=1;for(e.sort(function(e,r){return e.description<r.description?-1:e.description>r.description?1:0});r<e.length;)e[r-1]===e[r]?e.splice(r,1):r++}(r),new v(null!==e?e:function(e,r){for(var t=new Array(e.length),n=0;n<e.length;n++)t[n]=e[n].description;function a(e){return e.charCodeAt(0).toString(16).toUpperCase()}return"Expected "+(1<e.length?t.slice(0,-1).join(", ")+" or "+t[e.length-1]:t[0])+" but "+(r?'"'+r.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\x08/g,"\\b").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\f/g,"\\f").replace(/\r/g,"\\r").replace(/[\x00-\x07\x0B\x0E\x0F]/g,function(e){return"\\x0"+a(e)}).replace(/[\x10-\x1F\x80-\xFF]/g,function(e){return"\\x"+a(e)}).replace(/[\u0100-\u0FFF]/g,function(e){return"\\u0"+a(e)}).replace(/[\u1000-\uFFFF]/g,function(e){return"\\u"+a(e)})+'"':"end of input")+" found."}(r,t),r,t,n)}function l(e){for(var r=new Array(e.length),t=0;t<e.length;t++)r[t]=e.charCodeAt(t)-32;return r}if((t=function e(r){for(var t,n,a=d[r],u=0,i=[],o=a.length,s=[],l=[];;){for(;u<o;)switch(a[u]){case 0:l.push(f[a[u+1]]),u+=2;break;case 1:l.push(void 0),u++;break;case 2:l.push(null),u++;break;case 3:l.push(p),u++;break;case 4:l.push([]),u++;break;case 5:l.push($),u++;break;case 6:l.pop(),u++;break;case 7:$=l.pop(),u++;break;case 8:l.length-=a[u+1],u+=2;break;case 9:l.splice(-2,1),u++;break;case 10:l[l.length-2].push(l.pop()),u++;break;case 11:l.push(l.splice(l.length-a[u+1],a[u+1])),u+=2;break;case 12:l.push(c.substring(l.pop(),$)),u++;break;case 13:s.push(o),i.push(u+3+a[u+1]+a[u+2]),l[l.length-1]?(o=u+3+a[u+1],u+=3):(o=u+3+a[u+1]+a[u+2],u+=3+a[u+1]);break;case 14:s.push(o),i.push(u+3+a[u+1]+a[u+2]),l[l.length-1]===p?(o=u+3+a[u+1],u+=3):(o=u+3+a[u+1]+a[u+2],u+=3+a[u+1]);break;case 15:s.push(o),i.push(u+3+a[u+1]+a[u+2]),l[l.length-1]!==p?(o=u+3+a[u+1],u+=3):(o=u+3+a[u+1]+a[u+2],u+=3+a[u+1]);break;case 16:l[l.length-1]!==p?(s.push(o),i.push(u),o=u+2+a[u+1],u+=2):u+=2+a[u+1];break;case 17:s.push(o),i.push(u+3+a[u+1]+a[u+2]),c.length>$?(o=u+3+a[u+1],u+=3):(o=u+3+a[u+1]+a[u+2],u+=3+a[u+1]);break;case 18:s.push(o),i.push(u+4+a[u+2]+a[u+3]),c.substr($,f[a[u+1]].length)===f[a[u+1]]?(o=u+4+a[u+2],u+=4):(o=u+4+a[u+2]+a[u+3],u+=4+a[u+2]);break;case 19:s.push(o),i.push(u+4+a[u+2]+a[u+3]),c.substr($,f[a[u+1]].length).toLowerCase()===f[a[u+1]]?(o=u+4+a[u+2],u+=4):(o=u+4+a[u+2]+a[u+3],u+=4+a[u+2]);break;case 20:s.push(o),i.push(u+4+a[u+2]+a[u+3]),f[a[u+1]].test(c.charAt($))?(o=u+4+a[u+2],u+=4):(o=u+4+a[u+2]+a[u+3],u+=4+a[u+2]);break;case 21:l.push(c.substr($,a[u+1])),$+=a[u+1],u+=2;break;case 22:l.push(f[a[u+1]]),$+=f[a[u+1]].length,u+=2;break;case 23:l.push(p),0===y&&h(f[a[u+1]]),u+=2;break;case 24:l[l.length-1-a[u+1]],u+=2;break;case 25:u++;break;case 26:for(t=a.slice(u+4,u+4+a[u+3]),n=0;n<a[u+3];n++)t[n]=l[l.length-1-t[n]];l.splice(l.length-a[u+2],a[u+2],f[a[u+1]].apply(null,t)),u+=4+a[u+3];break;case 27:l.push(e(a[u+1])),u+=2;break;case 28:y++,u++;break;case 29:y--,u++;break;default:throw new Error("Invalid opcode: "+a[u]+".")}if(!(0<s.length))break;o=s.pop(),u=i.pop()}return l[0]}(t))!==p&&$===c.length)return t;throw t!==p&&$<c.length&&h({type:"end",description:"end of input"}),s(null,u,n<c.length?c.charAt(n):null,n<c.length?o(n,n+1):o(n,n))}}}()},{}]},{},[2])(2)});
!function(e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).overpassWizardExpand=e()}(function(){return function r(o,i,u){function s(t,e){if(!i[t]){if(!o[t]){var n="function"==typeof require&&require;if(!e&&n)return n(t,!0);if(c)return c(t,!0);throw(n=new Error("Cannot find module '"+t+"'")).code="MODULE_NOT_FOUND",n}n=i[t]={exports:{}},o[t][0].call(n.exports,function(e){return s(o[t][1][e]||e)},n,n.exports,r,o,i,u)}return i[t].exports}for(var c="function"==typeof require&&require,e=0;e<u.length;e++)s(u[e]);return s}({1:[function(e,t,n){"use strict";var r=e("./raw"),o=[],i=[],u=r.makeRequestCallFromTimer(function(){if(i.length)throw i.shift()});function s(e){var t=o.length?o.pop():new c;t.task=e,r(t)}function c(){this.task=null}t.exports=s,c.prototype.call=function(){try{this.task.call()}catch(e){s.onerror?s.onerror(e):(i.push(e),u())}finally{this.task=null,o[o.length]=this}}},{"./raw":2}],2:[function(e,p,t){(function(l){(function(){"use strict";function e(e){r.length||(t(),0),r[r.length]=e}p.exports=e;var t,r=[],o=0;function n(){for(;o<r.length;){var e=o;if(o+=1,r[e].call(),1024<o){for(var t=0,n=r.length-o;t<n;t++)r[t]=r[t+o];r.length-=o,o=0}}r.length=0,o=0,0}var i,u,s,c=void 0!==l?l:self,f=c.MutationObserver||c.WebKitMutationObserver;function a(r){return function(){var e=setTimeout(n,0),t=setInterval(n,50);function n(){clearTimeout(e),clearInterval(t),r()}}}t="function"==typeof f?(u=1,i=new f(i=n),s=document.createTextNode(""),i.observe(s,{characterData:!0}),function(){u=-u,s.data=u}):a(n),e.requestFlush=t,e.makeRequestCallFromTimer=a}).call(this)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],3:[function(e,t,n){},{}],4:[function(e,t,n){var u=e("promise"),o=e("request-promise");function r(t,n){var r,e="https://nominatim.openstreetmap.org/search?format=json&q="+encodeURIComponent(t),e="undefined"!=typeof XMLHttpRequest?(r=e,new u(function(e,t){var n=new XMLHttpRequest;n.open("GET",r),n.onload=function(){200==n.status?e(n.response):t(Error("XMLHttpRequest Error: "+n.statusText))},n.onerror=function(){t(Error("Network Error"))},n.send()}).then(JSON.parse)):o({url:e,method:"GET",headers:{"User-Agent":"overpass-wizard"},json:!0});return e.then(function(e){return n&&(e=e.filter(n)),0===e.length?u.reject(new Error("No result found for geocoding search: "+t)):e[0]})}var s={date:function(e,t){var n=Date.now();if(null===(e=e.toLowerCase().match(/(-?[0-9]+) ?(seconds?|minutes?|hours?|days?|weeks?|months?|years?)?/)))return u.reject(new Error("unable to expand date shortcut."));var r=parseInt(e[1]);switch(e[2]){case"second":case"seconds":o=1;break;case"minute":case"minutes":o=60;break;case"hour":case"hours":o=3600;break;case"day":case"days":default:o=86400;break;case"week":case"weeks":o=604800;break;case"month":case"months":o=2628e3;break;case"year":case"years":o=31536e3}var o=n-r*o*1e3;return u.resolve(new Date(o).toISOString())},geocodeArea:function(e){return r(e,function(e){return e.osm_type&&e.osm_id&&"node"!==e.osm_type}).then(function(e){var t=+e.osm_id;return"way"==e.osm_type&&(t+=24e8),"relation"==e.osm_type&&(t+=36e8),e="area("+t+")"})},geocodeCoords:function(e){return r(e).then(function(e){return e=e.lat+","+e.lon})}};t.exports=function(r,e,t){e&&(r=r.replace(/{{bbox}}/g,e));var o="{{([a-zA-Z0-9_]+)=(.+?)}}";(r.match(new RegExp(o,"g"))||[]).forEach(function(e){for(var e=e.match(new RegExp(o)),t="{{"+e[1]+"}}",n=e[2];0<=r.indexOf(t);)r=r.replace(t,n)});var n="{{(date|geocodeArea|geocodeCoords):([\\s\\S]*?)}}",i=r.match(new RegExp(n,"g"))||[];return u.all(i.map(function(e){return e=e.match(new RegExp(n)),s[e[1]](e[2])})).then(function(e){return e.forEach(function(e,t){r=r.replace(i[t],e)}),r}).then(function(e){t(void 0,e)}).catch(function(e){t(e)})}},{promise:5,"request-promise":3}],5:[function(e,t,n){"use strict";t.exports=e("./lib")},{"./lib":10}],6:[function(e,t,n){"use strict";var o=e("asap/raw");function u(){}var i=null,s={};function c(e){if("object"!=typeof this)throw new TypeError("Promises must be constructed via new");if("function"!=typeof e)throw new TypeError("Promise constructor's argument is not a function");this._40=0,this._65=0,this._55=null,this._72=null,e!==u&&h(e,this)}function f(e,t){for(;3===e._65;)e=e._55;if(c._37&&c._37(e),0===e._65)return 0===e._40?(e._40=1,void(e._72=t)):1===e._40?(e._40=2,void(e._72=[e._72,t])):void e._72.push(t);var n,r;n=e,r=t,o(function(){var e=1===n._65?r.onFulfilled:r.onRejected;null!==e?(e=function(e,t){try{return e(t)}catch(e){return i=e,s}}(e,n._55))===s?l(r.promise,i):a(r.promise,e):(1===n._65?a:l)(r.promise,n._55)})}function a(e,t){if(t===e)return l(e,new TypeError("A promise cannot be resolved with itself.")),0;if(t&&("object"==typeof t||"function"==typeof t)){var n=function(e){try{return e.then}catch(e){return i=e,s}}(t);if(n===s)return l(e,i),0;if(n===e.then&&t instanceof c)return e._65=3,e._55=t,void r(e);if("function"==typeof n)return void h(n.bind(t),e)}e._65=1,e._55=t,r(e)}function l(e,t){e._65=2,e._55=t,c._87&&c._87(e,t),r(e)}function r(e){if(1===e._40&&(f(e,e._72),e._72=null),2===e._40){for(var t=0;t<e._72.length;t++)f(e,e._72[t]);e._72=null}}function p(e,t,n){this.onFulfilled="function"==typeof e?e:null,this.onRejected="function"==typeof t?t:null,this.promise=n}function h(e,t){var n=!1,e=function(e,t,n){try{e(t,n)}catch(e){return i=e,s}}(e,function(e){n||(n=!0,a(t,e))},function(e){n||(n=!0,l(t,e))});n||e!==s||(n=!0,l(t,i))}(t.exports=c)._37=null,c._87=null,c._61=u,c.prototype.then=function(e,t){if(this.constructor!==c)return o=e,i=t,new(r=this).constructor(function(e,t){var n=new c(u);n.then(e,t),f(r,new p(o,i,n))});var r,o,i,n=new c(u);return f(this,new p(e,t,n)),n}},{"asap/raw":2}],7:[function(e,t,n){"use strict";e=e("./core.js");(t.exports=e).prototype.done=function(e,t){(arguments.length?this.then.apply(this,arguments):this).then(null,function(e){setTimeout(function(){throw e},0)})}},{"./core.js":6}],8:[function(e,t,n){"use strict";var c=e("./core.js");t.exports=c;var r=a(!0),o=a(!1),i=a(null),u=a(void 0),s=a(0),f=a("");function a(e){var t=new c(c._61);return t._65=1,t._55=e,t}c.resolve=function(e){if(e instanceof c)return e;if(null===e)return i;if(void 0===e)return u;if(!0===e)return r;if(!1===e)return o;if(0===e)return s;if(""===e)return f;if("object"==typeof e||"function"==typeof e)try{var t=e.then;if("function"==typeof t)return new c(t.bind(e))}catch(n){return new c(function(e,t){t(n)})}return a(e)},c.all=function(e){var s=Array.prototype.slice.call(e);return new c(function(o,i){if(0===s.length)return o([]);var u=s.length;for(var e=0;e<s.length;e++)!function t(n,e){if(e&&("object"==typeof e||"function"==typeof e)){if(e instanceof c&&e.then===c.prototype.then){for(;3===e._65;)e=e._55;return 1===e._65?t(n,e._55):(2===e._65&&i(e._55),void e.then(function(e){t(n,e)},i))}var r=e.then;if("function"==typeof r)return void new c(r.bind(e)).then(function(e){t(n,e)},i)}s[n]=e,0==--u&&o(s)}(e,s[e])})},c.reject=function(n){return new c(function(e,t){t(n)})},c.race=function(e){return new c(function(t,n){e.forEach(function(e){c.resolve(e).then(t,n)})})},c.prototype.catch=function(e){return this.then(null,e)}},{"./core.js":6}],9:[function(e,t,n){"use strict";var r=e("./core.js");(t.exports=r).prototype.finally=function(t){return this.then(function(e){return r.resolve(t()).then(function(){return e})},function(e){return r.resolve(t()).then(function(){throw e})})}},{"./core.js":6}],10:[function(e,t,n){"use strict";t.exports=e("./core.js"),e("./done.js"),e("./finally.js"),e("./es6-extensions.js"),e("./node-extensions.js"),e("./synchronous.js")},{"./core.js":6,"./done.js":7,"./es6-extensions.js":8,"./finally.js":9,"./node-extensions.js":11,"./synchronous.js":12}],11:[function(e,t,n){"use strict";var i=e("./core.js"),o=e("asap");(t.exports=i).denodeify=function(e,t){return"number"==typeof t&&t!==1/0?function(e,t){for(var n=[],r=0;r<t;r++)n.push("a"+r);var o=["return function ("+n.join(",")+") {","var self = this;","return new Promise(function (rs, rj) {","var res = fn.call(",["self"].concat(n).concat([u]).join(","),");","if (res &&",'(typeof res === "object" || typeof res === "function") &&','typeof res.then === "function"',") {rs(res);}","});","};"].join("");return Function(["Promise","fn"],o)(i,e)}(e,t):function(e){for(var t=Math.max(e.length-1,3),n=[],r=0;r<t;r++)n.push("a"+r);var o=["return function ("+n.join(",")+") {","var self = this;","var args;","var argLength = arguments.length;","if (arguments.length > "+t+") {","args = new Array(arguments.length + 1);","for (var i = 0; i < arguments.length; i++) {","args[i] = arguments[i];","}","}","return new Promise(function (rs, rj) {","var cb = "+u+";","var res;","switch (argLength) {",n.concat(["extra"]).map(function(e,t){return"case "+t+":res = fn.call("+["self"].concat(n.slice(0,t)).concat("cb").join(",")+");break;"}).join(""),"default:","args[argLength] = cb;","res = fn.apply(self, args);","}","if (res &&",'(typeof res === "object" || typeof res === "function") &&','typeof res.then === "function"',") {rs(res);}","});","};"].join("");return Function(["Promise","fn"],o)(i,e)}(e)};var u="function (err, res) {if (err) { rj(err); } else { rs(res); }}";i.nodeify=function(n){return function(){var e=Array.prototype.slice.call(arguments),t="function"==typeof e[e.length-1]?e.pop():null,r=this;try{return n.apply(this,arguments).nodeify(t,r)}catch(n){if(null==t)return new i(function(e,t){t(n)});o(function(){t.call(r,n)})}}},i.prototype.nodeify=function(t,n){if("function"!=typeof t)return this;this.then(function(e){o(function(){t.call(n,null,e)})},function(e){o(function(){t.call(n,e)})})}},{"./core.js":6,asap:1}],12:[function(e,t,n){"use strict";var r=e("./core.js");(t.exports=r).enableSynchronous=function(){r.prototype.isPending=function(){return 0==this.getState()},r.prototype.isFulfilled=function(){return 1==this.getState()},r.prototype.isRejected=function(){return 2==this.getState()},r.prototype.getValue=function(){if(3===this._65)return this._55.getValue();if(!this.isFulfilled())throw new Error("Cannot get a value of an unfulfilled promise.");return this._55},r.prototype.getReason=function(){if(3===this._65)return this._55.getReason();if(!this.isRejected())throw new Error("Cannot get a rejection reason of a non-rejected promise.");return this._55},r.prototype.getState=function(){return 3===this._65?this._55.getState():-1===this._65||-2===this._65?0:this._65}},r.disableSynchronous=function(){r.prototype.isPending=void 0,r.prototype.isFulfilled=void 0,r.prototype.isRejected=void 0,r.prototype.getValue=void 0,r.prototype.getReason=void 0,r.prototype.getState=void 0}},{"./core.js":6}]},{},[4])(4)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
